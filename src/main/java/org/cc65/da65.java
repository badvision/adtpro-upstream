/* This file was generated from da65 by Mips2Java on Wed Nov 02 05:02:09 UTC 2016 */
package org.cc65;

public final class da65 extends org.ibex.nestedvm.Runtime {
    /* program counter */
    private int pc = 0;

    /* General Purpose registers */
    private final static int r0 = 0;
    private int      r1,  r2,  r3,  r4,  r5,  r6,  r7,
                r8,  r9,  r10, r11, r12, r13, r14, r15,
                r16, r17, r18, r19, r20, r21, r22, r23,
                r24, r25, r26, r27, r28, r29, r30, r31,
                hi = 0, lo = 0;
    /* FP registers */
    private int f0,  f1,  f2,  f3,  f4,  f5,  f6,  f7,
                f8,  f9,  f10, f11, f12, f13, f14, f15,
                f16, f17, f18, f19, f20, f21, f22, f23,
                f24, f25, f26, f27, f28, f29, f30, f31;
    /* FP Control Register */
    private int fcsr = 0;

    private final void run_10000() throws ExecutionException { /* 0x10000 - 0x10200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10010;
                        pc=0x10010;
                        continue;
                    }
                case 0x10010:
                    /* Next insn is delay slot */ 
                    r31=0x10018;
                    pc=0x101ac;
                    continue;
                case 0x10018:
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10020;
                        pc=0x10020;
                        continue;
                    }
                case 0x10020:
                    /* Next insn is delay slot */ 
                    r31=0x10028;
                    pc=0x10e84;
                    run_10e00(); return;
                case 0x10028:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10038:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10048;
                        pc=0x10048;
                        continue;
                    }
                case 0x10048:
                    /* Next insn is delay slot */ 
                    r31=0x10050;
                    pc=0x100e4;
                    continue;
                case 0x10050:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10060:
                    r4 = 7 << 16;
                    r2 = 7 << 16;
                    r4 = r4 + 31592;
                    r2 = r2 + 31595;
                    r2 = r2 - r4;
                    r2 = (r2&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r25 = 0 << 16;
                        pc=0x10088;
                        continue;
                    }
                    r25 = 0 << 16;
                case 0x10080:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10088:
                    r25 = r25 + 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10080;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x1009c:
                    r4 = 7 << 16;
                    r2 = 7 << 16;
                    r4 = r4 + 31592;
                    r2 = r2 + 31592;
                    r2 = r2 - r4;
                    r2 = r2 >> 2;
                    r3 = r2 >>> 31;
                    r2 = r3 + r2;
                    r5 = r2 >> 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r25 = 0 << 16;
                        pc=0x100d0;
                        continue;
                    }
                    r25 = 0 << 16;
                case 0x100c8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x100d0:
                    r25 = r25 + 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x100c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x100e4:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = 7 << 16;
                    addr=r19+32128;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                        pc=0x10190;
                        continue;
                    }
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r18 = 7 << 16;
                    r17 = 7 << 16;
                    r18 = r18 + -16376;
                    r17 = r17 + -16372;
                    r16 = 7 << 16;
                    r17 = r17 - r18;
                    r2 = readPages[(r16+32132)>>>12][((r16+32132)>>>2)&0x3ff];
                    r17 = r17 >> 2;
                    r17 = r17 + -1;
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 1;
                        pc=0x10164;
                        continue;
                    }
                    r2 = r2 + 1;
                case 0x10138:
                    r3 = r2 << 2;
                    r3 = r18 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r16+32132)>>>12][((r16+32132)>>>2)&0x3ff] = r2;
                    pc=r3;
                    r31=0x10150;
                    return;
                case 0x10150:
                    r2 = readPages[(r16+32132)>>>12][((r16+32132)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 1;
                        pc=0x10138;
                        continue;
                    }
                    r2 = r2 + 1;
                case 0x10164:
                    /* Next insn is delay slot */ 
                    r31=0x1016c;
                    pc=0x10060;
                    continue;
                case 0x1016c:
                    r2 = 0 << 16;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + 1;
                        pc=0x1018c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r4 = 7 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + 29220;
                    r31=0x10188;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x10188:
                    r2 = r0 + 1;
                case 0x1018c:
                    addr=r19+32128;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x10190:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x101ac:
                    r2 = 0 << 16;
                    r29 = r29 + -24;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                        pc=0x101d4;
                        continue;
                    }
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r4 = 7 << 16;
                    r5 = 7 << 16;
                    r4 = r4 + 29220;
                    /* Next insn is delay slot */ 
                    r5 = r5 + 32136;
                    r31=0x101d4;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x101d4:
                    r4 = 7 << 16;
                    r2 = readPages[(r4+29224)>>>12][((r4+29224)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 0 << 16;
                        pc=0x101fc;
                        continue;
                    }
                    r2 = 0 << 16;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x101fc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r4 + 29224;
                    pc=r2;
                    r31=0x101fc;
                    return;
                case 0x101fc:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                case 0x10200:
                    pc=0x10200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10200() throws ExecutionException { /* 0x10200 - 0x10400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10200:
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=0x1009c;
                    run_10000(); return;
                case 0x10208:
                    r8 = r7 + r0;
                    r3 = r5 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r4 + r0;
                        pc=0x10360;
                        continue;
                    }
                    r9 = r4 + r0;
                    r2 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 1 << 16;
                        pc=0x103d8;
                        continue;
                    }
                    r2 = 1 << 16;
                    r2 = ((r7 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 256 << 16;
                        pc=0x10548;
                        run_10400(); return;
                    }
                    r2 = 256 << 16;
                    r2 = (r7&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r10 = r0 + 8;
                        pc=0x107e0;
                        run_10600(); return;
                    }
                    r10 = r0 + 8;
                    r10 = r0 + r0;
                case 0x10240:
                    r2 = 7 << 16;
                    r10 = r7 >>> (r10&0x1f);
                    r2 = r2 + 20452;
                    r2 = r10 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r6 = r2 + r6;
                    r2 = r0 + 32;
                    r2 = r2 - r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 << (r2&0x1f);
                        pc=0x1027c;
                        continue;
                    }
                    r4 = r4 << (r2&0x1f);
                    r6 = r5 >>> (r6&0x1f);
                    r8 = r7 << (r2&0x1f);
                    r9 = r4 | r6;
                    r3 = r5 << (r2&0x1f);
                case 0x1027c:
                    r2 = r8 >>> 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x1028c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x1028c:
                    r10 = r8 & 65535;
                    r5 = r3 >>> 16;
                    r6 = lo;
                    r7 = hi;
                    r7 = r7 << 16;
                    r5 = r7 | r5;
                    { long hilo = (long)(r6) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = lo;
                    r7 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x102c0;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x102c0:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x102e8;
                        continue;
                    }
                    r5 = r5 + r8;
                    r7 = ((r5 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r6 + -1;
                        pc=0x102e4;
                        continue;
                    }
                    r9 = r6 + -1;
                    r7 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + -2;
                        pc=0x10834;
                        run_10800(); return;
                    }
                    r6 = r6 + -2;
                case 0x102e4:
                    r6 = r9 + r0;
                case 0x102e8:
                    r4 = r5 - r4;
                    r9 = r3 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x102fc;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x102fc:
                    r5 = lo;
                    r11 = hi;
                    r3 = r11 << 16;
                    r3 = r3 | r9;
                    { long hilo = (long)(r5) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r7 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10328;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10328:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10350;
                        continue;
                    }
                    r3 = r3 + r8;
                    r8 = ((r3 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r5 + -1;
                        pc=0x10788;
                        run_10600(); return;
                    }
                    r2 = r5 + -1;
                    r10 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10788;
                        run_10600(); return;
                    }
                    r5 = r5 + -2;
                case 0x10350:
                    r3 = r6 << 16;
                    r3 = r5 | r3;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x10360:
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x1052c;
                        run_10400(); return;
                    }
                    r3 = r0 + r0;
                    r2 = 1 << 16;
                    r2 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10534;
                        run_10400(); return;
                    }
                    r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r2 = 256 << 16;
                    r2 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r0 + 24;
                        pc=0x107ac;
                        run_10600(); return;
                    }
                    r8 = r0 + 24;
                    r8 = r0 + 16;
                    r9 = r0 + 16;
                case 0x10394:
                    r3 = 7 << 16;
                    r8 = r6 >>> (r8&0x1f);
                    r3 = r3 + 20452;
                    r3 = r8 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + r9;
                    r9 = r0 + 32;
                    r9 = r9 - r2;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r7 >>> (r2&0x1f);
                        pc=0x10574;
                        run_10400(); return;
                    }
                    r3 = r7 >>> (r2&0x1f);
                    r4 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                        pc=0x107e8;
                        run_10600(); return;
                    }
                    r7 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r3 = r7 ^ 1;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x103d8:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                        pc=0x103fc;
                        continue;
                    }
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r2 = r0 + 1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x103f0;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x103f0:
                    r8 = lo;
                    r2 = 1 << 16;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                case 0x103fc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10560;
                        run_10400(); return;
                    }
                case 0x10400:
                    pc=0x10400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10400() throws ExecutionException { /* 0x10400 - 0x10600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10400:
                    r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r2 = 256 << 16;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + 24;
                        pc=0x107cc;
                        run_10600(); return;
                    }
                    r6 = r0 + 24;
                    r6 = r0 + 16;
                    r9 = r0 + 16;
                case 0x1041c:
                    r2 = 7 << 16;
                    r6 = r8 >>> (r6&0x1f);
                    r2 = r2 + 20452;
                    r2 = r6 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r0 + 32;
                    r9 = r2 + r9;
                    r7 = r7 - r9;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r4 >>> (r9&0x1f);
                        pc=0x10680;
                        run_10600(); return;
                    }
                    r11 = r4 >>> (r9&0x1f);
                    r5 = r4 - r8;
                    r6 = r8 >>> 16;
                    r10 = r8 & 65535;
                    r2 = r0 + 1;
                case 0x10454:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10460;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10460:
                    r7 = r3 >>> 16;
                    r9 = lo;
                    r11 = hi;
                    r11 = r11 << 16;
                    r7 = r11 | r7;
                    { long hilo = (long)(r9) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = lo;
                    r11 = ((r7 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10490;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10490:
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x104b8;
                        continue;
                    }
                    r7 = r7 + r8;
                    r5 = ((r7 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r9 + -1;
                        pc=0x104b4;
                        continue;
                    }
                    r11 = r9 + -1;
                    r5 = ((r7 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r9 + -2;
                        pc=0x1082c;
                        run_10800(); return;
                    }
                    r9 = r9 + -2;
                case 0x104b4:
                    r9 = r11 + r0;
                case 0x104b8:
                    r4 = r7 - r4;
                    r11 = r3 & 65535;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x104cc;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x104cc:
                    r5 = lo;
                    r12 = hi;
                    r3 = r12 << 16;
                    r3 = r3 | r11;
                    { long hilo = (long)(r5) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r7 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x104f8;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x104f8:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10520;
                        continue;
                    }
                    r3 = r3 + r8;
                    r8 = ((r3 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r5 + -1;
                        pc=0x10780;
                        run_10600(); return;
                    }
                    r4 = r5 + -1;
                    r10 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10780;
                        run_10600(); return;
                    }
                    r5 = r5 + -2;
                case 0x10520:
                    r3 = r9 << 16;
                    /* Next insn is delay slot */ 
                    r3 = r5 | r3;
                    pc=r31;
                    return;
                case 0x1052c:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x10534:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107b4;
                        run_10600(); return;
                    }
                    r8 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r9 = r0 + r0;
                    pc=0x10394;
                    run_10200(); return;
                case 0x10548:
                    r2 = ((r7 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107c0;
                        run_10600(); return;
                    }
                    r10 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 16;
                    pc=0x10240;
                    run_10200(); return;
                case 0x10560:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107d4;
                        run_10600(); return;
                    }
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r9 = r0 + r0;
                    pc=0x1041c;
                    continue;
                case 0x10574:
                    r6 = r6 << (r9&0x1f);
                    r6 = r6 | r3;
                    r12 = r4 >>> (r2&0x1f);
                    r8 = r6 >>> 16;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x10590;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10590:
                    r14 = r6 & 65535;
                    r2 = r5 >>> (r2&0x1f);
                    r4 = r4 << (r9&0x1f);
                    r4 = r4 | r2;
                    r15 = r4 >>> 16;
                    r13 = lo;
                    r11 = hi;
                    r11 = r11 << 16;
                    r11 = r11 | r15;
                    { long hilo = (long)(r13) * ((long)r14); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r3 = ((r11 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x105d0;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x105d0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r7 << (r9&0x1f);
                        pc=0x105ec;
                        continue;
                    }
                    r2 = r7 << (r9&0x1f);
                    r11 = r11 + r6;
                    r3 = ((r11 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r7 = r13 + -1;
                        pc=0x10808;
                        run_10800(); return;
                    }
                    r7 = r13 + -1;
                case 0x105e8:
                    r13 = r7 + r0;
                case 0x105ec:
                    r10 = r11 - r10;
                    r4 = r4 & 65535;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x10600;
                        run_10600(); return;
                    }
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10600:
                    pc=0x10600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10600() throws ExecutionException { /* 0x10600 - 0x10800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10600:
                    r3 = lo;
                    r7 = hi;
                    r7 = r7 << 16;
                    r4 = r7 | r4;
                    { long hilo = (long)(r3) * ((long)r14); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = lo;
                    r7 = ((r4 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x1062c;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x1062c:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10648;
                        continue;
                    }
                    r4 = r4 + r6;
                    r7 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r3 + -1;
                        pc=0x107f4;
                        continue;
                    }
                    r8 = r3 + -1;
                case 0x10644:
                    r3 = r8 + r0;
                case 0x10648:
                    r13 = r13 << 16;
                    r13 = r3 | r13;
                    r4 = r4 - r11;
                    { long hilo = (r13 & 0xffffffffL) * (r2 & 0xffffffffL); hi = (int) (hilo >>> 32); lo = (int) hilo; } 
                    r2 = hi;
                    r6 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r3 = lo;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107a0;
                        continue;
                    }
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x10790;
                        continue;
                    }
                case 0x10674:
                    r3 = r13 + r0;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x10680:
                    r8 = r8 << (r7&0x1f);
                    r6 = r8 >>> 16;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10694;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10694:
                    r10 = r8 & 65535;
                    r4 = r4 << (r7&0x1f);
                    r9 = r5 >>> (r9&0x1f);
                    r4 = r4 | r9;
                    r9 = r4 >>> 16;
                    r3 = r5 << (r7&0x1f);
                    r13 = lo;
                    r12 = hi;
                    r12 = r12 << 16;
                    r12 = r12 | r9;
                    { long hilo = (long)(r13) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = lo;
                    r2 = ((r12 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x106d8;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x106d8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10704;
                        continue;
                    }
                    r12 = r12 + r8;
                    r2 = ((r12 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r13 + -1;
                        pc=0x10824;
                        run_10800(); return;
                    }
                    r5 = r13 + -1;
                    r2 = ((r12 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10824;
                        run_10800(); return;
                    }
                    r13 = r13 + -2;
                    r12 = r12 + r8;
                case 0x10704:
                    r7 = r12 - r7;
                    r4 = r4 & 65535;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10718;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10718:
                    r2 = lo;
                    r9 = hi;
                    r9 = r9 << 16;
                    r9 = r9 | r4;
                    { long hilo = (long)(r2) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r4 = ((r9 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10744;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10744:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10770;
                        continue;
                    }
                    r9 = r9 + r8;
                    r4 = ((r9 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r2 + -1;
                        pc=0x1081c;
                        run_10800(); return;
                    }
                    r7 = r2 + -1;
                    r4 = ((r9 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1081c;
                        run_10800(); return;
                    }
                    r2 = r2 + -2;
                    r9 = r9 + r8;
                case 0x10770:
                    r13 = r13 << 16;
                    r5 = r9 - r5;
                    /* Next insn is delay slot */ 
                    r2 = r2 | r13;
                    pc=0x10454;
                    run_10400(); return;
                case 0x10780:
                    /* Next insn is delay slot */ 
                    r5 = r4 + r0;
                    pc=0x10520;
                    run_10400(); return;
                case 0x10788:
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    pc=0x10350;
                    run_10200(); return;
                case 0x10790:
                    r5 = r5 << (r9&0x1f);
                    r5 = ((r5 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10674;
                        continue;
                    }
                case 0x107a0:
                    r3 = r13 + -1;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x107ac:
                    /* Next insn is delay slot */ 
                    r9 = r0 + 24;
                    pc=0x10394;
                    run_10200(); return;
                case 0x107b4:
                    r8 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r9 = r0 + 8;
                    pc=0x10394;
                    run_10200(); return;
                case 0x107c0:
                    r10 = r0 + 24;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 24;
                    pc=0x10240;
                    run_10200(); return;
                case 0x107cc:
                    /* Next insn is delay slot */ 
                    r9 = r0 + 24;
                    pc=0x1041c;
                    run_10400(); return;
                case 0x107d4:
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r9 = r0 + 8;
                    pc=0x1041c;
                    run_10400(); return;
                case 0x107e0:
                    /* Next insn is delay slot */ 
                    r6 = r0 + 8;
                    pc=0x10240;
                    run_10200(); return;
                case 0x107e8:
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x107f4:
                    r7 = ((r4 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + -2;
                        pc=0x10644;
                        continue;
                    }
                    r3 = r3 + -2;
                case 0x10800:
                    pc=0x10800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10800() throws ExecutionException { /* 0x10800 - 0x10a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10800:
                    /* Next insn is delay slot */ 
                    r4 = r4 + r6;
                    pc=0x10648;
                    run_10600(); return;
                case 0x10808:
                    r3 = ((r11 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r13 = r13 + -2;
                        pc=0x105e8;
                        run_10400(); return;
                    }
                    r13 = r13 + -2;
                    /* Next insn is delay slot */ 
                    r11 = r11 + r6;
                    pc=0x105ec;
                    run_10400(); return;
                case 0x1081c:
                    /* Next insn is delay slot */ 
                    r2 = r7 + r0;
                    pc=0x10770;
                    run_10600(); return;
                case 0x10824:
                    /* Next insn is delay slot */ 
                    r13 = r5 + r0;
                    pc=0x10704;
                    run_10600(); return;
                case 0x1082c:
                    /* Next insn is delay slot */ 
                    r7 = r7 + r8;
                    pc=0x104b8;
                    run_10400(); return;
                case 0x10834:
                    /* Next insn is delay slot */ 
                    r5 = r5 + r8;
                    pc=0x102e8;
                    run_10200(); return;
                case 0x1083c:
                    r8 = r7 + r0;
                    r9 = r5 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r4 + r0;
                        pc=0x1098c;
                        continue;
                    }
                    r2 = r4 + r0;
                    r3 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = 1 << 16;
                        pc=0x10a18;
                        run_10a00(); return;
                    }
                    r3 = 1 << 16;
                    r3 = ((r7 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = 256 << 16;
                        pc=0x10b80;
                        run_10a00(); return;
                    }
                    r3 = 256 << 16;
                    r3 = (r7&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e18;
                        run_10e00(); return;
                    }
                    r10 = r0 + r0;
                case 0x10874:
                    r3 = 7 << 16;
                    r6 = r7 >>> (r6&0x1f);
                    r3 = r3 + 20452;
                    r3 = r6 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r12 = r0 + 32;
                    r10 = r3 + r10;
                    r12 = r12 - r10;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 << (r12&0x1f);
                        pc=0x10cdc;
                        run_10c00(); return;
                    }
                    r4 = r4 << (r12&0x1f);
                    r10 = r5 >>> (r10&0x1f);
                    r8 = r7 << (r12&0x1f);
                    r2 = r4 | r10;
                    r9 = r5 << (r12&0x1f);
                case 0x108ac:
                    r10 = r8 >>> 16;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x108bc;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x108bc:
                    r13 = r8 & 65535;
                    r11 = r9 >>> 16;
                    r7 = lo;
                    r3 = hi;
                    r3 = r3 << 16;
                    r11 = r3 | r11;
                    { long hilo = (long)(r7) * ((long)r13); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = lo;
                    r3 = ((r11 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x108f0;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x108f0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 - r7;
                        pc=0x10918;
                        continue;
                    }
                    r2 = r11 - r7;
                    r11 = r11 + r8;
                    r2 = ((r11 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 - r7;
                        pc=0x10918;
                        continue;
                    }
                    r2 = r11 - r7;
                    r2 = ((r11 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e5c;
                        run_10e00(); return;
                    }
                case 0x10914:
                    r2 = r11 - r7;
                case 0x10918:
                    r9 = r9 & 65535;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x10928;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10928:
                    r3 = lo;
                    r4 = hi;
                    r4 = r4 << 16;
                    r4 = r4 | r9;
                    { long hilo = (long)(r3) * ((long)r13); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = lo;
                    r5 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x10954;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10954:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1097c;
                        continue;
                    }
                    r4 = r4 + r8;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1097c;
                        continue;
                    }
                    r2 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1097c;
                        continue;
                    }
                    r4 = r4 + r8;
                case 0x1097c:
                    r3 = r4 - r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r3 >>> (r12&0x1f);
                    pc=r31;
                    return;
                case 0x1098c:
                    r3 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b60;
                        run_10a00(); return;
                    }
                    r3 = 1 << 16;
                    r3 = ((r6 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10b6c;
                        run_10a00(); return;
                    }
                    r3 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = 256 << 16;
                    r3 = ((r6 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r0 + 24;
                        pc=0x10df0;
                        run_10c00(); return;
                    }
                    r9 = r0 + 24;
                    r9 = r0 + 16;
                    r10 = r0 + 16;
                case 0x109c0:
                    r8 = 7 << 16;
                    r9 = r6 >>> (r9&0x1f);
                    r8 = r8 + 20452;
                    r8 = r9 + r8;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 + r10;
                    r10 = r0 + 32;
                    r10 = r10 - r3;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        r13 = r4 >>> (r3&0x1f);
                        pc=0x10bac;
                        run_10a00(); return;
                    }
                    r13 = r4 >>> (r3&0x1f);
                    r3 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r5 - r7;
                        pc=0x10a08;
                        run_10a00(); return;
                    }
                    r3 = r5 - r7;
                    r3 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e64;
                        run_10e00(); return;
                    }
                case 0x10a00:
                    pc=0x10a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10a00() throws ExecutionException { /* 0x10a00 - 0x10c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10a00:
                    r3 = r5 - r7;
                case 0x10a08:
                    r4 = r4 - r6;
                    r5 = ((r5 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r5;
                    pc=r31;
                    return;
                case 0x10a18:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = 1 << 16;
                        pc=0x10a38;
                        continue;
                    }
                    r2 = 1 << 16;
                    r2 = r0 + 1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x10a30;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10a30:
                    r8 = lo;
                    r2 = 1 << 16;
                case 0x10a38:
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10b98;
                        continue;
                    }
                    r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r2 = 256 << 16;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + 24;
                        pc=0x10e10;
                        run_10e00(); return;
                    }
                    r3 = r0 + 24;
                    r3 = r0 + 16;
                    r6 = r0 + 16;
                case 0x10a5c:
                    r2 = 7 << 16;
                    r3 = r8 >>> (r3&0x1f);
                    r2 = r2 + 20452;
                    r2 = r3 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r12 = r0 + 32;
                    r6 = r2 + r6;
                    r12 = r12 - r6;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        r10 = r4 >>> (r6&0x1f);
                        pc=0x10ce4;
                        run_10c00(); return;
                    }
                    r10 = r4 >>> (r6&0x1f);
                    r6 = r4 - r8;
                    r2 = r8 >>> 16;
                    r7 = r8 & 65535;
                case 0x10a90:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10a9c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10a9c:
                    r10 = r9 >>> 16;
                    r4 = lo;
                    r3 = hi;
                    r3 = r3 << 16;
                    r10 = r3 | r10;
                    { long hilo = (long)(r4) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = lo;
                    r3 = ((r10 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10acc;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10acc:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10aec;
                        continue;
                    }
                    r10 = r10 + r8;
                    r3 = ((r10 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = ((r10 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10aec;
                        continue;
                    }
                    r3 = ((r10 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e54;
                        run_10e00(); return;
                    }
                case 0x10aec:
                    r4 = r10 - r4;
                    r9 = r9 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10b00;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10b00:
                    r3 = lo;
                    r5 = hi;
                    r5 = r5 << 16;
                    r9 = r5 | r9;
                    { long hilo = (long)(r3) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = lo;
                    r5 = ((r9 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10b2c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10b2c:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b50;
                        continue;
                    }
                    r9 = r9 + r8;
                    r2 = ((r9 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b50;
                        continue;
                    }
                    r2 = ((r9 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e4c;
                        run_10e00(); return;
                    }
                case 0x10b50:
                    r3 = r9 - r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r3 >>> (r12&0x1f);
                    pc=r31;
                    return;
                case 0x10b60:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r5 + r0;
                    pc=r31;
                    return;
                case 0x10b6c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10de4;
                        run_10c00(); return;
                    }
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r10 = r0 + r0;
                    pc=0x109c0;
                    run_10800(); return;
                case 0x10b80:
                    r3 = ((r7 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10df8;
                        run_10c00(); return;
                    }
                    r6 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 16;
                    pc=0x10874;
                    run_10800(); return;
                case 0x10b98:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e04;
                        run_10e00(); return;
                    }
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    pc=0x10a5c;
                    continue;
                case 0x10bac:
                    r2 = r7 >>> (r3&0x1f);
                    r6 = r6 << (r10&0x1f);
                    r6 = r6 | r2;
                    r9 = r6 >>> 16;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10bc8;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10bc8:
                    r2 = r6 & 65535;
                    r11 = r5 >>> (r3&0x1f);
                    r4 = r4 << (r10&0x1f);
                    r4 = r4 | r11;
                    r15 = r4 >>> 16;
                    r7 = r7 << (r10&0x1f);
                    r14 = lo;
                    r12 = hi;
                    r12 = r12 << 16;
                    r12 = r12 | r15;
                    { long hilo = (long)(r14) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = lo;
                    r8 = ((r12 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                case 0x10c00:
                    pc=0x10c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10c00() throws ExecutionException { /* 0x10c00 - 0x10e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10c00:
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10c0c;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10c0c:
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 << (r10&0x1f);
                        pc=0x10c28;
                        continue;
                    }
                    r5 = r5 << (r10&0x1f);
                    r12 = r12 + r6;
                    r8 = ((r12 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        r13 = r14 + -1;
                        pc=0x10e38;
                        run_10e00(); return;
                    }
                    r13 = r14 + -1;
                case 0x10c24:
                    r14 = r13 + r0;
                case 0x10c28:
                    r11 = r12 - r11;
                    r4 = r4 & 65535;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10c3c;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10c3c:
                    r8 = lo;
                    r13 = hi;
                    { long hilo = (long)(r8) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = r13 << 16;
                    r4 = r2 | r4;
                    r12 = lo;
                    r2 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10c70;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10c70:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10c8c;
                        continue;
                    }
                    r4 = r4 + r6;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r8 + -1;
                        pc=0x10e24;
                        run_10e00(); return;
                    }
                    r9 = r8 + -1;
                case 0x10c88:
                    r8 = r9 + r0;
                case 0x10c8c:
                    r14 = r14 << 16;
                    r8 = r8 | r14;
                    r4 = r4 - r12;
                    { long hilo = (r8 & 0xffffffffL) * (r7 & 0xffffffffL); hi = (int) (hilo >>> 32); lo = (int) hilo; } 
                    r8 = hi;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    r9 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dcc;
                        continue;
                    }
                    if(r4 == r8) {
                        /* Next insn is delay slot */ 
                        r2 = r4 - r8;
                        pc=0x10e6c;
                        run_10e00(); return;
                    }
                    r2 = r4 - r8;
                    r7 = lo;
                case 0x10cbc:
                    r7 = r5 - r7;
                    r5 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r2 = r2 - r5;
                    r3 = r2 << (r3&0x1f);
                    r7 = r7 >>> (r10&0x1f);
                    r2 = r2 >>> (r10&0x1f);
                    /* Next insn is delay slot */ 
                    r3 = r3 | r7;
                    pc=r31;
                    return;
                case 0x10cdc:
                    /* Next insn is delay slot */ 
                    r12 = r0 + r0;
                    pc=0x108ac;
                    run_10800(); return;
                case 0x10ce4:
                    r8 = r8 << (r12&0x1f);
                    r2 = r8 >>> 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10cf8;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10cf8:
                    r7 = r8 & 65535;
                    r6 = r5 >>> (r6&0x1f);
                    r4 = r4 << (r12&0x1f);
                    r6 = r4 | r6;
                    r3 = r6 >>> 16;
                    r9 = r5 << (r12&0x1f);
                    r13 = lo;
                    r11 = hi;
                    r11 = r11 << 16;
                    r11 = r11 | r3;
                    { long hilo = (long)(r13) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r3 = ((r11 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10d3c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10d3c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10d60;
                        continue;
                    }
                    r11 = r11 + r8;
                    r3 = ((r11 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = ((r11 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10d60;
                        continue;
                    }
                    r3 = ((r11 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10d60;
                        continue;
                    }
                    r11 = r11 + r8;
                case 0x10d60:
                    r5 = r11 - r5;
                    r3 = r6 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10d74;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10d74:
                    r6 = lo;
                    r10 = hi;
                    r10 = r10 << 16;
                    r10 = r10 | r3;
                    { long hilo = (long)(r6) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = lo;
                    r3 = ((r10 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10da0;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10da0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dc4;
                        continue;
                    }
                    r10 = r10 + r8;
                    r3 = ((r10 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = ((r10 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10dc4;
                        continue;
                    }
                    r3 = ((r10 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dc4;
                        continue;
                    }
                    r10 = r10 + r8;
                case 0x10dc4:
                    /* Next insn is delay slot */ 
                    r6 = r10 - r6;
                    pc=0x10a90;
                    run_10a00(); return;
                case 0x10dcc:
                    r7 = r9 - r7;
                    r6 = r8 - r6;
                    r2 = ((r9 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r2 = r6 - r2;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r2;
                    pc=0x10cbc;
                    continue;
                case 0x10de4:
                    r9 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 8;
                    pc=0x109c0;
                    run_10800(); return;
                case 0x10df0:
                    /* Next insn is delay slot */ 
                    r10 = r0 + 24;
                    pc=0x109c0;
                    run_10800(); return;
                case 0x10df8:
                    r6 = r0 + 24;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 24;
                    pc=0x10874;
                    run_10800(); return;
                case 0x10e00:
                    pc=0x10e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10e00() throws ExecutionException { /* 0x10e00 - 0x11000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10e00:
                    r10 = r0 + 24;
                case 0x10e04:
                    r3 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 8;
                    pc=0x10a5c;
                    run_10a00(); return;
                case 0x10e10:
                    /* Next insn is delay slot */ 
                    r6 = r0 + 24;
                    pc=0x10a5c;
                    run_10a00(); return;
                case 0x10e18:
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 8;
                    pc=0x10874;
                    run_10800(); return;
                case 0x10e24:
                    r2 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + -2;
                        pc=0x10c88;
                        run_10c00(); return;
                    }
                    r8 = r8 + -2;
                    /* Next insn is delay slot */ 
                    r4 = r4 + r6;
                    pc=0x10c8c;
                    run_10c00(); return;
                case 0x10e38:
                    r8 = ((r12 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        r14 = r14 + -2;
                        pc=0x10c24;
                        run_10c00(); return;
                    }
                    r14 = r14 + -2;
                    /* Next insn is delay slot */ 
                    r12 = r12 + r6;
                    pc=0x10c28;
                    run_10c00(); return;
                case 0x10e4c:
                    /* Next insn is delay slot */ 
                    r9 = r9 + r8;
                    pc=0x10b50;
                    run_10a00(); return;
                case 0x10e54:
                    /* Next insn is delay slot */ 
                    r10 = r10 + r8;
                    pc=0x10aec;
                    run_10a00(); return;
                case 0x10e5c:
                    /* Next insn is delay slot */ 
                    r11 = r11 + r8;
                    pc=0x10914;
                    run_10800(); return;
                case 0x10e64:
                    /* Next insn is delay slot */ 
                    r3 = r5 + r0;
                    pc=r31;
                    return;
                case 0x10e6c:
                    r2 = ((r5 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dcc;
                        run_10c00(); return;
                    }
                    r7 = lo;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x10cbc;
                    run_10c00(); return;
                case 0x10e84:
                    r2 = 7 << 16;
                    r2 = readPages[(r2+-16384)>>>12][((r2+-16384)>>>2)&0x3ff];
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x10edc;
                        continue;
                    }
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r16 + -16388;
                    r17 = r0 + -1;
                case 0x10eb4:
                    /* Next insn is delay slot */ 
                    r16 = r16 + -4;
                    pc=r2;
                    r31=0x10ebc;
                    return;
                case 0x10ebc:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x10eb4;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                case 0x10edc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10ee4:
                    r2 = r4 + 1;
                case 0x10ee8:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 1;
                        pc=0x10ee8;
                        continue;
                    }
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r2;
                    pc=r31;
                    return;
                case 0x10f00:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = r16 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x10f28;
                    return;
                case 0x10f28:
                    r3 = r2 + r0;
                    r2 = r0 + 2;
                    pc = 0x10f30;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x10f34;
                        return;
                    }
                case 0x10f34:
                    r2 = r0 + 1;
                    r3 = r0 + 1;
                    pc = 0x10f3c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x10f40;
                        return;
                    }
                case 0x10f40:
                case 0x11000:
                    pc=0x11000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11000() throws ExecutionException { /* 0x11000 - 0x11200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r28 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1107c;
                        continue;
                    }
                case 0x11018:
                    writePages[(r28+-32660)>>>12][((r28+-32660)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x11024;
                    pc=0x10000;
                    run_10000(); return;
                case 0x11024:
                    r4 = 1 << 16;
                    r4 = r4 + 56;
                    /* Next insn is delay slot */ 
                    r31=0x11034;
                    pc=0x32c00;
                    run_32c00(); return;
                case 0x11034:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1108c;
                        continue;
                    }
                    r2 = r16 + 4;
                    r4 = r0 + r0;
                case 0x1104c:
                    r2 = r2 + 4;
                    r6 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1104c;
                        continue;
                    }
                case 0x11060:
                    r6 = readPages[(r28+-32660)>>>12][((r28+-32660)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11070;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x11070:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1107c;
                    pc=0x33400;
                    run_33400(); return;
                case 0x1107c:
                    r2 = 8 << 16;
                    r28 = r2 + -1168;
                    /* Next insn is delay slot */ 
                    pc=0x11018;
                    continue;
                case 0x1108c:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x11060;
                    continue;
                case 0x11200:
                    pc=0x11200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11200() throws ExecutionException { /* 0x11200 - 0x11400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11200:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 & 255;
                    r4 = r16 << 24;
                    r4 = r4 >> 24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x11220;
                    pc=0x2ae00;
                    run_2ae00(); return;
                case 0x11220:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11260;
                        continue;
                    }
                    r2 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r2 = r2 + r16;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + 1;
                    r3 = r3 & 3;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11278;
                        continue;
                    }
                case 0x11248:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r16 + -87;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11260:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r16 + -48;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11278:
                    r16 = r16 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x11248;
                    continue;
                case 0x11400:
                    pc=0x11400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11400() throws ExecutionException { /* 0x11400 - 0x11600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11400:
                    r29 = r29 + -1104;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r22;
                    r22 = r5 << 24;
                    r5 = 7 << 16;
                    r5 = r5 + -11612;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r19;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r31;
                    writePages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff] = r30;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r23;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r21;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r20;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r18;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r17;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r16;
                    writePages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff] = r4;
                    writePages[(r29+1112)>>>12][((r29+1112)>>>2)&0x3ff] = r6;
                    writePages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff] = r0;
                    writePages[(r29+1044)>>>12][((r29+1044)>>>2)&0x3ff] = r0;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r0;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x11458;
                    pc=0x36200;
                    run_36200(); return;
                case 0x11458:
                    r22 = r22 >> 24;
                    r19 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11924;
                        run_11800(); return;
                    }
                    r16 = r0 + r0;
                    r18 = r0 + 95;
                case 0x11470:
                    r4 = r29 + 16;
                    r5 = r0 + 1024;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11484;
                    pc=0x34400;
                    run_34400(); return;
                case 0x11484:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11850;
                        run_11800(); return;
                    }
                case 0x11490:
                    r16 = r16 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x114a0;
                    continue;
                case 0x1149c:
                    r17 = r17 + 1;
                case 0x114a0:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x114ac;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x114ac:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1149c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x114c0;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x114c0:
                    r21 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x114e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x11740;
                    run_11600(); return;
                case 0x114d4:
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11740;
                        run_11600(); return;
                    }
                    r21 = r20 + r0;
                case 0x114e0:
                    r20 = r21 + -1;
                    r2 = r17 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x114f4;
                    pc=0x2ac00;
                    run_2ac00(); return;
                case 0x114f4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x114d4;
                        continue;
                    }
                case 0x114fc:
                    r21 = r17 + r21;
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11470;
                        continue;
                    }
                    if(r2 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x11470;
                        continue;
                    }
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r0;
                    writePages[(r29+1044)>>>12][((r29+1044)>>>2)&0x3ff] = r0;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x11530;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x11530:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1156c;
                        continue;
                    }
                    if(r5 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1156c;
                        continue;
                    }
                    r3 = readPages[(r29+1112)>>>12][((r29+1112)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11470;
                        continue;
                    }
                    r4 = 7 << 16;
                    r5 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r4 = r4 + -12248;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1156c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1156c:
                    r17 = r17 + 1;
                    r4 = r29 + 1040;
                    /* Next insn is delay slot */ 
                    r31=0x1157c;
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x1157c:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x11588;
                    pc=0x2a600;
                    run_2a600(); return;
                case 0x11588:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1156c;
                        continue;
                    }
                    if(r5 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1156c;
                        continue;
                    }
                    r4 = r29 + 1040;
                    /* Next insn is delay slot */ 
                    r31=0x115a8;
                    pc=0x2e600;
                    run_2e600(); return;
                case 0x115a8:
                    /* Next insn is delay slot */ 
                    pc=0x115b4;
                    continue;
                case 0x115b0:
                    r17 = r17 + 1;
                case 0x115b4:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x115c0;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x115c0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x115b0;
                        continue;
                    }
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 61;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1160c;
                        run_11600(); return;
                    }
                    r3 = r0 + 58;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1189c;
                        run_11800(); return;
                    }
                case 0x115e4:
                    r3 = readPages[(r29+1112)>>>12][((r29+1112)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11470;
                        continue;
                    }
                    r4 = 7 << 16;
                    r5 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r4 = r4 + -12224;
                case 0x11600:
                    pc=0x11600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11600() throws ExecutionException { /* 0x11600 - 0x11800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11600:
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1160c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1160c:
                    r17 = r17 + 1;
                case 0x11610:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x1161c;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x1161c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1160c;
                        continue;
                    }
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r4 = r0 + 45;
                    r3 = r17 + r0;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x118b8;
                        run_11800(); return;
                    }
                    r4 = r0 + 43;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x118f4;
                        run_11800(); return;
                    }
                    r3 = r0 + 1;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r3;
                case 0x1164c:
                    r4 = r0 + 36;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x118d4;
                        run_11800(); return;
                    }
                case 0x11658:
                    r3 = r0 + 37;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x118e4;
                        run_11800(); return;
                    }
                    r20 = r0 + 10;
                case 0x11668:
                    r30 = r17 + r0;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r30 - r17;
                    r21 = r0 + r0;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x11684;
                    pc=0x2b800;
                    run_2b800(); return;
                case 0x11684:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11708;
                        continue;
                    }
                case 0x1168c:
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r23 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x116a0;
                    pc=0x2ae00;
                    run_2ae00(); return;
                case 0x116a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1174c;
                        continue;
                    }
                    r2 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = r2 + r23;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 3;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x11758;
                        continue;
                    }
                    r5 = r23 + r0;
                case 0x116cc:
                    r2 = r5 + -87;
                case 0x116d0:
                    r4 = ((r2 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11708;
                        continue;
                    }
                    { long hilo = (long)(r21) * ((long)r20); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r30 = r30 + 1;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r30 - r17;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r3;
                    r21 = lo;
                    r21 = r2 + r21;
                    /* Next insn is delay slot */ 
                    r31=0x11700;
                    pc=0x2b800;
                    run_2b800(); return;
                case 0x11700:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1168c;
                        continue;
                    }
                case 0x11708:
                    r3 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11768;
                        continue;
                    }
                    r3 = readPages[(r29+1112)>>>12][((r29+1112)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11470;
                        run_11400(); return;
                    }
                    r4 = 7 << 16;
                    r5 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r4 = r4 + -12204;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11740;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x11740:
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x114fc;
                    run_11400(); return;
                case 0x1174c:
                    r2 = r23 + -48;
                    /* Next insn is delay slot */ 
                    pc=0x116d0;
                    continue;
                case 0x11758:
                    r5 = r23 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x116cc;
                    continue;
                case 0x11764:
                    r30 = r30 + 1;
                case 0x11768:
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x11774;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x11774:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11764;
                        continue;
                    }
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x117c0;
                        continue;
                    }
                    r17 = r0 + r0;
                case 0x11790:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11804;
                        run_11800(); return;
                    }
                    r3 = readPages[(r29+1112)>>>12][((r29+1112)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11470;
                        run_11400(); return;
                    }
                    r4 = 7 << 16;
                    r5 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r4 = r4 + -12172;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x117c0;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x117c0:
                    r17 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x117d0;
                    continue;
                case 0x117cc:
                    r17 = r17 + 1;
                case 0x117d0:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x117dc;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x117dc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x117cc;
                        continue;
                    }
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1190c;
                        run_11800(); return;
                    }
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r22 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11790;
                        continue;
                    }
                case 0x11800:
                    pc=0x11800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11800() throws ExecutionException { /* 0x11800 - 0x11a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11800:
                case 0x11804:
                    r3 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r5 = readPages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff];
                    { long hilo = (long)(r21) * ((long)r3); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r21 = lo;
                    r4 = lo;
                    /* Next insn is delay slot */ 
                    r31=0x11820;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x11820:
                    r5 = r17 + r0;
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11830;
                    pc=0x14200;
                    run_14200(); return;
                case 0x11830:
                    r4 = r29 + 16;
                    r5 = r0 + 1024;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11844;
                    pc=0x34400;
                    run_34400(); return;
                case 0x11844:
                    r17 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11490;
                        run_11400(); return;
                    }
                case 0x11850:
                    r4 = r29 + 1040;
                    /* Next insn is delay slot */ 
                    r31=0x1185c;
                    pc=0x2dc00;
                    run_2dc00(); return;
                case 0x1185c:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11868;
                    pc=0x33800;
                    run_33800(); return;
                case 0x11868:
                    r31 = readPages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff];
                    r30 = readPages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff];
                    r23 = readPages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff];
                    r22 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    r21 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r20 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r19 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r18 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r17 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r16 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r29 = r29 + 1104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1189c:
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r4 = r0 + 61;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x115e4;
                        run_11400(); return;
                    }
                    r17 = r17 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x11610;
                    run_11600(); return;
                case 0x118b8:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r4 = r0 + 36;
                    r3 = r0 + -1;
                    r17 = r17 + 1;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r3;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x11658;
                        run_11600(); return;
                    }
                case 0x118d4:
                    r17 = r17 + 1;
                    r20 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x11668;
                    run_11600(); return;
                case 0x118e4:
                    r17 = r17 + 1;
                    r20 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x11668;
                    run_11600(); return;
                case 0x118f4:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 1;
                    r17 = r17 + 1;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x1164c;
                    run_11600(); return;
                case 0x1190c:
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r17 = r0 + r0;
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11804;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x11790;
                    run_11600(); return;
                case 0x11924:
                    /* Next insn is delay slot */ 
                    r31=0x1192c;
                    pc=0x33200;
                    run_33200(); return;
                case 0x1192c:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11938;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x11938:
                    r4 = 7 << 16;
                    r5 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r4 = r4 + -12288;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11950;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x11950:
                case 0x11a00:
                    pc=0x11a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11a00() throws ExecutionException { /* 0x11a00 - 0x11c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11a00:
                    r2 = 1 << 16;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r5 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11a1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11a1c:
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -12144;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x11a34;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x11a34:
                case 0x11c00:
                    pc=0x11c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11c00() throws ExecutionException { /* 0x11c00 - 0x11e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11c00:
                    r2 = 1 << 16;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r5 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11c30;
                        continue;
                    }
                    r2 = 7 << 16;
                    r5 = r4 << 1;
                    r2 = r2 + 32160;
                    r5 = r5 + r2;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11c30:
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -12144;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x11c48;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x11c48:
                case 0x11e00:
                    pc=0x11e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11e00() throws ExecutionException { /* 0x11e00 - 0x12000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11e00:
                    r2 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11e68;
                        continue;
                    }
                    r3 = 7 << 16;
                    r2 = r4 + 1;
                    r3 = r3 + 32160;
                    r4 = r4 << 1;
                    r4 = r4 + r3;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r4 = r4 & 256;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11e74;
                        continue;
                    }
                    r4 = r2 << 1;
                    r3 = r3 + r4;
                    /* Next insn is delay slot */ 
                    pc=0x11e5c;
                    continue;
                case 0x11e44:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r2 = r2 + 1;
                    r4 = r4 & 256;
                    r3 = r3 + 2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11e74;
                        continue;
                    }
                case 0x11e5c:
                    r4 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11e44;
                        continue;
                    }
                case 0x11e68:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11e74:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12000:
                    pc=0x12000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12000() throws ExecutionException { /* 0x12000 - 0x12200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12000:
                    r2 = 1 << 16;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r5 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1203c;
                        continue;
                    }
                    r2 = 7 << 16;
                    r5 = r4 << 1;
                    r2 = r2 + 32160;
                    r5 = r5 + r2;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 >>> 9;
                    r2 = r2 & 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1203c:
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -12144;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x12054;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x12054:
                case 0x12200:
                    pc=0x12200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12200() throws ExecutionException { /* 0x12200 - 0x12400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12200:
                    r2 = 1 << 16;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r5 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1223c;
                        continue;
                    }
                    r2 = 7 << 16;
                    r5 = r4 << 1;
                    r2 = r2 + 32160;
                    r5 = r5 + r2;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 >>> 10;
                    r2 = r2 & 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1223c:
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -12144;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x12254;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x12254:
                case 0x12400:
                    pc=0x12400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12400() throws ExecutionException { /* 0x12400 - 0x12600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12400:
                    r2 = (r4&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r5 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12454;
                        continue;
                    }
                    r2 = 7 << 16;
                    r2 = r2 + -12044;
                    r5 = r4 << 2;
                    r5 = r2 + r5;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x12430:
                    r2 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1243c:
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12448:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12454:
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -12116;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1246c;
                    pc=0x15e00;
                    run_15e00(); return;
                case 0x1246c:
                case 0x12600:
                    pc=0x12600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12600() throws ExecutionException { /* 0x12600 - 0x12800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12600:
                    r29 = r29 + -24;
                    r2 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r3 = r4 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12690;
                        continue;
                    }
                    r10 = 1 << 16;
                    r2 = r4 + 1;
                    r4 = ((r4 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x126e8;
                        continue;
                    }
                    r9 = 7 << 16;
                    r4 = r6 & 15;
                    r9 = r9 + 32160;
                    r10 = r10 + 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12660;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x126b4;
                    continue;
                case 0x1264c:
                    r4 = r2 + 1;
                    if(r4 == r10) {
                        /* Next insn is delay slot */ 
                        pc=0x126ec;
                        continue;
                    }
                    r3 = r2 + r0;
                    r2 = r4 + r0;
                case 0x12660:
                    r4 = r3 << 1;
                    r4 = r9 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r7 = tmp;
                    r8 = r7 & 15;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12700;
                        continue;
                    }
                    r7 = r7 | r6;
                    r3 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r7&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1264c;
                        continue;
                    }
                case 0x12690:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x126a0:
                    r4 = r2 + 1;
                    if(r4 == r10) {
                        /* Next insn is delay slot */ 
                        pc=0x126ec;
                        continue;
                    }
                    r3 = r2 + r0;
                    r2 = r4 + r0;
                case 0x126b4:
                    r3 = r3 << 1;
                    r3 = r9 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r4 = r6 | r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r4&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x126a0;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x126e8:
                    r2 = r3 + r0;
                case 0x126ec:
                    r4 = 7 << 16;
                    r4 = r4 + -12144;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12700;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x12700:
                    r4 = 7 << 16;
                    r4 = r4 + -12080;
                    r5 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12714;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x12714:
                case 0x12800:
                    pc=0x12800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12800() throws ExecutionException { /* 0x12800 - 0x12a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12800:
                    r3 = 1 << 16;
                    r29 = r29 + -24;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    r2 = r4 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12894;
                        continue;
                    }
                    r3 = r5 & 15;
                    r4 = 7 << 16;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12868;
                        continue;
                    }
                    r3 = r2 << 1;
                    r4 = r4 + 32160;
                    r6 = r4 + r3;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r6 = tmp;
                    r7 = r6 & 15;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x128a8;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r4 + r3;
                    r5 = r6 | r5;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12868:
                    r3 = r2 << 1;
                    r4 = r4 + 32160;
                    r2 = r4 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r6 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r4 + r3;
                    r5 = r6 | r5;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12894:
                    r4 = 7 << 16;
                    r4 = r4 + -12144;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x128a8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x128a8:
                    r4 = 7 << 16;
                    r4 = r4 + -12080;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x128bc;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x128bc:
                case 0x12a00:
                    pc=0x12a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12a00() throws ExecutionException { /* 0x12a00 - 0x12c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12a00:
                    r2 = 1 << 16;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r5 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12a38;
                        continue;
                    }
                    r2 = 7 << 16;
                    r5 = r4 << 1;
                    r2 = r2 + 32160;
                    r5 = r5 + r2;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 15;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12a38:
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -12144;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x12a50;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x12a50:
                case 0x12c00:
                    pc=0x12c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12c00() throws ExecutionException { /* 0x12c00 - 0x12e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12c00:
                    r2 = 1 << 16;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r5 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12c38;
                        continue;
                    }
                    r2 = 7 << 16;
                    r5 = r4 << 1;
                    r2 = r2 + 32160;
                    r5 = r5 + r2;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 240;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12c38:
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -12144;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x12c50;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x12c50:
                case 0x12e00:
                    pc=0x12e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12e00() throws ExecutionException { /* 0x12e00 - 0x13000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12e00:
                    r29 = r29 + -24;
                    r5 = 7 << 16;
                    r6 = 7 << 16;
                    r4 = readPages[(r28+-32676)>>>12][((r28+-32676)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    r5 = r5 + -12004;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r6 = r6 + -11988;
                    r7 = r0 + 161;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x12e2c;
                    return;
                case 0x12e2c:
                case 0x13000:
                    pc=0x13000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13000() throws ExecutionException { /* 0x13000 - 0x13200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13000:
                    r3 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = 1 << 16;
                    r29 = r29 + -32;
                    r2 = r3 < r2 ? 1 : 0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13268;
                        run_13200(); return;
                    }
                    r4 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r5 = r5 + -11956;
                    /* Next insn is delay slot */ 
                    r31=0x1303c;
                    pc=0x36200;
                    run_36200(); return;
                case 0x1303c:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x132a0;
                        run_13200(); return;
                    }
                    r4 = r2 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x1305c;
                    pc=0x37e00;
                    run_37e00(); return;
                case 0x1305c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13208;
                        run_13200(); return;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13070;
                    pc=0x38200;
                    run_38200(); return;
                case 0x13070:
                    r5 = readPages[(r28+-32736)>>>12][((r28+-32736)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13188;
                        continue;
                    }
                    r2 = r5 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x132e0;
                        run_13200(); return;
                    }
                case 0x1308c:
                    r4 = r16 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1309c;
                    pc=0x37e00;
                    run_37e00(); return;
                case 0x1309c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13208;
                        run_13200(); return;
                    }
                    r2 = readPages[(r28+-32736)>>>12][((r28+-32736)>>>2)&0x3ff];
                    r6 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r17 = r17 - r2;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13198;
                        continue;
                    }
                    r17 = r17 < r6 ? 1 : 0;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x132d0;
                        run_13200(); return;
                    }
                    r2 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x131a8;
                        continue;
                    }
                case 0x130d4:
                    r17 = 1 << 16;
                    r17 = r17 - r2;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1328c;
                        run_13200(); return;
                    }
                    r4 = r17 < r6 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x131fc;
                        continue;
                    }
                    r4 = r6 < r17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1317c;
                        continue;
                    }
                case 0x130fc:
                    r18 = r17 + r0;
                case 0x13100:
                    r4 = 18 << 16;
                    r4 = r4 + -20096;
                    r4 = r4 + r2;
                    r5 = r0 + 1;
                    r6 = r18 + r0;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13120;
                    pc=0x37000;
                    run_37000(); return;
                case 0x13120:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r3 = r3 & 64;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13238;
                        run_13200(); return;
                    }
                    if(r2 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x13238;
                        run_13200(); return;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13148;
                    pc=0x33800;
                    run_33800(); return;
                case 0x13148:
                    r2 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r2;
                    writePages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff] = r2;
                    r2 = r2 + -1;
                    r17 = r2 + r17;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1317c:
                    r17 = r6 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x130fc;
                    continue;
                case 0x13188:
                    writePages[(r28+-32736)>>>12][((r28+-32736)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1308c;
                    continue;
                case 0x13198:
                    r2 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r6 = r17 + r0;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x130d4;
                        continue;
                    }
                case 0x131a8:
                    r2 = 1 << 16;
                    r4 = r2 + 1;
                    r4 = r6 < r4 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x131ec;
                        continue;
                    }
                    writePages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff] = r0;
                    r18 = 1 << 16;
                    r17 = 1 << 16;
                case 0x131c8:
                    r4 = 7 << 16;
                    r5 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r4 = r4 + -11768;
                    r6 = r6 - r17;
                    /* Next insn is delay slot */ 
                    r31=0x131e0;
                    pc=0x15a00;
                    run_15a00(); return;
                case 0x131e0:
                    r2 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x13100;
                    continue;
                case 0x131ec:
                    r2 = r2 - r6;
                    writePages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x130d4;
                    continue;
                case 0x131fc:
                    r18 = r17 + r0;
                case 0x13200:
                    pc=0x13200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13200() throws ExecutionException { /* 0x13200 - 0x13400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13200:
                    /* Next insn is delay slot */ 
                    pc=0x131c8;
                    run_13000(); return;
                case 0x13208:
                    r16 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13214;
                    pc=0x33200;
                    run_33200(); return;
                case 0x13214:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13220;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x13220:
                    r4 = 7 << 16;
                    r4 = r4 + -11928;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13238;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x13238:
                    r16 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13244;
                    pc=0x33200;
                    run_33200(); return;
                case 0x13244:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13250;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x13250:
                    r4 = 7 << 16;
                    r4 = r4 + -11724;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13268;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x13268:
                    r5 = 7 << 16;
                    r6 = 7 << 16;
                    r4 = readPages[(r28+-32676)>>>12][((r28+-32676)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    r5 = r5 + -11976;
                    r6 = r6 + -11988;
                    r7 = r0 + 76;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1328c;
                    return;
                case 0x1328c:
                    r4 = 7 << 16;
                    r5 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r4 = r4 + -11808;
                    /* Next insn is delay slot */ 
                    r31=0x132a0;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x132a0:
                    r16 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x132ac;
                    pc=0x33200;
                    run_33200(); return;
                case 0x132ac:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x132b8;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x132b8:
                    r4 = 7 << 16;
                    r4 = r4 + -11952;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x132d0;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x132d0:
                    r4 = 7 << 16;
                    r4 = r4 + -11856;
                    /* Next insn is delay slot */ 
                    r31=0x132e0;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x132e0:
                    r4 = 7 << 16;
                    r4 = r4 + -11896;
                    /* Next insn is delay slot */ 
                    r31=0x132f0;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x132f0:
                case 0x13400:
                    pc=0x13400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13400() throws ExecutionException { /* 0x13400 - 0x13600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13400:
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13438;
                        continue;
                    }
                    r2 = 18 << 16;
                    r2 = r2 + -20096;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r4 + r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13438:
                    /* Next insn is delay slot */ 
                    r31=0x13440;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x13440:
                case 0x13600:
                    pc=0x13600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13600() throws ExecutionException { /* 0x13600 - 0x13800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13600:
                    r3 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13658;
                        continue;
                    }
                    r5 = 18 << 16;
                    r5 = r5 + -20096;
                    r2 = r4 + r5;
                    r4 = r4 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13658;
                        continue;
                    }
                    r4 = r4 + r5;
                    r3 = r2 << 8;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r29 = r29 + 24;
                    r2 = r3 | r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13658:
                    /* Next insn is delay slot */ 
                    r31=0x13660;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x13660:
                case 0x13800:
                    pc=0x13800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13800() throws ExecutionException { /* 0x13800 - 0x13a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13800:
                    r3 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13858;
                        continue;
                    }
                    r5 = 18 << 16;
                    r5 = r5 + -20096;
                    r2 = r4 + r5;
                    r4 = r4 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13858;
                        continue;
                    }
                    r4 = r4 + r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 << 8;
                    r2 = r2 | r6;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13858:
                    /* Next insn is delay slot */ 
                    r31=0x13860;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x13860:
                case 0x13a00:
                    pc=0x13a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13a00() throws ExecutionException { /* 0x13a00 - 0x13c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13a00:
                    r3 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13a9c;
                        continue;
                    }
                    r5 = 18 << 16;
                    r5 = r5 + -20096;
                    r6 = r4 + 1;
                    r2 = r4 + r5;
                    r7 = ((r3 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13a9c;
                        continue;
                    }
                    r6 = r6 + r5;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r6 = r6 << 8;
                    r2 = r6 | r2;
                    r6 = r4 + 2;
                    r7 = ((r3 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13a9c;
                        continue;
                    }
                    r4 = r4 + 3;
                    r6 = r6 + r5;
                    r3 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13a9c;
                        continue;
                    }
                    r4 = r4 + r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 << 8;
                    r3 = r3 | r6;
                    r3 = r3 << 16;
                    r2 = r2 | r3;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13a9c:
                    /* Next insn is delay slot */ 
                    r31=0x13aa4;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x13aa4:
                case 0x13c00:
                    pc=0x13c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13c00() throws ExecutionException { /* 0x13c00 - 0x13e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13c00:
                    r3 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13c28;
                        continue;
                    }
                    r3 = r3 + 1;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13c28:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13e00:
                    pc=0x13e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13e00() throws ExecutionException { /* 0x13e00 - 0x14000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13e00:
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    r2 = r2 ^ 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14000:
                    pc=0x14000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14000() throws ExecutionException { /* 0x14000 - 0x14200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14000:
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14200:
                    pc=0x14200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14200() throws ExecutionException { /* 0x14200 - 0x14400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14200:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = 9 << 16;
                    r16 = r4 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r18 = r5 + r0;
                    r17 = r17 + 32160;
                    /* Next insn is delay slot */ 
                    r31=0x1422c;
                    pc=0x11a00;
                    run_11a00(); return;
                case 0x1422c:
                    r2 = r16 << 2;
                    r17 = r2 + r17;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1426c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = 7 << 16;
                    r5 = r16 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r4 + -11696;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x15a00;
                    run_15a00(); return;
                case 0x1426c:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14278;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x14278:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14400:
                    pc=0x14400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14400() throws ExecutionException { /* 0x14400 - 0x14600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14400:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14418;
                    pc=0x11a00;
                    run_11a00(); return;
                case 0x14418:
                    r2 = 9 << 16;
                    r2 = r2 + 32160;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = r16 << 2;
                    r16 = r16 + r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14600:
                    pc=0x14600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14600() throws ExecutionException { /* 0x14600 - 0x14800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14600:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x1461c;
                    pc=0x13c00;
                    run_13c00(); return;
                case 0x1461c:
                    r17 = r2 + r0;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    r16 = r0 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14690;
                        continue;
                    }
                    r18 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x14674;
                    continue;
                case 0x1463c:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r16 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x14650;
                    pc=0x11c00;
                    run_11c00(); return;
                case 0x14650:
                    r3 = r2 & 15;
                    if(r3 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x14690;
                        continue;
                    }
                    r3 = r2 & 1536;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14690;
                        continue;
                    }
                    r16 = r16 + 1;
                    if(r16 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x14690;
                        continue;
                    }
                case 0x14674:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r16 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x14688;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x14688:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1463c;
                        continue;
                    }
                case 0x14690:
                    r17 = r16 + r0;
                case 0x14694:
                    r2 = readPages[(r28+-32764)>>>12][((r28+-32764)>>>2)&0x3ff];
                    r18 = r17 + r0;
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x146ac;
                        continue;
                    }
                    r18 = r2 + r0;
                case 0x146ac:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x146b8;
                    pc=0x24800;
                    run_24800(); return;
                case 0x146b8:
                    r2 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r17 = r17 - r18;
                    r18 = r2 + r18;
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r18;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14694;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x146d8;
                    pc=0x13e00;
                    run_13e00(); return;
                case 0x146d8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14700;
                        continue;
                    }
                case 0x146e0:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14700:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1470c;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x1470c:
                    r3 = r0 + 3;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x146e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x14720;
                    pc=0x23600;
                    run_23600(); return;
                case 0x14720:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14800:
                    pc=0x14800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14800() throws ExecutionException { /* 0x14800 - 0x14a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14800:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x1481c;
                    pc=0x13c00;
                    run_13c00(); return;
                case 0x1481c:
                    r17 = r2 + r0;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1495c;
                        continue;
                    }
                    r16 = r0 + 1;
                    r18 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x14874;
                    continue;
                case 0x1483c:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r16 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x14850;
                    pc=0x11c00;
                    run_11c00(); return;
                case 0x14850:
                    r3 = r2 & 15;
                    if(r3 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x14890;
                        continue;
                    }
                    r3 = r2 & 1536;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14890;
                        continue;
                    }
                    r16 = r16 + 1;
                    if(r16 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x1489c;
                        continue;
                    }
                case 0x14874:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r16 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x14888;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x14888:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1483c;
                        continue;
                    }
                case 0x14890:
                    r2 = r0 + 1;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1495c;
                        continue;
                    }
                case 0x1489c:
                    r2 = r0 + -2;
                    r16 = r16 & r2;
                    r17 = r16 + r0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x148ec;
                        continue;
                    }
                case 0x148b0:
                    r3 = readPages[(r28+-32764)>>>12][((r28+-32764)>>>2)&0x3ff];
                    r18 = r17 + r0;
                    r4 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x148c8;
                        continue;
                    }
                    r18 = r3 + r0;
                case 0x148c8:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x148d4;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x148d4:
                    r3 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r17 = r17 - r18;
                    r18 = r3 + r18;
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r18;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x148b0;
                        continue;
                    }
                case 0x148ec:
                    /* Next insn is delay slot */ 
                    r31=0x148f4;
                    pc=0x13e00;
                    run_13e00(); return;
                case 0x148f4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1491c;
                        continue;
                    }
                case 0x148fc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1491c:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14928;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x14928:
                    r3 = r0 + 4;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x148fc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1493c;
                    pc=0x23600;
                    run_23600(); return;
                case 0x1493c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1495c:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x14968;
                    pc=0x24800;
                    run_24800(); return;
                case 0x14968:
                    r2 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14a00:
                    pc=0x14a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14a00() throws ExecutionException { /* 0x14a00 - 0x14c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14a00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x14a1c;
                    pc=0x13c00;
                    run_13c00(); return;
                case 0x14a1c:
                    r17 = r2 + r0;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14b5c;
                        continue;
                    }
                    r16 = r0 + 1;
                    r18 = r0 + 5;
                    /* Next insn is delay slot */ 
                    pc=0x14a74;
                    continue;
                case 0x14a3c:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r16 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x14a50;
                    pc=0x11c00;
                    run_11c00(); return;
                case 0x14a50:
                    r3 = r2 & 15;
                    if(r3 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x14a90;
                        continue;
                    }
                    r3 = r2 & 1536;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14a90;
                        continue;
                    }
                    r16 = r16 + 1;
                    if(r16 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x14a9c;
                        continue;
                    }
                case 0x14a74:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r16 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x14a88;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x14a88:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14a3c;
                        continue;
                    }
                case 0x14a90:
                    r2 = r0 + 1;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14b5c;
                        continue;
                    }
                case 0x14a9c:
                    r2 = r0 + -2;
                    r16 = r16 & r2;
                    r17 = r16 + r0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14aec;
                        continue;
                    }
                case 0x14ab0:
                    r3 = readPages[(r28+-32764)>>>12][((r28+-32764)>>>2)&0x3ff];
                    r18 = r17 + r0;
                    r4 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14ac8;
                        continue;
                    }
                    r18 = r3 + r0;
                case 0x14ac8:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14ad4;
                    pc=0x25000;
                    run_25000(); return;
                case 0x14ad4:
                    r3 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r17 = r17 - r18;
                    r18 = r3 + r18;
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r18;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14ab0;
                        continue;
                    }
                case 0x14aec:
                    /* Next insn is delay slot */ 
                    r31=0x14af4;
                    pc=0x13e00;
                    run_13e00(); return;
                case 0x14af4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14b1c;
                        continue;
                    }
                case 0x14afc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14b1c:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14b28;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x14b28:
                    r3 = r0 + 5;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x14afc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x14b3c;
                    pc=0x23600;
                    run_23600(); return;
                case 0x14b3c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14b5c:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x14b68;
                    pc=0x24800;
                    run_24800(); return;
                case 0x14b68:
                    r2 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14c00:
                    pc=0x14c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14c00() throws ExecutionException { /* 0x14c00 - 0x14e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14c00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x14c1c;
                    pc=0x13c00;
                    run_13c00(); return;
                case 0x14c1c:
                    r17 = r2 + r0;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    r16 = r0 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14d5c;
                        continue;
                    }
                    r18 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x14c74;
                    continue;
                case 0x14c3c:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r16 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x14c50;
                    pc=0x11c00;
                    run_11c00(); return;
                case 0x14c50:
                    r3 = r2 & 15;
                    if(r3 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x14c90;
                        continue;
                    }
                    r3 = r2 & 1536;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14c90;
                        continue;
                    }
                    r16 = r16 + 1;
                    if(r16 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x14c90;
                        continue;
                    }
                case 0x14c74:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r16 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x14c88;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x14c88:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14c3c;
                        continue;
                    }
                case 0x14c90:
                    r2 = (r16&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14d5c;
                        continue;
                    }
                    r2 = r0 + -4;
                    r16 = r16 & r2;
                    r17 = r16 + r0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14cec;
                        continue;
                    }
                case 0x14cb0:
                    r3 = readPages[(r28+-32764)>>>12][((r28+-32764)>>>2)&0x3ff];
                    r18 = r17 + r0;
                    r4 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14cc8;
                        continue;
                    }
                    r18 = r3 + r0;
                case 0x14cc8:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14cd4;
                    pc=0x25400;
                    run_25400(); return;
                case 0x14cd4:
                    r3 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r17 = r17 - r18;
                    r18 = r3 + r18;
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r18;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14cb0;
                        continue;
                    }
                case 0x14cec:
                    /* Next insn is delay slot */ 
                    r31=0x14cf4;
                    pc=0x13e00;
                    run_13e00(); return;
                case 0x14cf4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14d1c;
                        continue;
                    }
                case 0x14cfc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14d1c:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14d28;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x14d28:
                    r3 = r0 + 6;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x14cfc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x14d3c;
                    pc=0x23600;
                    run_23600(); return;
                case 0x14d3c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14d5c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14d68;
                    pc=0x24800;
                    run_24800(); return;
                case 0x14d68:
                    r2 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + r16;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r2;
                    r2 = r16 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14e00:
                    pc=0x14e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14e00() throws ExecutionException { /* 0x14e00 - 0x15000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14e00:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x14e2c;
                    pc=0x13c00;
                    run_13c00(); return;
                case 0x14e2c:
                    r16 = r2 + r0;
                    r21 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14f90;
                        continue;
                    }
                    r20 = 7 << 16;
                    r19 = 7 << 16;
                    r4 = r21 + r0;
                    r18 = r0 + 7;
                    r20 = r20 + -11616;
                    r19 = r19 + 18480;
                    /* Next insn is delay slot */ 
                    pc=0x14eec;
                    continue;
                case 0x14e5c:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14e68;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x14e68:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14ffc;
                        continue;
                    }
                    r4 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14e80;
                    pc=0x22800;
                    run_22800(); return;
                case 0x14e80:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14e8c;
                    pc=0x22600;
                    run_22600(); return;
                case 0x14e8c:
                    r4 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14e98;
                    pc=0x22800;
                    run_22800(); return;
                case 0x14e98:
                    r4 = r19 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14ea8;
                    pc=0x22600;
                    run_22600(); return;
                case 0x14ea8:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x14eb8;
                    pc=0x24400;
                    run_24400(); return;
                case 0x14eb8:
                    /* Next insn is delay slot */ 
                    r31=0x14ec0;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x14ec0:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r16 = r16 + -2;
                    r4 = r4 + 2;
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r4;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14f90;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x14ee0;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x14ee0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14f90;
                        continue;
                    }
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                case 0x14eec:
                    /* Next insn is delay slot */ 
                    r31=0x14ef4;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x14ef4:
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x14f90;
                        continue;
                    }
                    r17 = r0 + 1;
                    if(r16 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x14f74;
                        continue;
                    }
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x14f1c;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x14f1c:
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x14f74;
                        continue;
                    }
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x14f30;
                    pc=0x1f000;
                    run_1f000(); return;
                case 0x14f30:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14f3c;
                    pc=0x13800;
                    run_13800(); return;
                case 0x14f3c:
                    r22 = r2 + r0;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    if(r2 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x14e5c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x14f58;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x14f58:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14ec0;
                        continue;
                    }
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14f6c;
                    pc=0x1d800;
                    run_1d800(); return;
                case 0x14f6c:
                    /* Next insn is delay slot */ 
                    pc=0x14ec0;
                    continue;
                case 0x14f74:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x14f80;
                    pc=0x24800;
                    run_24800(); return;
                case 0x14f80:
                    r2 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r2;
                case 0x14f90:
                    /* Next insn is delay slot */ 
                    r31=0x14f98;
                    pc=0x13e00;
                    run_13e00(); return;
                case 0x14f98:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14fd4;
                        continue;
                    }
                case 0x14fa0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r2 - r21;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14fd4:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14fe0;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x14fe0:
                    r3 = r0 + 7;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x14fa0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x14ff4;
                    pc=0x23600;
                    run_23600(); return;
                case 0x14ff4:
                    /* Next insn is delay slot */ 
                    pc=0x14fa0;
                    continue;
                case 0x14ffc:
                    r4 = 7 << 16;
                case 0x15000:
                    pc=0x15000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15000() throws ExecutionException { /* 0x15000 - 0x15200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15000:
                    r4 = r4 + -11660;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15010;
                    pc=0x15e00;
                    run_15e00(); return;
                case 0x15010:
                case 0x15180:
                case 0x15200:
                    pc=0x15200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15200() throws ExecutionException { /* 0x15200 - 0x15400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15200:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x1522c;
                    pc=0x13c00;
                    run_13c00(); return;
                case 0x1522c:
                    r16 = r2 + r0;
                    r21 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15394;
                        continue;
                    }
                    r20 = 7 << 16;
                    r19 = 7 << 16;
                    r4 = r21 + r0;
                    r18 = r0 + 8;
                    r20 = r20 + -11608;
                    r19 = r19 + -11600;
                    /* Next insn is delay slot */ 
                    pc=0x152ec;
                    continue;
                case 0x1525c:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15268;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x15268:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15400;
                        run_15400(); return;
                    }
                    r4 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15280;
                    pc=0x22800;
                    run_22800(); return;
                case 0x15280:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1528c;
                    pc=0x22600;
                    run_22600(); return;
                case 0x1528c:
                    r4 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15298;
                    pc=0x22800;
                    run_22800(); return;
                case 0x15298:
                    r4 = r19 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x152a8;
                    pc=0x22600;
                    run_22600(); return;
                case 0x152a8:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x152b8;
                    pc=0x24400;
                    run_24400(); return;
                case 0x152b8:
                    /* Next insn is delay slot */ 
                    r31=0x152c0;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x152c0:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r16 = r16 + -2;
                    r4 = r4 + 2;
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r4;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15394;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x152e0;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x152e0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15394;
                        continue;
                    }
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                case 0x152ec:
                    /* Next insn is delay slot */ 
                    r31=0x152f4;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x152f4:
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x15394;
                        continue;
                    }
                    r17 = r0 + 1;
                    if(r16 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x15378;
                        continue;
                    }
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x1531c;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x1531c:
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x15378;
                        continue;
                    }
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x15330;
                    pc=0x1f000;
                    run_1f000(); return;
                case 0x15330:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1533c;
                    pc=0x13800;
                    run_13800(); return;
                case 0x1533c:
                    r2 = r2 + 1;
                    r22 = r2 & 65535;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    if(r2 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x1525c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1535c;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1535c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x152c0;
                        continue;
                    }
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15370;
                    pc=0x1d800;
                    run_1d800(); return;
                case 0x15370:
                    /* Next insn is delay slot */ 
                    pc=0x152c0;
                    continue;
                case 0x15378:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x15384;
                    pc=0x24800;
                    run_24800(); return;
                case 0x15384:
                    r2 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r2;
                case 0x15394:
                    /* Next insn is delay slot */ 
                    r31=0x1539c;
                    pc=0x13e00;
                    run_13e00(); return;
                case 0x1539c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x153d8;
                        continue;
                    }
                case 0x153a4:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r2 - r21;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x153d8:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x153e4;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x153e4:
                    r3 = r0 + 8;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x153a4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x153f8;
                    pc=0x23600;
                    run_23600(); return;
                case 0x153f8:
                    /* Next insn is delay slot */ 
                    pc=0x153a4;
                    continue;
                case 0x15400:
                    pc=0x15400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15400() throws ExecutionException { /* 0x15400 - 0x15600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15400:
                    r4 = 7 << 16;
                    r4 = r4 + -11660;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15414;
                    pc=0x15e00;
                    run_15e00(); return;
                case 0x15414:
                case 0x15600:
                    pc=0x15600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15600() throws ExecutionException { /* 0x15600 - 0x15800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15600:
                    r29 = r29 + -56;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x15630;
                    pc=0x13c00;
                    run_13c00(); return;
                case 0x15630:
                    r16 = r2 + r0;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    r19 = r0 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x156a4;
                        continue;
                    }
                    r17 = r0 + 9;
                    /* Next insn is delay slot */ 
                    pc=0x15688;
                    continue;
                case 0x15650:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r19 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x15664;
                    pc=0x11c00;
                    run_11c00(); return;
                case 0x15664:
                    r3 = r2 & 15;
                    if(r3 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x156a4;
                        continue;
                    }
                    r3 = r2 & 1536;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x156a4;
                        continue;
                    }
                    r19 = r19 + 1;
                    if(r19 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x156a4;
                        continue;
                    }
                case 0x15688:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r19 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x1569c;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x1569c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15650;
                        continue;
                    }
                case 0x156a4:
                    r21 = 7 << 16;
                    r18 = 7 << 16;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r17 = r19 + r0;
                    r21 = r21 + -11592;
                    r20 = 7 << 16;
                    r18 = r18 + -11580;
                case 0x156c0:
                    r16 = r0 + r0;
                    r22 = r0 + 34;
                    /* Next insn is delay slot */ 
                    pc=0x15708;
                    continue;
                case 0x156d0:
                    if(r2 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x15728;
                        continue;
                    }
                    r16 = r16 + 1;
                    if(r16 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x15824;
                        run_15800(); return;
                    }
                    r2 = readPages[(r28+-32764)>>>12][((r28+-32764)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r2 + -1;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15728;
                        continue;
                    }
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                case 0x15708:
                    r4 = r16 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x15714;
                    pc=0x13400;
                    run_13400(); return;
                case 0x15714:
                    r3 = r2 + -32;
                    r3 = r3 & 255;
                    r3 = (r3&0xffffffffL) < (95&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x156d0;
                        continue;
                    }
                case 0x15728:
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15824;
                        run_15800(); return;
                    }
                case 0x15730:
                    r2 = readPages[(r28+-32764)>>>12][((r28+-32764)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15810;
                        run_15800(); return;
                    }
                    r16 = r0 + r0;
                    r22 = r0 + 34;
                    /* Next insn is delay slot */ 
                    pc=0x15764;
                    continue;
                case 0x15750:
                    r2 = readPages[(r28+-32764)>>>12][((r28+-32764)>>>2)&0x3ff];
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15808;
                        run_15800(); return;
                    }
                case 0x15764:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r16 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x15778;
                    pc=0x13400;
                    run_13400(); return;
                case 0x15778:
                    r3 = r2 + -32;
                    r3 = r3 & 255;
                    r3 = (r3&0xffffffffL) < (95&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15794;
                        continue;
                    }
                    if(r2 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x15808;
                        run_15800(); return;
                    }
                case 0x15794:
                    r16 = r16 + 1;
                    if(r16 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x15750;
                        continue;
                    }
                case 0x157a0:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x157ac;
                    pc=0x24800;
                    run_24800(); return;
                case 0x157ac:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r17 = r17 - r16;
                    r4 = r4 + r16;
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r4;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x156c0;
                        continue;
                    }
                case 0x157c4:
                    /* Next insn is delay slot */ 
                    r31=0x157cc;
                    pc=0x13e00;
                    run_13e00(); return;
                case 0x157cc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x158fc;
                        run_15800(); return;
                    }
                case 0x157d4:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = r19 + r0;
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 56;
                case 0x15800:
                    pc=0x15800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15800() throws ExecutionException { /* 0x15800 - 0x15a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15800:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15808:
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x157a0;
                        run_15600(); return;
                    }
                case 0x15810:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x157c4;
                        run_15600(); return;
                    }
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x156c0;
                    run_15600(); return;
                case 0x15824:
                    r4 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15834;
                    pc=0x22800;
                    run_22800(); return;
                case 0x15834:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15840;
                    pc=0x22600;
                    run_22600(); return;
                case 0x15840:
                    r4 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1584c;
                    pc=0x22800;
                    run_22800(); return;
                case 0x1584c:
                    r4 = r20 + -11584;
                    /* Next insn is delay slot */ 
                    r31=0x15858;
                    pc=0x22600;
                    run_22600(); return;
                case 0x15858:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r22 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x1586c;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1586c:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r22 = r22 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x15880;
                    pc=0x22600;
                    run_22600(); return;
                case 0x15880:
                    if(r22 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x15858;
                        continue;
                    }
                    r4 = r20 + -11584;
                    /* Next insn is delay slot */ 
                    r31=0x15894;
                    pc=0x22600;
                    run_22600(); return;
                case 0x15894:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r22 = r16 + r0;
                case 0x1589c:
                    r2 = readPages[(r28+-32764)>>>12][((r28+-32764)>>>2)&0x3ff];
                    r23 = r22 + r0;
                    r3 = ((r2 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x158b4;
                        continue;
                    }
                    r23 = r2 + r0;
                case 0x158b4:
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x158c0;
                    pc=0x24400;
                    run_24400(); return;
                case 0x158c0:
                    /* Next insn is delay slot */ 
                    r31=0x158c8;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x158c8:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r22 = r22 - r23;
                    r4 = r23 + r4;
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r4;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1589c;
                        continue;
                    }
                    r17 = r17 - r16;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15730;
                        run_15600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x158f4;
                    pc=0x13e00;
                    run_13e00(); return;
                case 0x158f4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x157d4;
                        run_15600(); return;
                    }
                case 0x158fc:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15908;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x15908:
                    r3 = r0 + 9;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x157d4;
                        run_15600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1591c;
                    pc=0x23600;
                    run_23600(); return;
                case 0x1591c:
                    /* Next insn is delay slot */ 
                    pc=0x157d4;
                    run_15600(); return;
                case 0x15a00:
                    pc=0x15a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15a00() throws ExecutionException { /* 0x15a00 - 0x15c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15a00:
                    r29 = r29 + -32;
                    r2 = r29 + 36;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r7 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r4 = 7 << 16;
                    r4 = r4 + -11576;
                    r5 = r0 + 1;
                    r6 = r0 + 9;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x15a44;
                    pc=0x38a00;
                    run_38a00(); return;
                case 0x15a44:
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15a5c;
                    pc=0x47c00;
                    run_47c00(); return;
                case 0x15a5c:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15ac4;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x15ab0:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15ac4:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15b28;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x15b28;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15b28:
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x15b34;
                    pc=0x47e00;
                    run_47e00(); return;
                case 0x15b34:
                    /* Next insn is delay slot */ 
                    pc=0x15ab0;
                    continue;
                case 0x15c00:
                    pc=0x15c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15c00() throws ExecutionException { /* 0x15c00 - 0x15e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15c00:
                    r29 = r29 + -32;
                    r2 = r29 + 36;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r7 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r4 = 7 << 16;
                    r4 = r4 + -11564;
                    r5 = r0 + 1;
                    r6 = r0 + 7;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x15c44;
                    pc=0x38a00;
                    run_38a00(); return;
                case 0x15c44:
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15c5c;
                    pc=0x47c00;
                    run_47c00(); return;
                case 0x15c5c:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15cbc;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x15cb0:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x15cbc;
                    pc=0x33400;
                    run_33400(); return;
                case 0x15cbc:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15d14;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x15d14;
                        continue;
                    }
                    r2 = r2 + 1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x15cb0;
                    continue;
                case 0x15d14:
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x15d20;
                    pc=0x47e00;
                    run_47e00(); return;
                case 0x15d20:
                    /* Next insn is delay slot */ 
                    pc=0x15cb0;
                    continue;
                case 0x15e00:
                    pc=0x15e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15e00() throws ExecutionException { /* 0x15e00 - 0x16000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15e00:
                    r29 = r29 + -32;
                    r2 = r29 + 36;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r7 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r4 = 7 << 16;
                    r4 = r4 + -11556;
                    r5 = r0 + 1;
                    r6 = r0 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x15e44;
                    pc=0x38a00;
                    run_38a00(); return;
                case 0x15e44:
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15e5c;
                    pc=0x47c00;
                    run_47c00(); return;
                case 0x15e5c:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15ebc;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x15eb0:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x15ebc;
                    pc=0x33400;
                    run_33400(); return;
                case 0x15ebc:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15f14;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x15f14;
                        continue;
                    }
                    r2 = r2 + 1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x15eb0;
                    continue;
                case 0x15f14:
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x15f20;
                    pc=0x47e00;
                    run_47e00(); return;
                case 0x15f20:
                    /* Next insn is delay slot */ 
                    pc=0x15eb0;
                    continue;
                case 0x16000:
                    pc=0x16000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16000() throws ExecutionException { /* 0x16000 - 0x16200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16000:
                    r29 = r29 + -296;
                    writePages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    writePages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r31;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r6;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r7;
                    writePages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff] = r18;
                    r18 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16034;
                    pc=0x22800;
                    run_22800(); return;
                case 0x16034:
                    r4 = r17 + 18480;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16044;
                    pc=0x22600;
                    run_22600(); return;
                case 0x16044:
                    r7 = r29 + 304;
                    r6 = r18 + r0;
                    r4 = r29 + 16;
                    r5 = r0 + 256;
                    writePages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x16060;
                    pc=0x32a00;
                    run_32a00(); return;
                case 0x16060:
                    r4 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1606c;
                    pc=0x22800;
                    run_22800(); return;
                case 0x1606c:
                    r4 = r17 + 18480;
                    r5 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1607c;
                    pc=0x22600;
                    run_22600(); return;
                case 0x1607c:
                    addr=r16+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1608c;
                    pc=0x24400;
                    run_24400(); return;
                case 0x1608c:
                    /* Next insn is delay slot */ 
                    r31=0x16094;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x16094:
                    r31 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r18 = readPages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff];
                    r17 = readPages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff];
                    r16 = readPages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff];
                    r29 = r29 + 296;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16200:
                    pc=0x16200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16200() throws ExecutionException { /* 0x16200 - 0x16400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16200:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r19 = r4 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x16224;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x16224:
                    r4 = r2 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16234;
                    pc=0x12400;
                    run_12400(); return;
                case 0x16234:
                    r3 = r0 + 1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x162f4;
                        continue;
                    }
                    r17 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x16280;
                    continue;
                case 0x1624c:
                    r16 = r17 + -1;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1625c;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x1625c:
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x16294;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16270;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x16270:
                    r2 = r2 & 48;
                    r17 = r16 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16294;
                        continue;
                    }
                case 0x16280:
                    r3 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r3 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1624c;
                        continue;
                    }
                case 0x16294:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x162a0;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x162a0:
                    r2 = r2 & 48;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16318;
                        continue;
                    }
                case 0x162ac:
                    r16 = r19 - r17;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x162f4;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x162c4;
                    pc=0x1ec00;
                    run_1ec00(); return;
                case 0x162c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r7 = r16 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = r0 + 32;
                    r6 = r2 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x162f4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x1d800;
                    run_1d800(); return;
                case 0x16318:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16324;
                    pc=0x1d800;
                    run_1d800(); return;
                case 0x16324:
                    /* Next insn is delay slot */ 
                    pc=0x162ac;
                    continue;
                case 0x16400:
                    pc=0x16400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16400() throws ExecutionException { /* 0x16400 - 0x16600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16400:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x24800;
                    run_24800(); return;
                case 0x16600:
                    pc=0x16600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16600() throws ExecutionException { /* 0x16600 - 0x16800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16600:
                    r5 = 7 << 16;
                    r5 = r5 + -11536;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x16800:
                    pc=0x16800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16800() throws ExecutionException { /* 0x16800 - 0x16a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1681c;
                    pc=0x22800;
                    run_22800(); return;
                case 0x1681c:
                    r4 = 7 << 16;
                    r5 = r16 + r0;
                    r4 = r4 + 18480;
                    /* Next insn is delay slot */ 
                    r31=0x16830;
                    pc=0x22600;
                    run_22600(); return;
                case 0x16830:
                    addr=r16+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16840;
                    pc=0x24400;
                    run_24400(); return;
                case 0x16840:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x16a00:
                    pc=0x16a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16a00() throws ExecutionException { /* 0x16a00 - 0x16c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16a00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x16a20;
                    pc=0x13400;
                    run_13400(); return;
                case 0x16a20:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r5 + -11316;
                    r6 = r2 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x16c00:
                    pc=0x16c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16c00() throws ExecutionException { /* 0x16c00 - 0x16e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16c00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x16c20;
                    pc=0x13800;
                    run_13800(); return;
                case 0x16c20:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r5 + -11532;
                    r6 = r2 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x16e00:
                    pc=0x16e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16e00() throws ExecutionException { /* 0x16e00 - 0x17000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16e00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x16e28;
                    pc=0x13400;
                    run_13400(); return;
                case 0x16e28:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x16edc;
                        continue;
                    }
                case 0x16e40:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16e98;
                        continue;
                    }
                case 0x16e4c:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16e6c;
                    pc=0x32800;
                    run_32800(); return;
                case 0x16e6c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + 32160;
                    r4 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r5 = r5 + 18480;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x16e98:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16ea8;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x16ea8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16e4c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r2 + r0;
                    r5 = r5 + 18480;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x16edc:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16ee8;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x16ee8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16f3c;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16f30;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16f3c;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16f3c;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16f3c;
                        continue;
                    }
                case 0x16f30:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16f3c;
                    pc=0x16200;
                    run_16200(); return;
                case 0x16f3c:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x16e40;
                    continue;
                case 0x17000:
                    pc=0x17000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17000() throws ExecutionException { /* 0x17000 - 0x17200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17000:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x17028;
                    pc=0x13400;
                    run_13400(); return;
                case 0x17028:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x170dc;
                        continue;
                    }
                case 0x17040:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17098;
                        continue;
                    }
                case 0x1704c:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1706c;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1706c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + 32160;
                    r4 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r5 = r5 + -11516;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x17098:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x170a8;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x170a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1704c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r2 + r0;
                    r5 = r5 + -11516;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x170dc:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x170e8;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x170e8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1713c;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17130;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1713c;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1713c;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1713c;
                        continue;
                    }
                case 0x17130:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1713c;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1713c:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x17040;
                    continue;
                case 0x17200:
                    pc=0x17200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17200() throws ExecutionException { /* 0x17200 - 0x17400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17200:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x17228;
                    pc=0x13400;
                    run_13400(); return;
                case 0x17228:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x172dc;
                        continue;
                    }
                case 0x17240:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17298;
                        continue;
                    }
                case 0x1724c:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1726c;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1726c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + 32160;
                    r4 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r5 = r5 + -11508;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x17298:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x172a8;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x172a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1724c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r2 + r0;
                    r5 = r5 + -11508;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x172dc:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x172e8;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x172e8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1733c;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17330;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1733c;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1733c;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1733c;
                        continue;
                    }
                case 0x17330:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1733c;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1733c:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x17240;
                    continue;
                case 0x17400:
                    pc=0x17400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17400() throws ExecutionException { /* 0x17400 - 0x17600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17400:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    r31=0x1742c;
                    pc=0x13800;
                    run_13800(); return;
                case 0x1742c:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x17534;
                        continue;
                    }
                    r2 = r18 + r0;
                case 0x17448:
                    r3 = r2 & 32;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17460;
                        continue;
                    }
                    r3 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17524;
                        continue;
                    }
                case 0x17460:
                    r18 = 7 << 16;
                    r18 = r18 + -7564;
                case 0x17468:
                    r2 = r2 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x174ac;
                        continue;
                    }
                case 0x17474:
                    r2 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x174f8;
                        continue;
                    }
                    r19 = 13 << 16;
                    r6 = 7 << 16;
                    r7 = r17 + r0;
                    r4 = r19 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -9064;
                    /* Next insn is delay slot */ 
                    r31=0x174a0;
                    pc=0x32800;
                    run_32800(); return;
                case 0x174a0:
                    r7 = r19 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x174c8;
                    continue;
                case 0x174ac:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x174bc;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x174bc:
                    r7 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17474;
                        continue;
                    }
                case 0x174c8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + r0;
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r5 + -11496;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x174f8:
                    r19 = 13 << 16;
                    r6 = 7 << 16;
                    r7 = r17 + r0;
                    r4 = r19 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    /* Next insn is delay slot */ 
                    r31=0x17518;
                    pc=0x32800;
                    run_32800(); return;
                case 0x17518:
                    r7 = r19 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x174c8;
                    continue;
                case 0x17524:
                    r18 = 7 << 16;
                    r18 = r18 + -11500;
                    /* Next insn is delay slot */ 
                    pc=0x17468;
                    continue;
                case 0x17534:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17540;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x17540:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17594;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17588;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17594;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17594;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17594;
                        continue;
                    }
                case 0x17588:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17594;
                    pc=0x16200;
                    run_16200(); return;
                case 0x17594:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x17448;
                    continue;
                case 0x17600:
                    pc=0x17600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17600() throws ExecutionException { /* 0x17600 - 0x17800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17600:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    r31=0x1762c;
                    pc=0x13800;
                    run_13800(); return;
                case 0x1762c:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x17734;
                        continue;
                    }
                    r2 = r18 + r0;
                case 0x17648:
                    r3 = r2 & 32;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17660;
                        continue;
                    }
                    r3 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17724;
                        continue;
                    }
                case 0x17660:
                    r18 = 7 << 16;
                    r18 = r18 + -7564;
                case 0x17668:
                    r2 = r2 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x176ac;
                        continue;
                    }
                case 0x17674:
                    r2 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x176f8;
                        continue;
                    }
                    r19 = 13 << 16;
                    r6 = 7 << 16;
                    r7 = r17 + r0;
                    r4 = r19 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -9064;
                    /* Next insn is delay slot */ 
                    r31=0x176a0;
                    pc=0x32800;
                    run_32800(); return;
                case 0x176a0:
                    r7 = r19 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x176c8;
                    continue;
                case 0x176ac:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x176bc;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x176bc:
                    r7 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17674;
                        continue;
                    }
                case 0x176c8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + r0;
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r5 + -11488;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x176f8:
                    r19 = 13 << 16;
                    r6 = 7 << 16;
                    r7 = r17 + r0;
                    r4 = r19 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    /* Next insn is delay slot */ 
                    r31=0x17718;
                    pc=0x32800;
                    run_32800(); return;
                case 0x17718:
                    r7 = r19 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x176c8;
                    continue;
                case 0x17724:
                    r18 = 7 << 16;
                    r18 = r18 + -11500;
                    /* Next insn is delay slot */ 
                    pc=0x17668;
                    continue;
                case 0x17734:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17740;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x17740:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17794;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17788;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17794;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17794;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17794;
                        continue;
                    }
                case 0x17788:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17794;
                    pc=0x16200;
                    run_16200(); return;
                case 0x17794:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x17648;
                    continue;
                case 0x17800:
                    pc=0x17800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17800() throws ExecutionException { /* 0x17800 - 0x17a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17800:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    r31=0x1782c;
                    pc=0x13800;
                    run_13800(); return;
                case 0x1782c:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x17934;
                        continue;
                    }
                    r2 = r18 + r0;
                case 0x17848:
                    r3 = r2 & 32;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17860;
                        continue;
                    }
                    r3 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17924;
                        continue;
                    }
                case 0x17860:
                    r18 = 7 << 16;
                    r18 = r18 + -7564;
                case 0x17868:
                    r2 = r2 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x178ac;
                        continue;
                    }
                case 0x17874:
                    r2 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x178f8;
                        continue;
                    }
                    r19 = 13 << 16;
                    r6 = 7 << 16;
                    r7 = r17 + r0;
                    r4 = r19 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -9064;
                    /* Next insn is delay slot */ 
                    r31=0x178a0;
                    pc=0x32800;
                    run_32800(); return;
                case 0x178a0:
                    r7 = r19 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x178c8;
                    continue;
                case 0x178ac:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x178bc;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x178bc:
                    r7 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17874;
                        continue;
                    }
                case 0x178c8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + r0;
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r5 + -11480;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x178f8:
                    r19 = 13 << 16;
                    r6 = 7 << 16;
                    r7 = r17 + r0;
                    r4 = r19 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    /* Next insn is delay slot */ 
                    r31=0x17918;
                    pc=0x32800;
                    run_32800(); return;
                case 0x17918:
                    r7 = r19 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x178c8;
                    continue;
                case 0x17924:
                    r18 = 7 << 16;
                    r18 = r18 + -11500;
                    /* Next insn is delay slot */ 
                    pc=0x17868;
                    continue;
                case 0x17934:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17940;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x17940:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17994;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17988;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17994;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17994;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17994;
                        continue;
                    }
                case 0x17988:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17994;
                    pc=0x16200;
                    run_16200(); return;
                case 0x17994:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x17848;
                    continue;
                case 0x17a00:
                    pc=0x17a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17a00() throws ExecutionException { /* 0x17a00 - 0x17c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17a00:
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -11472;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x17a18;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x17a18:
                case 0x17c00:
                    pc=0x17c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17c00() throws ExecutionException { /* 0x17c00 - 0x17e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17c00:
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -11472;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x17c18;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x17c18:
                case 0x17e00:
                    pc=0x17e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17e00() throws ExecutionException { /* 0x17e00 - 0x18000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17e00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x17e28;
                    pc=0x13400;
                    run_13400(); return;
                case 0x17e28:
                    r17 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r2 = r2 << 24;
                    r2 = r2 >> 24;
                    r17 = r17 + 2;
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r17 + r2;
                    r2 = r0 + 1;
                    r17 = r17 & 65535;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x17f28;
                        continue;
                    }
                case 0x17e54:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17eb8;
                        continue;
                    }
                case 0x17e60:
                    r2 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17efc;
                        continue;
                    }
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -9064;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17e8c;
                    pc=0x32800;
                    run_32800(); return;
                case 0x17e8c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + 32160;
                    r4 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r5 = r5 + 18480;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x17eb8:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17ec8;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x17ec8:
                    r6 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e60;
                        continue;
                    }
                case 0x17ed4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r5 + 18480;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x17efc:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r6 = r6 + -11524;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17f1c;
                    pc=0x32800;
                    run_32800(); return;
                case 0x17f1c:
                    r6 = r18 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x17ed4;
                    continue;
                case 0x17f28:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17f34;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x17f34:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17f88;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17f7c;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17f88;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17f88;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17f88;
                        continue;
                    }
                case 0x17f7c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17f88;
                    pc=0x16200;
                    run_16200(); return;
                case 0x17f88:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x17e54;
                    continue;
                case 0x18000:
                    pc=0x18000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18000() throws ExecutionException { /* 0x18000 - 0x18200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18000:
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -11472;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x18018;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x18018:
                case 0x18200:
                    pc=0x18200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18200() throws ExecutionException { /* 0x18200 - 0x18400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18200:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x18228;
                    pc=0x13800;
                    run_13800(); return;
                case 0x18228:
                    r17 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r17 + 2;
                    r2 = r2 + r17;
                    r17 = r2 & 65535;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x18320;
                        continue;
                    }
                case 0x1824c:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x182b0;
                        continue;
                    }
                case 0x18258:
                    r2 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x182f4;
                        continue;
                    }
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -9064;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18284;
                    pc=0x32800;
                    run_32800(); return;
                case 0x18284:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + 32160;
                    r4 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r5 = r5 + 18480;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x182b0:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x182c0;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x182c0:
                    r6 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18258;
                        continue;
                    }
                case 0x182cc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r5 + 18480;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x182f4:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r6 = r6 + -11524;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18314;
                    pc=0x32800;
                    run_32800(); return;
                case 0x18314:
                    r6 = r18 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x182cc;
                    continue;
                case 0x18320:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1832c;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1832c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18380;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18374;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18380;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18380;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18380;
                        continue;
                    }
                case 0x18374:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18380;
                    pc=0x16200;
                    run_16200(); return;
                case 0x18380:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1824c;
                    continue;
                case 0x18400:
                    pc=0x18400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18400() throws ExecutionException { /* 0x18400 - 0x18600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18400:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x18428;
                    pc=0x13400;
                    run_13400(); return;
                case 0x18428:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x184dc;
                        continue;
                    }
                case 0x18440:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18498;
                        continue;
                    }
                case 0x1844c:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1846c;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1846c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + 32160;
                    r4 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r5 = r5 + -11456;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x18498:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x184a8;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x184a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1844c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r2 + r0;
                    r5 = r5 + -11456;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x184dc:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x184e8;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x184e8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1853c;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18530;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1853c;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1853c;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1853c;
                        continue;
                    }
                case 0x18530:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1853c;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1853c:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x18440;
                    continue;
                case 0x18600:
                    pc=0x18600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18600() throws ExecutionException { /* 0x18600 - 0x18800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18600:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x18628;
                    pc=0x13400;
                    run_13400(); return;
                case 0x18628:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x186dc;
                        continue;
                    }
                case 0x18640:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18698;
                        continue;
                    }
                case 0x1864c:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1866c;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1866c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + 32160;
                    r4 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r5 = r5 + -11448;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x18698:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x186a8;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x186a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1864c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r2 + r0;
                    r5 = r5 + -11448;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x186dc:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x186e8;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x186e8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1873c;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18730;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1873c;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1873c;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1873c;
                        continue;
                    }
                case 0x18730:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1873c;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1873c:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x18640;
                    continue;
                case 0x18800:
                    pc=0x18800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18800() throws ExecutionException { /* 0x18800 - 0x18a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18800:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x18828;
                    pc=0x13400;
                    run_13400(); return;
                case 0x18828:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x188dc;
                        continue;
                    }
                case 0x18840:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18898;
                        continue;
                    }
                case 0x1884c:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1886c;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1886c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + 32160;
                    r4 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r5 = r5 + -11440;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x18898:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x188a8;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x188a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1884c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r2 + r0;
                    r5 = r5 + -11440;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x188dc:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x188e8;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x188e8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1893c;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18930;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1893c;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1893c;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1893c;
                        continue;
                    }
                case 0x18930:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1893c;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1893c:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x18840;
                    continue;
                case 0x18a00:
                    pc=0x18a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18a00() throws ExecutionException { /* 0x18a00 - 0x18c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18a00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x18a28;
                    pc=0x13400;
                    run_13400(); return;
                case 0x18a28:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x18adc;
                        continue;
                    }
                case 0x18a40:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18a98;
                        continue;
                    }
                case 0x18a4c:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18a6c;
                    pc=0x32800;
                    run_32800(); return;
                case 0x18a6c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + 32160;
                    r4 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r5 = r5 + -11432;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x18a98:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18aa8;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x18aa8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18a4c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r2 + r0;
                    r5 = r5 + -11432;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x18adc:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18ae8;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x18ae8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18b3c;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18b30;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18b3c;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18b3c;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18b3c;
                        continue;
                    }
                case 0x18b30:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18b3c;
                    pc=0x16200;
                    run_16200(); return;
                case 0x18b3c:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x18a40;
                    continue;
                case 0x18c00:
                    pc=0x18c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18c00() throws ExecutionException { /* 0x18c00 - 0x18e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18c00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x18c28;
                    pc=0x13800;
                    run_13800(); return;
                case 0x18c28:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x18d14;
                        continue;
                    }
                case 0x18c40:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ca4;
                        continue;
                    }
                case 0x18c4c:
                    r2 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ce8;
                        continue;
                    }
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -9064;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18c78;
                    pc=0x32800;
                    run_32800(); return;
                case 0x18c78:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + 32160;
                    r4 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r5 = r5 + -11456;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x18ca4:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18cb4;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x18cb4:
                    r6 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18c4c;
                        continue;
                    }
                case 0x18cc0:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r5 + -11456;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x18ce8:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r6 = r6 + -11524;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18d08;
                    pc=0x32800;
                    run_32800(); return;
                case 0x18d08:
                    r6 = r18 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x18cc0;
                    continue;
                case 0x18d14:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18d20;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x18d20:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18d74;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18d68;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18d74;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18d74;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18d74;
                        continue;
                    }
                case 0x18d68:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18d74;
                    pc=0x16200;
                    run_16200(); return;
                case 0x18d74:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x18c40;
                    continue;
                case 0x18e00:
                    pc=0x18e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18e00() throws ExecutionException { /* 0x18e00 - 0x19000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18e00:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r4 = r4 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x18e2c;
                    pc=0x13400;
                    run_13400(); return;
                case 0x18e2c:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r18 = r2 + r0;
                    r4 = r4 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x18e40;
                    pc=0x13400;
                    run_13400(); return;
                case 0x18e40:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r2 = r2 << 24;
                    r3 = r5 + 3;
                    r2 = r2 >> 24;
                    r17 = r3 + r2;
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r17 = r17 & 65535;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r19 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x18f80;
                        continue;
                    }
                case 0x18e6c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18e78;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x18e78:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18f28;
                        continue;
                    }
                    r4 = r2 + r0;
                case 0x18e84:
                    /* Next insn is delay slot */ 
                    r31=0x18e8c;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x18e8c:
                    r17 = r2 + r0;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18f04;
                        continue;
                    }
                case 0x18ea4:
                    r19 = 13 << 16;
                    r6 = 7 << 16;
                    r6 = r6 + -11524;
                    r4 = r19 + 32160;
                    r5 = r0 + 32;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18ec4;
                    pc=0x32800;
                    run_32800(); return;
                case 0x18ec4:
                    r6 = r19 + 32160;
                case 0x18ec8:
                    r5 = 7 << 16;
                    r4 = r16 + r0;
                    r7 = r17 + r0;
                    r5 = r5 + -11424;
                    /* Next insn is delay slot */ 
                    r31=0x18ee0;
                    pc=0x16000;
                    run_16000(); return;
                case 0x18ee0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x18f04:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18f14;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x18f14:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ea4;
                        continue;
                    }
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x18ec8;
                    continue;
                case 0x18f28:
                    r19 = 13 << 16;
                    r2 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r4 = r19 + 32160;
                    r5 = r0 + 32;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18f60;
                        continue;
                    }
                    r6 = 7 << 16;
                    r6 = r6 + -9064;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18f54;
                    pc=0x32800;
                    run_32800(); return;
                case 0x18f54:
                    r4 = r19 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x18e84;
                    continue;
                case 0x18f60:
                    r6 = 7 << 16;
                    r6 = r6 + -11524;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18f74;
                    pc=0x32800;
                    run_32800(); return;
                case 0x18f74:
                    r4 = r19 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x18e84;
                    continue;
                case 0x18f80:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18f8c;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x18f8c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18fe0;
                        continue;
                    }
                    r2 = r19 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18fd4;
                        continue;
                    }
                    r19 = r19 & 2;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18fe0;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r18 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18fe0;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18fe0;
                        continue;
                    }
                case 0x18fd4:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18fe0;
                    pc=0x16200;
                    run_16200(); return;
                case 0x18fe0:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x19010;
                        run_19000(); return;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18ffc;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x18ffc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19010;
                        run_19000(); return;
                    }
                case 0x19000:
                    pc=0x19000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19000() throws ExecutionException { /* 0x19000 - 0x19200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19000:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19010;
                    pc=0x16200;
                    run_16200(); return;
                case 0x19010:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x18e6c;
                    run_18e00(); return;
                case 0x19200:
                    pc=0x19200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19200() throws ExecutionException { /* 0x19200 - 0x19400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19200:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r4 = r4 + 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    r31=0x1922c;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1922c:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x192e8;
                        continue;
                    }
                case 0x19244:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x19258;
                    pc=0x13400;
                    run_13400(); return;
                case 0x19258:
                    r19 = r2 + r0;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x192c4;
                        continue;
                    }
                case 0x19270:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r7 = r17 + r0;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    /* Next insn is delay slot */ 
                    r31=0x19290;
                    pc=0x32800;
                    run_32800(); return;
                case 0x19290:
                    r7 = r18 + 32160;
                case 0x19294:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r19 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r5 = r5 + -11416;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x192c4:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x192d4;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x192d4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19270;
                        continue;
                    }
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x19294;
                    continue;
                case 0x192e8:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x192f4;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x192f4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19244;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1933c;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19244;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19244;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19244;
                        continue;
                    }
                case 0x1933c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19348;
                    pc=0x16200;
                    run_16200(); return;
                case 0x19348:
                    /* Next insn is delay slot */ 
                    pc=0x19244;
                    continue;
                case 0x19400:
                    pc=0x19400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19400() throws ExecutionException { /* 0x19400 - 0x19600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19400:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r4 = r4 + 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    r31=0x1942c;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1942c:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x194e8;
                        continue;
                    }
                case 0x19444:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x19458;
                    pc=0x13400;
                    run_13400(); return;
                case 0x19458:
                    r19 = r2 + r0;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x194c4;
                        continue;
                    }
                case 0x19470:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r7 = r17 + r0;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    /* Next insn is delay slot */ 
                    r31=0x19490;
                    pc=0x32800;
                    run_32800(); return;
                case 0x19490:
                    r7 = r18 + 32160;
                case 0x19494:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r19 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r5 = r5 + -11404;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x194c4:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x194d4;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x194d4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19470;
                        continue;
                    }
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x19494;
                    continue;
                case 0x194e8:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x194f4;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x194f4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19444;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1953c;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19444;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19444;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19444;
                        continue;
                    }
                case 0x1953c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19548;
                    pc=0x16200;
                    run_16200(); return;
                case 0x19548:
                    /* Next insn is delay slot */ 
                    pc=0x19444;
                    continue;
                case 0x19600:
                    pc=0x19600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19600() throws ExecutionException { /* 0x19600 - 0x19800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19600:
                    r29 = r29 + -48;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    r4 = r4 + 2;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    r31=0x19630;
                    pc=0x13800;
                    run_13800(); return;
                case 0x19630:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x19760;
                        continue;
                    }
                case 0x19648:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x1965c;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1965c:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r19 = r2 + r0;
                    r2 = r3 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1967c;
                        continue;
                    }
                    r2 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19750;
                        continue;
                    }
                case 0x1967c:
                    r18 = 7 << 16;
                    r18 = r18 + -7564;
                case 0x19684:
                    r3 = r3 & 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x196c8;
                        continue;
                    }
                case 0x19690:
                    r2 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19724;
                        continue;
                    }
                    r20 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r20 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -9064;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x196bc;
                    pc=0x32800;
                    run_32800(); return;
                case 0x196bc:
                    r2 = r20 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x196e0;
                    continue;
                case 0x196c8:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x196d8;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x196d8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19690;
                        continue;
                    }
                case 0x196e0:
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r16 + r0;
                    r6 = r19 + r0;
                    r7 = r18 + r0;
                    r5 = r5 + -11392;
                    /* Next insn is delay slot */ 
                    r31=0x19700;
                    pc=0x16000;
                    run_16000(); return;
                case 0x19700:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19724:
                    r20 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r20 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19744;
                    pc=0x32800;
                    run_32800(); return;
                case 0x19744:
                    r2 = r20 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x196e0;
                    continue;
                case 0x19750:
                    r18 = 7 << 16;
                    r18 = r18 + -11500;
                    /* Next insn is delay slot */ 
                    pc=0x19684;
                    continue;
                case 0x19760:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1976c;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1976c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19648;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x197b4;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19648;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19648;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19648;
                        continue;
                    }
                case 0x197b4:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x197c0;
                    pc=0x16200;
                    run_16200(); return;
                case 0x197c0:
                    /* Next insn is delay slot */ 
                    pc=0x19648;
                    continue;
                case 0x19800:
                    pc=0x19800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19800() throws ExecutionException { /* 0x19800 - 0x19a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19800:
                    r29 = r29 + -48;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    r4 = r4 + 2;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    r31=0x19830;
                    pc=0x13800;
                    run_13800(); return;
                case 0x19830:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x19960;
                        continue;
                    }
                case 0x19848:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x1985c;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1985c:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r19 = r2 + r0;
                    r2 = r3 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1987c;
                        continue;
                    }
                    r2 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19950;
                        continue;
                    }
                case 0x1987c:
                    r18 = 7 << 16;
                    r18 = r18 + -7564;
                case 0x19884:
                    r3 = r3 & 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x198c8;
                        continue;
                    }
                case 0x19890:
                    r2 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19924;
                        continue;
                    }
                    r20 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r20 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -9064;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x198bc;
                    pc=0x32800;
                    run_32800(); return;
                case 0x198bc:
                    r2 = r20 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x198e0;
                    continue;
                case 0x198c8:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x198d8;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x198d8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19890;
                        continue;
                    }
                case 0x198e0:
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r16 + r0;
                    r6 = r19 + r0;
                    r7 = r18 + r0;
                    r5 = r5 + -11380;
                    /* Next insn is delay slot */ 
                    r31=0x19900;
                    pc=0x16000;
                    run_16000(); return;
                case 0x19900:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19924:
                    r20 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r20 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19944;
                    pc=0x32800;
                    run_32800(); return;
                case 0x19944:
                    r2 = r20 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x198e0;
                    continue;
                case 0x19950:
                    r18 = 7 << 16;
                    r18 = r18 + -11500;
                    /* Next insn is delay slot */ 
                    pc=0x19884;
                    continue;
                case 0x19960:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1996c;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1996c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19848;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x199b4;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19848;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19848;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19848;
                        continue;
                    }
                case 0x199b4:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x199c0;
                    pc=0x16200;
                    run_16200(); return;
                case 0x199c0:
                    /* Next insn is delay slot */ 
                    pc=0x19848;
                    continue;
                case 0x19a00:
                    pc=0x19a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19a00() throws ExecutionException { /* 0x19a00 - 0x19c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19a00:
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -11472;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x19a18;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x19a18:
                case 0x19c00:
                    pc=0x19c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19c00() throws ExecutionException { /* 0x19c00 - 0x19e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19c00:
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -11472;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x19c18;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x19c18:
                case 0x19e00:
                    pc=0x19e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19e00() throws ExecutionException { /* 0x19e00 - 0x1a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19e00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x19e20;
                    pc=0x13400;
                    run_13400(); return;
                case 0x19e20:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r5 + -11364;
                    r6 = r2 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x1a000:
                    pc=0x1a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a000() throws ExecutionException { /* 0x1a000 - 0x1a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x1a020;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1a020:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r5 + -11352;
                    r6 = r2 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x1a200:
                    pc=0x1a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a200() throws ExecutionException { /* 0x1a200 - 0x1a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a200:
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -11472;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1a218;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1a218:
                case 0x1a400:
                    pc=0x1a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a400() throws ExecutionException { /* 0x1a400 - 0x1a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a400:
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -11472;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1a418;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1a418:
                case 0x1a600:
                    pc=0x1a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a600() throws ExecutionException { /* 0x1a600 - 0x1a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a600:
                    r29 = r29 + -64;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    r4 = r4 + 1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r19;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r18;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r17;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r21;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    r31=0x1a634;
                    pc=0x13800;
                    run_13800(); return;
                case 0x1a634:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r18 = r2 + r0;
                    r4 = r4 + 3;
                    /* Next insn is delay slot */ 
                    r31=0x1a648;
                    pc=0x13800;
                    run_13800(); return;
                case 0x1a648:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r19 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1a84c;
                        run_1a800(); return;
                    }
                case 0x1a660:
                    r19 = r19 & 2;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a77c;
                        continue;
                    }
                case 0x1a66c:
                    r2 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a810;
                        run_1a800(); return;
                    }
                    r19 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r19 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -9064;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a698;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1a698:
                    r4 = r19 + 32160;
                    /* Next insn is delay slot */ 
                    r31=0x1a6a4;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1a6a4:
                    r19 = r2 + r0;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r2 & 32;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a7b8;
                        continue;
                    }
                case 0x1a6bc:
                    r20 = 7 << 16;
                    r2 = r2 & 2;
                    r20 = r20 + -7564;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a7d8;
                        continue;
                    }
                case 0x1a6d0:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a6e0;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1a6e0:
                    r21 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a7d8;
                        continue;
                    }
                case 0x1a6ec:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 32;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a70c;
                        continue;
                    }
                    r17 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a83c;
                        run_1a800(); return;
                    }
                case 0x1a70c:
                    r17 = 7 << 16;
                    r17 = r17 + -7564;
                case 0x1a714:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r4 + 5;
                    /* Next insn is delay slot */ 
                    r31=0x1a728;
                    pc=0x13800;
                    run_13800(); return;
                case 0x1a728:
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r19;
                    r4 = r16 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r6 = r20 + r0;
                    r7 = r21 + r0;
                    r5 = r5 + -11336;
                    /* Next insn is delay slot */ 
                    r31=0x1a750;
                    pc=0x16000;
                    run_16000(); return;
                case 0x1a750:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r21 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r20 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r19 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x1a77c:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a78c;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1a78c:
                    r4 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a66c;
                        continue;
                    }
                case 0x1a798:
                    /* Next insn is delay slot */ 
                    r31=0x1a7a0;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1a7a0:
                    r19 = r2 + r0;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r2 & 32;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a6bc;
                        continue;
                    }
                case 0x1a7b8:
                    r3 = (r18&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a6bc;
                        continue;
                    }
                    r20 = 7 << 16;
                    r2 = r2 & 2;
                    r20 = r20 + -11500;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a6d0;
                        continue;
                    }
                case 0x1a7d8:
                    r2 = (r18&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a92c;
                        run_1a800(); return;
                    }
                    r21 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r21 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -9064;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a804;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1a800:
                    pc=0x1a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a800() throws ExecutionException { /* 0x1a800 - 0x1aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a800:
                case 0x1a804:
                    r21 = r21 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x1a6ec;
                    run_1a600(); return;
                case 0x1a810:
                    r19 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r19 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a830;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1a830:
                    r4 = r19 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x1a798;
                    run_1a600(); return;
                case 0x1a83c:
                    r17 = 7 << 16;
                    r17 = r17 + -11500;
                    /* Next insn is delay slot */ 
                    pc=0x1a714;
                    run_1a600(); return;
                case 0x1a84c:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a858;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1a858:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a8ac;
                        continue;
                    }
                    r2 = r19 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a8a0;
                        continue;
                    }
                    r19 = r19 & 2;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a8ac;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r18 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a8ac;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a8ac;
                        continue;
                    }
                case 0x1a8a0:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a8ac;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1a8ac:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r19 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1a660;
                        run_1a600(); return;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a8cc;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1a8cc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a920;
                        continue;
                    }
                    r2 = r19 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a914;
                        continue;
                    }
                    r19 = r19 & 2;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a920;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a920;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a920;
                        continue;
                    }
                case 0x1a914:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a920;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1a920:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r19 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1a660;
                    run_1a600(); return;
                case 0x1a92c:
                    r21 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r21 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a94c;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1a94c:
                    r21 = r21 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x1a6ec;
                    run_1a600(); return;
                case 0x1aa00:
                    pc=0x1aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1aa00() throws ExecutionException { /* 0x1aa00 - 0x1ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1aa00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1aa28;
                    pc=0x13800;
                    run_13800(); return;
                case 0x1aa28:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ab14;
                        continue;
                    }
                case 0x1aa40:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aaa4;
                        continue;
                    }
                case 0x1aa4c:
                    r2 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aae8;
                        continue;
                    }
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -9064;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1aa78;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1aa78:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + 32160;
                    r4 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r5 = r5 + -11432;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x1aaa4:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1aab4;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1aab4:
                    r6 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aa4c;
                        continue;
                    }
                case 0x1aac0:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r5 + -11432;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x1aae8:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r6 = r6 + -11524;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ab08;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1ab08:
                    r6 = r18 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x1aac0;
                    continue;
                case 0x1ab14:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ab20;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1ab20:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ab74;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ab68;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ab74;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ab74;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ab74;
                        continue;
                    }
                case 0x1ab68:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ab74;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1ab74:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1aa40;
                    continue;
                case 0x1ac00:
                    pc=0x1ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ac00() throws ExecutionException { /* 0x1ac00 - 0x1ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ac00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1ac28;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1ac28:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1acd8;
                        continue;
                    }
                case 0x1ac40:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1acb4;
                        continue;
                    }
                case 0x1ac4c:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ac6c;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1ac6c:
                    r18 = r18 + 32160;
                case 0x1ac70:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r4 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x1ac84;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1ac84:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r18 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = r5 + -11320;
                    r7 = r2 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x1acb4:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1acc4;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1acc4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ac4c;
                        continue;
                    }
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1ac70;
                    continue;
                case 0x1acd8:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ace4;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1ace4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ad38;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ad2c;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ad38;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ad38;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ad38;
                        continue;
                    }
                case 0x1ad2c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ad38;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1ad38:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1ac40;
                    continue;
                case 0x1ae00:
                    pc=0x1ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ae00() throws ExecutionException { /* 0x1ae00 - 0x1b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ae00:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x1ae28;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1ae28:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r2 = r2 >>> 5;
                    r4 = r4 + 1;
                    r19 = r2 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x1ae40;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1ae40:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1aedc;
                        continue;
                    }
                case 0x1ae58:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aeb8;
                        continue;
                    }
                case 0x1ae64:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r7 = r17 + r0;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    /* Next insn is delay slot */ 
                    r31=0x1ae84;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1ae84:
                    r7 = r18 + 32160;
                case 0x1ae88:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r19 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r5 = r5 + -11308;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x1aeb8:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1aec8;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1aec8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ae64;
                        continue;
                    }
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1ae88;
                    continue;
                case 0x1aedc:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1aee8;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1aee8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1af3c;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1af30;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1af3c;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1af3c;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1af3c;
                        continue;
                    }
                case 0x1af30:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1af3c;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1af3c:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1ae58;
                    continue;
                case 0x1b000:
                    pc=0x1b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b000() throws ExecutionException { /* 0x1b000 - 0x1b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1b01c;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1b01c:
                    r2 = r2 >>> 5;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r5 + -11300;
                    r6 = r2 & 255;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x1b200:
                    pc=0x1b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b200() throws ExecutionException { /* 0x1b200 - 0x1b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b200:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    r31=0x1b228;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1b228:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r2 = r2 >>> 5;
                    r4 = r4 + 1;
                    r17 = r2 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x1b240;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1b240:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r2 = r2 << 24;
                    r3 = r5 + 3;
                    r2 = r2 >> 24;
                    r16 = r3 + r2;
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r16 = r16 & 65535;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b308;
                        continue;
                    }
                case 0x1b268:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b274;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1b274:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b2b0;
                        continue;
                    }
                    r7 = r2 + r0;
                case 0x1b280:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = 7 << 16;
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r6 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = r5 + -11292;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x1b2b0:
                    r19 = 13 << 16;
                    r2 = (r16&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r4 = r19 + 32160;
                    r5 = r0 + 32;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b2e8;
                        continue;
                    }
                    r6 = 7 << 16;
                    r7 = r16 + r0;
                    r6 = r6 + -9064;
                    /* Next insn is delay slot */ 
                    r31=0x1b2dc;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1b2dc:
                    r7 = r19 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x1b280;
                    continue;
                case 0x1b2e8:
                    r6 = 7 << 16;
                    r7 = r16 + r0;
                    r6 = r6 + -11524;
                    /* Next insn is delay slot */ 
                    r31=0x1b2fc;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1b2fc:
                    r7 = r19 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x1b280;
                    continue;
                case 0x1b308:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b314;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1b314:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b328;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b328;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1b328:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1b268;
                    continue;
                case 0x1b400:
                    pc=0x1b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b400() throws ExecutionException { /* 0x1b400 - 0x1b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b400:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1b428;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1b428:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b4dc;
                        continue;
                    }
                case 0x1b440:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b4b8;
                        continue;
                    }
                case 0x1b44c:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r6 = r6 + -11524;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b46c;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1b46c:
                    r6 = r18 + 32160;
                case 0x1b470:
                    r5 = 7 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + -11456;
                    /* Next insn is delay slot */ 
                    r31=0x1b484;
                    pc=0x16000;
                    run_16000(); return;
                case 0x1b484:
                    addr=r28+-32727;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b49c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1b49c;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x1b49c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x23600;
                    run_23600(); return;
                case 0x1b4b8:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b4c8;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1b4c8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b44c;
                        continue;
                    }
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1b470;
                    continue;
                case 0x1b4dc:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b4e8;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1b4e8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b53c;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b530;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b53c;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b53c;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b53c;
                        continue;
                    }
                case 0x1b530:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b53c;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1b53c:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1b440;
                    continue;
                case 0x1b600:
                    pc=0x1b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b600() throws ExecutionException { /* 0x1b600 - 0x1b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b600:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r0 | 65280;
                    /* Next insn is delay slot */ 
                    r31=0x1b62c;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1b62c:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r17;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b6e0;
                        continue;
                    }
                case 0x1b644:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b69c;
                        continue;
                    }
                case 0x1b650:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -9064;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b670;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1b670:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + 32160;
                    r4 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r5 = r5 + 18480;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x1b69c:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b6ac;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1b6ac:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b650;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r2 + r0;
                    r5 = r5 + 18480;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x16000;
                    run_16000(); return;
                case 0x1b6e0:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b6ec;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1b6ec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b740;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b734;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b740;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b740;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b740;
                        continue;
                    }
                case 0x1b734:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b740;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1b740:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1b644;
                    continue;
                case 0x1b800:
                    pc=0x1b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b800() throws ExecutionException { /* 0x1b800 - 0x1ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1b81c;
                    pc=0x22800;
                    run_22800(); return;
                case 0x1b81c:
                    r4 = 7 << 16;
                    r4 = r4 + 18480;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b830;
                    pc=0x22600;
                    run_22600(); return;
                case 0x1b830:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    addr=r16+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x1b840;
                    pc=0x24400;
                    run_24400(); return;
                case 0x1b840:
                    /* Next insn is delay slot */ 
                    r31=0x1b848;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x1b848:
                    addr=r28+-32728;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b860;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1b860;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x1b860:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x23600;
                    run_23600(); return;
                case 0x1ba00:
                    pc=0x1ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ba00() throws ExecutionException { /* 0x1ba00 - 0x1bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ba00:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    r31=0x1ba2c;
                    pc=0x13800;
                    run_13800(); return;
                case 0x1ba2c:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1bb54;
                        continue;
                    }
                    r2 = r18 + r0;
                case 0x1ba48:
                    r3 = r2 & 32;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ba60;
                        continue;
                    }
                    r3 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bb44;
                        continue;
                    }
                case 0x1ba60:
                    r18 = 7 << 16;
                    r18 = r18 + -7564;
                case 0x1ba68:
                    r2 = r2 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1baac;
                        continue;
                    }
                case 0x1ba74:
                    r2 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bb18;
                        continue;
                    }
                    r19 = 13 << 16;
                    r6 = 7 << 16;
                    r7 = r17 + r0;
                    r4 = r19 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -9064;
                    /* Next insn is delay slot */ 
                    r31=0x1baa0;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1baa0:
                    r7 = r19 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x1bac8;
                    continue;
                case 0x1baac:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1babc;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1babc:
                    r7 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ba74;
                        continue;
                    }
                case 0x1bac8:
                    r5 = 7 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + -11496;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bae0;
                    pc=0x16000;
                    run_16000(); return;
                case 0x1bae0:
                    addr=r28+-32727;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1baf8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1baf8;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x1baf8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x23600;
                    run_23600(); return;
                case 0x1bb18:
                    r19 = 13 << 16;
                    r6 = 7 << 16;
                    r7 = r17 + r0;
                    r4 = r19 + 32160;
                    r5 = r0 + 32;
                    r6 = r6 + -11524;
                    /* Next insn is delay slot */ 
                    r31=0x1bb38;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1bb38:
                    r7 = r19 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x1bac8;
                    continue;
                case 0x1bb44:
                    r18 = 7 << 16;
                    r18 = r18 + -11500;
                    /* Next insn is delay slot */ 
                    pc=0x1ba68;
                    continue;
                case 0x1bb54:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bb60;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1bb60:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bbb4;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bba8;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bbb4;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bbb4;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bbb4;
                        continue;
                    }
                case 0x1bba8:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bbb4;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1bbb4:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1ba48;
                    continue;
                case 0x1bc00:
                    pc=0x1bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1bc00() throws ExecutionException { /* 0x1bc00 - 0x1be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1bc00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1bc28;
                    pc=0x13800;
                    run_13800(); return;
                case 0x1bc28:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1bd14;
                        continue;
                    }
                case 0x1bc40:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc84;
                        continue;
                    }
                case 0x1bc4c:
                    r2 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bce8;
                        continue;
                    }
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r6 = r6 + -9064;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bc78;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1bc78:
                    r6 = r18 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x1bca0;
                    continue;
                case 0x1bc84:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bc94;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1bc94:
                    r6 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc4c;
                        continue;
                    }
                case 0x1bca0:
                    r5 = 7 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + -11456;
                    /* Next insn is delay slot */ 
                    r31=0x1bcb4;
                    pc=0x16000;
                    run_16000(); return;
                case 0x1bcb4:
                    addr=r28+-32727;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bccc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1bccc;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x1bccc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x23600;
                    run_23600(); return;
                case 0x1bce8:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r6 = r6 + -11524;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bd08;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1bd08:
                    r6 = r18 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x1bca0;
                    continue;
                case 0x1bd14:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bd20;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1bd20:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bd74;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bd68;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bd74;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bd74;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bd74;
                        continue;
                    }
                case 0x1bd68:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bd74;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1bd74:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1bc40;
                    continue;
                case 0x1be00:
                    pc=0x1be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1be00() throws ExecutionException { /* 0x1be00 - 0x1c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1be00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1be28;
                    pc=0x13800;
                    run_13800(); return;
                case 0x1be28:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r0 + 1;
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf14;
                        continue;
                    }
                case 0x1be40:
                    r18 = r18 & 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1be84;
                        continue;
                    }
                case 0x1be4c:
                    r2 = (r17&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bee8;
                        continue;
                    }
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r6 = r6 + -9064;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1be78;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1be78:
                    r6 = r18 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x1bea0;
                    continue;
                case 0x1be84:
                    r5 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1be94;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1be94:
                    r6 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1be4c;
                        continue;
                    }
                case 0x1bea0:
                    r5 = 7 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + -11432;
                    /* Next insn is delay slot */ 
                    r31=0x1beb4;
                    pc=0x16000;
                    run_16000(); return;
                case 0x1beb4:
                    addr=r28+-32727;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1becc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1becc;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x1becc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x23600;
                    run_23600(); return;
                case 0x1bee8:
                    r18 = 13 << 16;
                    r6 = 7 << 16;
                    r6 = r6 + -11524;
                    r4 = r18 + 32160;
                    r5 = r0 + 32;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bf08;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1bf08:
                    r6 = r18 + 32160;
                    /* Next insn is delay slot */ 
                    pc=0x1bea0;
                    continue;
                case 0x1bf14:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bf20;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1bf20:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf74;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf68;
                        continue;
                    }
                    r18 = r18 & 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf74;
                        continue;
                    }
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf74;
                        continue;
                    }
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf74;
                        continue;
                    }
                case 0x1bf68:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bf74;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1bf74:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1be40;
                    continue;
                case 0x1c000:
                    pc=0x1c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c000() throws ExecutionException { /* 0x1c000 - 0x1c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c000:
                    r29 = r29 + -88;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r30;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r23;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r22;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r21;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x1c034;
                    pc=0x29200;
                    run_29200(); return;
                case 0x1c034:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c070;
                        continue;
                    }
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r30 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r23 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r22 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c070:
                    /* Next insn is delay slot */ 
                    r31=0x1c078;
                    pc=0x29400;
                    run_29400(); return;
                case 0x1c078:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c4a0;
                        run_1c400(); return;
                    }
                    r21 = 7 << 16;
                    r22 = 7 << 16;
                    r16 = 19 << 16;
                    r20 = 7 << 16;
                    r19 = 7 << 16;
                    r21 = r21 + -9772;
                    r22 = r22 + -10892;
                    r18 = r16 + -19968;
                case 0x1c0a8:
                    r5 = r0 + 5;
                    r4 = r20 + -9244;
                    r6 = r19 + -11280;
                    /* Next insn is delay slot */ 
                    r31=0x1c0bc;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x1c0bc:
                    r5 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r5 + -13;
                    r3 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c160;
                        continue;
                    }
                    r2 = r2 << 2;
                    r2 = r21 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x1c0ec:
                    /* Next insn is delay slot */ 
                    r31=0x1c0f4;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c0f4:
                    /* Next insn is delay slot */ 
                    r31=0x1c0fc;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1c0fc:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d344;
                        run_1d200(); return;
                    }
                    r3 = r0 + -1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r30 = r0 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r17 = 7 << 16;
                    r23 = 7 << 16;
                case 0x1c124:
                    r5 = r0 + 3;
                    r4 = r17 + -9596;
                    r6 = r23 + -10388;
                    /* Next insn is delay slot */ 
                    r31=0x1c138;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x1c138:
                    r5 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 35;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ca90;
                        run_1ca00(); return;
                    }
                    r2 = r0 + 46;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ca48;
                        run_1ca00(); return;
                    }
                    r2 = r0 + 34;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c848;
                        run_1c800(); return;
                    }
                case 0x1c160:
                    r4 = 7 << 16;
                    r4 = r4 + -11128;
                    /* Next insn is delay slot */ 
                    r31=0x1c170;
                    pc=0x15e00;
                    run_15e00(); return;
                case 0x1c170:
                    /* Next insn is delay slot */ 
                    r31=0x1c178;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c178:
                    /* Next insn is delay slot */ 
                    r31=0x1c180;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1c180:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d3bc;
                        run_1d200(); return;
                    }
                    r3 = r0 + -1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r30 = r0 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r17 = 7 << 16;
                    r23 = 7 << 16;
                case 0x1c1a8:
                    r5 = r0 + 3;
                    r4 = r17 + -9268;
                    r6 = r23 + -11260;
                    /* Next insn is delay slot */ 
                    r31=0x1c1bc;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x1c1bc:
                    r5 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 51;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c9fc;
                        run_1c800(); return;
                    }
                    r2 = r0 + 52;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c9a8;
                        run_1c800(); return;
                    }
                    r2 = r0 + 50;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c160;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1c1ec;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c1ec:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c204;
                        run_1c200(); return;
                    }
                    r2 = 7 << 16;
                    r4 = r2 + -11212;
                    /* Next insn is delay slot */ 
                    r31=0x1c204;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1c200:
                    pc=0x1c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c200() throws ExecutionException { /* 0x1c200 - 0x1c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c200:
                case 0x1c204:
                    /* Next insn is delay slot */ 
                    r31=0x1c20c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1c20c:
                    addr=r16+-19968;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cfe0;
                        run_1ce00(); return;
                    }
                case 0x1c21c:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c228;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1c228:
                    r30 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c234;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c234:
                    /* Next insn is delay slot */ 
                    r31=0x1c23c;
                    pc=0x27800;
                    run_27800(); return;
                case 0x1c23c:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c1a8;
                        run_1c000(); return;
                    }
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d3c8;
                        run_1d200(); return;
                    }
                case 0x1c254:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d334;
                        run_1d200(); return;
                    }
                case 0x1c264:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c278;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                case 0x1c278:
                    r5 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c28c;
                    pc=0x11400;
                    run_11400(); return;
                case 0x1c28c:
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c298;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x1c298:
                    /* Next insn is delay slot */ 
                    r31=0x1c2a0;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c2a0:
                    /* Next insn is delay slot */ 
                    pc=0x1c488;
                    run_1c400(); return;
                case 0x1c2a8:
                    /* Next insn is delay slot */ 
                    r31=0x1c2b0;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c2b0:
                    /* Next insn is delay slot */ 
                    r31=0x1c2b8;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1c2b8:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d38c;
                        run_1d200(); return;
                    }
                    r3 = r0 + -1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r30 = r0 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r23 = 7 << 16;
                    r17 = 7 << 16;
                case 0x1c2e4:
                    r5 = r0 + 4;
                    r4 = r23 + -9460;
                    r6 = r17 + -10908;
                    /* Next insn is delay slot */ 
                    r31=0x1c2f8;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x1c2f8:
                    r5 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 47;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1cb40;
                        run_1ca00(); return;
                    }
                    r2 = (r5&0xffffffffL) < (48&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c954;
                        run_1c800(); return;
                    }
                    r2 = r0 + 48;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1cae8;
                        run_1ca00(); return;
                    }
                    r2 = r0 + 49;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c160;
                        run_1c000(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1c334;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c334:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c354;
                        continue;
                    }
                    r2 = 7 << 16;
                    r4 = r2 + -10800;
                    /* Next insn is delay slot */ 
                    r31=0x1c354;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1c354:
                    /* Next insn is delay slot */ 
                    r31=0x1c35c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1c35c:
                    r4 = r0 + 1;
                    r5 = 1 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x1c36c;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1c36c:
                    r3 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1c380;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c380:
                    /* Next insn is delay slot */ 
                    r31=0x1c388;
                    pc=0x27800;
                    run_27800(); return;
                case 0x1c388:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c2e4;
                        continue;
                    }
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d3a0;
                        run_1d200(); return;
                    }
                case 0x1c3a4:
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c3d8;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c3d8;
                        continue;
                    }
                    r4 = 7 << 16;
                    r4 = r4 + -10756;
                    /* Next insn is delay slot */ 
                    r31=0x1c3d8;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1c3d8:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d3e4;
                        run_1d200(); return;
                    }
                case 0x1c3e8:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d30c;
                        run_1d200(); return;
                    }
                case 0x1c3f8:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x1c400:
                    pc=0x1c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c400() throws ExecutionException { /* 0x1c400 - 0x1c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c400:
                    r2 = r3 + r4;
                    r3 = 1 << 16;
                    r3 = r3 + 1;
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d2d8;
                        run_1d200(); return;
                    }
                case 0x1c41c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c428;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1c428:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d2f0;
                        run_1d200(); return;
                    }
                case 0x1c430:
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r4 = r17 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d234;
                        run_1d200(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1c448;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x1c448:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c468;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c468;
                    pc=0x14200;
                    run_14200(); return;
                case 0x1c468:
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c474;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x1c474:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c480;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x1c480:
                    /* Next insn is delay slot */ 
                    r31=0x1c488;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c488:
                    /* Next insn is delay slot */ 
                    r31=0x1c490;
                    pc=0x27800;
                    run_27800(); return;
                case 0x1c490:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c0a8;
                        run_1c000(); return;
                    }
                case 0x1c4a0:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r30 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r23 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r22 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=0x29600;
                    run_29600(); return;
                case 0x1c4d4:
                    /* Next insn is delay slot */ 
                    r31=0x1c4dc;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c4dc:
                    /* Next insn is delay slot */ 
                    r31=0x1c4e4;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1c4e4:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d364;
                        run_1d200(); return;
                    }
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    r17 = r0 + r0;
                    r23 = 7 << 16;
                    r30 = 7 << 16;
                case 0x1c518:
                    r5 = r0 + 5;
                    r4 = r23 + -9500;
                    r6 = r30 + -10612;
                    /* Next insn is delay slot */ 
                    r31=0x1c52c;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x1c52c:
                    r5 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r5 + -34;
                    r3 = (r2&0xffffffffL) < (14&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c160;
                        run_1c000(); return;
                    }
                    r4 = 7 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + -9752;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x1c564:
                    /* Next insn is delay slot */ 
                    r31=0x1c56c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c56c:
                    /* Next insn is delay slot */ 
                    r31=0x1c574;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1c574:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c480;
                        continue;
                    }
                    r30 = 7 << 16;
                    r23 = 7 << 16;
                    r17 = 7 << 16;
                    r30 = r30 + -9696;
                case 0x1c594:
                    r5 = r0 + 20;
                    r4 = r23 + -9428;
                    r6 = r17 + -11080;
                    /* Next insn is delay slot */ 
                    r31=0x1c5a8;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x1c5a8:
                    r5 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r5 + -18;
                    r3 = (r2&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c160;
                        run_1c000(); return;
                    }
                    r2 = r2 << 2;
                    r2 = r30 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x1c5d8:
                    r2 = r17 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d0c4;
                        run_1d000(); return;
                    }
                case 0x1c5e4:
                    /* Next insn is delay slot */ 
                    r31=0x1c5ec;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c5ec:
                    /* Next insn is delay slot */ 
                    r31=0x1c5f4;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1c5f4:
                    addr=r16+-19968;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r17 = r17 | 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d06c;
                        run_1d000(); return;
                    }
                case 0x1c600:
                    pc=0x1c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c600() throws ExecutionException { /* 0x1c600 - 0x1c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c600:
                case 0x1c604:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c610;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1c610:
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1c61c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c61c:
                    /* Next insn is delay slot */ 
                    pc=0x1c664;
                    continue;
                case 0x1c624:
                    r2 = r17 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d0a4;
                        run_1d000(); return;
                    }
                case 0x1c630:
                    /* Next insn is delay slot */ 
                    r31=0x1c638;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c638:
                    /* Next insn is delay slot */ 
                    r31=0x1c640;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1c640:
                    r4 = r0 + r0;
                    r5 = r0 | 65535;
                    /* Next insn is delay slot */ 
                    r31=0x1c650;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1c650:
                    r3 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    r17 = r17 | 2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1c664;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c664:
                    /* Next insn is delay slot */ 
                    r31=0x1c66c;
                    pc=0x27800;
                    run_27800(); return;
                case 0x1c66c:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c518;
                        run_1c400(); return;
                    }
                    r3 = r17 & 7;
                    r2 = r0 + 7;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d270;
                        run_1d200(); return;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r30 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r23 = r3 + 1;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r17 = r17 & 8;
                    r23 = r23 - r3;
                case 0x1c6a4:
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d2a4;
                        run_1d200(); return;
                    }
                case 0x1c6b8:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        if(r3!=0) {
                        hi = (int)((r23 & 0xffffffffL) % (r3 & 0xffffffffL)); lo = (int)((r23 & 0xffffffffL) / (r3 & 0xffffffffL));
                        }
                        pc=0x1c6cc;
                        continue;
                    }
                    if(r3!=0) {
                    hi = (int)((r23 & 0xffffffffL) % (r3 & 0xffffffffL)); lo = (int)((r23 & 0xffffffffL) / (r3 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x1c6cc:
                    r2 = hi;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d2bc;
                        run_1d200(); return;
                    }
                case 0x1c6d8:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c6ec;
                    pc=0x12600;
                    run_12600(); return;
                case 0x1c6ec:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c480;
                        run_1c400(); return;
                    }
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c704;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x1c704:
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c724;
                        continue;
                    }
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c724;
                    pc=0x14200;
                    run_14200(); return;
                case 0x1c724:
                    r4 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c730;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x1c730:
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c73c;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x1c73c:
                    /* Next insn is delay slot */ 
                    pc=0x1c480;
                    run_1c400(); return;
                case 0x1c744:
                    r2 = r17 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d084;
                        run_1d000(); return;
                    }
                case 0x1c750:
                    /* Next insn is delay slot */ 
                    r31=0x1c758;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c758:
                    /* Next insn is delay slot */ 
                    r31=0x1c760;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1c760:
                    addr=r16+-19968;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r17 = r17 | 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d054;
                        run_1d000(); return;
                    }
                case 0x1c770:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c77c;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1c77c:
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1c788;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c788:
                    /* Next insn is delay slot */ 
                    pc=0x1c664;
                    continue;
                case 0x1c790:
                    r2 = r17 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d034;
                        run_1d000(); return;
                    }
                case 0x1c79c:
                    /* Next insn is delay slot */ 
                    r31=0x1c7a4;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c7a4:
                    /* Next insn is delay slot */ 
                    r31=0x1c7ac;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1c7ac:
                    r4 = r0 + r0;
                    r5 = r0 | 65535;
                    /* Next insn is delay slot */ 
                    r31=0x1c7bc;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1c7bc:
                    r3 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    r17 = r17 | 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1c7d0;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c7d0:
                    /* Next insn is delay slot */ 
                    pc=0x1c664;
                    continue;
                case 0x1c7d8:
                    r2 = r17 & 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d010;
                        run_1d000(); return;
                    }
                    r2 = 7 << 16;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                case 0x1c7ec:
                    /* Next insn is delay slot */ 
                    r31=0x1c7f4;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c7f4:
                    r3 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = 7 << 16;
                    r4 = r2 + -9572;
                case 0x1c800:
                    pc=0x1c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c800() throws ExecutionException { /* 0x1c800 - 0x1ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c800:
                    r6 = r3 + -10528;
                    r5 = r0 + 9;
                    /* Next insn is delay slot */ 
                    r31=0x1c810;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x1c810:
                    r2 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r17 = r17 | 4;
                    r2 = r2 + -37;
                    r3 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d0f4;
                        run_1d000(); return;
                    }
                    r4 = 7 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + -9632;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x1c848:
                    /* Next insn is delay slot */ 
                    r31=0x1c850;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c850:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c86c;
                        continue;
                    }
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c86c;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1c86c:
                    /* Next insn is delay slot */ 
                    r31=0x1c874;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1c874:
                    r4 = r0 + r0;
                    r5 = r0 | 65535;
                    /* Next insn is delay slot */ 
                    r31=0x1c884;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1c884:
                    r3 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1c898;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c898:
                    /* Next insn is delay slot */ 
                    r31=0x1c8a0;
                    pc=0x27800;
                    run_27800(); return;
                case 0x1c8a0:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c124;
                        run_1c000(); return;
                    }
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d24c;
                        run_1d200(); return;
                    }
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r23 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d254;
                        run_1d200(); return;
                    }
                    r3 = r23 + r0;
                case 0x1c8d0:
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d418;
                        run_1d400(); return;
                    }
                case 0x1c8d8:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d3fc;
                        run_1d200(); return;
                    }
                case 0x1c8e8:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r4 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d31c;
                        run_1d200(); return;
                    }
                case 0x1c8fc:
                    r4 = r17 + r0;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c90c;
                    pc=0x11e00;
                    run_11e00(); return;
                case 0x1c90c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c924;
                        continue;
                    }
                    r3 = 7 << 16;
                    r4 = r3 + -10236;
                    /* Next insn is delay slot */ 
                    r31=0x1c924;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1c924:
                    r4 = r17 + r0;
                    r5 = r23 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c938;
                    pc=0x29800;
                    run_29800(); return;
                case 0x1c938:
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c944;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x1c944:
                    /* Next insn is delay slot */ 
                    r31=0x1c94c;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c94c:
                    /* Next insn is delay slot */ 
                    pc=0x1c488;
                    run_1c400(); return;
                case 0x1c954:
                    r2 = r0 + 46;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c160;
                        run_1c000(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1c968;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c968:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c980;
                        continue;
                    }
                    r4 = 7 << 16;
                    r4 = r4 + -10820;
                    /* Next insn is delay slot */ 
                    r31=0x1c980;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1c980:
                    /* Next insn is delay slot */ 
                    r31=0x1c988;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1c988:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c994;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1c994:
                    r30 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c9a0;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c9a0:
                    /* Next insn is delay slot */ 
                    pc=0x1c380;
                    run_1c200(); return;
                case 0x1c9a8:
                    /* Next insn is delay slot */ 
                    r31=0x1c9b0;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c9b0:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c9d0;
                        continue;
                    }
                    r4 = 7 << 16;
                    r4 = r4 + -11160;
                    /* Next insn is delay slot */ 
                    r31=0x1c9d0;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1c9d0:
                    /* Next insn is delay slot */ 
                    r31=0x1c9d8;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x1c9d8:
                    r2 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r2 ^ 54;
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1c9f4;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1c9f4:
                    /* Next insn is delay slot */ 
                    pc=0x1c234;
                    run_1c200(); return;
                case 0x1c9fc:
                    /* Next insn is delay slot */ 
                    r31=0x1ca04;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1ca00:
                    pc=0x1ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ca00() throws ExecutionException { /* 0x1ca00 - 0x1cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ca00:
                case 0x1ca04:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ca24;
                        continue;
                    }
                    r4 = 7 << 16;
                    r4 = r4 + -11240;
                    /* Next insn is delay slot */ 
                    r31=0x1ca24;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1ca24:
                    /* Next insn is delay slot */ 
                    r31=0x1ca2c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1ca2c:
                    addr=r28+-32249;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1ca40;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1ca40:
                    /* Next insn is delay slot */ 
                    pc=0x1c234;
                    run_1c200(); return;
                case 0x1ca48:
                    /* Next insn is delay slot */ 
                    r31=0x1ca50;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1ca50:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ca68;
                        continue;
                    }
                    r2 = 7 << 16;
                    r4 = r2 + -10820;
                    /* Next insn is delay slot */ 
                    r31=0x1ca68;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1ca68:
                    /* Next insn is delay slot */ 
                    r31=0x1ca70;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1ca70:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ca7c;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1ca7c:
                    r30 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ca88;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1ca88:
                    /* Next insn is delay slot */ 
                    pc=0x1c898;
                    run_1c800(); return;
                case 0x1ca90:
                    /* Next insn is delay slot */ 
                    r31=0x1ca98;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1ca98:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cab4;
                        continue;
                    }
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1cab4;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1cab4:
                    /* Next insn is delay slot */ 
                    r31=0x1cabc;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1cabc:
                    r4 = r0 + r0;
                    r5 = r0 | 65535;
                    /* Next insn is delay slot */ 
                    r31=0x1cacc;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1cacc:
                    r3 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1cae0;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cae0:
                    /* Next insn is delay slot */ 
                    pc=0x1c898;
                    run_1c800(); return;
                case 0x1cae8:
                    /* Next insn is delay slot */ 
                    r31=0x1caf0;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1caf0:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cb0c;
                        continue;
                    }
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1cb0c;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1cb0c:
                    /* Next insn is delay slot */ 
                    r31=0x1cb14;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1cb14:
                    r4 = r0 + r0;
                    r5 = r0 | 65535;
                    /* Next insn is delay slot */ 
                    r31=0x1cb24;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1cb24:
                    r3 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1cb38;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cb38:
                    /* Next insn is delay slot */ 
                    pc=0x1c380;
                    run_1c200(); return;
                case 0x1cb40:
                    /* Next insn is delay slot */ 
                    r31=0x1cb48;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cb48:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cb68;
                        continue;
                    }
                    r2 = 7 << 16;
                    r4 = r2 + -10872;
                    /* Next insn is delay slot */ 
                    r31=0x1cb68;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1cb68:
                    /* Next insn is delay slot */ 
                    r31=0x1cb70;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1cb70:
                    addr=r16+-19968;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cff8;
                        run_1ce00(); return;
                    }
                case 0x1cb80:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1cb8c;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1cb8c:
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1cb98;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cb98:
                    /* Next insn is delay slot */ 
                    pc=0x1c380;
                    run_1c200(); return;
                case 0x1cba0:
                    /* Next insn is delay slot */ 
                    r31=0x1cba8;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cba8:
                    /* Next insn is delay slot */ 
                    r31=0x1cbb0;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1cbb0:
                    r2 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    writePages[(r28+-32736)>>>12][((r28+-32736)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1cbc4;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cbc4:
                    /* Next insn is delay slot */ 
                    r31=0x1cbcc;
                    pc=0x27800;
                    run_27800(); return;
                case 0x1cbcc:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c594;
                        run_1c400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1c480;
                    run_1c400(); return;
                case 0x1cbe4:
                    /* Next insn is delay slot */ 
                    r31=0x1cbec;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cbec:
                    /* Next insn is delay slot */ 
                    r31=0x1cbf4;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1cbf4:
                    r2 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc14;
                        run_1cc00(); return;
                    }
                case 0x1cc00:
                    pc=0x1cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1cc00() throws ExecutionException { /* 0x1cc00 - 0x1ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1cc00:
                    r4 = 7 << 16;
                    r4 = r4 + -11036;
                    /* Next insn is delay slot */ 
                    r31=0x1cc14;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1cc14:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1cc20;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1cc20:
                    writePages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1cc2c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cc2c:
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1cc34:
                    /* Next insn is delay slot */ 
                    r31=0x1cc3c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cc3c:
                    /* Next insn is delay slot */ 
                    r31=0x1cc44;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x1cc44:
                    r2 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r3 = r0 + 53;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1d200;
                        run_1d200(); return;
                    }
                    r3 = r0 + 54;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc64;
                        continue;
                    }
                    addr=r28+-32400;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1cc64:
                    /* Next insn is delay slot */ 
                    r31=0x1cc6c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cc6c:
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1cc74:
                    /* Next insn is delay slot */ 
                    r31=0x1cc7c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cc7c:
                    /* Next insn is delay slot */ 
                    r31=0x1cc84;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1cc84:
                    r3 = readPages[(r28+-32668)>>>12][((r28+-32668)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1cca4;
                        continue;
                    }
                    r4 = 7 << 16;
                    r4 = r4 + -11060;
                    /* Next insn is delay slot */ 
                    r31=0x1cca4;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1cca4:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ccb0;
                    pc=0x2d000;
                    run_2d000(); return;
                case 0x1ccb0:
                    r4 = r2 + r0;
                    writePages[(r28+-32668)>>>12][((r28+-32668)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ccc0;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1ccc0:
                    /* Next insn is delay slot */ 
                    r31=0x1ccc8;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1ccc8:
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1ccd0:
                    /* Next insn is delay slot */ 
                    r31=0x1ccd8;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1ccd8:
                    /* Next insn is delay slot */ 
                    r31=0x1cce0;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1cce0:
                    r4 = r0 + r0;
                    r5 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x1ccf0;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1ccf0:
                    r2 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    writePages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1cd04;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cd04:
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1cd0c:
                    /* Next insn is delay slot */ 
                    r31=0x1cd14;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cd14:
                    /* Next insn is delay slot */ 
                    r31=0x1cd1c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1cd1c:
                    r4 = r0 + 1;
                    r5 = r0 + 127;
                    /* Next insn is delay slot */ 
                    r31=0x1cd2c;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1cd2c:
                    r2 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    writePages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1cd40;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cd40:
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1cd48:
                    /* Next insn is delay slot */ 
                    r31=0x1cd50;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cd50:
                    /* Next insn is delay slot */ 
                    r31=0x1cd58;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1cd58:
                    r4 = r0 + 1;
                    r5 = r0 + 127;
                    /* Next insn is delay slot */ 
                    r31=0x1cd68;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1cd68:
                    r2 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    writePages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1cd7c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cd7c:
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1cd84:
                    /* Next insn is delay slot */ 
                    r31=0x1cd8c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cd8c:
                    /* Next insn is delay slot */ 
                    r31=0x1cd94;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1cd94:
                    r4 = r0 + 1;
                    r5 = r0 + 127;
                    /* Next insn is delay slot */ 
                    r31=0x1cda4;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1cda4:
                    r2 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    writePages[(r28+-32760)>>>12][((r28+-32760)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1cdb8;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cdb8:
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1cdc0:
                    /* Next insn is delay slot */ 
                    r31=0x1cdc8;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cdc8:
                    /* Next insn is delay slot */ 
                    r31=0x1cdd0;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1cdd0:
                    r4 = r0 + r0;
                    r5 = r0 | 65535;
                    /* Next insn is delay slot */ 
                    r31=0x1cde0;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1cde0:
                    r2 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    writePages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1cdf4;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cdf4:
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1cdfc:
                    /* Next insn is delay slot */ 
                    r31=0x1ce04;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1ce00:
                    pc=0x1ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ce00() throws ExecutionException { /* 0x1ce00 - 0x1d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ce00:
                case 0x1ce04:
                    /* Next insn is delay slot */ 
                    r31=0x1ce0c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1ce0c:
                    r2 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d218;
                        run_1d200(); return;
                    }
                    r2 = r0 + r0;
                case 0x1ce20:
                    writePages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ce2c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1ce2c:
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1ce34:
                    /* Next insn is delay slot */ 
                    r31=0x1ce3c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1ce3c:
                    addr=r28+-32727;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ce5c;
                        continue;
                    }
                    r2 = 7 << 16;
                    r4 = r2 + -11004;
                    /* Next insn is delay slot */ 
                    r31=0x1ce5c;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1ce5c:
                    /* Next insn is delay slot */ 
                    r31=0x1ce64;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x1ce64:
                    r2 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r2 ^ 54;
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r28+-32727;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x1ce80;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1ce80:
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1ce88:
                    /* Next insn is delay slot */ 
                    r31=0x1ce90;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1ce90:
                    /* Next insn is delay slot */ 
                    r31=0x1ce98;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1ce98:
                    r2 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ceb8;
                        continue;
                    }
                    r3 = 7 << 16;
                    r4 = r3 + -10940;
                    /* Next insn is delay slot */ 
                    r31=0x1ceb8;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1ceb8:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1cec4;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1cec4:
                    writePages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ced0;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1ced0:
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1ced8:
                    /* Next insn is delay slot */ 
                    r31=0x1cee0;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cee0:
                    /* Next insn is delay slot */ 
                    r31=0x1cee8;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x1cee8:
                    addr=r28+-32728;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1cf08;
                        continue;
                    }
                    r4 = 7 << 16;
                    r4 = r4 + -10972;
                    /* Next insn is delay slot */ 
                    r31=0x1cf08;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1cf08:
                    r2 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r2 ^ 54;
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r28+-32728;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x1cf24;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cf24:
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1cf2c:
                    /* Next insn is delay slot */ 
                    r31=0x1cf34;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cf34:
                    /* Next insn is delay slot */ 
                    r31=0x1cf3c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1cf3c:
                    r4 = r0 + r0;
                    r5 = r0 + 255;
                    /* Next insn is delay slot */ 
                    r31=0x1cf4c;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1cf4c:
                    addr=r28+-32249;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32744)>>>12][((r28+-32744)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1cf60;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cf60:
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1cf68:
                    /* Next insn is delay slot */ 
                    r31=0x1cf70;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cf70:
                    /* Next insn is delay slot */ 
                    r31=0x1cf78;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1cf78:
                    r4 = r0 + 1;
                    r5 = 1 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x1cf88;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1cf88:
                    r2 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    writePages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1cf9c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cf9c:
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1cfa4:
                    /* Next insn is delay slot */ 
                    r31=0x1cfac;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cfac:
                    /* Next insn is delay slot */ 
                    r31=0x1cfb4;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1cfb4:
                    r4 = r0 + 1;
                    r5 = r0 + 127;
                    /* Next insn is delay slot */ 
                    r31=0x1cfc4;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1cfc4:
                    r2 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    writePages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1cfd8;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1cfd8:
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1cfe0:
                    r4 = 7 << 16;
                    r4 = r4 + -11188;
                    /* Next insn is delay slot */ 
                    r31=0x1cff0;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1cff0:
                    /* Next insn is delay slot */ 
                    pc=0x1c21c;
                    run_1c200(); return;
                case 0x1cff8:
                    r4 = 7 << 16;
                    r4 = r4 + -10848;
                case 0x1d000:
                    pc=0x1d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d000() throws ExecutionException { /* 0x1d000 - 0x1d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d000:
                    /* Next insn is delay slot */ 
                    r31=0x1d008;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d008:
                    /* Next insn is delay slot */ 
                    pc=0x1cb80;
                    run_1ca00(); return;
                case 0x1d010:
                    r3 = 7 << 16;
                    r4 = 7 << 16;
                    r4 = r4 + -10596;
                    r5 = r3 + -10528;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1d02c;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d02c:
                    /* Next insn is delay slot */ 
                    pc=0x1c7ec;
                    run_1c600(); return;
                case 0x1d034:
                    r4 = 7 << 16;
                    r5 = 7 << 16;
                    r4 = r4 + -10596;
                    r5 = r5 + -10536;
                    /* Next insn is delay slot */ 
                    r31=0x1d04c;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d04c:
                    /* Next insn is delay slot */ 
                    pc=0x1c79c;
                    run_1c600(); return;
                case 0x1d054:
                    r4 = 7 << 16;
                    r4 = r4 + -10848;
                    /* Next insn is delay slot */ 
                    r31=0x1d064;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d064:
                    /* Next insn is delay slot */ 
                    pc=0x1c770;
                    run_1c600(); return;
                case 0x1d06c:
                    r4 = 7 << 16;
                    r4 = r4 + -10560;
                    /* Next insn is delay slot */ 
                    r31=0x1d07c;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d07c:
                    /* Next insn is delay slot */ 
                    pc=0x1c604;
                    run_1c600(); return;
                case 0x1d084:
                    r4 = 7 << 16;
                    r5 = 7 << 16;
                    r4 = r4 + -10596;
                    r5 = r5 + -10580;
                    /* Next insn is delay slot */ 
                    r31=0x1d09c;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d09c:
                    /* Next insn is delay slot */ 
                    pc=0x1c750;
                    run_1c600(); return;
                case 0x1d0a4:
                    r4 = 7 << 16;
                    r5 = 7 << 16;
                    r4 = r4 + -10596;
                    r5 = r5 + -10572;
                    /* Next insn is delay slot */ 
                    r31=0x1d0bc;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d0bc:
                    /* Next insn is delay slot */ 
                    pc=0x1c630;
                    run_1c600(); return;
                case 0x1d0c4:
                    r4 = 7 << 16;
                    r5 = 7 << 16;
                    r4 = r4 + -10596;
                    r5 = r5 + -10568;
                    /* Next insn is delay slot */ 
                    r31=0x1d0dc;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d0dc:
                    /* Next insn is delay slot */ 
                    pc=0x1c5e4;
                    run_1c400(); return;
                case 0x1d0e4:
                    r3 = r0 + 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r3 = r0 + 7;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                case 0x1d0f4:
                    /* Next insn is delay slot */ 
                    r31=0x1d0fc;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1d0fc:
                    /* Next insn is delay slot */ 
                    pc=0x1c664;
                    run_1c600(); return;
                case 0x1d104:
                    r3 = r0 + 4;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r3 = r0 + 6;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1d11c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1d11c:
                    /* Next insn is delay slot */ 
                    pc=0x1c664;
                    run_1c600(); return;
                case 0x1d124:
                    r3 = r0 + 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r3 = r0 + 5;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1d13c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1d13c:
                    /* Next insn is delay slot */ 
                    pc=0x1c664;
                    run_1c600(); return;
                case 0x1d144:
                    r3 = r0 + 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r3 = r0 + 4;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1d15c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1d15c:
                    /* Next insn is delay slot */ 
                    pc=0x1c664;
                    run_1c600(); return;
                case 0x1d164:
                    r3 = r0 + 1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r3 = r0 + 3;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1d17c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1d17c:
                    /* Next insn is delay slot */ 
                    pc=0x1c664;
                    run_1c600(); return;
                case 0x1d184:
                    r3 = r0 + 1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r3 = r0 + 10;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1d19c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1d19c:
                    /* Next insn is delay slot */ 
                    pc=0x1c664;
                    run_1c600(); return;
                case 0x1d1a4:
                    r3 = r0 + 1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1d1b8;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1d1b8:
                    /* Next insn is delay slot */ 
                    pc=0x1c664;
                    run_1c600(); return;
                case 0x1d1c0:
                    r3 = r0 + 1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r3 = r0 + 9;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1d1d8;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1d1d8:
                    /* Next insn is delay slot */ 
                    pc=0x1c664;
                    run_1c600(); return;
                case 0x1d1e0:
                    r3 = r0 + 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r3 = r0 + 8;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1d1f8;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1d1f8:
                    /* Next insn is delay slot */ 
                    pc=0x1c664;
                    run_1c600(); return;
                case 0x1d200:
                    pc=0x1d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d200() throws ExecutionException { /* 0x1d200 - 0x1d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d200:
                    r2 = r0 + 1;
                    addr=r28+-32400;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x1d210;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1d210:
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1d218:
                    r4 = r0 + 32;
                    r5 = r0 + 127;
                    /* Next insn is delay slot */ 
                    r31=0x1d228;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1d228:
                    r2 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1ce20;
                    run_1ce00(); return;
                case 0x1d234:
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d244;
                    pc=0x1e400;
                    run_1e400(); return;
                case 0x1d244:
                    /* Next insn is delay slot */ 
                    pc=0x1c448;
                    run_1c400(); return;
                case 0x1d24c:
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r23 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x1d254:
                    r4 = 7 << 16;
                    r4 = r4 + -10368;
                    /* Next insn is delay slot */ 
                    r31=0x1d264;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d264:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1c8d0;
                    run_1c800(); return;
                case 0x1d270:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r30 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r23 = r3 + 1;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r17 = r17 & 8;
                    r23 = r23 - r3;
                case 0x1d288:
                    r4 = 7 << 16;
                    r4 = r4 + -10520;
                    /* Next insn is delay slot */ 
                    r31=0x1d298;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d298:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1c6a4;
                    run_1c600(); return;
                case 0x1d2a4:
                    r4 = 7 << 16;
                    r4 = r4 + -10476;
                    /* Next insn is delay slot */ 
                    r31=0x1d2b4;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d2b4:
                    /* Next insn is delay slot */ 
                    pc=0x1c6b8;
                    run_1c600(); return;
                case 0x1d2bc:
                    r4 = 7 << 16;
                    r4 = r4 + -10428;
                    r5 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d2d0;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d2d0:
                    /* Next insn is delay slot */ 
                    pc=0x1c6d8;
                    run_1c600(); return;
                case 0x1d2d8:
                    r4 = 7 << 16;
                    r4 = r4 + -10692;
                    /* Next insn is delay slot */ 
                    r31=0x1d2e8;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d2e8:
                    /* Next insn is delay slot */ 
                    pc=0x1c41c;
                    run_1c400(); return;
                case 0x1d2f0:
                    r4 = 7 << 16;
                    r5 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r4 + -10656;
                    /* Next insn is delay slot */ 
                    r31=0x1d304;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d304:
                    /* Next insn is delay slot */ 
                    pc=0x1c430;
                    run_1c400(); return;
                case 0x1d30c:
                    r3 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x1c3f8;
                    run_1c200(); return;
                case 0x1d31c:
                    r2 = 7 << 16;
                    r4 = r2 + -10292;
                    /* Next insn is delay slot */ 
                    r31=0x1d32c;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d32c:
                    /* Next insn is delay slot */ 
                    pc=0x1c8fc;
                    run_1c800(); return;
                case 0x1d334:
                    r3 = r0 + 59;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x1c264;
                    run_1c200(); return;
                case 0x1d344:
                    r3 = r0 + -1;
                    r23 = r0 + -1;
                    r17 = r0 + -1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r30 = r0 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x1d254;
                    continue;
                case 0x1d364:
                    r17 = r0 + r0;
                    r30 = r0 + r0;
                    r23 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x1d288;
                    continue;
                case 0x1d38c:
                    r3 = r0 + -1;
                    r17 = r0 + -1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                case 0x1d3a0:
                    r4 = 7 << 16;
                    r4 = r4 + -10780;
                    /* Next insn is delay slot */ 
                    r31=0x1d3b0;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d3b0:
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1c3a4;
                    run_1c200(); return;
                case 0x1d3bc:
                    r3 = r0 + -1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                case 0x1d3c8:
                    r4 = 7 << 16;
                    r4 = r4 + -11104;
                    /* Next insn is delay slot */ 
                    r31=0x1d3d8;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d3d8:
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1c254;
                    run_1c200(); return;
                case 0x1d3e4:
                    r4 = 7 << 16;
                    r4 = r4 + -10716;
                    /* Next insn is delay slot */ 
                    r31=0x1d3f4;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d3f4:
                    /* Next insn is delay slot */ 
                    pc=0x1c3e8;
                    run_1c200(); return;
                case 0x1d3fc:
                    r4 = 7 << 16;
                case 0x1d400:
                    pc=0x1d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d400() throws ExecutionException { /* 0x1d400 - 0x1d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d400:
                    r4 = r4 + -10320;
                    /* Next insn is delay slot */ 
                    r31=0x1d40c;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d40c:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1c8e8;
                    run_1c800(); return;
                case 0x1d418:
                    r4 = 7 << 16;
                    r4 = r4 + -10344;
                    /* Next insn is delay slot */ 
                    r31=0x1d428;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x1d428:
                    /* Next insn is delay slot */ 
                    pc=0x1c8d8;
                    run_1c800(); return;
                case 0x1d600:
                    pc=0x1d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d600() throws ExecutionException { /* 0x1d600 - 0x1d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d600:
                    r3 = 13 << 16;
                    r2 = r4 + r0;
                    r3 = r3 + 32224;
                    r4 = r4 << 2;
                    r3 = r4 + r3;
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r7 = r5 + r0;
                    r4 = r4 + -9204;
                    r5 = r2 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1d638;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1d638:
                case 0x1d800:
                    pc=0x1d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d800() throws ExecutionException { /* 0x1d800 - 0x1da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d800:
                    r29 = r29 + -32;
                    r6 = 7 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = 13 << 16;
                    r16 = r4 + r0;
                    r5 = r0 + 32;
                    r4 = r17 + 32192;
                    r6 = r6 + -9160;
                    r7 = r16 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1d834;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1d834:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d840;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1d840:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d894;
                        continue;
                    }
                    r3 = r0 + 32;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1d8d4;
                        continue;
                    }
                    r3 = 13 << 16;
                    r2 = r16 << 2;
                    r3 = r3 + 32224;
                    r2 = r2 + r3;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r17 + 32192;
                    /* Next insn is delay slot */ 
                    r31=0x1d874;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x1d874:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d8d4;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d894:
                    r4 = r17 + 32192;
                    /* Next insn is delay slot */ 
                    r31=0x1d8a0;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1d8a0:
                    r3 = 13 << 16;
                    r4 = r16 << 2;
                    r3 = r3 + 32224;
                    r3 = r4 + r3;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r5 = r0 + 32;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x12800;
                    run_12800(); return;
                case 0x1d8d4:
                    r4 = r16 + r0;
                    r5 = r17 + 32192;
                    /* Next insn is delay slot */ 
                    r31=0x1d8e4;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x1d8e4:
                case 0x1da00:
                    pc=0x1da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1da00() throws ExecutionException { /* 0x1da00 - 0x1dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1da00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1da20;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1da20:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1da7c;
                        continue;
                    }
                    r3 = r0 + 16;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1dacc;
                        continue;
                    }
                    r3 = 13 << 16;
                    r2 = r17 << 2;
                    r3 = r3 + 32224;
                    r2 = r2 + r3;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dabc;
                        continue;
                    }
                case 0x1da50:
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1da5c;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x1da5c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dacc;
                        continue;
                    }
                case 0x1da64:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1da7c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1da88;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1da88:
                    r3 = 13 << 16;
                    r4 = r17 << 2;
                    r3 = r3 + 32224;
                    r3 = r4 + r3;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r5 = r0 + 16;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x12800;
                    run_12800(); return;
                case 0x1dabc:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1da50;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1da64;
                    continue;
                case 0x1dacc:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1dadc;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x1dadc:
                case 0x1dc00:
                    pc=0x1dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1dc00() throws ExecutionException { /* 0x1dc00 - 0x1de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1dc00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1dc18;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1dc18:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dc74;
                        continue;
                    }
                    r3 = r0 + 128;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1dcb0;
                        continue;
                    }
                    r3 = 13 << 16;
                    r2 = r16 << 2;
                    r3 = r3 + 32224;
                    r2 = r2 + r3;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dc60;
                        continue;
                    }
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1dc58;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x1dc58:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dcb0;
                        continue;
                    }
                case 0x1dc60:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1dc74:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1dc80;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1dc80:
                    r3 = 13 << 16;
                    r4 = r16 << 2;
                    r3 = r3 + 32224;
                    r3 = r4 + r3;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r5 = r0 + 128;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x12800;
                    run_12800(); return;
                case 0x1dcb0:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1dcc0;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x1dcc0:
                case 0x1de00:
                    pc=0x1de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1de00() throws ExecutionException { /* 0x1de00 - 0x1e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1de00:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r6 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r7;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r18 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1de30;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1de30:
                    r4 = r2 + 7;
                    /* Next insn is delay slot */ 
                    r31=0x1de3c;
                    pc=0x30600;
                    run_30600(); return;
                case 0x1de3c:
                    r16 = r2 + r0;
                    addr=r28+-32400;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r7 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ded8;
                        continue;
                    }
                    r5 = 7 << 16;
                    r5 = r5 + -9140;
                    /* Next insn is delay slot */ 
                    r31=0x1de68;
                    pc=0x3d200;
                    run_3d200(); return;
                case 0x1de68:
                    r4 = r17 + r0;
                    r18 = r18 | 64;
                    /* Next insn is delay slot */ 
                    r31=0x1de78;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1de78:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1df00;
                        continue;
                    }
                case 0x1de80:
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1df60;
                        continue;
                    }
                    r3 = 13 << 16;
                    r2 = r17 << 2;
                    r3 = r3 + 32224;
                    r2 = r2 + r3;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1df50;
                        continue;
                    }
                case 0x1dea4:
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1deb0;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x1deb0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1df60;
                        continue;
                    }
                case 0x1deb8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x1ded8:
                    r5 = 7 << 16;
                    r5 = r5 + -9152;
                    /* Next insn is delay slot */ 
                    r31=0x1dee8;
                    pc=0x3d200;
                    run_3d200(); return;
                case 0x1dee8:
                    r4 = r17 + r0;
                    r18 = r18 | 64;
                    /* Next insn is delay slot */ 
                    r31=0x1def8;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1def8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1de80;
                        continue;
                    }
                case 0x1df00:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1df0c;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1df0c:
                    r3 = 13 << 16;
                    r4 = r17 << 2;
                    r3 = r3 + 32224;
                    r3 = r4 + r3;
                    r5 = r18 + r0;
                    r4 = r17 + r0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1df30;
                    pc=0x12800;
                    run_12800(); return;
                case 0x1df30:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x1df50:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dea4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1deb8;
                    continue;
                case 0x1df60:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1df70;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x1df70:
                case 0x1e000:
                    pc=0x1e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e000() throws ExecutionException { /* 0x1e000 - 0x1e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e000:
                    r29 = r29 + -56;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r16 = r5 + r0;
                    r21 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e040;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1e040:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e284;
                        run_1e200(); return;
                    }
                    r3 = r0 + 32;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e314;
                        run_1e200(); return;
                    }
                    r30 = 13 << 16;
                    r2 = r19 << 2;
                    r30 = r30 + 32224;
                    r2 = r30 + r2;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e2f4;
                        run_1e200(); return;
                    }
                case 0x1e070:
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e07c;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x1e07c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e314;
                        run_1e200(); return;
                    }
                case 0x1e084:
                    r2 = (r21&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e2c0;
                        run_1e200(); return;
                    }
                case 0x1e090:
                    addr=r28+-32400;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e24c;
                        run_1e200(); return;
                    }
                    r23 = 7 << 16;
                    r23 = r23 + -9132;
                case 0x1e0a8:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e0b4;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1e0b4:
                    r4 = r2 + 7;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e0c4;
                    pc=0x30600;
                    run_30600(); return;
                case 0x1e0c4:
                    r20 = r2 + r0;
                    r22 = r18 + 1;
                    r5 = r16 + r0;
                    r6 = r18 + r0;
                    r4 = r2 + r0;
                    r17 = r19 + 1;
                    r22 = r2 + r22;
                    r18 = r20 + r18;
                    /* Next insn is delay slot */ 
                    r31=0x1e0ec;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x1e0ec:
                    r17 = r17 << 2;
                    r2 = r0 + 43;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = r30 + r17;
                    r16 = r0 + 1;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e1fc;
                        continue;
                    }
                    r30 = r0 + 96;
                    /* Next insn is delay slot */ 
                    pc=0x1e144;
                    continue;
                case 0x1e114:
                    if(r2 != r30) {
                        /* Next insn is delay slot */ 
                        pc=0x1e304;
                        run_1e200(); return;
                    }
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e12c;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x1e12c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e304;
                        run_1e200(); return;
                    }
                    r16 = r16 + 1;
                    r17 = r17 + 4;
                    if(r16 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x1e1a0;
                        continue;
                    }
                case 0x1e144:
                    r4 = r22 + r0;
                    r5 = r23 + r0;
                    r6 = r16 + r0;
                    r18 = r16 + r19;
                    /* Next insn is delay slot */ 
                    r31=0x1e15c;
                    pc=0x3d200;
                    run_3d200(); return;
                case 0x1e15c:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e168;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1e168:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e114;
                        continue;
                    }
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e17c;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1e17c:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r4 = r18 + r0;
                    r5 = r0 + 96;
                    r16 = r16 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x1e194;
                    pc=0x12800;
                    run_12800(); return;
                case 0x1e194:
                    r17 = r17 + 4;
                    if(r16 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x1e144;
                        continue;
                    }
                case 0x1e1a0:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x1e1d8:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e1e4;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x1e1e4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e304;
                        run_1e200(); return;
                    }
                case 0x1e1ec:
                    r16 = r16 + 1;
                    r17 = r17 + 4;
                    if(r16 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x1e1a0;
                        continue;
                    }
                case 0x1e1fc:
                    r4 = r22 + r0;
                case 0x1e200:
                    pc=0x1e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e200() throws ExecutionException { /* 0x1e200 - 0x1e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e200:
                    r5 = r23 + r0;
                    r6 = r16 + r0;
                    r18 = r16 + r19;
                    /* Next insn is delay slot */ 
                    r31=0x1e214;
                    pc=0x3d200;
                    run_3d200(); return;
                case 0x1e214:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e220;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1e220:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e25c;
                        continue;
                    }
                    r3 = r0 + 96;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e304;
                        continue;
                    }
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e1d8;
                        run_1e000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1e1ec;
                    run_1e000(); return;
                case 0x1e24c:
                    r23 = 7 << 16;
                    r23 = r23 + -11524;
                    /* Next insn is delay slot */ 
                    pc=0x1e0a8;
                    run_1e000(); return;
                case 0x1e25c:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e268;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1e268:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r4 = r18 + r0;
                    r5 = r0 + 96;
                    /* Next insn is delay slot */ 
                    r31=0x1e27c;
                    pc=0x12800;
                    run_12800(); return;
                case 0x1e27c:
                    /* Next insn is delay slot */ 
                    pc=0x1e1ec;
                    run_1e000(); return;
                case 0x1e284:
                    r4 = r16 + r0;
                    r30 = 13 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x1e294;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1e294:
                    r30 = r30 + 32224;
                    r3 = r19 << 2;
                    r3 = r30 + r3;
                    r4 = r19 + r0;
                    r5 = r0 + 32;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1e2b4;
                    pc=0x12800;
                    run_12800(); return;
                case 0x1e2b4:
                    r2 = (r21&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e090;
                        run_1e000(); return;
                    }
                case 0x1e2c0:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e2f4:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e070;
                        run_1e000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1e084;
                    run_1e000(); return;
                case 0x1e304:
                    r4 = r18 + r0;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e314;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x1e314:
                    r4 = r19 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e324;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x1e324:
                case 0x1e400:
                    pc=0x1e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e400() throws ExecutionException { /* 0x1e400 - 0x1e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e400:
                    r29 = r29 + -56;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r16 = r5 + r0;
                    r21 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e440;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1e440:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e684;
                        run_1e600(); return;
                    }
                    r3 = r0 + 16;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e714;
                        run_1e600(); return;
                    }
                    r30 = 13 << 16;
                    r2 = r19 << 2;
                    r30 = r30 + 32224;
                    r2 = r30 + r2;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e6f4;
                        run_1e600(); return;
                    }
                case 0x1e470:
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e47c;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x1e47c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e714;
                        run_1e600(); return;
                    }
                case 0x1e484:
                    r2 = (r21&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e6c0;
                        run_1e600(); return;
                    }
                case 0x1e490:
                    addr=r28+-32400;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e64c;
                        run_1e600(); return;
                    }
                    r23 = 7 << 16;
                    r23 = r23 + -9132;
                case 0x1e4a8:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e4b4;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1e4b4:
                    r4 = r2 + 7;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e4c4;
                    pc=0x30600;
                    run_30600(); return;
                case 0x1e4c4:
                    r20 = r2 + r0;
                    r22 = r18 + 1;
                    r5 = r16 + r0;
                    r6 = r18 + r0;
                    r4 = r2 + r0;
                    r17 = r19 + 1;
                    r22 = r2 + r22;
                    r18 = r20 + r18;
                    /* Next insn is delay slot */ 
                    r31=0x1e4ec;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x1e4ec:
                    r17 = r17 << 2;
                    r2 = r0 + 43;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = r30 + r17;
                    r16 = r0 + 1;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e5fc;
                        continue;
                    }
                    r30 = r0 + 80;
                    /* Next insn is delay slot */ 
                    pc=0x1e544;
                    continue;
                case 0x1e514:
                    if(r2 != r30) {
                        /* Next insn is delay slot */ 
                        pc=0x1e704;
                        run_1e600(); return;
                    }
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e52c;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x1e52c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e704;
                        run_1e600(); return;
                    }
                    r16 = r16 + 1;
                    r17 = r17 + 4;
                    if(r16 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x1e5a0;
                        continue;
                    }
                case 0x1e544:
                    r4 = r22 + r0;
                    r5 = r23 + r0;
                    r6 = r16 + r0;
                    r18 = r16 + r19;
                    /* Next insn is delay slot */ 
                    r31=0x1e55c;
                    pc=0x3d200;
                    run_3d200(); return;
                case 0x1e55c:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e568;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1e568:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e514;
                        continue;
                    }
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e57c;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1e57c:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r4 = r18 + r0;
                    r5 = r0 + 80;
                    r16 = r16 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x1e594;
                    pc=0x12800;
                    run_12800(); return;
                case 0x1e594:
                    r17 = r17 + 4;
                    if(r16 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x1e544;
                        continue;
                    }
                case 0x1e5a0:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x1e5d8:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e5e4;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x1e5e4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e704;
                        run_1e600(); return;
                    }
                case 0x1e5ec:
                    r16 = r16 + 1;
                    r17 = r17 + 4;
                    if(r16 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x1e5a0;
                        continue;
                    }
                case 0x1e5fc:
                    r4 = r22 + r0;
                case 0x1e600:
                    pc=0x1e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e600() throws ExecutionException { /* 0x1e600 - 0x1e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e600:
                    r5 = r23 + r0;
                    r6 = r16 + r0;
                    r18 = r16 + r19;
                    /* Next insn is delay slot */ 
                    r31=0x1e614;
                    pc=0x3d200;
                    run_3d200(); return;
                case 0x1e614:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e620;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1e620:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e65c;
                        continue;
                    }
                    r3 = r0 + 80;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e704;
                        continue;
                    }
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e5d8;
                        run_1e400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1e5ec;
                    run_1e400(); return;
                case 0x1e64c:
                    r23 = 7 << 16;
                    r23 = r23 + -11524;
                    /* Next insn is delay slot */ 
                    pc=0x1e4a8;
                    run_1e400(); return;
                case 0x1e65c:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e668;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1e668:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r4 = r18 + r0;
                    r5 = r0 + 80;
                    /* Next insn is delay slot */ 
                    r31=0x1e67c;
                    pc=0x12800;
                    run_12800(); return;
                case 0x1e67c:
                    /* Next insn is delay slot */ 
                    pc=0x1e5ec;
                    run_1e400(); return;
                case 0x1e684:
                    r4 = r16 + r0;
                    r30 = 13 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x1e694;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x1e694:
                    r30 = r30 + 32224;
                    r3 = r19 << 2;
                    r3 = r30 + r3;
                    r4 = r19 + r0;
                    r5 = r0 + 16;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1e6b4;
                    pc=0x12800;
                    run_12800(); return;
                case 0x1e6b4:
                    r2 = (r21&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e490;
                        run_1e400(); return;
                    }
                case 0x1e6c0:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e6f4:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e470;
                        run_1e400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1e484;
                    run_1e400(); return;
                case 0x1e704:
                    r4 = r18 + r0;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e714;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x1e714:
                    r4 = r19 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e724;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x1e724:
                case 0x1e800:
                    pc=0x1e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e800() throws ExecutionException { /* 0x1e800 - 0x1ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e800:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1e810;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1e810:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ea00:
                    pc=0x1ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ea00() throws ExecutionException { /* 0x1ea00 - 0x1ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ea00:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1ea10;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1ea10:
                    r3 = r0 + 16;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1ea40;
                        continue;
                    }
                    r3 = r0 + 32;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1ea40;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 ^ 128;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ea40:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ec00:
                    pc=0x1ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ec00() throws ExecutionException { /* 0x1ec00 - 0x1ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ec00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ec18;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1ec18:
                    r3 = r0 + 128;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1ec4c;
                        continue;
                    }
                    r2 = 13 << 16;
                    r2 = r2 + 32224;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = r16 << 2;
                    r16 = r16 + r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ec4c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = 7 << 16;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r2 + -7564;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ee00:
                    pc=0x1ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ee00() throws ExecutionException { /* 0x1ee00 - 0x1f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ee00:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    r20 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ee2c;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1ee2c:
                    r3 = r0 + 128;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1ee70;
                        continue;
                    }
                    r2 = 13 << 16;
                    r2 = r2 + 32224;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = r17 << 2;
                    r17 = r17 + r2;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ee70:
                    r2 = ((r20 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eee8;
                        continue;
                    }
                    r2 = ((r17 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1efb4;
                        continue;
                    }
                    r16 = r20 + r0;
                    r19 = r0 + r0;
                    r18 = r0 + 128;
                    /* Next insn is delay slot */ 
                    pc=0x1eea8;
                    continue;
                case 0x1ee9c:
                    r2 = ((r17 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ef78;
                        continue;
                    }
                case 0x1eea8:
                    r16 = r16 + -1;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1eeb8;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1eeb8:
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1ee9c;
                        continue;
                    }
                    r19 = r19 + 1;
                    r2 = (r19&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ee9c;
                        continue;
                    }
                case 0x1eed0:
                    r4 = 7 << 16;
                    r4 = r4 + -9128;
                    r5 = r17 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1eee8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1eee8:
                    r16 = r20 + r0;
                    r19 = r0 + r0;
                    r18 = r0 + 128;
                    /* Next insn is delay slot */ 
                    pc=0x1ef08;
                    continue;
                case 0x1eefc:
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ef3c;
                        continue;
                    }
                case 0x1ef08:
                    r16 = r16 + 1;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ef18;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1ef18:
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1eefc;
                        continue;
                    }
                    r19 = r19 + 1;
                    r2 = (r19&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eed0;
                        continue;
                    }
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ef08;
                        continue;
                    }
                case 0x1ef3c:
                    r19 = r19 + -1;
                    r2 = 7 << 16;
                    r19 = r19 << 2;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + -8832;
                    r2 = r19 + r2;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ef78:
                    r19 = r19 + -1;
                case 0x1ef7c:
                    r2 = 7 << 16;
                    r19 = r19 << 2;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + -8792;
                    r2 = r19 + r2;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1efb4:
                    r19 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x1ef7c;
                    continue;
                case 0x1f000:
                    pc=0x1f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f000() throws ExecutionException { /* 0x1f000 - 0x1f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f000:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r4 + r16;
                    r17 = r4 + r0;
                    r4 = r16 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x1f02c;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1f02c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f0a8;
                        continue;
                    }
                    r3 = r2 & 64;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f0a8;
                        continue;
                    }
                    r18 = r0 + 128;
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1f0d4;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f058;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1f058:
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1f0c4;
                        continue;
                    }
                    r3 = 13 << 16;
                    r2 = r16 << 2;
                    r3 = r3 + 32224;
                    r2 = r2 + r3;
                    r18 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                case 0x1f074:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f080;
                    pc=0x14400;
                    run_14400(); return;
                case 0x1f080:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r17 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = r2 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x1f0a8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f0c4:
                    r18 = 7 << 16;
                    r18 = r18 + -7564;
                    /* Next insn is delay slot */ 
                    pc=0x1f074;
                    continue;
                case 0x1f0d4:
                    r4 = 7 << 16;
                    r4 = r4 + -9056;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f0e8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1f0e8:
                case 0x1f200:
                    pc=0x1f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f200() throws ExecutionException { /* 0x1f200 - 0x1f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f200:
                    r29 = r29 + -56;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    /* Next insn is delay slot */ 
                    r31=0x1f230;
                    pc=0x23600;
                    run_23600(); return;
                case 0x1f230:
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r19 = 13 << 16;
                    r16 = r0 + r0;
                    r19 = r19 + 32224;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r19 + r0;
                    r18 = r0 + 32;
                    r20 = r0 + 128;
                    r21 = r0 + 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f29c;
                        continue;
                    }
                case 0x1f25c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f268;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1f268:
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1f34c;
                        continue;
                    }
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x1f380;
                        continue;
                    }
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x1f34c;
                        continue;
                    }
                    r16 = r16 + 1;
                    r17 = r17 + 4;
                case 0x1f288:
                    r2 = readPages[(r28+-32276)>>>12][((r28+-32276)>>>2)&0x3ff];
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f25c;
                        continue;
                    }
                case 0x1f29c:
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f394;
                        continue;
                    }
                    r17 = r16 << 2;
                    r17 = r19 + r17;
                    r18 = r0 + 10;
                    r20 = r0 + 32;
                    r21 = r0 + 128;
                    r22 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x1f2e8;
                    continue;
                case 0x1f2d0:
                    r2 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    r17 = r17 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f394;
                        continue;
                    }
                case 0x1f2e8:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f2f4;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x1f2f4:
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1f2d0;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f308;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1f308:
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x1f320;
                        continue;
                    }
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x1f380;
                        continue;
                    }
                    if(r2 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x1f2d0;
                        continue;
                    }
                case 0x1f320:
                    r23 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f330;
                    pc=0x14400;
                    run_14400(); return;
                case 0x1f330:
                    r5 = r2 + r0;
                    r4 = r23 + r0;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f344;
                    pc=0x23200;
                    run_23200(); return;
                case 0x1f344:
                    /* Next insn is delay slot */ 
                    pc=0x1f2d0;
                    continue;
                case 0x1f34c:
                    r22 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f35c;
                    pc=0x14400;
                    run_14400(); return;
                case 0x1f35c:
                    r5 = r2 + r0;
                    r6 = r16 + r0;
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f370;
                    pc=0x23200;
                    run_23200(); return;
                case 0x1f370:
                    r16 = r16 + 1;
                    r17 = r17 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x1f288;
                    continue;
                case 0x1f380:
                    r4 = 7 << 16;
                    r4 = r4 + -9056;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f394;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1f394:
                    r2 = 1 << 16;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f3f0;
                        continue;
                    }
                    r2 = r16 << 2;
                    r19 = r19 + r2;
                    r17 = r0 + 32;
                    r18 = r0 + 128;
                    r21 = r0 + 16;
                    r20 = 1 << 16;
                case 0x1f3bc:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f3c8;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1f3c8:
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x1f420;
                        run_1f400(); return;
                    }
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1f380;
                        continue;
                    }
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x1f420;
                        run_1f400(); return;
                    }
                case 0x1f3e0:
                    r16 = r16 + 1;
                    r19 = r19 + 4;
                    if(r16 != r20) {
                        /* Next insn is delay slot */ 
                        pc=0x1f3bc;
                        continue;
                    }
                case 0x1f3f0:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                case 0x1f400:
                    pc=0x1f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f400() throws ExecutionException { /* 0x1f400 - 0x1f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f400:
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=0x23600;
                    run_23600(); return;
                case 0x1f420:
                    r22 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f430;
                    pc=0x14400;
                    run_14400(); return;
                case 0x1f430:
                    r5 = r2 + r0;
                    r4 = r22 + r0;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f444;
                    pc=0x23200;
                    run_23200(); return;
                case 0x1f444:
                    /* Next insn is delay slot */ 
                    pc=0x1f3e0;
                    run_1f200(); return;
                case 0x1f600:
                    pc=0x1f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f600() throws ExecutionException { /* 0x1f600 - 0x1f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f600:
                    r2 = r0 + 1;
                    addr=r28+-32398;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f800:
                    pc=0x1f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f800() throws ExecutionException { /* 0x1f800 - 0x1fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f800:
                    r2 = r0 + 1;
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fa00:
                    pc=0x1fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fa00() throws ExecutionException { /* 0x1fa00 - 0x1fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fa00:
                    r2 = r0 + 1;
                    addr=r28+-32400;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fc00:
                    pc=0x1fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fc00() throws ExecutionException { /* 0x1fc00 - 0x1fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fc00:
                    addr=r28+-32356;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + 1;
                    addr=r28+-32356;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fe00:
                    pc=0x1fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fe00() throws ExecutionException { /* 0x1fe00 - 0x20000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fe00:
                    r4 = 7 << 16;
                    r5 = readPages[(r28+-32248)>>>12][((r28+-32248)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r4 = r4 + -8752;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1fe1c;
                    pc=0x3b600;
                    run_3b600(); return;
                case 0x1fe1c:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1fe28;
                    pc=0x33400;
                    run_33400(); return;
                case 0x1fe28:
                case 0x20000:
                    pc=0x20000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20000() throws ExecutionException { /* 0x20000 - 0x20200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20000:
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x28e00;
                    run_28e00(); return;
                case 0x20200:
                    pc=0x20200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20200() throws ExecutionException { /* 0x20200 - 0x20400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20200:
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32248)>>>12][((r28+-32248)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x20224;
                    pc=0x30200;
                    run_30200(); return;
                case 0x20224:
                    r5 = 7 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + -7720;
                    r6 = r16 + r0;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20240;
                    pc=0x36600;
                    run_36600(); return;
                case 0x20240:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2024c;
                    pc=0x33400;
                    run_33400(); return;
                case 0x2024c:
                case 0x20400:
                    pc=0x20400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20400() throws ExecutionException { /* 0x20400 - 0x20600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20400:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = 7 << 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r18 = r0 + 10;
                    r19 = r19 + -7060;
                case 0x2042c:
                    /* Next insn is delay slot */ 
                    r31=0x20434;
                    pc=0x13c00;
                    run_13c00(); return;
                case 0x20434:
                    r21 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20688;
                        run_20600(); return;
                    }
                case 0x20440:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2044c;
                    pc=0x13400;
                    run_13400(); return;
                case 0x2044c:
                    r3 = r2 << 2;
                    r17 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r2 = r2 << 4;
                    r2 = r2 - r3;
                    r17 = r17 + r2;
                    /* Next insn is delay slot */ 
                    r31=0x2046c;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x2046c:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2047c;
                    pc=0x12200;
                    run_12200(); return;
                case 0x2047c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x204cc;
                        continue;
                    }
                    if(r20 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x20500;
                        continue;
                    }
                case 0x2048c:
                    r2 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    addr=r17+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r16 = tmp;
                    r2 = r2 + 1;
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r2;
                case 0x2049c:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2042c;
                        continue;
                    }
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r4 - r16;
                    /* Next insn is delay slot */ 
                    r31=0x204b8;
                    pc=0x12000;
                    run_12000(); return;
                case 0x204b8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2066c;
                        run_20600(); return;
                    }
                    r16 = r16 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2049c;
                    continue;
                case 0x204cc:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x204d8;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x204d8:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x204e8;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x204e8:
                    r5 = r2 + r0;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x204f8;
                    pc=0x23800;
                    run_23800(); return;
                case 0x204f8:
                    if(r20 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x2048c;
                        continue;
                    }
                case 0x20500:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2050c;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x2050c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20608;
                        run_20600(); return;
                    }
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20648;
                        run_20600(); return;
                    }
                case 0x2051c:
                    addr=r17+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r16 = tmp;
                    r2 = ((r21 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x205e4;
                        continue;
                    }
                    addr=r17+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x205e4;
                        continue;
                    }
                    r3 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r16 = r16 + r3;
                    /* Next insn is delay slot */ 
                    pc=0x20584;
                    continue;
                case 0x20558:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20564;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x20564:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x206b0;
                        run_20600(); return;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20578;
                    pc=0x12200;
                    run_12200(); return;
                case 0x20578:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x206b0;
                        run_20600(); return;
                    }
                    r3 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                case 0x20584:
                    r16 = r16 + -1;
                    r3 = ((r3 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20558;
                        continue;
                    }
                case 0x20594:
                    addr=r17+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x20648;
                        run_20600(); return;
                    }
                    r16 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x205c8;
                    continue;
                case 0x205b0:
                    addr=r17+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = r16 + 1;
                    r2 = r2 + -1;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20648;
                        run_20600(); return;
                    }
                case 0x205c8:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r4 = r16 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x205dc;
                    pc=0x12000;
                    run_12000(); return;
                case 0x205dc:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x205b0;
                        continue;
                    }
                case 0x205e4:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x205f4;
                    pc=0x12800;
                    run_12800(); return;
                case 0x205f4:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x20600;
                    pc=0x24800;
                    run_24800(); return;
                case 0x20600:
                    pc=0x20600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20600() throws ExecutionException { /* 0x20600 - 0x20800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20600:
                    /* Next insn is delay slot */ 
                    pc=0x2048c;
                    run_20400(); return;
                case 0x20608:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x20614;
                    pc=0x14400;
                    run_14400(); return;
                case 0x20614:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20628;
                        continue;
                    }
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20628;
                    pc=0x24200;
                    run_24200(); return;
                case 0x20628:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x20634;
                    pc=0x1ec00;
                    run_1ec00(); return;
                case 0x20634:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20640;
                    pc=0x22c00;
                    run_22c00(); return;
                case 0x20640:
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2051c;
                        run_20400(); return;
                    }
                case 0x20648:
                    r2 = (r20&0xffffffffL) < (11&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x205f4;
                        run_20400(); return;
                    }
                    r2 = r20 << 2;
                    r2 = r19 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x2066c:
                    /* Next insn is delay slot */ 
                    r31=0x20674;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x20674:
                    /* Next insn is delay slot */ 
                    r31=0x2067c;
                    pc=0x13c00;
                    run_13c00(); return;
                case 0x2067c:
                    r21 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20440;
                        run_20400(); return;
                    }
                case 0x20688:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x206b0:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x206c0;
                    pc=0x12800;
                    run_12800(); return;
                case 0x206c0:
                    r20 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x20594;
                    run_20400(); return;
                case 0x206cc:
                    addr=r17+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r21 = ((r21 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x206f4;
                        continue;
                    }
                case 0x206e0:
                    /* Next insn is delay slot */ 
                    r31=0x206e8;
                    pc=0x14600;
                    run_14600(); return;
                case 0x206e8:
                    addr=r17+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r16 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2049c;
                    run_20400(); return;
                case 0x206f4:
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    r16 = r0 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20724;
                        continue;
                    }
                case 0x20704:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20710;
                    pc=0x1f000;
                    run_1f000(); return;
                case 0x20710:
                    addr=r17+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = r16 + 1;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20704;
                        continue;
                    }
                case 0x20724:
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x20734;
                    return;
                case 0x20734:
                    r2 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    addr=r17+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r16 = tmp;
                    r2 = r2 + r16;
                    writePages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2049c;
                    run_20400(); return;
                case 0x20750:
                    /* Next insn is delay slot */ 
                    r31=0x20758;
                    pc=0x15600;
                    run_15600(); return;
                case 0x20758:
                    addr=r17+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r16 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2049c;
                    run_20400(); return;
                case 0x20764:
                    /* Next insn is delay slot */ 
                    r31=0x2076c;
                    pc=0x15200;
                    run_15200(); return;
                case 0x2076c:
                    addr=r17+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r16 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2049c;
                    run_20400(); return;
                case 0x20778:
                    /* Next insn is delay slot */ 
                    r31=0x20780;
                    pc=0x14e00;
                    run_14e00(); return;
                case 0x20780:
                    addr=r17+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r16 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2049c;
                    run_20400(); return;
                case 0x2078c:
                    /* Next insn is delay slot */ 
                    r31=0x20794;
                    pc=0x14c00;
                    run_14c00(); return;
                case 0x20794:
                    addr=r17+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r16 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2049c;
                    run_20400(); return;
                case 0x207a0:
                    /* Next insn is delay slot */ 
                    r31=0x207a8;
                    pc=0x14a00;
                    run_14a00(); return;
                case 0x207a8:
                    addr=r17+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r16 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2049c;
                    run_20400(); return;
                case 0x207b4:
                    /* Next insn is delay slot */ 
                    r31=0x207bc;
                    pc=0x14800;
                    run_14800(); return;
                case 0x207bc:
                    addr=r17+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r16 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2049c;
                    run_20400(); return;
                case 0x20800:
                    pc=0x20800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20800() throws ExecutionException { /* 0x20800 - 0x20a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20800:
                    r29 = r29 + -24;
                    r4 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x20814;
                    pc=0x2d000;
                    run_2d000(); return;
                case 0x20814:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r29 = r29 + 24;
                    writePages[(r28+-32668)>>>12][((r28+-32668)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x22000;
                    run_22000(); return;
                case 0x20a00:
                    pc=0x20a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20a00() throws ExecutionException { /* 0x20a00 - 0x20c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20a00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x20a1c;
                    pc=0x32e00;
                    run_32e00(); return;
                case 0x20a1c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a4c;
                        continue;
                    }
                    r3 = r2 + -32;
                    r3 = (r3&0xffffffffL) < (96&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a68;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20a4c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20a68:
                    r4 = 7 << 16;
                    r4 = r4 + -7712;
                    r5 = r16 + r0;
                    r6 = r0 + 32;
                    r7 = r0 + 127;
                    /* Next insn is delay slot */ 
                    r31=0x20a84;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x20a84:
                case 0x20c00:
                    pc=0x20c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20c00() throws ExecutionException { /* 0x20c00 - 0x20e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20c00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 36;
                    r16 = r4 + r0;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x20c64;
                        continue;
                    }
                    r4 = r5 + r0;
                    r5 = 7 << 16;
                    r5 = r5 + -7656;
                    r6 = r29 + 16;
                    r7 = r29 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x20c3c;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x20c3c:
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x20c88;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20c64:
                    r4 = r5 + 1;
                    r5 = 7 << 16;
                    r5 = r5 + -7664;
                    r6 = r29 + 16;
                    r7 = r29 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x20c80;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x20c80:
                    /* Next insn is delay slot */ 
                    pc=0x20c3c;
                    continue;
                case 0x20c88:
                    r4 = 7 << 16;
                    r4 = r4 + -7648;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20c9c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x20c9c:
                case 0x20e00:
                    pc=0x20e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20e00() throws ExecutionException { /* 0x20e00 - 0x21000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20e00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 36;
                    r16 = r4 + r0;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x20e74;
                        continue;
                    }
                    r4 = r5 + r0;
                    r5 = 7 << 16;
                    r5 = r5 + -7656;
                    r6 = r29 + 16;
                    r7 = r29 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x20e3c;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x20e3c:
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x20eb4;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20e98;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20e74:
                    r4 = r5 + 1;
                    r5 = 7 << 16;
                    r5 = r5 + -7664;
                    r6 = r29 + 16;
                    r7 = r29 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x20e90;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x20e90:
                    /* Next insn is delay slot */ 
                    pc=0x20e3c;
                    continue;
                case 0x20e98:
                    r4 = 7 << 16;
                    r4 = r4 + -7712;
                    r5 = r16 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x20eb4;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x20eb4:
                    r4 = 7 << 16;
                    r4 = r4 + -7648;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20ec8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x20ec8:
                case 0x21000:
                    pc=0x21000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21000() throws ExecutionException { /* 0x21000 - 0x21200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21000:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 36;
                    r16 = r4 + r0;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21078;
                        continue;
                    }
                    r4 = r5 + r0;
                    r5 = 7 << 16;
                    r5 = r5 + -7656;
                    r6 = r29 + 16;
                    r7 = r29 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x2103c;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x2103c:
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x210b8;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    r3 = (r3&0xffffffffL) < (128&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2109c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32744)>>>12][((r28+-32744)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21078:
                    r4 = r5 + 1;
                    r5 = 7 << 16;
                    r5 = r5 + -7664;
                    r6 = r29 + 16;
                    r7 = r29 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x21094;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x21094:
                    /* Next insn is delay slot */ 
                    pc=0x2103c;
                    continue;
                case 0x2109c:
                    r4 = 7 << 16;
                    r4 = r4 + -7712;
                    r5 = r16 + r0;
                    r6 = r0 + 1;
                    r7 = r0 + 128;
                    /* Next insn is delay slot */ 
                    r31=0x210b8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x210b8:
                    r4 = 7 << 16;
                    r4 = r4 + -7648;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x210cc;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x210cc:
                case 0x21200:
                    pc=0x21200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21200() throws ExecutionException { /* 0x21200 - 0x21400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21200:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 36;
                    r16 = r4 + r0;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21278;
                        continue;
                    }
                    r4 = r5 + r0;
                    r5 = 7 << 16;
                    r5 = r5 + -7656;
                    r6 = r29 + 16;
                    r7 = r29 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x2123c;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x2123c:
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x212b8;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    r3 = (r3&0xffffffffL) < (127&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2129c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32760)>>>12][((r28+-32760)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21278:
                    r4 = r5 + 1;
                    r5 = 7 << 16;
                    r5 = r5 + -7664;
                    r6 = r29 + 16;
                    r7 = r29 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x21294;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x21294:
                    /* Next insn is delay slot */ 
                    pc=0x2123c;
                    continue;
                case 0x2129c:
                    r4 = 7 << 16;
                    r4 = r4 + -7712;
                    r5 = r16 + r0;
                    r6 = r0 + 1;
                    r7 = r0 + 127;
                    /* Next insn is delay slot */ 
                    r31=0x212b8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x212b8:
                    r4 = 7 << 16;
                    r4 = r4 + -7648;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x212cc;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x212cc:
                case 0x21400:
                    pc=0x21400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21400() throws ExecutionException { /* 0x21400 - 0x21600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21400:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 36;
                    r16 = r4 + r0;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21478;
                        continue;
                    }
                    r4 = r5 + r0;
                    r5 = 7 << 16;
                    r5 = r5 + -7656;
                    r6 = r29 + 16;
                    r7 = r29 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x2143c;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x2143c:
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x214b8;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    r3 = (r3&0xffffffffL) < (127&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2149c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21478:
                    r4 = r5 + 1;
                    r5 = 7 << 16;
                    r5 = r5 + -7664;
                    r6 = r29 + 16;
                    r7 = r29 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x21494;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x21494:
                    /* Next insn is delay slot */ 
                    pc=0x2143c;
                    continue;
                case 0x2149c:
                    r4 = 7 << 16;
                    r4 = r4 + -7712;
                    r5 = r16 + r0;
                    r6 = r0 + 1;
                    r7 = r0 + 127;
                    /* Next insn is delay slot */ 
                    r31=0x214b8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x214b8:
                    r4 = 7 << 16;
                    r4 = r4 + -7648;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x214cc;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x214cc:
                case 0x21600:
                    pc=0x21600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21600() throws ExecutionException { /* 0x21600 - 0x21800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21600:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 36;
                    r16 = r4 + r0;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21678;
                        continue;
                    }
                    r4 = r5 + r0;
                    r5 = 7 << 16;
                    r5 = r5 + -7656;
                    r6 = r29 + 16;
                    r7 = r29 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x2163c;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x2163c:
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x216b8;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    r3 = (r3&0xffffffffL) < (127&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2169c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21678:
                    r4 = r5 + 1;
                    r5 = 7 << 16;
                    r5 = r5 + -7664;
                    r6 = r29 + 16;
                    r7 = r29 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x21694;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x21694:
                    /* Next insn is delay slot */ 
                    pc=0x2163c;
                    continue;
                case 0x2169c:
                    r4 = 7 << 16;
                    r4 = r4 + -7712;
                    r5 = r16 + r0;
                    r6 = r0 + 1;
                    r7 = r0 + 127;
                    /* Next insn is delay slot */ 
                    r31=0x216b8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x216b8:
                    r4 = 7 << 16;
                    r4 = r4 + -7648;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x216cc;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x216cc:
                case 0x21800:
                    pc=0x21800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21800() throws ExecutionException { /* 0x21800 - 0x21a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21800:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 36;
                    r16 = r4 + r0;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21878;
                        continue;
                    }
                    r4 = r5 + r0;
                    r5 = 7 << 16;
                    r5 = r5 + -7656;
                    r6 = r29 + 16;
                    r7 = r29 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x2183c;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x2183c:
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x218b8;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    r3 = (r3&0xffffffffL) < (127&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2189c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21878:
                    r4 = r5 + 1;
                    r5 = 7 << 16;
                    r5 = r5 + -7664;
                    r6 = r29 + 16;
                    r7 = r29 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x21894;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x21894:
                    /* Next insn is delay slot */ 
                    pc=0x2183c;
                    continue;
                case 0x2189c:
                    r4 = 7 << 16;
                    r4 = r4 + -7712;
                    r5 = r16 + r0;
                    r6 = r0 + 1;
                    r7 = r0 + 127;
                    /* Next insn is delay slot */ 
                    r31=0x218b8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x218b8:
                    r4 = 7 << 16;
                    r4 = r4 + -7648;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x218cc;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x218cc:
                case 0x21a00:
                    pc=0x21a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21a00() throws ExecutionException { /* 0x21a00 - 0x21c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21a00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 36;
                    r16 = r4 + r0;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21a78;
                        continue;
                    }
                    r4 = r5 + r0;
                    r5 = 7 << 16;
                    r5 = r5 + -7656;
                    r6 = r29 + 16;
                    r7 = r29 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x21a3c;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x21a3c:
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x21ab8;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    r3 = (r3&0xffffffffL) < (127&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21a9c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32764)>>>12][((r28+-32764)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21a78:
                    r4 = r5 + 1;
                    r5 = 7 << 16;
                    r5 = r5 + -7664;
                    r6 = r29 + 16;
                    r7 = r29 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x21a94;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x21a94:
                    /* Next insn is delay slot */ 
                    pc=0x21a3c;
                    continue;
                case 0x21a9c:
                    r4 = 7 << 16;
                    r4 = r4 + -7712;
                    r5 = r16 + r0;
                    r6 = r0 + 1;
                    r7 = r0 + 127;
                    /* Next insn is delay slot */ 
                    r31=0x21ab8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x21ab8:
                    r4 = 7 << 16;
                    r4 = r4 + -7648;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21acc;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x21acc:
                case 0x21c00:
                    pc=0x21c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21c00() throws ExecutionException { /* 0x21c00 - 0x21e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21c00:
                    r29 = r29 + -56;
                    r6 = 7 << 16;
                    r6 = r6 + -7608;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r4;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    r4 = r29 + 56;
                    r5 = r29 + 60;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r19;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x21c3c;
                    pc=0x2c000;
                    run_2c000(); return;
                case 0x21c3c:
                    r4 = readPages[(r28+-32364)>>>12][((r28+-32364)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r3 = (r4&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21e34;
                        run_21e00(); return;
                    }
                    r20 = 7 << 16;
                    r18 = 7 << 16;
                    r17 = 7 << 16;
                    r20 = r20 + -7016;
                    r18 = r18 + -7656;
                    r19 = 7 << 16;
                    r17 = r17 + -6720;
                    /* Next insn is delay slot */ 
                    pc=0x21ca8;
                    continue;
                case 0x21c78:
                    r2 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21f74;
                        run_21e00(); return;
                    }
                    writePages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff] = r16;
                case 0x21c8c:
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21e34;
                        run_21e00(); return;
                    }
                case 0x21ca8:
                    r3 = readPages[(r28+-32360)>>>12][((r28+-32360)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r16 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 45;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21c78;
                        continue;
                    }
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + -45;
                    r2 = r2 & 255;
                    r3 = (r2&0xffffffffL) < (74&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21e08;
                        run_21e00(); return;
                    }
                    r2 = r2 << 2;
                    r2 = r20 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x21d00:
                    addr=r28+-32356;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + 1;
                    addr=r28+-32356;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x21c8c;
                    continue;
                case 0x21d18:
                    r4 = r29 + 20;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x21d28;
                    pc=0x2ca00;
                    run_2ca00(); return;
                case 0x21d28:
                    writePages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r28+-32364)>>>12][((r28+-32364)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x21c8c;
                    continue;
                case 0x21d38:
                    r4 = r29 + 20;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x21d48;
                    pc=0x2ca00;
                    run_2ca00(); return;
                case 0x21d48:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21d54;
                    pc=0x28e00;
                    run_28e00(); return;
                case 0x21d54:
                    r4 = readPages[(r28+-32364)>>>12][((r28+-32364)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x21c8c;
                    continue;
                case 0x21d60:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21d70;
                    pc=0x1fe00;
                    run_1fe00(); return;
                case 0x21d70:
                    r2 = r0 + 1;
                    addr=r28+-32398;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x21c8c;
                    continue;
                case 0x21d80:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21d90;
                    pc=0x20200;
                    run_20200(); return;
                case 0x21d90:
                    r4 = r29 + 20;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x21da0;
                    pc=0x2ca00;
                    run_2ca00(); return;
                case 0x21da0:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 36;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x21e14;
                        run_21e00(); return;
                    }
                    r4 = r2 + r0;
                    r5 = r18 + r0;
                    r6 = r29 + 16;
                    r7 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r31=0x21dc8;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x21dc8:
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x21fe0;
                        run_21e00(); return;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32364)>>>12][((r28+-32364)>>>2)&0x3ff];
                    writePages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x21c8c;
                    continue;
                case 0x21de8:
                    r4 = r29 + 20;
                    r5 = r17 + r0;
                    r6 = r0 + 17;
                    /* Next insn is delay slot */ 
                    r31=0x21dfc;
                    pc=0x2cc00;
                    run_2cc00(); return;
                case 0x21dfc:
                    r4 = readPages[(r28+-32364)>>>12][((r28+-32364)>>>2)&0x3ff];
                case 0x21e00:
                    pc=0x21e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21e00() throws ExecutionException { /* 0x21e00 - 0x22000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21e00:
                    /* Next insn is delay slot */ 
                    pc=0x21c8c;
                    run_21c00(); return;
                case 0x21e08:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21e14;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x21e14:
                    r4 = r2 + 1;
                    r5 = r19 + -7664;
                    r6 = r29 + 16;
                    r7 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r31=0x21e2c;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x21e2c:
                    /* Next insn is delay slot */ 
                    pc=0x21dc8;
                    run_21c00(); return;
                case 0x21e34:
                    /* Next insn is delay slot */ 
                    r31=0x21e3c;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x21e3c:
                    r2 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21fd0;
                        continue;
                    }
                    r3 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21fc0;
                        continue;
                    }
                    r2 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21fb0;
                        continue;
                    }
                    r3 = readPages[(r28+-32760)>>>12][((r28+-32760)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21fa0;
                        continue;
                    }
                    r3 = readPages[(r28+-32668)>>>12][((r28+-32668)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21ea4;
                        continue;
                    }
                    r2 = r0 + 1;
                    writePages[(r28+-32668)>>>12][((r28+-32668)>>>2)&0x3ff] = r2;
                case 0x21ea4:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21eb0;
                    pc=0x44c00;
                    run_44c00(); return;
                case 0x21eb0:
                    r4 = r29 + 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x21ec0;
                    pc=0x38c00;
                    run_38c00(); return;
                case 0x21ec0:
                    r4 = 19 << 16;
                    r6 = 7 << 16;
                    r5 = r0 + 128;
                    r6 = r6 + -7352;
                    r7 = r2 + r0;
                    r4 = r4 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x21ee0;
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x21ee0:
                    /* Next insn is delay slot */ 
                    r31=0x21ee8;
                    pc=0x13000;
                    run_13000(); return;
                case 0x21ee8:
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x21ef4;
                    pc=0x22200;
                    run_22200(); return;
                case 0x21ef4:
                    r2 = r0 + 1;
                    writePages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x21f04;
                    pc=0x20400;
                    run_20400(); return;
                case 0x21f04:
                    r4 = 7 << 16;
                    r4 = r4 + -7332;
                    /* Next insn is delay slot */ 
                    r31=0x21f14;
                    pc=0x22600;
                    run_22600(); return;
                case 0x21f14:
                    /* Next insn is delay slot */ 
                    r31=0x21f1c;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x21f1c:
                    r2 = r0 + 2;
                    writePages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x21f2c;
                    pc=0x14000;
                    run_14000(); return;
                case 0x21f2c:
                    /* Next insn is delay slot */ 
                    r31=0x21f34;
                    pc=0x25800;
                    run_25800(); return;
                case 0x21f34:
                    /* Next insn is delay slot */ 
                    r31=0x21f3c;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x21f3c:
                    /* Next insn is delay slot */ 
                    r31=0x21f44;
                    pc=0x20400;
                    run_20400(); return;
                case 0x21f44:
                    /* Next insn is delay slot */ 
                    r31=0x21f4c;
                    pc=0x22400;
                    run_22400(); return;
                case 0x21f4c:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r20 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r19 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21f74:
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r6 = readPages[(r28+-32248)>>>12][((r28+-32248)>>>2)&0x3ff];
                    r5 = r5 + -7600;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21f94;
                    pc=0x36600;
                    run_36600(); return;
                case 0x21f94:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x21fa0;
                    pc=0x33400;
                    run_33400(); return;
                case 0x21fa0:
                    r4 = 7 << 16;
                    r4 = r4 + -7412;
                    /* Next insn is delay slot */ 
                    r31=0x21fb0;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x21fb0:
                    r4 = 7 << 16;
                    r4 = r4 + -7476;
                    /* Next insn is delay slot */ 
                    r31=0x21fc0;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x21fc0:
                    r4 = 7 << 16;
                    r4 = r4 + -7544;
                    /* Next insn is delay slot */ 
                    r31=0x21fd0;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x21fd0:
                    r4 = 7 << 16;
                    r4 = r4 + -7560;
                    /* Next insn is delay slot */ 
                    r31=0x21fe0;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x21fe0:
                    r4 = 7 << 16;
                    r4 = r4 + -7648;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21ff4;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x21ff4:
                case 0x22000:
                    pc=0x22000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22000() throws ExecutionException { /* 0x22000 - 0x22200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22000:
                    r29 = r29 + -24;
                    r2 = (r4&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x220f8;
                        continue;
                    }
                    r2 = 7 << 16;
                    r2 = r2 + 18076;
                    r4 = r4 << 2;
                    r4 = r2 + r4;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x22034:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = 7 << 16;
                    r2 = r2 + -6516;
                    writePages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22050:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = 7 << 16;
                    r2 = r2 + -3444;
                    writePages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2206c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = 7 << 16;
                    r2 = r2 + -372;
                    writePages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22088:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = 7 << 16;
                    r2 = r2 + 8844;
                    writePages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x220a4:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = 7 << 16;
                    r2 = r2 + 5772;
                    writePages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x220c0:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = 7 << 16;
                    r2 = r2 + 11916;
                    writePages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x220dc:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = 7 << 16;
                    r2 = r2 + 14988;
                    writePages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x220f8:
                    r4 = 7 << 16;
                    r4 = r4 + 18060;
                    /* Next insn is delay slot */ 
                    r31=0x22108;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x22108:
                case 0x22200:
                    pc=0x22200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22200() throws ExecutionException { /* 0x22200 - 0x22400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22200:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2229c;
                        continue;
                    }
                    r5 = 7 << 16;
                    r5 = r5 + 18116;
                    /* Next insn is delay slot */ 
                    r31=0x2222c;
                    pc=0x36200;
                    run_36200(); return;
                case 0x2222c:
                    writePages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff] = r2;
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x222b8;
                        continue;
                    }
                case 0x2223c:
                    /* Next insn is delay slot */ 
                    r31=0x22244;
                    pc=0x30200;
                    run_30200(); return;
                case 0x22244:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x22274;
                    pc=0x36600;
                    run_36600(); return;
                case 0x22274:
                    r2 = r0 + 5;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2229c:
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r16 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x2223c;
                    continue;
                case 0x222b8:
                    /* Next insn is delay slot */ 
                    r31=0x222c0;
                    pc=0x33200;
                    run_33200(); return;
                case 0x222c0:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x222cc;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x222cc:
                    r4 = 7 << 16;
                    r4 = r4 + -11952;
                    r5 = r17 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x222e4;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x222e4:
                case 0x22400:
                    pc=0x22400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22400() throws ExecutionException { /* 0x22400 - 0x22600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22400:
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2242c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x22424;
                    pc=0x33800;
                    run_33800(); return;
                case 0x22424:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2243c;
                        continue;
                    }
                case 0x2242c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2243c:
                    /* Next insn is delay slot */ 
                    r31=0x22444;
                    pc=0x33200;
                    run_33200(); return;
                case 0x22444:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x22450;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x22450:
                    r4 = 7 << 16;
                    r4 = r4 + 18184;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x22464;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x22464:
                case 0x22600:
                    pc=0x22600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22600() throws ExecutionException { /* 0x22600 - 0x22800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22600:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22634;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22634:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r6 = r29 + 36;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x2264c;
                    pc=0x47c00;
                    run_47c00(); return;
                case 0x2264c:
                    r3 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22800:
                    pc=0x22800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22800() throws ExecutionException { /* 0x22800 - 0x22a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22800:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22830;
                        continue;
                    }
                case 0x2281c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22830:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2281c;
                        continue;
                    }
                case 0x22844:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x22854;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x22854:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22844;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22a00:
                    pc=0x22a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22a00() throws ExecutionException { /* 0x22a00 - 0x22c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22a00:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22a30;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22a30:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x22a40;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x22a40:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22acc;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22acc;
                        continue;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22ae8;
                        continue;
                    }
                case 0x22a7c:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x22a94;
                    pc=0x30200;
                    run_30200(); return;
                case 0x22a94:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x22ac4;
                    pc=0x36600;
                    run_36600(); return;
                case 0x22ac4:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x22acc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22ae8:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x22af8;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x22af8:
                    /* Next insn is delay slot */ 
                    pc=0x22a7c;
                    continue;
                case 0x22c00:
                    pc=0x22c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22c00() throws ExecutionException { /* 0x22c00 - 0x22e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22c00:
                    r5 = r4 + r0;
                    r4 = 7 << 16;
                    r29 = r29 + -32;
                    r4 = r4 + 18216;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x22c20;
                    pc=0x22600;
                    run_22600(); return;
                case 0x22c20:
                    r3 = readPages[(r28+-32744)>>>12][((r28+-32744)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r3 = r3 + 2;
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22c4c;
                        continue;
                    }
                    r3 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22c60;
                        continue;
                    }
                case 0x22c4c:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22c74;
                        continue;
                    }
                case 0x22c60:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22c74:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x22c84;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x22c84:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22d10;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22d10;
                        continue;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22d2c;
                        continue;
                    }
                case 0x22cc0:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x22cd8;
                    pc=0x30200;
                    run_30200(); return;
                case 0x22cd8:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x22d08;
                    pc=0x36600;
                    run_36600(); return;
                case 0x22d08:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x22d10:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22d2c:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x22d3c;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x22d3c:
                    /* Next insn is delay slot */ 
                    pc=0x22cc0;
                    continue;
                case 0x22e00:
                    pc=0x22e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22e00() throws ExecutionException { /* 0x22e00 - 0x23000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22e00:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22e48;
                        continue;
                    }
                case 0x22e28:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22e48:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r18 = r4 + r0;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    r16 = r5 + r0;
                    r17 = r6 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f08;
                        continue;
                    }
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x22e74;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x22e74:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f00;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f00;
                        continue;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23134;
                        run_23000(); return;
                    }
                case 0x22eb0:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r19 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x22ec8;
                    pc=0x30200;
                    run_30200(); return;
                case 0x22ec8:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r19 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x22ef8;
                    pc=0x36600;
                    run_36600(); return;
                case 0x22ef8:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x22f00:
                    r2 = r0 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                case 0x22f08:
                    r4 = 7 << 16;
                    r5 = r18 + r0;
                    r4 = r4 + 18480;
                    /* Next insn is delay slot */ 
                    r31=0x22f1c;
                    pc=0x22600;
                    run_22600(); return;
                case 0x22f1c:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r18 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23060;
                        run_23000(); return;
                    }
                case 0x22f30:
                    addr=r28+-32400;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23044;
                        run_23000(); return;
                    }
                    r4 = 7 << 16;
                    r4 = r4 + 18220;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x22f54;
                    pc=0x22600;
                    run_22600(); return;
                case 0x22f54:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f84;
                        continue;
                    }
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x230d4;
                        run_23000(); return;
                    }
                case 0x22f70:
                    r4 = 7 << 16;
                    r4 = r4 + 18248;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x22f84;
                    pc=0x22600;
                    run_22600(); return;
                case 0x22f84:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22e28;
                        continue;
                    }
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x22fa8;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x22fa8:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23034;
                        run_23000(); return;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23034;
                        run_23000(); return;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2311c;
                        run_23000(); return;
                    }
                case 0x22fe4:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x22ffc;
                    pc=0x30200;
                    run_30200(); return;
                case 0x22ffc:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                case 0x23000:
                    pc=0x23000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23000() throws ExecutionException { /* 0x23000 - 0x23200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23000:
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x2302c;
                    pc=0x36600;
                    run_36600(); return;
                case 0x2302c:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x23034:
                    r2 = r0 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x22e28;
                    run_22e00(); return;
                case 0x23044:
                    r4 = 7 << 16;
                    r4 = r4 + 18236;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23058;
                    pc=0x22600;
                    run_22600(); return;
                case 0x23058:
                    /* Next insn is delay slot */ 
                    pc=0x22f54;
                    run_22e00(); return;
                case 0x23060:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f30;
                        run_22e00(); return;
                    }
                case 0x23074:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x23084;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23084:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f30;
                        run_22e00(); return;
                    }
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x230b0;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x230b0:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23074;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x22f30;
                    run_22e00(); return;
                case 0x230d4:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f70;
                        run_22e00(); return;
                    }
                case 0x230e8:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x230f8;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x230f8:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230e8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x22f70;
                    run_22e00(); return;
                case 0x2311c:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x2312c;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x2312c:
                    /* Next insn is delay slot */ 
                    pc=0x22fe4;
                    run_22e00(); return;
                case 0x23134:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x23144;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23144:
                    /* Next insn is delay slot */ 
                    pc=0x22eb0;
                    run_22e00(); return;
                case 0x23200:
                    pc=0x23200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23200() throws ExecutionException { /* 0x23200 - 0x23400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23200:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r16;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23238;
                        continue;
                    }
                case 0x23220:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23238:
                    r7 = r4 + r0;
                    r4 = 7 << 16;
                    r16 = r5 + r0;
                    r4 = r4 + 18480;
                    r5 = r7 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x23258;
                    pc=0x22600;
                    run_22600(); return;
                case 0x23258:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    r6 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23374;
                        continue;
                    }
                case 0x23270:
                    r4 = 7 << 16;
                    r4 = r4 + 18256;
                    r5 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23284;
                    pc=0x22600;
                    run_22600(); return;
                case 0x23284:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x232b4;
                        continue;
                    }
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r17 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x233c0;
                        continue;
                    }
                case 0x232a0:
                    r4 = 7 << 16;
                    r4 = r4 + 18248;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x232b4;
                    pc=0x22600;
                    run_22600(); return;
                case 0x232b4:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23220;
                        continue;
                    }
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x232d8;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x232d8:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23364;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23364;
                        continue;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23408;
                        run_23400(); return;
                    }
                case 0x23314:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x2332c;
                    pc=0x30200;
                    run_30200(); return;
                case 0x2332c:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x2335c;
                    pc=0x36600;
                    run_36600(); return;
                case 0x2335c:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x23364:
                    r2 = r0 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x23220;
                    continue;
                case 0x23374:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23270;
                        continue;
                    }
                case 0x23388:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x2339c;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x2339c:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r6 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23388;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x23270;
                    continue;
                case 0x233c0:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x232a0;
                        continue;
                    }
                case 0x233d4:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x233e4;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x233e4:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x233d4;
                        continue;
                    }
                case 0x23400:
                    pc=0x23400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23400() throws ExecutionException { /* 0x23400 - 0x23600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23400:
                    /* Next insn is delay slot */ 
                    pc=0x232a0;
                    run_23200(); return;
                case 0x23408:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x23418;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23418:
                    /* Next insn is delay slot */ 
                    pc=0x23314;
                    run_23200(); return;
                case 0x23600:
                    pc=0x23600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23600() throws ExecutionException { /* 0x23600 - 0x23800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23600:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23630;
                        continue;
                    }
                case 0x2361c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23630:
                    r2 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2361c;
                        continue;
                    }
                    r4 = 7 << 16;
                    r4 = r4 + 18268;
                    /* Next insn is delay slot */ 
                    r31=0x23650;
                    pc=0x22600;
                    run_22600(); return;
                case 0x23650:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2361c;
                        continue;
                    }
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x23674;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23674:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23700;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23700;
                        continue;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23710;
                        continue;
                    }
                case 0x236b0:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x236c8;
                    pc=0x30200;
                    run_30200(); return;
                case 0x236c8:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x236f8;
                    pc=0x36600;
                    run_36600(); return;
                case 0x236f8:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x23700:
                    r2 = r0 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2361c;
                    continue;
                case 0x23710:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x23720;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23720:
                    /* Next insn is delay slot */ 
                    pc=0x236b0;
                    continue;
                case 0x23800:
                    pc=0x23800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23800() throws ExecutionException { /* 0x23800 - 0x23a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23800:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23840;
                        continue;
                    }
                case 0x23824:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23840:
                    r16 = r5 + r0;
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x23858;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23858:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x238e4;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x238e4;
                        continue;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23b6c;
                        run_23a00(); return;
                    }
                case 0x23894:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r18 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x238ac;
                    pc=0x30200;
                    run_30200(); return;
                case 0x238ac:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r18 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x238dc;
                    pc=0x36600;
                    run_36600(); return;
                case 0x238dc:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x238e4:
                    r4 = 7 << 16;
                    r2 = r0 + 1;
                    r4 = r4 + 18348;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x238fc;
                    pc=0x22600;
                    run_22600(); return;
                case 0x238fc:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r18 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23ac8;
                        run_23a00(); return;
                    }
                case 0x23910:
                    r4 = 7 << 16;
                    r4 = r4 + 18360;
                    r5 = r17 + r0;
                    writePages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x23928;
                    pc=0x22600;
                    run_22600(); return;
                case 0x23928:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23950;
                        continue;
                    }
                    r4 = r16 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x2393c;
                    pc=0x2a000;
                    run_2a000(); return;
                case 0x2393c:
                    r4 = 7 << 16;
                    r4 = r4 + 19224;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23950;
                    pc=0x22600;
                    run_22600(); return;
                case 0x23950:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23824;
                        continue;
                    }
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x23974;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23974:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a00;
                        run_23a00(); return;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a00;
                        run_23a00(); return;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23b54;
                        run_23a00(); return;
                    }
                case 0x239b0:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x239c8;
                    pc=0x30200;
                    run_30200(); return;
                case 0x239c8:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x239f8;
                    pc=0x36600;
                    run_36600(); return;
                case 0x239f8:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x23a00:
                    pc=0x23a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23a00() throws ExecutionException { /* 0x23a00 - 0x23c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23a00:
                    r2 = r0 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23824;
                        run_23800(); return;
                    }
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x23a2c;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23a2c:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ab8;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ab8;
                        continue;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23b3c;
                        continue;
                    }
                case 0x23a68:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x23a80;
                    pc=0x30200;
                    run_30200(); return;
                case 0x23a80:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x23ab0;
                    pc=0x36600;
                    run_36600(); return;
                case 0x23ab0:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x23ab8:
                    r2 = r0 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x23824;
                    run_23800(); return;
                case 0x23ac8:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23910;
                        run_23800(); return;
                    }
                case 0x23adc:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x23aec;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23aec:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23910;
                        run_23800(); return;
                    }
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x23b18;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23b18:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23adc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x23910;
                    run_23800(); return;
                case 0x23b3c:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x23b4c;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23b4c:
                    /* Next insn is delay slot */ 
                    pc=0x23a68;
                    continue;
                case 0x23b54:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x23b64;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23b64:
                    /* Next insn is delay slot */ 
                    pc=0x239b0;
                    run_23800(); return;
                case 0x23b6c:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x23b7c;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23b7c:
                    /* Next insn is delay slot */ 
                    pc=0x23894;
                    run_23800(); return;
                case 0x23c00:
                    pc=0x23c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23c00() throws ExecutionException { /* 0x23c00 - 0x23e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23c00:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23c7c;
                        continue;
                    }
                    r4 = 7 << 16;
                    r5 = readPages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff];
                    r4 = r4 + 18368;
                    /* Next insn is delay slot */ 
                    r31=0x23c30;
                    pc=0x22600;
                    run_22600(); return;
                case 0x23c30:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23d48;
                        continue;
                    }
                case 0x23c44:
                    r4 = 7 << 16;
                    r4 = r4 + 18392;
                    /* Next insn is delay slot */ 
                    r31=0x23c54;
                    pc=0x22600;
                    run_22600(); return;
                case 0x23c54:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23e80;
                        run_23e00(); return;
                    }
                case 0x23c68:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23c7c:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x23c8c;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23c8c:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d18;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d18;
                        continue;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24078;
                        run_24000(); return;
                    }
                case 0x23cc8:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x23ce0;
                    pc=0x30200;
                    run_30200(); return;
                case 0x23ce0:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x23d10;
                    pc=0x36600;
                    run_36600(); return;
                case 0x23d10:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x23d18:
                    r4 = 7 << 16;
                    r5 = readPages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r4 = r4 + 18368;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x23d34;
                    pc=0x22600;
                    run_22600(); return;
                case 0x23d34:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23c44;
                        continue;
                    }
                case 0x23d48:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x23d58;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23d58:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d84;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ff8;
                        run_23e00(); return;
                    }
                case 0x23d84:
                    r2 = r0 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23c44;
                        continue;
                    }
                    r2 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23c44;
                        continue;
                    }
                    r4 = 7 << 16;
                    r4 = r4 + 18268;
                    /* Next insn is delay slot */ 
                    r31=0x23dc0;
                    pc=0x22600;
                    run_22600(); return;
                case 0x23dc0:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23c44;
                        continue;
                    }
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x23de4;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23de4:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e70;
                        run_23e00(); return;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                case 0x23e00:
                    pc=0x23e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23e00() throws ExecutionException { /* 0x23e00 - 0x24000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23e00:
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e70;
                        continue;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x240c0;
                        run_24000(); return;
                    }
                case 0x23e20:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x23e38;
                    pc=0x30200;
                    run_30200(); return;
                case 0x23e38:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x23e68;
                    pc=0x36600;
                    run_36600(); return;
                case 0x23e68:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x23e70:
                    r2 = r0 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x23c44;
                    run_23c00(); return;
                case 0x23e80:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x23e90;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23e90:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ebc;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23f90;
                        continue;
                    }
                case 0x23ebc:
                    r2 = r0 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23c68;
                        run_23c00(); return;
                    }
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x23ee8;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x23ee8:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23f74;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23f74;
                        continue;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24060;
                        run_24000(); return;
                    }
                case 0x23f24:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x23f3c;
                    pc=0x30200;
                    run_30200(); return;
                case 0x23f3c:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x23f6c;
                    pc=0x36600;
                    run_36600(); return;
                case 0x23f6c:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x23f74:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23f90:
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24090;
                        run_24000(); return;
                    }
                case 0x23fa0:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x23fb8;
                    pc=0x30200;
                    run_30200(); return;
                case 0x23fb8:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x23fe8;
                    pc=0x36600;
                    run_36600(); return;
                case 0x23fe8:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x23ebc;
                    continue;
                case 0x23ff8:
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x24000:
                    pc=0x24000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24000() throws ExecutionException { /* 0x24000 - 0x24200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24000:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x240a8;
                        continue;
                    }
                case 0x24008:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x24020;
                    pc=0x30200;
                    run_30200(); return;
                case 0x24020:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x24050;
                    pc=0x36600;
                    run_36600(); return;
                case 0x24050:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x23d84;
                    run_23c00(); return;
                case 0x24060:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x24070;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x24070:
                    /* Next insn is delay slot */ 
                    pc=0x23f24;
                    run_23e00(); return;
                case 0x24078:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x24088;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x24088:
                    /* Next insn is delay slot */ 
                    pc=0x23cc8;
                    run_23c00(); return;
                case 0x24090:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x240a0;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x240a0:
                    /* Next insn is delay slot */ 
                    pc=0x23fa0;
                    run_23e00(); return;
                case 0x240a8:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x240b8;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x240b8:
                    /* Next insn is delay slot */ 
                    pc=0x24008;
                    continue;
                case 0x240c0:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x240d0;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x240d0:
                    /* Next insn is delay slot */ 
                    pc=0x23e20;
                    run_23e00(); return;
                case 0x24200:
                    pc=0x24200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24200() throws ExecutionException { /* 0x24200 - 0x24400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24200:
                    r5 = r4 + r0;
                    r4 = 7 << 16;
                    r29 = r29 + -32;
                    r4 = r4 + 18248;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x24220;
                    pc=0x22600;
                    run_22600(); return;
                case 0x24220:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24248;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24248:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x24258;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x24258:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x242e4;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x242e4;
                        continue;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24300;
                        continue;
                    }
                case 0x24294:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x242ac;
                    pc=0x30200;
                    run_30200(); return;
                case 0x242ac:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x242dc;
                    pc=0x36600;
                    run_36600(); return;
                case 0x242dc:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x242e4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24300:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x24310;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x24310:
                    /* Next insn is delay slot */ 
                    pc=0x24294;
                    continue;
                case 0x24400:
                    pc=0x24400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24400() throws ExecutionException { /* 0x24400 - 0x24600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24400:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24450;
                        continue;
                    }
                case 0x2442c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24450:
                    r2 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2442c;
                        continue;
                    }
                    r16 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r19 = r4 + r0;
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    r20 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x244ac;
                        continue;
                    }
                case 0x24480:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x24490;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x24490:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24480;
                        continue;
                    }
                case 0x244ac:
                    r4 = 7 << 16;
                    r4 = r4 + 18400;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x244c0;
                    pc=0x22600;
                    run_22600(); return;
                case 0x244c0:
                    r2 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (3&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2442c;
                        continue;
                    }
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2451c;
                        continue;
                    }
                    r2 = 18 << 16;
                    r2 = r2 + -20096;
                    r16 = r2 + r19;
                    r17 = 7 << 16;
                    r2 = r2 + r20;
                    r18 = r2 + r19;
                    r17 = r17 + 18408;
                case 0x244f8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r17 + r0;
                    r16 = r16 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x2450c;
                    pc=0x22600;
                    run_22600(); return;
                case 0x2450c:
                    if(r16 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x244f8;
                        continue;
                    }
                    r2 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                case 0x2451c:
                    r2 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2442c;
                        continue;
                    }
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32760)>>>12][((r28+-32760)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x245c4;
                        continue;
                    }
                case 0x2453c:
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2442c;
                        continue;
                    }
                    r2 = 18 << 16;
                    r2 = r2 + -20096;
                    r16 = r2 + r19;
                    r17 = 7 << 16;
                    r2 = r2 + r20;
                    r18 = r2 + r19;
                    r17 = r17 + -11580;
                case 0x24560:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r2 = r2 + r5;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r2 = r2 & 151;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24588;
                        continue;
                    }
                    r5 = r0 + 46;
                case 0x24588:
                    r4 = r17 + r0;
                    r16 = r16 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x24598;
                    pc=0x22600;
                    run_22600(); return;
                case 0x24598:
                    if(r16 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x24560;
                        continue;
                    }
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x245c4:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2453c;
                        continue;
                    }
                case 0x245d8:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x245e8;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x245e8:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x245d8;
                        continue;
                    }
                case 0x24600:
                    pc=0x24600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24600() throws ExecutionException { /* 0x24600 - 0x24800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24600:
                    /* Next insn is delay slot */ 
                    pc=0x2453c;
                    run_24400(); return;
                case 0x24800:
                    pc=0x24800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24800() throws ExecutionException { /* 0x24800 - 0x24a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24800:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    r17 = r4 + r0;
                    r16 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24a04;
                        run_24a00(); return;
                    }
                case 0x24834:
                    r4 = 7 << 16;
                    r4 = r4 + -11592;
                    /* Next insn is delay slot */ 
                    r31=0x24844;
                    pc=0x22600;
                    run_22600(); return;
                case 0x24844:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x248f4;
                        continue;
                    }
                case 0x24858:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x248ac;
                        continue;
                    }
                    r18 = 18 << 16;
                    r2 = 7 << 16;
                    r19 = 7 << 16;
                    r16 = r0 + r0;
                    r18 = r18 + -20096;
                    r20 = r2 + -11524;
                    r19 = r19 + 18416;
                case 0x2487c:
                    r2 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24a64;
                        run_24a00(); return;
                    }
                    r2 = r16 + r2;
                    r2 = r18 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x248a0;
                    pc=0x22600;
                    run_22600(); return;
                case 0x248a0:
                    r16 = r16 + 1;
                    if(r16 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x2487c;
                        continue;
                    }
                case 0x248ac:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x248bc;
                    pc=0x24400;
                    run_24400(); return;
                case 0x248bc:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2493c;
                        continue;
                    }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x248f4:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24858;
                        continue;
                    }
                case 0x24908:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x24918;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x24918:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24908;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x24858;
                    continue;
                case 0x2493c:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x2494c;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x2494c:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x249d8;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x249d8;
                        continue;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24a4c;
                        run_24a00(); return;
                    }
                case 0x24988:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x249a0;
                    pc=0x30200;
                    run_30200(); return;
                case 0x249a0:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x249d0;
                    pc=0x36600;
                    run_36600(); return;
                case 0x249d0:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x249d8:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24a00:
                    pc=0x24a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24a00() throws ExecutionException { /* 0x24a00 - 0x24c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24a00:
                case 0x24a04:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24834;
                        run_24800(); return;
                    }
                case 0x24a18:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x24a28;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x24a28:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24a18;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x24834;
                    run_24800(); return;
                case 0x24a4c:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x24a5c;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x24a5c:
                    /* Next insn is delay slot */ 
                    pc=0x24988;
                    run_24800(); return;
                case 0x24a64:
                    r2 = r18 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24a78;
                    pc=0x22600;
                    run_22600(); return;
                case 0x24a78:
                    /* Next insn is delay slot */ 
                    pc=0x248a0;
                    run_24800(); return;
                case 0x24c00:
                    pc=0x24c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24c00() throws ExecutionException { /* 0x24c00 - 0x24e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24c00:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r17 = r4 + r0;
                    r16 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24db0;
                        continue;
                    }
                case 0x24c30:
                    r4 = 7 << 16;
                    r4 = r4 + 18424;
                    /* Next insn is delay slot */ 
                    r31=0x24c40;
                    pc=0x22600;
                    run_22600(); return;
                case 0x24c40:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24e14;
                        run_24e00(); return;
                    }
                case 0x24c54:
                    r16 = r0 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24ca8;
                        continue;
                    }
                    r18 = 7 << 16;
                    r2 = 7 << 16;
                    r18 = r18 + 18432;
                    r19 = r2 + -9064;
                case 0x24c70:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24e74;
                        run_24e00(); return;
                    }
                    r4 = r16 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x24c88;
                    pc=0x13600;
                    run_13600(); return;
                case 0x24c88:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24c98;
                    pc=0x22600;
                    run_22600(); return;
                case 0x24c98:
                    r16 = r16 + 2;
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24c70;
                        continue;
                    }
                case 0x24ca8:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24cb8;
                    pc=0x24400;
                    run_24400(); return;
                case 0x24cb8:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24cec;
                        continue;
                    }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24cec:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x24cfc;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x24cfc:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24d88;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24d88;
                        continue;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24e5c;
                        run_24e00(); return;
                    }
                case 0x24d38:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x24d50;
                    pc=0x30200;
                    run_30200(); return;
                case 0x24d50:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x24d80;
                    pc=0x36600;
                    run_36600(); return;
                case 0x24d80:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x24d88:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24db0:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24c30;
                        continue;
                    }
                case 0x24dc4:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x24dd4;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x24dd4:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24dc4;
                        continue;
                    }
                    r4 = 7 << 16;
                    r4 = r4 + 18424;
                    /* Next insn is delay slot */ 
                    r31=0x24e00;
                    pc=0x22600;
                    run_22600(); return;
                case 0x24e00:
                    pc=0x24e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24e00() throws ExecutionException { /* 0x24e00 - 0x25000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24e00:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24c54;
                        run_24c00(); return;
                    }
                case 0x24e14:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24c54;
                        run_24c00(); return;
                    }
                case 0x24e28:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x24e38;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x24e38:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24e28;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x24c54;
                    run_24c00(); return;
                case 0x24e5c:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x24e6c;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x24e6c:
                    /* Next insn is delay slot */ 
                    pc=0x24d38;
                    run_24c00(); return;
                case 0x24e74:
                    /* Next insn is delay slot */ 
                    r31=0x24e7c;
                    pc=0x13600;
                    run_13600(); return;
                case 0x24e7c:
                    r5 = r2 + r0;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24e8c;
                    pc=0x22600;
                    run_22600(); return;
                case 0x24e8c:
                    /* Next insn is delay slot */ 
                    pc=0x24c98;
                    run_24c00(); return;
                case 0x25000:
                    pc=0x25000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25000() throws ExecutionException { /* 0x25000 - 0x25200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25000:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r17 = r4 + r0;
                    r16 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x251b0;
                        continue;
                    }
                case 0x25030:
                    r4 = 7 << 16;
                    r4 = r4 + -11608;
                    /* Next insn is delay slot */ 
                    r31=0x25040;
                    pc=0x22600;
                    run_22600(); return;
                case 0x25040:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25214;
                        run_25200(); return;
                    }
                case 0x25054:
                    r16 = r0 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x250a8;
                        continue;
                    }
                    r18 = 7 << 16;
                    r2 = 7 << 16;
                    r18 = r18 + 18432;
                    r19 = r2 + -9064;
                case 0x25070:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25274;
                        run_25200(); return;
                    }
                    r4 = r16 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x25088;
                    pc=0x13800;
                    run_13800(); return;
                case 0x25088:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x25098;
                    pc=0x22600;
                    run_22600(); return;
                case 0x25098:
                    r16 = r16 + 2;
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25070;
                        continue;
                    }
                case 0x250a8:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x250b8;
                    pc=0x24400;
                    run_24400(); return;
                case 0x250b8:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x250ec;
                        continue;
                    }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x250ec:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x250fc;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x250fc:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25188;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25188;
                        continue;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2525c;
                        run_25200(); return;
                    }
                case 0x25138:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x25150;
                    pc=0x30200;
                    run_30200(); return;
                case 0x25150:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x25180;
                    pc=0x36600;
                    run_36600(); return;
                case 0x25180:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x25188:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x251b0:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25030;
                        continue;
                    }
                case 0x251c4:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x251d4;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x251d4:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x251c4;
                        continue;
                    }
                    r4 = 7 << 16;
                    r4 = r4 + -11608;
                    /* Next insn is delay slot */ 
                    r31=0x25200;
                    pc=0x22600;
                    run_22600(); return;
                case 0x25200:
                    pc=0x25200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25200() throws ExecutionException { /* 0x25200 - 0x25400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25200:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25054;
                        run_25000(); return;
                    }
                case 0x25214:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25054;
                        run_25000(); return;
                    }
                case 0x25228:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x25238;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x25238:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25228;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x25054;
                    run_25000(); return;
                case 0x2525c:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x2526c;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x2526c:
                    /* Next insn is delay slot */ 
                    pc=0x25138;
                    run_25000(); return;
                case 0x25274:
                    /* Next insn is delay slot */ 
                    r31=0x2527c;
                    pc=0x13800;
                    run_13800(); return;
                case 0x2527c:
                    r5 = r2 + r0;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2528c;
                    pc=0x22600;
                    run_22600(); return;
                case 0x2528c:
                    /* Next insn is delay slot */ 
                    pc=0x25098;
                    run_25000(); return;
                case 0x25400:
                    pc=0x25400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25400() throws ExecutionException { /* 0x25400 - 0x25600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25400:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r17 = r4 + r0;
                    r16 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x255b0;
                        continue;
                    }
                case 0x25430:
                    r4 = 7 << 16;
                    r4 = r4 + 18440;
                    /* Next insn is delay slot */ 
                    r31=0x25440;
                    pc=0x22600;
                    run_22600(); return;
                case 0x25440:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25614;
                        run_25600(); return;
                    }
                case 0x25454:
                    r16 = r0 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x254a8;
                        continue;
                    }
                    r18 = 7 << 16;
                    r2 = 7 << 16;
                    r18 = r18 + 18448;
                    r19 = r2 + 18456;
                case 0x25470:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25674;
                        run_25600(); return;
                    }
                    r4 = r16 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x25488;
                    pc=0x13a00;
                    run_13a00(); return;
                case 0x25488:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x25498;
                    pc=0x22600;
                    run_22600(); return;
                case 0x25498:
                    r16 = r16 + 4;
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25470;
                        continue;
                    }
                case 0x254a8:
                    r4 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x254b8;
                    pc=0x24400;
                    run_24400(); return;
                case 0x254b8:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x254ec;
                        continue;
                    }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x254ec:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x254fc;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x254fc:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25588;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25588;
                        continue;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2565c;
                        run_25600(); return;
                    }
                case 0x25538:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x25550;
                    pc=0x30200;
                    run_30200(); return;
                case 0x25550:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x25580;
                    pc=0x36600;
                    run_36600(); return;
                case 0x25580:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x25588:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x255b0:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25430;
                        continue;
                    }
                case 0x255c4:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x255d4;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x255d4:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x255c4;
                        continue;
                    }
                    r4 = 7 << 16;
                    r4 = r4 + 18440;
                    /* Next insn is delay slot */ 
                    r31=0x25600;
                    pc=0x22600;
                    run_22600(); return;
                case 0x25600:
                    pc=0x25600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25600() throws ExecutionException { /* 0x25600 - 0x25800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25600:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25454;
                        run_25400(); return;
                    }
                case 0x25614:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25454;
                        run_25400(); return;
                    }
                case 0x25628:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x25638;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x25638:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25628;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x25454;
                    run_25400(); return;
                case 0x2565c:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x2566c;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x2566c:
                    /* Next insn is delay slot */ 
                    pc=0x25538;
                    run_25400(); return;
                case 0x25674:
                    /* Next insn is delay slot */ 
                    r31=0x2567c;
                    pc=0x13a00;
                    run_13a00(); return;
                case 0x2567c:
                    r5 = r2 + r0;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2568c;
                    pc=0x22600;
                    run_22600(); return;
                case 0x2568c:
                    /* Next insn is delay slot */ 
                    pc=0x25498;
                    run_25400(); return;
                case 0x25800:
                    pc=0x25800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25800() throws ExecutionException { /* 0x25800 - 0x25a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25800:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25890;
                        continue;
                    }
                case 0x2581c:
                    r4 = 7 << 16;
                    r4 = r4 + 18464;
                    /* Next insn is delay slot */ 
                    r31=0x2582c;
                    pc=0x22600;
                    run_22600(); return;
                case 0x2582c:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25944;
                        continue;
                    }
                case 0x25840:
                    r3 = readPages[(r28+-32668)>>>12][((r28+-32668)>>>2)&0x3ff];
                    r2 = 7 << 16;
                    r3 = r3 << 2;
                    r2 = r2 + 29232;
                    r2 = r3 + r2;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = 7 << 16;
                    r4 = r4 + 18360;
                    /* Next insn is delay slot */ 
                    r31=0x25868;
                    pc=0x22600;
                    run_22600(); return;
                case 0x25868:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2598c;
                        continue;
                    }
                case 0x2587c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25890:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x258a0;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x258a0:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x258cc;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25b04;
                        run_25a00(); return;
                    }
                case 0x258cc:
                    r2 = r0 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2581c;
                        continue;
                    }
                    r2 = (r16&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2581c;
                        continue;
                    }
                case 0x258f4:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x25904;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x25904:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x258f4;
                        continue;
                    }
                    r4 = 7 << 16;
                    r4 = r4 + 18464;
                    /* Next insn is delay slot */ 
                    r31=0x25930;
                    pc=0x22600;
                    run_22600(); return;
                case 0x25930:
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25840;
                        continue;
                    }
                case 0x25944:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25840;
                        continue;
                    }
                case 0x25958:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x25968;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x25968:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25958;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x25840;
                    continue;
                case 0x2598c:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x2599c;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x2599c:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x259c8;
                        continue;
                    }
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25a9c;
                        run_25a00(); return;
                    }
                case 0x259c8:
                    r2 = r0 + 1;
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    addr=r28+-32726;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2587c;
                        continue;
                    }
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x259f4;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x259f4:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25a80;
                        run_25a00(); return;
                    }
                case 0x25a00:
                    pc=0x25a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25a00() throws ExecutionException { /* 0x25a00 - 0x25c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25a00:
                    r3 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25a80;
                        continue;
                    }
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25b6c;
                        continue;
                    }
                case 0x25a30:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x25a48;
                    pc=0x30200;
                    run_30200(); return;
                case 0x25a48:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x25a78;
                    pc=0x36600;
                    run_36600(); return;
                case 0x25a78:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                case 0x25a80:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25a9c:
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25b84;
                        continue;
                    }
                case 0x25aac:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x25ac4;
                    pc=0x30200;
                    run_30200(); return;
                case 0x25ac4:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x25af4;
                    pc=0x36600;
                    run_36600(); return;
                case 0x25af4:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x259c8;
                    run_25800(); return;
                case 0x25b04:
                    addr=r28+-32399;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25b9c;
                        continue;
                    }
                case 0x25b14:
                    r2 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x25b2c;
                    pc=0x30200;
                    run_30200(); return;
                case 0x25b2c:
                    r3 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r7 = 19 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r5 + 18120;
                    r6 = r2 + r0;
                    r7 = r7 + -20096;
                    /* Next insn is delay slot */ 
                    r31=0x25b5c;
                    pc=0x36600;
                    run_36600(); return;
                case 0x25b5c:
                    r2 = r0 + 5;
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x258cc;
                    run_25800(); return;
                case 0x25b6c:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x25b7c;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x25b7c:
                    /* Next insn is delay slot */ 
                    pc=0x25a30;
                    continue;
                case 0x25b84:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x25b94;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x25b94:
                    /* Next insn is delay slot */ 
                    pc=0x25aac;
                    continue;
                case 0x25b9c:
                    r5 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                    r4 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x25bac;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x25bac:
                    /* Next insn is delay slot */ 
                    pc=0x25b14;
                    continue;
                case 0x25c00:
                    pc=0x25c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25c00() throws ExecutionException { /* 0x25c00 - 0x25e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25c00:
                    r29 = r29 + -544;
                    writePages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff] = r5;
                    writePages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff] = r6;
                    writePages[(r29+556)>>>12][((r29+556)>>>2)&0x3ff] = r7;
                    r6 = r4 + r0;
                    r7 = r29 + 548;
                    r4 = r29 + 16;
                    r5 = r0 + 512;
                    writePages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff] = r31;
                    writePages[(r29+528)>>>12][((r29+528)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x25c30;
                    pc=0x32a00;
                    run_32a00(); return;
                case 0x25c30:
                    r4 = 7 << 16;
                    r5 = readPages[(r28+-32368)>>>12][((r28+-32368)>>>2)&0x3ff];
                    r6 = readPages[(r28+-32260)>>>12][((r28+-32260)>>>2)&0x3ff];
                    r7 = r29 + 16;
                    r4 = r4 + 18472;
                    /* Next insn is delay slot */ 
                    r31=0x25c4c;
                    pc=0x15a00;
                    run_15a00(); return;
                case 0x25c4c:
                    r31 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    r29 = r29 + 544;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25e00:
                    pc=0x25e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25e00() throws ExecutionException { /* 0x25e00 - 0x26000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25e00:
                    r29 = r29 + -544;
                    writePages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff] = r5;
                    writePages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff] = r6;
                    writePages[(r29+556)>>>12][((r29+556)>>>2)&0x3ff] = r7;
                    r6 = r4 + r0;
                    r7 = r29 + 548;
                    r4 = r29 + 16;
                    r5 = r0 + 512;
                    writePages[(r29+528)>>>12][((r29+528)>>>2)&0x3ff] = r7;
                    writePages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x25e30;
                    pc=0x32a00;
                    run_32a00(); return;
                case 0x25e30:
                    r4 = 7 << 16;
                    r5 = readPages[(r28+-32368)>>>12][((r28+-32368)>>>2)&0x3ff];
                    r6 = readPages[(r28+-32260)>>>12][((r28+-32260)>>>2)&0x3ff];
                    r4 = r4 + 18472;
                    r7 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x25e4c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x25e4c:
                case 0x26000:
                    pc=0x26000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26000() throws ExecutionException { /* 0x26000 - 0x26200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26000:
                    r29 = r29 + -48;
                    r4 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    r17 = r0 + 95;
                    r18 = r0 + 36;
                    r19 = r0 + 46;
                    r20 = r0 + 35;
                    r16 = r0 + 10;
                case 0x26038:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    /* Next insn is delay slot */ 
                    r31=0x26048;
                    pc=0x2ac00;
                    run_2ac00(); return;
                case 0x26048:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x260d0;
                        continue;
                    }
                case 0x26050:
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26218;
                        run_26200(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x2608c:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x2620c;
                        run_26200(); return;
                    }
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    r4 = r4 << 24;
                    r2 = r2 + 1;
                    r4 = r4 >> 24;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x260c8;
                    pc=0x2ac00;
                    run_2ac00(); return;
                case 0x260c8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26050;
                        continue;
                    }
                case 0x260d0:
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                    writePages[(r28+-32260)>>>12][((r28+-32260)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    writePages[(r28+-32256)>>>12][((r28+-32256)>>>2)&0x3ff] = r2;
                    if(r4 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x26954;
                        run_26800(); return;
                    }
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    /* Next insn is delay slot */ 
                    r31=0x26100;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x26100:
                    r4 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26958;
                        run_26800(); return;
                    }
                    if(r4 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x26ae0;
                        run_26a00(); return;
                    }
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    /* Next insn is delay slot */ 
                    r31=0x26124;
                    pc=0x2ae00;
                    run_2ae00(); return;
                case 0x26124:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26c9c;
                        run_26c00(); return;
                    }
                    r5 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                    if(r5 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x268a8;
                        run_26800(); return;
                    }
                    r2 = r5 < 47 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26240;
                        run_26200(); return;
                    }
                    if(r5 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x267f0;
                        run_26600(); return;
                    }
                    r2 = r5 < 36 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26378;
                        run_26200(); return;
                    }
                    r2 = r0 + 39;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x26578;
                        run_26400(); return;
                    }
                    r2 = r0 + 44;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x26678;
                        run_26600(); return;
                    }
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26f28;
                        run_26e00(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x261b0:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    r3 = r0 + 10;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x261dc;
                        continue;
                    }
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                case 0x261dc:
                    r2 = r0 + 8;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                case 0x261e4:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                case 0x26200:
                    pc=0x26200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26200() throws ExecutionException { /* 0x26200 - 0x26400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26200:
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2620c:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26038;
                    run_26000(); return;
                case 0x26218:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26224;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26224:
                    r3 = r0 + -1;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2608c;
                        run_26000(); return;
                    }
                    r4 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x26038;
                    run_26000(); return;
                case 0x26240:
                    r2 = r0 + 61;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x26700;
                        run_26600(); return;
                    }
                    r2 = r5 < 62 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x262e8;
                        continue;
                    }
                    r2 = r0 + 123;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x26778;
                        run_26600(); return;
                    }
                    r2 = r0 + 125;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x26678;
                        run_26600(); return;
                    }
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26efc;
                        run_26e00(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x262ac:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    r3 = r0 + 10;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x262d8;
                        continue;
                    }
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                case 0x262d8:
                    r2 = r0 + 6;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x262e8:
                    r2 = r0 + 58;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x26688;
                        run_26600(); return;
                    }
                    r2 = r0 + 59;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x26678;
                        run_26600(); return;
                    }
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26ed0;
                        run_26e00(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x2633c:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    r3 = r0 + 10;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x26368;
                        continue;
                    }
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                case 0x26368:
                    r2 = r0 + 7;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x26378:
                    r2 = r0 + -1;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x26568;
                        run_26400(); return;
                    }
                    r2 = r0 + 34;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x26678;
                        run_26600(); return;
                    }
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26f4c;
                        run_26e00(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x263cc:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    r3 = r0 + 10;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x263fc;
                        continue;
                    }
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                case 0x263fc:
                    r20 = 19 << 16;
                case 0x26400:
                    pc=0x26400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26400() throws ExecutionException { /* 0x26400 - 0x26600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26400:
                    r16 = r0 + r0;
                    r17 = r0 + 34;
                    r18 = r0 + 92;
                    r19 = r0 + -1;
                    r20 = r20 + -19968;
                case 0x26414:
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x26fc8;
                        run_26e00(); return;
                    }
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x264c4;
                        continue;
                    }
                    if(r2 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x26dec;
                        run_26c00(); return;
                    }
                    r3 = r0 + 10;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x26dec;
                        run_26c00(); return;
                    }
                case 0x26438:
                    r3 = (r16&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26450;
                        continue;
                    }
                    r3 = r16 + r20;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 + 1;
                case 0x26450:
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26930;
                        run_26800(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x2648c:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    r3 = r0 + 10;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x26414;
                        continue;
                    }
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x26414;
                    continue;
                case 0x264c4:
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26dd0;
                        run_26c00(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r5;
                case 0x26500:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    r3 = r0 + 10;
                    if(r5 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2652c;
                        continue;
                    }
                    r3 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r3 = r3 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r3;
                case 0x2652c:
                    r3 = r0 + 10;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x26dec;
                        run_26c00(); return;
                    }
                    if(r5 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x2655c;
                        continue;
                    }
                    r3 = r0 + 39;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2655c;
                        continue;
                    }
                    r4 = 7 << 16;
                    r4 = r4 + 18524;
                    /* Next insn is delay slot */ 
                    r31=0x2655c;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x2655c:
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26438;
                    continue;
                case 0x26568:
                    r2 = r0 + 12;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x26578:
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e20;
                        run_26e00(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x265b4:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    r3 = r0 + 10;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x26920;
                        run_26800(); return;
                    }
                    r3 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r3 = r3 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r3;
                    r4 = r0 + 11;
                case 0x265e4:
                    r3 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r3 = r3 + r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 32;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e3c;
                        run_26e00(); return;
                    }
                case 0x26600:
                    pc=0x26600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26600() throws ExecutionException { /* 0x26600 - 0x26800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26600:
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    writePages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26dfc;
                        run_26c00(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x26640:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x26a64;
                        run_26a00(); return;
                    }
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                case 0x26668:
                    r4 = 7 << 16;
                    r4 = r4 + 18576;
                    /* Next insn is delay slot */ 
                    r31=0x26678;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x26678:
                    r4 = 7 << 16;
                    r4 = r4 + 18608;
                    /* Next insn is delay slot */ 
                    r31=0x26688;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x26688:
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26f9c;
                        run_26e00(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x266c4:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    r3 = r0 + 10;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x266f0;
                        continue;
                    }
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                case 0x266f0:
                    r2 = r0 + 10;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x26700:
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26ea4;
                        run_26e00(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x2673c:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    r3 = r0 + 10;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x26768;
                        continue;
                    }
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                case 0x26768:
                    r2 = r0 + 9;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x26778:
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e78;
                        run_26e00(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x267b4:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    r3 = r0 + 10;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x267e0;
                        continue;
                    }
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                case 0x267e0:
                    r2 = r0 + 5;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x267f0:
                    r4 = r0 + 35;
                    r21 = r0 + -1;
                case 0x267f8:
                    if(r4 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x26038;
                        run_26000(); return;
                    }
                case 0x26800:
                    pc=0x26800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26800() throws ExecutionException { /* 0x26800 - 0x26a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26800:
                    if(r4 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x26568;
                        run_26400(); return;
                    }
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26884;
                        continue;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x26844:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x26878;
                        continue;
                    }
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x267f8;
                    run_26600(); return;
                case 0x26878:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x267f8;
                    run_26600(); return;
                case 0x26884:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26890;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26890:
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x26844;
                        continue;
                    }
                    r4 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x267f8;
                    run_26600(); return;
                case 0x268a8:
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e4c;
                        run_26e00(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x268e4:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    r3 = r0 + 10;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x26910;
                        continue;
                    }
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                case 0x26910:
                    r2 = r0 + 11;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x26920:
                    r4 = r2 & 255;
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x265e4;
                    run_26400(); return;
                case 0x26930:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2693c;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x2693c:
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x2648c;
                        run_26400(); return;
                    }
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x26414;
                    run_26400(); return;
                case 0x26954:
                    r4 = r0 + 95;
                case 0x26958:
                    r19 = 19 << 16;
                    r16 = r0 + r0;
                    r19 = r19 + -19968;
                    r17 = r0 + 95;
                    r18 = r0 + 10;
                    r20 = r0 + -1;
                case 0x26970:
                    if(r4 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x26990;
                        continue;
                    }
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    /* Next insn is delay slot */ 
                    r31=0x26988;
                    pc=0x2a600;
                    run_2a600(); return;
                case 0x26988:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26a4c;
                        run_26a00(); return;
                    }
                case 0x26990:
                    r2 = (r16&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x269ac;
                        continue;
                    }
                    r3 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                    r2 = r19 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 + 1;
                case 0x269ac:
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26a28;
                        run_26a00(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x269e8:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x26a1c;
                        run_26a00(); return;
                    }
                case 0x26a00:
                    pc=0x26a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26a00() throws ExecutionException { /* 0x26a00 - 0x26c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26a00:
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x26970;
                    run_26800(); return;
                case 0x26a1c:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26970;
                    run_26800(); return;
                case 0x26a28:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26a34;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26a34:
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 != r20) {
                        /* Next insn is delay slot */ 
                        pc=0x269e8;
                        run_26800(); return;
                    }
                    r4 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x26970;
                    run_26800(); return;
                case 0x26a4c:
                    r16 = r19 + r16;
                    r2 = r0 + 4;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x26a64:
                    r4 = r0 + 39;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x26668;
                        run_26600(); return;
                    }
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26f74;
                        run_26e00(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x26aac:
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    r3 = r0 + 10;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x26ad0;
                        continue;
                    }
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                case 0x26ad0:
                    r2 = r0 + 3;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x26ae0:
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x27050;
                        run_27000(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x26b1c:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    r3 = r0 + 10;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x26b48;
                        continue;
                    }
                    r3 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r3 = r3 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r3;
                case 0x26b48:
                    r4 = r2 << 24;
                    r4 = r4 >> 24;
                    /* Next insn is delay slot */ 
                    r31=0x26b58;
                    pc=0x2b800;
                    run_2b800(); return;
                case 0x26b58:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27098;
                        run_27000(); return;
                    }
                    writePages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff] = r0;
                    r18 = r0 + 2;
                    r17 = r0 + 10;
                    r19 = r0 + -1;
                case 0x26b70:
                    r4 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                case 0x26b78:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    /* Next insn is delay slot */ 
                    r31=0x26b88;
                    pc=0x2b800;
                    run_2b800(); return;
                case 0x26b88:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26c68;
                        run_26c00(); return;
                    }
                    r16 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                    r20 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    r4 = r16 << 24;
                    r4 = r4 >> 24;
                    r20 = r20 << 4;
                    /* Next insn is delay slot */ 
                    r31=0x26bac;
                    pc=0x2ae00;
                    run_2ae00(); return;
                case 0x26bac:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26c50;
                        run_26c00(); return;
                    }
                    r2 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r2 = r2 + r16;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 3;
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x26c44;
                        run_26c00(); return;
                    }
                case 0x26bd4:
                    r16 = r16 + -55;
                case 0x26bd8:
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r20 = r16 + r20;
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    writePages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff] = r20;
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26c78;
                        run_26c00(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                case 0x26c00:
                    pc=0x26c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26c00() throws ExecutionException { /* 0x26c00 - 0x26e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26c00:
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x26c14:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    if(r2 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x26c5c;
                        continue;
                    }
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x26b70;
                    run_26a00(); return;
                case 0x26c44:
                    r16 = r16 + -32;
                    /* Next insn is delay slot */ 
                    pc=0x26bd4;
                    run_26a00(); return;
                case 0x26c50:
                    r16 = r16 + -48;
                    /* Next insn is delay slot */ 
                    pc=0x26bd8;
                    run_26a00(); return;
                case 0x26c5c:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26b78;
                    run_26a00(); return;
                case 0x26c68:
                    r2 = r0 + 1;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x26c78:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26c84;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26c84:
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x26c14;
                        continue;
                    }
                    r4 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x26b78;
                    run_26a00(); return;
                case 0x26c9c:
                    writePages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff] = r0;
                    r18 = r0 + 2;
                    r17 = r0 + 10;
                    r19 = r0 + -1;
                case 0x26cac:
                    r4 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                case 0x26cb4:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    /* Next insn is delay slot */ 
                    r31=0x26cc4;
                    pc=0x2ae00;
                    run_2ae00(); return;
                case 0x26cc4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26c68;
                        continue;
                    }
                    r16 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    r4 = r16 << 24;
                    r20 = r2 << 1;
                    r4 = r4 >> 24;
                    r2 = r2 << 3;
                    r20 = r20 + r2;
                    /* Next insn is delay slot */ 
                    r31=0x26cf0;
                    pc=0x2ae00;
                    run_2ae00(); return;
                case 0x26cf0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26d88;
                        continue;
                    }
                    r2 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r2 = r2 + r16;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 3;
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x26d7c;
                        continue;
                    }
                case 0x26d18:
                    r16 = r16 + -55;
                case 0x26d1c:
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r20 = r16 + r20;
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    writePages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff] = r20;
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26dac;
                        continue;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x26d58:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x26d94;
                        continue;
                    }
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26cb4;
                    continue;
                case 0x26d7c:
                    r16 = r16 + -32;
                    /* Next insn is delay slot */ 
                    pc=0x26d18;
                    continue;
                case 0x26d88:
                    r16 = r16 + -48;
                    /* Next insn is delay slot */ 
                    pc=0x26d1c;
                    continue;
                case 0x26d94:
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x26cac;
                    continue;
                case 0x26dac:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26db8;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26db8:
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x26d58;
                        continue;
                    }
                    r4 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x26cb4;
                    continue;
                case 0x26dd0:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26ddc;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26ddc:
                    r5 = r2 + r0;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x26500;
                        run_26400(); return;
                    }
                case 0x26dec:
                    r4 = 7 << 16;
                    r4 = r4 + 18504;
                    /* Next insn is delay slot */ 
                    r31=0x26dfc;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x26dfc:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                case 0x26e00:
                    pc=0x26e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26e00() throws ExecutionException { /* 0x26e00 - 0x27000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26e00:
                    /* Next insn is delay slot */ 
                    r31=0x26e08;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26e08:
                    r3 = r0 + -1;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x26668;
                        run_26600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x26640;
                    run_26600(); return;
                case 0x26e20:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26e2c;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26e2c:
                    r3 = r0 + -1;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x265b4;
                        run_26400(); return;
                    }
                case 0x26e3c:
                    r4 = 7 << 16;
                    r4 = r4 + 18548;
                    /* Next insn is delay slot */ 
                    r31=0x26e4c;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x26e4c:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26e58;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26e58:
                    r3 = r0 + -1;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x268e4;
                        run_26800(); return;
                    }
                    r2 = r0 + 11;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x26e78:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26e84;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26e84:
                    r3 = r0 + -1;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x267b4;
                        run_26600(); return;
                    }
                    r2 = r0 + 5;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x26ea4:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26eb0;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26eb0:
                    r3 = r0 + -1;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2673c;
                        run_26600(); return;
                    }
                    r2 = r0 + 9;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x26ed0:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26edc;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26edc:
                    r3 = r0 + -1;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2633c;
                        run_26200(); return;
                    }
                    r2 = r0 + 7;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x26efc:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26f08;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26f08:
                    r3 = r0 + -1;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x262ac;
                        run_26200(); return;
                    }
                    r2 = r0 + 6;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x26f28:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26f34;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26f34:
                    r3 = r0 + -1;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x261dc;
                        run_26000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x261b0;
                    run_26000(); return;
                case 0x26f4c:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26f58;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26f58:
                    r3 = r0 + -1;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x263cc;
                        run_26200(); return;
                    }
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x263fc;
                    run_26200(); return;
                case 0x26f74:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26f80;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26f80:
                    r3 = r0 + -1;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x26ad0;
                        run_26a00(); return;
                    }
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x26aac;
                    run_26a00(); return;
                case 0x26f9c:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26fa8;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x26fa8:
                    r3 = r0 + -1;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x266c4;
                        run_26600(); return;
                    }
                    r2 = r0 + 10;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x26fc8:
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x27074;
                        run_27000(); return;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x27000:
                    pc=0x27000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27000() throws ExecutionException { /* 0x27000 - 0x27200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27000:
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                case 0x27004:
                    r3 = readPages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r3;
                    r3 = r0 + 10;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x27030;
                        continue;
                    }
                    r2 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                case 0x27030:
                    r2 = 19 << 16;
                    r2 = r2 + -19968;
                    r16 = r16 + r2;
                    r2 = r0 + 2;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x261e4;
                    run_26000(); return;
                case 0x27050:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2705c;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x2705c:
                    r3 = r0 + -1;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x26b48;
                        run_26a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x26b1c;
                    run_26a00(); return;
                case 0x27074:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x27080;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x27080:
                    r3 = r0 + -1;
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x27030;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x27004;
                    continue;
                case 0x27098:
                    r4 = 7 << 16;
                    r4 = r4 + 18484;
                    /* Next insn is delay slot */ 
                    r31=0x270a8;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x270a8:
                case 0x27200:
                    pc=0x27200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27200() throws ExecutionException { /* 0x27200 - 0x27400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27200:
                    r2 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x27224;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x26000;
                    run_26000(); return;
                case 0x27224:
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27230;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x27230:
                case 0x27400:
                    pc=0x27400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27400() throws ExecutionException { /* 0x27400 - 0x27600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27400:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = r0 + 5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x27428;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x26000;
                    run_26000(); return;
                case 0x27428:
                    r4 = 7 << 16;
                    r4 = r4 + 18632;
                    /* Next insn is delay slot */ 
                    r31=0x27438;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x27438:
                case 0x27600:
                    pc=0x27600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27600() throws ExecutionException { /* 0x27600 - 0x27800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27600:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = r0 + 6;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x27628;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x26000;
                    run_26000(); return;
                case 0x27628:
                    r4 = 7 << 16;
                    r4 = r4 + 18648;
                    /* Next insn is delay slot */ 
                    r31=0x27638;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x27638:
                case 0x27800:
                    pc=0x27800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27800() throws ExecutionException { /* 0x27800 - 0x27a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27800:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = r0 + 7;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x27828;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x26000;
                    run_26000(); return;
                case 0x27828:
                    r4 = 7 << 16;
                    r4 = r4 + 18664;
                    /* Next insn is delay slot */ 
                    r31=0x27838;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x27838:
                case 0x27a00:
                    pc=0x27a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27a00() throws ExecutionException { /* 0x27a00 - 0x27c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27a00:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = r0 + 10;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x27a28;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x26000;
                    run_26000(); return;
                case 0x27a28:
                    r4 = 7 << 16;
                    r4 = r4 + 18680;
                    /* Next insn is delay slot */ 
                    r31=0x27a38;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x27a38:
                case 0x27c00:
                    pc=0x27c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27c00() throws ExecutionException { /* 0x27c00 - 0x27e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27c00:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x27c18;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27c18:
                    /* Next insn is delay slot */ 
                    pc=0x26000;
                    run_26000(); return;
                case 0x27e00:
                    pc=0x27e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27e00() throws ExecutionException { /* 0x27e00 - 0x28000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27e00:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r2 = r0 + 9;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x27e18;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27e18:
                    /* Next insn is delay slot */ 
                    pc=0x26000;
                    run_26000(); return;
                case 0x28000:
                    pc=0x28000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28000() throws ExecutionException { /* 0x28000 - 0x28200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28000:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28028;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28028:
                    r4 = 7 << 16;
                    r4 = r4 + 18696;
                    /* Next insn is delay slot */ 
                    r31=0x28038;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x28038:
                case 0x28200:
                    pc=0x28200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28200() throws ExecutionException { /* 0x28200 - 0x28400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28200:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = r0 + 2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28228;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28228:
                    r4 = 7 << 16;
                    r4 = r4 + 18724;
                    /* Next insn is delay slot */ 
                    r31=0x28238;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x28238:
                case 0x28400:
                    pc=0x28400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28400() throws ExecutionException { /* 0x28400 - 0x28600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28400:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = r0 + 2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28428;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28428:
                    r4 = 7 << 16;
                    r4 = r4 + 18752;
                    /* Next insn is delay slot */ 
                    r31=0x28438;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x28438:
                case 0x28600:
                    pc=0x28600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28600() throws ExecutionException { /* 0x28600 - 0x28800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28600:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = r0 + 4;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28628;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28628:
                    r4 = 7 << 16;
                    r4 = r4 + 18780;
                    /* Next insn is delay slot */ 
                    r31=0x28638;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x28638:
                case 0x28800:
                    pc=0x28800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28800() throws ExecutionException { /* 0x28800 - 0x28a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28800:
                    r2 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r4 = r2 < r4 ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28834;
                        continue;
                    }
                    r2 = r5 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28834;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28834:
                    r4 = 7 << 16;
                    r4 = r4 + 18800;
                    /* Next insn is delay slot */ 
                    r31=0x28844;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x28844:
                case 0x28a00:
                    pc=0x28a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28a00() throws ExecutionException { /* 0x28a00 - 0x28c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28a00:
                    r3 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    r2 = r0 + 4;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r6 + r0;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28b14;
                        continue;
                    }
                    r20 = 19 << 16;
                    addr=r20+-19968;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28aa4;
                        continue;
                    }
                    r6 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r3 = r20 + -19968;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x28a70;
                    continue;
                case 0x28a58:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28aa4;
                        continue;
                    }
                case 0x28a70:
                    r7 = r6 + r2;
                    addr=r7+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r8 = r2 + -32;
                    r7 = r7 & 3;
                    if(r7 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x28a58;
                        continue;
                    }
                    r2 = r8 + r0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28a70;
                        continue;
                    }
                case 0x28aa4:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28b14;
                        continue;
                    }
                    r18 = r4 + r0;
                    r19 = r0 + r0;
                    r20 = r20 + -19968;
                    /* Next insn is delay slot */ 
                    pc=0x28ad0;
                    continue;
                case 0x28ac0:
                    r19 = r19 + 1;
                    r18 = r18 + 8;
                    if(r19 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x28b14;
                        continue;
                    }
                case 0x28ad0:
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28ae0;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x28ae0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28ac0;
                        continue;
                    }
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28b14:
                    r4 = 7 << 16;
                    r4 = r4 + 18812;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28b28;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x28b28:
                case 0x28c00:
                    pc=0x28c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28c00() throws ExecutionException { /* 0x28c00 - 0x28e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28c00:
                    r2 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r3 = r0 + 4;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x28c50;
                        continue;
                    }
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x28de4;
                        continue;
                    }
                    r2 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    r3 = r0 + 54;
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r2 = r3 - r2;
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                case 0x28c3c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28c50:
                    r4 = 19 << 16;
                    addr=r4+-19968;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28cb4;
                        continue;
                    }
                    r8 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r3 = r4 + -19968;
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x28c90;
                    continue;
                case 0x28c78:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28cb4;
                        continue;
                    }
                case 0x28c90:
                    r5 = r8 + r2;
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r6 = r2 + -32;
                    r5 = r5 & 3;
                    if(r5 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x28c78;
                        continue;
                    }
                    r2 = r6 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x28c78;
                    continue;
                case 0x28cb4:
                    r5 = 7 << 16;
                    r4 = r4 + -19968;
                    r5 = r5 + 18856;
                    r16 = 19 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x28ccc;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x28ccc:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28d78;
                        continue;
                    }
                    r5 = 7 << 16;
                    r4 = r16 + -19968;
                    r5 = r5 + 18860;
                    /* Next insn is delay slot */ 
                    r31=0x28ce8;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x28ce8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28dd4;
                        continue;
                    }
                    r5 = 7 << 16;
                    r4 = r16 + -19968;
                    r5 = r5 + 18864;
                    /* Next insn is delay slot */ 
                    r31=0x28d04;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x28d04:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28dc4;
                        continue;
                    }
                    r5 = 7 << 16;
                    r4 = r16 + -19968;
                    r5 = r5 + 18872;
                    /* Next insn is delay slot */ 
                    r31=0x28d20;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x28d20:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28db4;
                        continue;
                    }
                    r5 = 7 << 16;
                    r4 = r16 + -19968;
                    r5 = r5 + 18880;
                    /* Next insn is delay slot */ 
                    r31=0x28d3c;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x28d3c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28da4;
                        continue;
                    }
                    r5 = 7 << 16;
                    r4 = r16 + -19968;
                    r5 = r5 + 18884;
                    /* Next insn is delay slot */ 
                    r31=0x28d58;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x28d58:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28d94;
                        continue;
                    }
                    r4 = 7 << 16;
                    r5 = 7 << 16;
                    r4 = r4 + 18812;
                    r5 = r5 + 18824;
                    /* Next insn is delay slot */ 
                    r31=0x28d78;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x28d78:
                    r2 = 7 << 16;
                    r2 = r2 + 18888;
                case 0x28d80:
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x28c3c;
                    continue;
                case 0x28d94:
                    r2 = 7 << 16;
                    r2 = r2 + 18928;
                    /* Next insn is delay slot */ 
                    pc=0x28d80;
                    continue;
                case 0x28da4:
                    r2 = 7 << 16;
                    r2 = r2 + 18920;
                    /* Next insn is delay slot */ 
                    pc=0x28d80;
                    continue;
                case 0x28db4:
                    r2 = 7 << 16;
                    r2 = r2 + 18912;
                    /* Next insn is delay slot */ 
                    pc=0x28d80;
                    continue;
                case 0x28dc4:
                    r2 = 7 << 16;
                    r2 = r2 + 18904;
                    /* Next insn is delay slot */ 
                    pc=0x28d80;
                    continue;
                case 0x28dd4:
                    r2 = 7 << 16;
                    r2 = r2 + 18896;
                    /* Next insn is delay slot */ 
                    pc=0x28d80;
                    continue;
                case 0x28de4:
                    r4 = 7 << 16;
                    r4 = r4 + 18832;
                    /* Next insn is delay slot */ 
                    r31=0x28df4;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x28df4:
                case 0x28e00:
                    pc=0x28e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28e00() throws ExecutionException { /* 0x28e00 - 0x29000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28e00:
                    writePages[(r28+-32368)>>>12][((r28+-32368)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29000:
                    pc=0x29000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29000() throws ExecutionException { /* 0x29000 - 0x29200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29000:
                    r2 = readPages[(r28+-32368)>>>12][((r28+-32368)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29018;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29018:
                    r2 = 7 << 16;
                    r2 = r2 + -7564;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29200:
                    pc=0x29200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29200() throws ExecutionException { /* 0x29200 - 0x29400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29200:
                    r2 = readPages[(r28+-32368)>>>12][((r28+-32368)>>>2)&0x3ff];
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29400:
                    pc=0x29400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29400() throws ExecutionException { /* 0x29400 - 0x29600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29400:
                    r4 = readPages[(r28+-32368)>>>12][((r28+-32368)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r29 = r29 + -24;
                    r5 = r5 + -11612;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x29420;
                    pc=0x36200;
                    run_36200(); return;
                case 0x29420:
                    writePages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29454;
                        continue;
                    }
                    r2 = r0 + 32;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    r29 = r29 + 24;
                    writePages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff] = r2;
                    writePages[(r28+-32372)>>>12][((r28+-32372)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x26000;
                    run_26000(); return;
                case 0x29454:
                    r16 = readPages[(r28+-32368)>>>12][((r28+-32368)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x29460;
                    pc=0x33200;
                    run_33200(); return;
                case 0x29460:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2946c;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x2946c:
                    r4 = 7 << 16;
                    r4 = r4 + -11952;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29484;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x29484:
                case 0x29600:
                    pc=0x29600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29600() throws ExecutionException { /* 0x29600 - 0x29800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29600:
                    r4 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29620;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x2961c;
                    pc=0x33800;
                    run_33800(); return;
                case 0x2961c:
                    writePages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff] = r0;
                case 0x29620:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29800:
                    pc=0x29800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29800() throws ExecutionException { /* 0x29800 - 0x29a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29800:
                    r29 = r29 + -40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r6 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r20 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r18 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29834;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x29834:
                    r4 = r2 + 16;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29844;
                    pc=0x30600;
                    run_30600(); return;
                case 0x29844:
                    r17 = r2 + r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r16;
                    r2 = r0 + 2;
                    r6 = r19 + 1;
                    r4 = r17 + 12;
                    r5 = r20 + r0;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x29868;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x29868:
                    r2 = r0 + 53;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r16 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r16 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x29878;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r16 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r16 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x29878:
                    r4 = r16 + r0;
                    r5 = r0 + 1024;
                    r3 = hi;
                    r2 = r3 << 2;
                    r3 = 17 << 16;
                    r3 = r3 + 32224;
                    r2 = r2 + r3;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x298a8;
                    pc=0x12800;
                    run_12800(); return;
                case 0x298a8:
                    r4 = r18 + r0;
                    r5 = r0 + 512;
                    /* Next insn is delay slot */ 
                    r31=0x298b8;
                    pc=0x12800;
                    run_12800(); return;
                case 0x298b8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = r18 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = r0 + 256;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x12600;
                    run_12600(); return;
                case 0x29a00:
                    pc=0x29a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29a00() throws ExecutionException { /* 0x29a00 - 0x29c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29a00:
                    r2 = r0 + 53;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x29a10;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x29a10:
                    r3 = hi;
                    r2 = r3 << 2;
                    r3 = 17 << 16;
                    r3 = r3 + 32224;
                    r2 = r2 + r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29a4c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x29a70;
                    continue;
                case 0x29a3c:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29a68;
                        continue;
                    }
                case 0x29a4c:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x29a3c;
                        continue;
                    }
                    r2 = r2 + 12;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29a68:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29a70:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29c00:
                    pc=0x29c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29c00() throws ExecutionException { /* 0x29c00 - 0x29e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29c00:
                    r2 = r0 + 53;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x29c10;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x29c10:
                    r3 = hi;
                    r2 = r3 << 2;
                    r3 = 17 << 16;
                    r3 = r3 + 32224;
                    r2 = r2 + r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29c4c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x29c70;
                    continue;
                case 0x29c3c:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29c68;
                        continue;
                    }
                case 0x29c4c:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x29c3c;
                        continue;
                    }
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29c68:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29c70:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29e00:
                    pc=0x29e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29e00() throws ExecutionException { /* 0x29e00 - 0x2a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29e00:
                    r29 = r29 + -32;
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r6 = readPages[(r28+-32248)>>>12][((r28+-32248)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r5 = 7 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + 18936;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x29e38;
                    pc=0x36600;
                    run_36600(); return;
                case 0x29e38:
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r29 + 36;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x29e54;
                    pc=0x47c00;
                    run_47c00(); return;
                case 0x29e54:
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x29e68;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x29e68:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x29e74;
                    pc=0x33400;
                    run_33400(); return;
                case 0x29e74:
                case 0x2a000:
                    pc=0x2a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a000() throws ExecutionException { /* 0x2a000 - 0x2a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a000:
                    r4 = r4 & 255;
                    r2 = (r4&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a02c;
                        continue;
                    }
                    r2 = 7 << 16;
                    r2 = r2 + 19020;
                    r4 = r4 << 2;
                    r4 = r4 + r2;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a02c:
                    r2 = 7 << 16;
                    r2 = r2 + 18944;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a200:
                    pc=0x2a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a200() throws ExecutionException { /* 0x2a200 - 0x2a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a200:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r20 = 7 << 16;
                    r20 = r20 + 19040;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r18 = r4 + r0;
                    r16 = r20 + r0;
                    r17 = r0 + r0;
                    r19 = r0 + 10;
                case 0x2a234:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2a244;
                    pc=0x30000;
                    run_30000(); return;
                case 0x2a244:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a284;
                        continue;
                    }
                    r17 = r17 + 1;
                    r16 = r16 + 8;
                    if(r17 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x2a234;
                        continue;
                    }
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + 255;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a284:
                    r17 = r17 << 3;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = r20 + r17;
                    addr=r20+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a400:
                    pc=0x2a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a400() throws ExecutionException { /* 0x2a400 - 0x2a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a400:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + -33;
                    r2 = r4 & r2;
                    r2 = r2 + -65;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a600:
                    pc=0x2a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a600() throws ExecutionException { /* 0x2a600 - 0x2a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a600:
                    r4 = r4 & 255;
                    r2 = r4 & 223;
                    r2 = r2 + -65;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a628;
                        continue;
                    }
                    r4 = r4 + -48;
                    r2 = (r4&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a628:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a800:
                    pc=0x2a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a800() throws ExecutionException { /* 0x2a800 - 0x2aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a800:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = ~(r0 | r4);
                    r2 = r2 >>> 31;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2aa00:
                    pc=0x2aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2aa00() throws ExecutionException { /* 0x2aa00 - 0x2ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2aa00:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + 32;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2aa24;
                        continue;
                    }
                    r4 = r4 ^ 9;
                    r2 = (r4&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2aa24:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ac00:
                    pc=0x2ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ac00() throws ExecutionException { /* 0x2ac00 - 0x2ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ac00:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + 32;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ac28;
                        continue;
                    }
                    r2 = r4 + -9;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ac28:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ae00:
                    pc=0x2ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ae00() throws ExecutionException { /* 0x2ae00 - 0x2b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ae00:
                    r4 = r4 + -48;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b000:
                    pc=0x2b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b000() throws ExecutionException { /* 0x2b000 - 0x2b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b000:
                    r4 = r4 + -97;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b200:
                    pc=0x2b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b200() throws ExecutionException { /* 0x2b200 - 0x2b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b200:
                    r4 = r4 + -65;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b400:
                    pc=0x2b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b400() throws ExecutionException { /* 0x2b400 - 0x2b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b400:
                    r4 = r4 + -48;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b600:
                    pc=0x2b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b600() throws ExecutionException { /* 0x2b600 - 0x2b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b600:
                    r4 = r4 + -48;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b800:
                    pc=0x2b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b800() throws ExecutionException { /* 0x2b800 - 0x2ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b800:
                    r4 = r4 & 255;
                    r2 = r4 & 223;
                    r2 = r2 + -65;
                    r2 = (r2&0xffffffffL) < (6&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b828;
                        continue;
                    }
                    r4 = r4 + -48;
                    r2 = (r4&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b828:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ba00:
                    pc=0x2ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ba00() throws ExecutionException { /* 0x2ba00 - 0x2bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ba00:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + 34;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ba24;
                        continue;
                    }
                    r4 = r4 ^ 39;
                    r2 = (r4&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ba24:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2bc00:
                    pc=0x2bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2bc00() throws ExecutionException { /* 0x2bc00 - 0x2be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2bc00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = 7 << 16;
                    r4 = r4 + 19120;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2bc34;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x2bc34:
                case 0x2be00:
                    pc=0x2be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2be00() throws ExecutionException { /* 0x2be00 - 0x2c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2be00:
                    r29 = r29 + -296;
                    writePages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff] = r18;
                    writePages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r16 = r5 + r0;
                    r4 = r5 + r0;
                    r5 = 7 << 16;
                    r5 = r5 + -11612;
                    writePages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff] = r19;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r31;
                    writePages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff] = r20;
                    writePages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x2be38;
                    pc=0x36200;
                    run_36200(); return;
                case 0x2be38:
                    r19 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bfd0;
                        continue;
                    }
                case 0x2be44:
                    r4 = r29 + 16;
                    r5 = r0 + 256;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2be58;
                    pc=0x34400;
                    run_34400(); return;
                case 0x2be58:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf44;
                        continue;
                    }
                case 0x2be60:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x2be6c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2be6c:
                    r17 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2be8c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2bf74;
                    continue;
                case 0x2be80:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf74;
                        continue;
                    }
                    r17 = r16 + r0;
                case 0x2be8c:
                    r16 = r17 + -1;
                    r2 = r29 + 16;
                    r3 = r2 + r16;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x2bea4;
                    pc=0x2ac00;
                    run_2ac00(); return;
                case 0x2bea4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2be80;
                        continue;
                    }
                case 0x2beac:
                    r2 = r29 + 16;
                    r17 = r2 + r17;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2bec8;
                    continue;
                case 0x2bec4:
                    r16 = r16 + 1;
                case 0x2bec8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x2bed4;
                    pc=0x2ac00;
                    run_2ac00(); return;
                case 0x2bed4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bec4;
                        continue;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2be44;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2bef8;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x2bef8:
                    r4 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r16 = r2 + r0;
                    r2 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf80;
                        continue;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                case 0x2bf14:
                    r5 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r2 + r3;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r5;
                    r4 = r29 + 16;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    r5 = r0 + 256;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2bf3c;
                    pc=0x34400;
                    run_34400(); return;
                case 0x2bf3c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2be60;
                        continue;
                    }
                case 0x2bf44:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2bf50;
                    pc=0x33800;
                    run_33800(); return;
                case 0x2bf50:
                    r31 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r20 = readPages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff];
                    r19 = readPages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff];
                    r18 = readPages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff];
                    r17 = readPages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff];
                    r16 = readPages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff];
                    r29 = r29 + 296;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2bf74:
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2beac;
                    continue;
                case 0x2bf80:
                    r20 = r4 << 1;
                    r4 = r4 << 3;
                    /* Next insn is delay slot */ 
                    r31=0x2bf90;
                    pc=0x30600;
                    run_30600(); return;
                case 0x2bf90:
                    r6 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2bfac;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x2bfac:
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2bfb8;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x2bfb8:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r17;
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r20;
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2bf14;
                    continue;
                case 0x2bfd0:
                    /* Next insn is delay slot */ 
                    r31=0x2bfd8;
                    pc=0x33200;
                    run_33200(); return;
                case 0x2bfd8:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2bfe4;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x2bfe4:
                    r4 = 7 << 16;
                    r4 = r4 + 19208;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2bffc;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x2bffc:
                case 0x2c000:
                    pc=0x2c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c000() throws ExecutionException { /* 0x2c000 - 0x2c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c000:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r22;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    r20 = r5 + r0;
                    r16 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c154;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x2c048;
                    pc=0x2d400;
                    run_2d400(); return;
                case 0x2c048:
                    writePages[(r28+-32248)>>>12][((r28+-32248)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c154;
                        continue;
                    }
                case 0x2c05c:
                    r2 = r0 + 8;
                    r4 = r0 + 32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c074;
                    pc=0x30600;
                    run_30600(); return;
                case 0x2c074:
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c188;
                        continue;
                    }
                    r16 = r0 + r0;
                    r21 = r0 + 64;
                    /* Next insn is delay slot */ 
                    pc=0x2c0bc;
                    continue;
                case 0x2c094:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x2c098:
                    r4 = r3 + 1;
                    r16 = r16 + 1;
                    r3 = r3 << 2;
                    r3 = r2 + r3;
                    r2 = r6 < r16 ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c184;
                        continue;
                    }
                case 0x2c0bc:
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r2 = r16 << 2;
                    r2 = r3 + r2;
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c0e8;
                        continue;
                    }
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x2c160;
                        continue;
                    }
                case 0x2c0e8:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c094;
                        continue;
                    }
                    r4 = r2 << 3;
                    r22 = r2 << 1;
                    /* Next insn is delay slot */ 
                    r31=0x2c110;
                    pc=0x30600;
                    run_30600(); return;
                case 0x2c110:
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c12c;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x2c12c:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2c138;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x2c138:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r22;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c098;
                    continue;
                case 0x2c154:
                    writePages[(r28+-32248)>>>12][((r28+-32248)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x2c05c;
                    continue;
                case 0x2c160:
                    r4 = r29 + 16;
                    r5 = r17 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x2c170;
                    pc=0x2be00;
                    run_2be00(); return;
                case 0x2c170:
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r2 = r6 < r16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c0bc;
                        continue;
                    }
                case 0x2c184:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x2c188:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r28+-32364)>>>12][((r28+-32364)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32360)>>>12][((r28+-32360)>>>2)&0x3ff] = r2;
                    r22 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r3;
                    r21 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r19 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2c200:
                    pc=0x2c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c200() throws ExecutionException { /* 0x2c200 - 0x2c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c200:
                    r5 = r4 + r0;
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + 19232;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2c21c;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x2c21c:
                case 0x2c400:
                    pc=0x2c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c400() throws ExecutionException { /* 0x2c400 - 0x2c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c400:
                    r5 = r4 + r0;
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + 19252;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2c41c;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x2c41c:
                case 0x2c600:
                    pc=0x2c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c600() throws ExecutionException { /* 0x2c600 - 0x2c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c600:
                    r2 = r4 + r0;
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r4 = r4 + 19284;
                    r5 = r2 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2c624;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x2c624:
                case 0x2c800:
                    pc=0x2c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c800() throws ExecutionException { /* 0x2c800 - 0x2ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c800:
                    r5 = r4 + r0;
                    r4 = 7 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + 19316;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2c81c;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x2c81c:
                case 0x2ca00:
                    pc=0x2ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ca00() throws ExecutionException { /* 0x2ca00 - 0x2cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ca00:
                    r6 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32360)>>>12][((r28+-32360)>>>2)&0x3ff];
                    r2 = r6 << 2;
                    r3 = r3 + r2;
                    r7 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = r7 + r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca44;
                        continue;
                    }
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r6 = r6 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca54;
                        continue;
                    }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r6;
                case 0x2ca44:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ca54:
                    r4 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ca60;
                    pc=0x2c400;
                    run_2c400(); return;
                case 0x2ca60:
                case 0x2cc00:
                    pc=0x2cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2cc00() throws ExecutionException { /* 0x2cc00 - 0x2ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2cc00:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    r21 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = readPages[(r28+-32360)>>>12][((r28+-32360)>>>2)&0x3ff];
                    r2 = r21 << 2;
                    r19 = r19 + r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r20 = r4 + r0;
                    r16 = r5 + r0;
                    r17 = r6 + r0;
                    r18 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cc60;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2cce0;
                    continue;
                case 0x2cc50:
                    r17 = r17 + -1;
                    r16 = r16 + 12;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cce0;
                        continue;
                    }
                case 0x2cc60:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2cc70;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x2cc70:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cc50;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cccc;
                        continue;
                    }
                    r5 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r21;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ccec;
                        continue;
                    }
                    r25 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r18 + r0;
                case 0x2cca4:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x2cccc:
                    r25 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2cca4;
                    continue;
                case 0x2cce0:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ccec;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x2ccec:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ccf8;
                    pc=0x2c400;
                    run_2c400(); return;
                case 0x2ccf8:
                case 0x2ce00:
                    pc=0x2ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ce00() throws ExecutionException { /* 0x2ce00 - 0x2d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ce00:
                    r4 = r4 & 255;
                    r29 = r29 + -24;
                    r2 = (r4&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ceb4;
                        continue;
                    }
                    r2 = 7 << 16;
                    r2 = r2 + 19464;
                    r4 = r4 << 2;
                    r4 = r2 + r4;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x2ce38:
                    r2 = r0 + r0;
                case 0x2ce3c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ce4c:
                    r2 = readPages[(r28+-32668)>>>12][((r28+-32668)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 ^ 5;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ce68:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ce7c:
                    r2 = readPages[(r28+-32668)>>>12][((r28+-32668)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce38;
                        continue;
                    }
                    r2 = r2 ^ 6;
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=0x2ce3c;
                    continue;
                case 0x2ce9c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32668)>>>12][((r28+-32668)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ceb4:
                    r5 = 7 << 16;
                    r6 = 7 << 16;
                    r4 = readPages[(r28+-32672)>>>12][((r28+-32672)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    r5 = r5 + 19344;
                    r6 = r6 + 19368;
                    r7 = r0 + 114;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x2ced8;
                    return;
                case 0x2ced8:
                case 0x2d000:
                    pc=0x2d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d000() throws ExecutionException { /* 0x2d000 - 0x2d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d000:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r18 = r4 + r0;
                    r16 = r16 + 29232;
                    r17 = r0 + r0;
                    r19 = r0 + 10;
                case 0x2d02c:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2d03c;
                    pc=0x30000;
                    run_30000(); return;
                case 0x2d03c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d078;
                        continue;
                    }
                    r17 = r17 + 1;
                    r16 = r16 + 4;
                    if(r17 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x2d02c;
                        continue;
                    }
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d078:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d200:
                    pc=0x2d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d200() throws ExecutionException { /* 0x2d200 - 0x2d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d200:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2d218;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2d218:
                    r3 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2c8;
                        continue;
                    }
                    r2 = r2 + -1;
                    r2 = r16 + r2;
                    r3 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2a4;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 46;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2b4;
                        continue;
                    }
                    r4 = r0 + 92;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2c8;
                        continue;
                    }
                    r4 = r0 + 47;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2c8;
                        continue;
                    }
                    r4 = r0 + 46;
                    r5 = r0 + 92;
                    r6 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x2d294;
                    continue;
                case 0x2d274:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2b4;
                        continue;
                    }
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2c8;
                        continue;
                    }
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2c8;
                        continue;
                    }
                case 0x2d294:
                    r2 = r2 + -1;
                    r3 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d274;
                        continue;
                    }
                case 0x2d2a4:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 46;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2c8;
                        continue;
                    }
                case 0x2d2b4:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d2c8:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d400:
                    pc=0x2d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d400() throws ExecutionException { /* 0x2d400 - 0x2d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d400:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2d418;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2d418:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d47c;
                        continue;
                    }
                    r3 = r16 + r2;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 92;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2d47c;
                        continue;
                    }
                    r4 = r0 + 47;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2d47c;
                        continue;
                    }
                    r4 = r0 + 92;
                    r5 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x2d46c;
                    continue;
                case 0x2d450:
                    r3 = r16 + r2;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2d47c;
                        continue;
                    }
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2d47c;
                        continue;
                    }
                case 0x2d46c:
                    r2 = r2 + -1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d450;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x2d47c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r16 + r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d600:
                    pc=0x2d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d600() throws ExecutionException { /* 0x2d600 - 0x2d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d600:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r16 = r4 + r0;
                    r18 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2d628;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2d628:
                    r17 = r2 + r0;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d734;
                        continue;
                    }
                    r6 = r17 + -1;
                    r6 = r16 + r6;
                    r2 = ((r6 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d6b8;
                        continue;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 46;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2d6c8;
                        continue;
                    }
                    r2 = r0 + 92;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2d734;
                        continue;
                    }
                    r2 = r0 + 47;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2d734;
                        continue;
                    }
                    r7 = r0 + 46;
                    r8 = r0 + 92;
                    r9 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x2d6a8;
                    continue;
                case 0x2d688:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x2d6c8;
                        continue;
                    }
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x2d734;
                        continue;
                    }
                    if(r3 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x2d734;
                        continue;
                    }
                case 0x2d6a8:
                    r6 = r6 + -1;
                    r3 = ((r6 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d688;
                        continue;
                    }
                case 0x2d6b8:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 46;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2d734;
                        continue;
                    }
                case 0x2d6c8:
                    r4 = r18 + r0;
                    r19 = r6 - r16;
                    /* Next insn is delay slot */ 
                    r31=0x2d6d8;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2d6d8:
                    r2 = r2 + 1;
                    r4 = r2 + r19;
                    /* Next insn is delay slot */ 
                    r31=0x2d6e8;
                    pc=0x30600;
                    run_30600(); return;
                case 0x2d6e8:
                    r17 = r2 + r0;
                    r5 = r16 + r0;
                    r6 = r19 + r0;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2d700;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x2d700:
                    r4 = r17 + r19;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2d710;
                    pc=0x3e600;
                    run_3e600(); return;
                case 0x2d710:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d734:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2d740;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2d740:
                    r4 = r17 + 1;
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    r31=0x2d750;
                    pc=0x30600;
                    run_30600(); return;
                case 0x2d750:
                    r4 = r2 + r0;
                    r5 = r16 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2d764;
                    pc=0x3e200;
                    run_3e200(); return;
                case 0x2d764:
                    r4 = r2 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2d774;
                    pc=0x3e600;
                    run_3e600(); return;
                case 0x2d774:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d800:
                    pc=0x2d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d800() throws ExecutionException { /* 0x2d800 - 0x2da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d800:
                    addr=r28+-32356;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r29 = r29 + -32;
                    r5 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d82c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d82c:
                    r2 = r29 + 44;
                    r5 = r6 + r0;
                    r6 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x2d844;
                    pc=0x47c00;
                    run_47c00(); return;
                case 0x2d844:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2da00:
                    pc=0x2da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2da00() throws ExecutionException { /* 0x2da00 - 0x2dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2da00:
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r0;
                    r4 = r5 + r0;
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2da28;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2da28:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                    r2 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2dc00:
                    pc=0x2dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2dc00() throws ExecutionException { /* 0x2dc00 - 0x2de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2dc00:
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dc18;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2dc18:
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x2de00:
                    pc=0x2de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2de00() throws ExecutionException { /* 0x2de00 - 0x2e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2de00:
                    r29 = r29 + -24;
                    r4 = r0 + 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2de14;
                    pc=0x30600;
                    run_30600(); return;
                case 0x2de14:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e000:
                    pc=0x2e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e000() throws ExecutionException { /* 0x2e000 - 0x2e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e064;
                        continue;
                    }
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e040;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x2e040:
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2e04c;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x2e04c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x2e064:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e200:
                    pc=0x2e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e200() throws ExecutionException { /* 0x2e200 - 0x2e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e200:
                    r3 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e284;
                        continue;
                    }
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2e230;
                    continue;
                case 0x2e22c:
                    r16 = r16 << 1;
                case 0x2e230:
                    r2 = ((r16 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e22c;
                        continue;
                    }
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e290;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2e250;
                    pc=0x30600;
                    run_30600(); return;
                case 0x2e250:
                    r5 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r6 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2e264;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x2e264:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r16;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e284:
                    r16 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2e230;
                    continue;
                case 0x2e290:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2e2a0;
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e2a0:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r16;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e400:
                    pc=0x2e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e400() throws ExecutionException { /* 0x2e400 - 0x2e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e400:
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e438;
                        continue;
                    }
                    r5 = r2 - r5;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r5;
                    r2 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e430;
                        continue;
                    }
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r5;
                case 0x2e430:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e438:
                    r29 = r29 + -24;
                    r5 = 7 << 16;
                    r6 = 7 << 16;
                    r4 = readPages[(r28+-32676)>>>12][((r28+-32676)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    r5 = r5 + 19524;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r6 = r6 + 19540;
                    r7 = r0 + 206;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x2e464;
                    return;
                case 0x2e464:
                case 0x2e600:
                    pc=0x2e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e600() throws ExecutionException { /* 0x2e600 - 0x2e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e600:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r5 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r3 = r4 + 1;
                    r2 = ((r5 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e654;
                        continue;
                    }
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e654:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e6c4;
                        continue;
                    }
                    r16 = r5 + r0;
                case 0x2e660:
                    r16 = r16 << 1;
                    r2 = ((r16 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e660;
                        continue;
                    }
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e6dc;
                        continue;
                    }
                case 0x2e678:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2e684;
                    pc=0x30600;
                    run_30600(); return;
                case 0x2e684:
                    r5 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r6 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2e698;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x2e698:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                case 0x2e69c:
                    r4 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r16;
                    r4 = r2 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e6c4:
                    r2 = (r3&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    r16 = r0 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e660;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2e678;
                    continue;
                case 0x2e6dc:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2e6ec;
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e6ec:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2e69c;
                    continue;
                case 0x2e800:
                    pc=0x2e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e800() throws ExecutionException { /* 0x2e800 - 0x2ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e800:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    r18 = r4 + r0;
                    r16 = r6 + r0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e848;
                        continue;
                    }
                    r3 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = ((r3 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e868;
                        continue;
                    }
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                case 0x2e83c:
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2e848;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x2e848:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r16;
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e868:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e8c8;
                        continue;
                    }
                    r17 = r3 + r0;
                case 0x2e874:
                    r17 = r17 << 1;
                    r2 = ((r17 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e874;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e8a0;
                        continue;
                    }
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x2e89c;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x2e89c:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x2e8a0:
                    r4 = r17 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x2e8b0;
                    pc=0x30600;
                    run_30600(); return;
                case 0x2e8b0:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    writePages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff] = r17;
                    r4 = r2 + r0;
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2e83c;
                    continue;
                case 0x2e8c8:
                    r2 = (r6&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    r17 = r0 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e874;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2e8a0;
                    continue;
                case 0x2ea00:
                    pc=0x2ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ea00() throws ExecutionException { /* 0x2ea00 - 0x2ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ea00:
                    r29 = r29 + -40;
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r3 + 1;
                    r2 = ((r4 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r5 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea6c;
                        continue;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r19&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r17;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ea6c:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eae8;
                        continue;
                    }
                    r16 = r4 + r0;
                case 0x2ea78:
                    r16 = r16 << 1;
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea78;
                        continue;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eb00;
                        continue;
                    }
                case 0x2ea90:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ea9c;
                    pc=0x30600;
                    run_30600(); return;
                case 0x2ea9c:
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r6 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2eab0;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x2eab0:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                case 0x2eab4:
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    writePages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff] = r16;
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r19&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r17;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2eae8:
                    r2 = (r17&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    r16 = r0 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea78;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2ea90;
                    continue;
                case 0x2eb00:
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2eb10;
                    pc=0x30800;
                    run_30800(); return;
                case 0x2eb10:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2eab4;
                    continue;
                case 0x2ec00:
                    pc=0x2ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ec00() throws ExecutionException { /* 0x2ec00 - 0x2ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ec00:
                    r29 = r29 + -40;
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = r6 + r3;
                    r2 = ((r4 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r5 + r0;
                    r19 = r6 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ec80;
                        continue;
                    }
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                case 0x2ec44:
                    r5 = r20 + r0;
                    r6 = r19 + r0;
                    r4 = r4 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x2ec58;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x2ec58:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r17;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ec80:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ecdc;
                        continue;
                    }
                    r16 = r4 + r0;
                case 0x2ec8c:
                    r16 = r16 << 1;
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ec8c;
                        continue;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ecf4;
                        continue;
                    }
                case 0x2eca4:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ecb0;
                    pc=0x30600;
                    run_30600(); return;
                case 0x2ecb0:
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r6 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ecc4;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x2ecc4:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                case 0x2eccc:
                    writePages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff] = r16;
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2ec44;
                    continue;
                case 0x2ecdc:
                    r2 = (r17&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    r16 = r0 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ec8c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2eca4;
                    continue;
                case 0x2ecf4:
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ed04;
                    pc=0x30800;
                    run_30800(); return;
                case 0x2ed04:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2eccc;
                    continue;
                case 0x2ee00:
                    pc=0x2ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ee00() throws ExecutionException { /* 0x2ee00 - 0x2f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ee00:
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    r3 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r20 = r5 + r0;
                    r19 = r6 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eea4;
                        continue;
                    }
                    r3 = r6 + r7;
                    r3 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    r17 = r7 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ee50;
                        continue;
                    }
                    r17 = r2 - r6;
                case 0x2ee50:
                    r3 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r2 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eed0;
                        continue;
                    }
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                case 0x2ee68:
                    r5 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r6 = r17 + r0;
                    r5 = r5 + r19;
                    /* Next insn is delay slot */ 
                    r31=0x2ee7c;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x2ee7c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r17;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2eea4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2eed0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef28;
                        continue;
                    }
                    r16 = r3 + r0;
                case 0x2eedc:
                    r16 = r16 << 1;
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eedc;
                        continue;
                    }
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef40;
                        continue;
                    }
                case 0x2eef4:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ef00;
                    pc=0x30600;
                    run_30600(); return;
                case 0x2ef00:
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r6 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ef14;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x2ef14:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                    writePages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x2ee68;
                    continue;
                case 0x2ef28:
                    r2 = (r17&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    r16 = r0 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eedc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2eef4;
                    continue;
                case 0x2ef40:
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ef50;
                    pc=0x30800;
                    run_30800(); return;
                case 0x2ef50:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                    writePages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x2ee68;
                    continue;
                case 0x2f000:
                    pc=0x2f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f000() throws ExecutionException { /* 0x2f000 - 0x2f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f000:
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f030;
                        continue;
                    }
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2f030;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x2f030:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    r6 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x2f044;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x2f044:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f200:
                    pc=0x2f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f200() throws ExecutionException { /* 0x2f200 - 0x2f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f200:
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r18 = r4 + r0;
                    r16 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = r0 + r0;
                    r19 = r0 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f288;
                        continue;
                    }
                case 0x2f234:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x2f240;
                    pc=0x2b200;
                    run_2b200(); return;
                case 0x2f240:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f270;
                        continue;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 3;
                    if(r3 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x2f2a8;
                        continue;
                    }
                case 0x2f26c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2f270:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r16 = r16 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f234;
                        continue;
                    }
                case 0x2f288:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f2a8:
                    r2 = r2 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2f26c;
                    continue;
                case 0x2f400:
                    pc=0x2f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f400() throws ExecutionException { /* 0x2f400 - 0x2f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f400:
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r18 = r4 + r0;
                    r16 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = r0 + r0;
                    r19 = r0 + 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f488;
                        continue;
                    }
                case 0x2f434:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x2f440;
                    pc=0x2b000;
                    run_2b000(); return;
                case 0x2f440:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f470;
                        continue;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 3;
                    if(r3 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x2f4a8;
                        continue;
                    }
                case 0x2f46c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2f470:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r16 = r16 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f434;
                        continue;
                    }
                case 0x2f488:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f4a8:
                    r2 = r2 + -32;
                    /* Next insn is delay slot */ 
                    pc=0x2f46c;
                    continue;
                case 0x2f600:
                    pc=0x2f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f600() throws ExecutionException { /* 0x2f600 - 0x2f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f600:
                    r6 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r3 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r5 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f644;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x2f62c;
                    pc=0x3a200;
                    run_3a200(); return;
                case 0x2f62c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f688;
                        continue;
                    }
                case 0x2f634:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f644:
                    r3 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f678;
                        continue;
                    }
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2f65c;
                    pc=0x3a200;
                    run_3a200(); return;
                case 0x2f65c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f634;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f678:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x3a200;
                    run_3a200(); return;
                case 0x2f688:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2f634;
                    continue;
                case 0x2f800:
                    pc=0x2f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f800() throws ExecutionException { /* 0x2f800 - 0x2fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f800:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2f820;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2f820:
                    r6 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f85c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x2f840;
                    pc=0x3a200;
                    run_3a200(); return;
                case 0x2f840:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f8a8;
                        continue;
                    }
                case 0x2f848:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f85c:
                    r3 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f894;
                        continue;
                    }
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2f874;
                    pc=0x3a200;
                    run_3a200(); return;
                case 0x2f874:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f848;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f894:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x3a200;
                    run_3a200(); return;
                case 0x2f8a8:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2f848;
                    continue;
                case 0x2fa00:
                    pc=0x2fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fa00() throws ExecutionException { /* 0x2fa00 - 0x2fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fa00:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r20 = r5 + r0;
                    r19 = r6 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r6 = r20 + r0;
                    r7 = r19 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x2fa40;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x2fa40:
                    r18 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fb08;
                        continue;
                    }
                    r2 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r3 = ((r18 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fa8c;
                        continue;
                    }
                case 0x2fa60:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r18;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fa8c:
                    r4 = r18 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fafc;
                        continue;
                    }
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2faa8;
                    continue;
                case 0x2faa4:
                    r16 = r16 << 1;
                case 0x2faa8:
                    r3 = ((r16 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2faa4;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fac8;
                        continue;
                    }
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2fac8;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x2fac8:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2fad4;
                    pc=0x30600;
                    run_30600(); return;
                case 0x2fad4:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r16;
                    r4 = r2 + r0;
                    r5 = r16 + r0;
                    r6 = r20 + r0;
                    r7 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2faf4;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x2faf4:
                    /* Next insn is delay slot */ 
                    pc=0x2fa60;
                    continue;
                case 0x2fafc:
                    r16 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2faa8;
                    continue;
                case 0x2fb08:
                    r5 = 7 << 16;
                    r6 = 7 << 16;
                    r4 = readPages[(r28+-32680)>>>12][((r28+-32680)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    r5 = r5 + 19556;
                    r6 = r6 + 19540;
                    r7 = r0 + 468;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x2fb2c;
                    return;
                case 0x2fb2c:
                case 0x2fc00:
                    pc=0x2fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fc00() throws ExecutionException { /* 0x2fc00 - 0x2fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fc00:
                    r29 = r29 + -32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    r6 = r29 + 40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x2fc20;
                    pc=0x2fa00;
                    run_2fa00(); return;
                case 0x2fc20:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fe00:
                    pc=0x2fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fe00() throws ExecutionException { /* 0x2fe00 - 0x30000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fe00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r18 = r5 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2fe2c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2fe2c:
                    r3 = ((r2 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fe6c;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    r6 = r2 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x2fe4c;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x2fe4c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fe6c:
                    r18 = r18 + -1;
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    r18 = r16 + r18;
                    /* Next insn is delay slot */ 
                    r31=0x2fe88;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x2fe88:
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30000:
                    pc=0x30000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30000() throws ExecutionException { /* 0x30000 - 0x30200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30000:
                    r8 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x3004c;
                    continue;
                case 0x30010:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r2 = r3 + r0;
                    r9 = r8 + r6;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 3;
                    if(r9 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x3008c;
                        continue;
                    }
                case 0x30030:
                    r2 = r2 - r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3009c;
                        continue;
                    }
                case 0x3003c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3009c;
                        continue;
                    }
                    r4 = r4 + 1;
                    r5 = r5 + 1;
                case 0x3004c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r8 + r3;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 3;
                    if(r2 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x30010;
                        continue;
                    }
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r2 = r3 + -32;
                    r9 = r8 + r6;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 3;
                    if(r9 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x30030;
                        continue;
                    }
                case 0x3008c:
                    r6 = r6 + -32;
                    r2 = r2 - r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3003c;
                        continue;
                    }
                case 0x3009c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30200:
                    pc=0x30200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30200() throws ExecutionException { /* 0x30200 - 0x30400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30200:
                    r29 = r29 + -32;
                    r2 = r0 + 15;
                    r6 = 7 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = 17 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r16 + 32436;
                    r5 = r0 + 60;
                    r6 = r6 + 19588;
                    r7 = r0 + 2;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x30234;
                    pc=0x32600;
                    run_32600(); return;
                case 0x30234:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + 32436;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30400:
                    pc=0x30400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30400() throws ExecutionException { /* 0x30400 - 0x30600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30400:
                    r2 = r0 + 752;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30600:
                    pc=0x30600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30600() throws ExecutionException { /* 0x30600 - 0x30800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30600:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3063c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x30620;
                    pc=0x39200;
                    run_39200(); return;
                case 0x30620:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30654;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3063c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30654:
                    r4 = 7 << 16;
                    r4 = r4 + 19596;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30668;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x30668:
                case 0x30800:
                    pc=0x30800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30800() throws ExecutionException { /* 0x30800 - 0x30a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30818;
                    pc=0x3bc00;
                    run_3bc00(); return;
                case 0x30818:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30834;
                        continue;
                    }
                case 0x30820:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30834:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30820;
                        continue;
                    }
                    r4 = 7 << 16;
                    r4 = r4 + 19640;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30850;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x30850:
                case 0x30a00:
                    pc=0x30a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30a00() throws ExecutionException { /* 0x30a00 - 0x30c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30a00:
                    /* Next insn is delay slot */ 
                    pc=0x39400;
                    run_39400(); return;
                case 0x30c00:
                    pc=0x30c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30c00() throws ExecutionException { /* 0x30c00 - 0x30e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30c00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30c8c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x30c24;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x30c24:
                    r16 = r2 + 1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30c68;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30c3c;
                    pc=0x39200;
                    run_39200(); return;
                case 0x30c3c:
                    r4 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30ca8;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x30c68:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x30c8c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30ca8:
                    r4 = 7 << 16;
                    r4 = r4 + 19596;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30cbc;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x30cbc:
                case 0x30e00:
                    pc=0x30e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30e00() throws ExecutionException { /* 0x30e00 - 0x31000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30e00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30e58;
                        continue;
                    }
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30e2c;
                    pc=0x39200;
                    run_39200(); return;
                case 0x30e2c:
                    r4 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30e7c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x30e58:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x30e7c:
                    r4 = 7 << 16;
                    r4 = r4 + 19596;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30e90;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x30e90:
                case 0x31000:
                    pc=0x31000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31000() throws ExecutionException { /* 0x31000 - 0x31200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31000:
                    r29 = r29 + -64;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r4+276)>>>12][((r4+276)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r2 = r4 & 256;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r23;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r22;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r17 = r6 + r0;
                    r18 = r7 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31384;
                        run_31200(); return;
                    }
                    r23 = 7 << 16;
                    r23 = r23 + 19696;
                case 0x3104c:
                    r2 = r4 & 128;
                    writePages[(r16+284)>>>12][((r16+284)>>>2)&0x3ff] = r23;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31088;
                        continue;
                    }
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x31088;
                        continue;
                    }
                    r18 = r0 - r18;
                    r2 = ((r0 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r17 = r0 - r17;
                    r17 = r17 - r2;
                    r2 = r0 + 45;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x310ac;
                    continue;
                case 0x31088:
                    r2 = r4 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31394;
                        run_31200(); return;
                    }
                    r2 = r4 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x314ac;
                        run_31400(); return;
                    }
                    r2 = r0 + 32;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r0 + 1;
                case 0x310ac:
                    r2 = r17 | r18;
                    r22 = r16 + 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3151c;
                        run_31400(); return;
                    }
                    r20 = readPages[(r16+280)>>>12][((r16+280)>>>2)&0x3ff];
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x310d0;
                    continue;
                case 0x310cc:
                    r23 = readPages[(r16+284)>>>12][((r16+284)>>>2)&0x3ff];
                case 0x310d0:
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    r7 = r20 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x310e8;
                    pc=0x1083c;
                    run_10800(); return;
                case 0x310e8:
                    r23 = r23 + r3;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r19 = r19 + 1;
                    addr=r19+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = readPages[(r16+280)>>>12][((r16+280)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    r6 = r0 + r0;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x31114;
                    pc=0x10208;
                    run_10200(); return;
                case 0x31114:
                    r17 = r2 + r0;
                    r2 = r3 | r2;
                    r18 = r3 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x310cc;
                        continue;
                    }
                    r4 = readPages[(r16+276)>>>12][((r16+276)>>>2)&0x3ff];
                    r19 = r19 - r22;
                case 0x31130:
                    r2 = r4 & 64;
                    writePages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff] = r19;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31490;
                        run_31400(); return;
                    }
                    r3 = readPages[(r16+292)>>>12][((r16+292)>>>2)&0x3ff];
                case 0x31144:
                    r2 = r4 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3116c;
                        continue;
                    }
                    r2 = readPages[(r16+280)>>>12][((r16+280)>>>2)&0x3ff];
                    r5 = r0 + 16;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x314b8;
                        run_31400(); return;
                    }
                    r5 = r0 + 8;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x314f4;
                        run_31400(); return;
                    }
                case 0x3116c:
                    r2 = r19 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31484;
                        run_31400(); return;
                    }
                    r3 = r0 + r0;
                case 0x3117c:
                    r2 = r4 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x313f8;
                        run_31200(); return;
                    }
                    r7 = r3 + r21;
                    r19 = r7 + r19;
                    r7 = readPages[(r16+288)>>>12][((r16+288)>>>2)&0x3ff];
                    r2 = r19 < r7 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x313f8;
                        run_31200(); return;
                    }
                    r4 = r4 & 17;
                    r7 = r7 - r19;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x313a8;
                        run_31200(); return;
                    }
                case 0x311b4:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31270;
                        run_31200(); return;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x311f0;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x311f0:
                    r2 = (r21&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31270;
                        run_31200(); return;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x31200:
                    pc=0x31200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31200() throws ExecutionException { /* 0x31200 - 0x31400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31200:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r29+17;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31230;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x31230:
                    r21 = (r21&0xffffffffL) < (3&0xffffffffL) ? 1 : 0;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31270;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r29+18;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31270;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x31270:
                    r2 = readPages[(r16+276)>>>12][((r16+276)>>>2)&0x3ff];
                    r2 = r2 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x312d8;
                        continue;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x312d4;
                        continue;
                    }
                    r2 = r7 + -1;
                    r6 = r0 + -1;
                    r7 = r0 + 48;
                case 0x31298:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x312c8;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x312c8:
                    r2 = r2 + -1;
                    if(r2 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x31298;
                        continue;
                    }
                case 0x312d4:
                    r7 = r0 + r0;
                case 0x312d8:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31328;
                        continue;
                    }
                    r3 = r3 + -1;
                    r8 = r0 + 48;
                    r6 = r0 + -1;
                case 0x312ec:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3131c;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x3131c:
                    r3 = r3 + -1;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x312ec;
                        continue;
                    }
                case 0x31328:
                    r2 = readPages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff];
                case 0x31330:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x31404;
                        run_31400(); return;
                    }
                    r2 = r2 + -1;
                    r3 = r16 + r2;
                    writePages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff] = r2;
                    addr=r3+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31330;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x31330;
                    continue;
                case 0x31384:
                    r23 = 7 << 16;
                    r23 = r23 + 19716;
                    /* Next insn is delay slot */ 
                    pc=0x3104c;
                    run_31000(); return;
                case 0x31394:
                    r2 = r0 + 43;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x310ac;
                    run_31000(); return;
                case 0x313a8:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x313f8;
                        continue;
                    }
                    r2 = r7 + -1;
                    r6 = r0 + -1;
                    r7 = r0 + 32;
                case 0x313bc:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x313ec;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x313ec:
                    r2 = r2 + -1;
                    if(r2 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x313bc;
                        continue;
                    }
                case 0x313f8:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x311b4;
                    run_31000(); return;
                case 0x31400:
                    pc=0x31400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31400() throws ExecutionException { /* 0x31400 - 0x31600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31400:
                case 0x31404:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31454;
                        continue;
                    }
                    r2 = r7 + -1;
                    r6 = r0 + 32;
                    r5 = r0 + -1;
                case 0x31418:
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31448;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x31448:
                    r2 = r2 + -1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x31418;
                        continue;
                    }
                case 0x31454:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r23 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r22 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31484:
                    r3 = r3 - r19;
                    /* Next insn is delay slot */ 
                    pc=0x3117c;
                    run_31000(); return;
                case 0x31490:
                    r4 = r4 | 64;
                    r2 = r0 + 1;
                    writePages[(r16+276)>>>12][((r16+276)>>>2)&0x3ff] = r4;
                    writePages[(r16+292)>>>12][((r16+292)>>>2)&0x3ff] = r2;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x31144;
                    run_31000(); return;
                case 0x314ac:
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x310ac;
                    run_31000(); return;
                case 0x314b8:
                    r6 = r29 + 16;
                    r5 = r6 + r21;
                    r6 = r0 + 48;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r4 & 256;
                    r2 = r21 + 1;
                    r21 = r21 + 2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31528;
                        continue;
                    }
                    r5 = r0 + 88;
                case 0x314e0:
                    r6 = r29 + 16;
                    r2 = r6 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3116c;
                    run_31000(); return;
                case 0x314f4:
                    r2 = r19 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31484;
                        continue;
                    }
                    r2 = r29 + r21;
                    r3 = r0 + 48;
                    addr=r2+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r21 + 1;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3117c;
                    run_31000(); return;
                case 0x3151c:
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x31130;
                    run_31000(); return;
                case 0x31528:
                    r5 = r0 + 120;
                    /* Next insn is delay slot */ 
                    pc=0x314e0;
                    continue;
                case 0x31600:
                    pc=0x31600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31600() throws ExecutionException { /* 0x31600 - 0x31800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31600:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = readPages[(r4+276)>>>12][((r4+276)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r2 = r19 & 64;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    r17 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31794;
                        continue;
                    }
                    r18 = readPages[(r4+292)>>>12][((r4+292)>>>2)&0x3ff];
                    r4 = r5 + r0;
                    r6 = r18 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x31648;
                    pc=0x3a000;
                    run_3a000(); return;
                case 0x31648:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31654;
                        continue;
                    }
                    r18 = r2 - r17;
                case 0x31654:
                    r2 = r19 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x316d4;
                        continue;
                    }
                    r2 = readPages[(r16+288)>>>12][((r16+288)>>>2)&0x3ff];
                    r3 = r18 < r2 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x316d4;
                        continue;
                    }
                    r19 = r19 & 1;
                    r2 = r2 - r18;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x316d8;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x316d4;
                        continue;
                    }
                    r3 = r2 + -1;
                    r6 = r0 + 32;
                    r2 = r0 + -1;
                case 0x31698:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x316c8;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x316c8:
                    r3 = r3 + -1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x31698;
                        continue;
                    }
                case 0x316d4:
                    r2 = r0 + r0;
                case 0x316d8:
                    r6 = r17 + r18;
                case 0x316dc:
                    if(r17 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x31724;
                        continue;
                    }
                case 0x316e4:
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r17 = r17 + 1;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x316dc;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r17 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x316e4;
                        continue;
                    }
                case 0x31724:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31774;
                        continue;
                    }
                    r2 = r2 + -1;
                    r6 = r0 + 32;
                    r5 = r0 + -1;
                case 0x31738:
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31768;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x31768:
                    r2 = r2 + -1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x31738;
                        continue;
                    }
                case 0x31774:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31794:
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x317a0;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x317a0:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x31654;
                    continue;
                case 0x31800:
                    pc=0x31800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31800() throws ExecutionException { /* 0x31800 - 0x31a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31800:
                    r2 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x318d8;
                        continue;
                    }
                    r2 = 7 << 16;
                    r2 = r2 + 19980;
                    r5 = r5 << 2;
                    r5 = r2 + r5;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x3182c:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3184c:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3186c:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r0 + -8;
                    r3 = r3 + 7;
                    r3 = r3 & r2;
                    r2 = r3 + 8;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31894:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 >> 31;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x318b8:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    addr=r2+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x318d8:
                    r29 = r29 + -24;
                    r5 = 7 << 16;
                    r6 = 7 << 16;
                    r4 = readPages[(r28+-32672)>>>12][((r28+-32672)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    r5 = r5 + 19736;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r6 = r6 + 19768;
                    r7 = r0 + 179;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x31904;
                    return;
                case 0x31904:
                case 0x31a00:
                    pc=0x31a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31a00() throws ExecutionException { /* 0x31a00 - 0x31c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31a00:
                    r29 = r29 + -360;
                    writePages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff] = r22;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r21;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r20;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r19;
                    writePages[(r29+332)>>>12][((r29+332)>>>2)&0x3ff] = r18;
                    writePages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff] = r17;
                    writePages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff] = r31;
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r23;
                    writePages[(r29+324)>>>12][((r29+324)>>>2)&0x3ff] = r16;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r22 = 7 << 16;
                    r18 = 7 << 16;
                    r19 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r5;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r0;
                    r20 = r0 + r0;
                    r22 = r22 + 20008;
                    r18 = r18 + 20264;
                    r21 = 7 << 16;
                    r19 = r19 + 20076;
                    r17 = r6 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31ab8;
                        continue;
                    }
                case 0x31a68:
                    r2 = r0 + 37;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x31b18;
                        continue;
                    }
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31aa4;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x31aa4:
                    r6 = r17 + r0;
                case 0x31aa8:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r17 = r6 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31a68;
                        continue;
                    }
                case 0x31ab8:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31ae4;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x31ae4:
                    r31 = readPages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff];
                    r23 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                    r22 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    r21 = readPages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff];
                    r20 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r19 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    r18 = readPages[(r29+332)>>>12][((r29+332)>>>2)&0x3ff];
                    r17 = readPages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff];
                    r16 = readPages[(r29+324)>>>12][((r29+324)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    r29 = r29 + 360;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31b18:
                    addr=r6+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x31ec4;
                        run_31e00(); return;
                    }
                    r2 = r6 + 3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r17 = r2 + -1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31b84;
                        continue;
                    }
                case 0x31b40:
                    r3 = r16 + -32;
                    r3 = r3 & 255;
                    r4 = (r3&0xffffffffL) < (17&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31ce4;
                        run_31c00(); return;
                    }
                    r3 = r3 << 2;
                    r3 = r22 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x31b6c:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 16;
                    r2 = r2 + 1;
                case 0x31b78:
                    r17 = r2 + -1;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31b40;
                        continue;
                    }
                case 0x31b84:
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r5;
                    r23 = r0 + r0;
                case 0x31b8c:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x31b98;
                    pc=0x2ae00;
                    run_2ae00(); return;
                case 0x31b98:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31f00;
                        run_31e00(); return;
                    }
                    r3 = r0 + 46;
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    if(r16 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x31d38;
                        run_31c00(); return;
                    }
                case 0x31bb0:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r3 = r2 | 64;
                    r4 = r0 + 42;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r3;
                    if(r16 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x32118;
                        run_32000(); return;
                    }
                    r4 = r16 + r0;
                    r23 = r17 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x31bd8;
                    pc=0x2ae00;
                    run_2ae00(); return;
                case 0x31bd8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x320d4;
                        run_32000(); return;
                    }
                    r16 = r16 + -48;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x31c0c;
                    run_31c00(); return;
                case 0x31bf0:
                    r2 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    r16 = r16 + -48;
                    r3 = r2 << 1;
                    r2 = r2 << 3;
                case 0x31c00:
                    pc=0x31c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31c00() throws ExecutionException { /* 0x31c00 - 0x31e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31c00:
                    r2 = r3 + r2;
                    r16 = r2 + r16;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r16;
                case 0x31c0c:
                    r23 = r23 + 1;
                    addr=r23+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x31c24;
                    pc=0x2ae00;
                    run_2ae00(); return;
                case 0x31c24:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31bf0;
                        run_31a00(); return;
                    }
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r17 = r23 + r0;
                case 0x31c34:
                    r3 = r0 + 2;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = r16 + -76;
                    r3 = r3 & 255;
                    r4 = (r3&0xffffffffL) < (47&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31d54;
                        continue;
                    }
                case 0x31c50:
                    r4 = r2 & 6;
                    r3 = r0 + 6;
                    r5 = r0 + 2;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x31d90;
                        continue;
                    }
                case 0x31c64:
                    r3 = r0 + -5;
                    r2 = r2 & r3;
                    r4 = r2 & 17;
                    r3 = r0 + 17;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x31da0;
                        continue;
                    }
                case 0x31c80:
                    r3 = r0 + -17;
                    r2 = r2 & r3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x31da0;
                    continue;
                case 0x31c94:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 1;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x31b78;
                    run_31a00(); return;
                case 0x31ca8:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 2;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x31b78;
                    run_31a00(); return;
                case 0x31cbc:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 8;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x31b78;
                    run_31a00(); return;
                case 0x31cd0:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 4;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x31b78;
                    run_31a00(); return;
                case 0x31ce4:
                    r2 = r0 + 42;
                    r3 = r17 + r0;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r5;
                    r23 = r16 + r0;
                    if(r16 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x31b8c;
                        run_31a00(); return;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3214c;
                        run_32000(); return;
                    }
                case 0x31d1c:
                    r2 = r5 | 32;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r17 = r17 + 1;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                case 0x31d2c:
                    r3 = r0 + 46;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x31bb0;
                        run_31a00(); return;
                    }
                case 0x31d38:
                    r3 = r0 + 2;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = r16 + -76;
                    r3 = r3 & 255;
                    r4 = (r3&0xffffffffL) < (47&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31c50;
                        continue;
                    }
                case 0x31d54:
                    r3 = r3 << 2;
                    r3 = r19 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x31d6c:
                    r3 = r0 + 5;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 5;
                case 0x31d80:
                    r4 = r2 & 6;
                    r3 = r0 + 6;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x31c64;
                        continue;
                    }
                case 0x31d90:
                    r4 = r2 & 17;
                    r3 = r0 + 17;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x31c80;
                        continue;
                    }
                case 0x31da0:
                    r3 = r2 & 64;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31db8;
                        continue;
                    }
                    r3 = r0 + -17;
                    r2 = r2 & r3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                case 0x31db8:
                    r16 = r16 + -88;
                    r16 = r16 & 255;
                    r3 = (r16&0xffffffffL) < (33&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x320f4;
                        run_32000(); return;
                    }
                    r16 = r16 << 2;
                    r16 = r18 + r16;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x31de4:
                    r3 = r0 + 6;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x31d80;
                    continue;
                case 0x31e00:
                    pc=0x31e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31e00() throws ExecutionException { /* 0x31e00 - 0x32000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31e00:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r3 = r0 + 108;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x321b8;
                        run_32000(); return;
                    }
                    r3 = r0 + 3;
                    r17 = r17 + 1;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x31d80;
                    run_31c00(); return;
                case 0x31e28:
                    r3 = r0 + 4;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x31d80;
                    run_31c00(); return;
                case 0x31e44:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r3 = r0 + 104;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x321d4;
                        run_32000(); return;
                    }
                    r3 = r0 + 1;
                    r17 = r17 + 1;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x31d80;
                    run_31c00(); return;
                case 0x31e6c:
                    r3 = r0 + 7;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x31d80;
                    run_31c00(); return;
                case 0x31e88:
                    r2 = r2 | 384;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                case 0x31e90:
                    r2 = r0 + 16;
                case 0x31e94:
                    r4 = r29 + 16;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x31ea4;
                    pc=0x31800;
                    run_31800(); return;
                case 0x31ea4:
                    r6 = r2 + r0;
                    r4 = r29 + 16;
                    r7 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x31eb8;
                    pc=0x31000;
                    run_31000(); return;
                case 0x31eb8:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x31aa8;
                    run_31a00(); return;
                case 0x31ec4:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r6 + 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31aa4;
                        run_31a00(); return;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r17 + r0;
                    r3 = r2 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x31aa8;
                    run_31a00(); return;
                case 0x31f00:
                    r23 = r23 + -48;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r23;
                    /* Next insn is delay slot */ 
                    pc=0x31f2c;
                    continue;
                case 0x31f10:
                    r2 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r16 = r16 + -48;
                    r3 = r2 << 1;
                    r2 = r2 << 3;
                    r2 = r3 + r2;
                    r16 = r2 + r16;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r16;
                case 0x31f2c:
                    r17 = r17 + 1;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x31f44;
                    pc=0x2ae00;
                    run_2ae00(); return;
                case 0x31f44:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31f10;
                        continue;
                    }
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r2 = r2 | 32;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x31d2c;
                    run_31c00(); return;
                case 0x31f64:
                    r20 = r0 + 1;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x31aa8;
                    run_31a00(); return;
                case 0x31f74:
                    r2 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32194;
                        run_32000(); return;
                    }
                    r2 = 7 << 16;
                    r5 = r5 << 2;
                    r2 = r2 + 20396;
                    r2 = r2 + r5;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x31fa0:
                    r2 = r0 + 10;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r2;
                    r2 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3241c;
                        run_32400(); return;
                    }
                    r5 = r5 << 2;
                    r2 = r21 + 20424;
                    r2 = r2 + r5;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x31fd0:
                    r2 = r2 | 128;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x31e94;
                    continue;
                case 0x31fe4:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32440;
                        run_32400(); return;
                    }
                case 0x32000:
                    pc=0x32000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32000() throws ExecutionException { /* 0x32000 - 0x32200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32000:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x32010;
                    pc=0x31600;
                    run_31600(); return;
                case 0x32010:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x31aa8;
                    run_31a00(); return;
                case 0x3201c:
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x323d8;
                        run_32200(); return;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r3 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32464;
                        run_32400(); return;
                    }
                    r4 = r2 & 64;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32220;
                        run_32200(); return;
                    }
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    r4 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3206c;
                        continue;
                    }
                case 0x32068:
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r2;
                case 0x3206c:
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x3207c;
                    pc=0x31600;
                    run_31600(); return;
                case 0x3207c:
                    r20 = r0 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x31aa8;
                    run_31a00(); return;
                case 0x3208c:
                    r2 = r2 | 128;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x31e94;
                    run_31e00(); return;
                case 0x320a0:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    r3 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r29 + 316;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    addr=r29+316;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+317;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x320c8;
                    pc=0x31600;
                    run_31600(); return;
                case 0x320c8:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x31aa8;
                    run_31a00(); return;
                case 0x320d4:
                    r2 = r0 + 45;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x32234;
                        run_32200(); return;
                    }
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x31c34;
                    run_31c00(); return;
                case 0x320f4:
                    r5 = 7 << 16;
                    r6 = 7 << 16;
                    r4 = readPages[(r28+-32672)>>>12][((r28+-32672)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    r5 = r5 + 19896;
                    r6 = r6 + 19768;
                    r7 = r0 + 616;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x32118;
                    return;
                case 0x32118:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r4 + 4;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r4;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x323c4;
                        run_32200(); return;
                    }
                    r2 = r3 + r0;
                case 0x3213c:
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r17 = r17 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x31d38;
                    run_31c00(); return;
                case 0x3214c:
                    r2 = r0 - r2;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r2;
                    r5 = r5 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x31d1c;
                    run_31c00(); return;
                case 0x32160:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x32168:
                    r2 = r4 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                case 0x3217c:
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x32194:
                    r5 = 7 << 16;
                    r6 = 7 << 16;
                    r4 = readPages[(r28+-32672)>>>12][((r28+-32672)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    r5 = r5 + 19840;
                    r6 = r6 + 19768;
                    r7 = r0 + 362;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x321b8;
                    return;
                case 0x321b8:
                    r3 = r0 + 3;
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 2;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x31d80;
                    run_31c00(); return;
                case 0x321d4:
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r0;
                    r17 = r17 + 2;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x31d80;
                    run_31c00(); return;
                case 0x321ec:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                case 0x32200:
                    pc=0x32200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32200() throws ExecutionException { /* 0x32200 - 0x32400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32200:
                    r6 = r7 >> 31;
                case 0x32208:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x32214;
                    pc=0x31000;
                    run_31000(); return;
                case 0x32214:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x31aa8;
                    run_31a00(); return;
                case 0x32220:
                    r2 = r2 | 64;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x32068;
                    run_32000(); return;
                case 0x32234:
                    r17 = r17 + 2;
                case 0x32238:
                    r17 = r17 + 1;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x32250;
                    pc=0x2ae00;
                    run_2ae00(); return;
                case 0x32250:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32238;
                        continue;
                    }
                    r3 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r2 = r0 + -65;
                    r2 = r3 & r2;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x31d38;
                    run_31c00(); return;
                case 0x32270:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x32278:
                    r4 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x32168;
                    run_32000(); return;
                case 0x32298:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3217c;
                    run_32000(); return;
                case 0x322a4:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x322ac:
                    r2 = r4 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x32278;
                    continue;
                case 0x322cc:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x322d4:
                    r4 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x322ac;
                    continue;
                case 0x322f4:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x322fc:
                    r2 = r3 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x322d4;
                    continue;
                case 0x3231c:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x322fc;
                    continue;
                case 0x32340:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -8;
                    r3 = r3 + 7;
                    r2 = r3 & r2;
                    r3 = r2 + 8;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x32208;
                    continue;
                case 0x32368:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x32208;
                    continue;
                case 0x32384:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r7 = tmp;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r6 = r7 >> 31;
                    /* Next insn is delay slot */ 
                    pc=0x32208;
                    continue;
                case 0x323a4:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r2+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r6 = r7 >> 31;
                    /* Next insn is delay slot */ 
                    pc=0x32208;
                    continue;
                case 0x323c4:
                    r3 = r0 + -65;
                    r2 = r2 & r3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x3213c;
                    run_32000(); return;
                case 0x323d8:
                    r2 = r2 | 192;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = r0 + 8;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r2;
                    r2 = r0 + 16;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                case 0x32400:
                    pc=0x32400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32400() throws ExecutionException { /* 0x32400 - 0x32600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32400:
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x32410;
                    pc=0x31000;
                    run_31000(); return;
                case 0x32410:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x31aa8;
                    run_31a00(); return;
                case 0x3241c:
                    r5 = 7 << 16;
                    r6 = 7 << 16;
                    r4 = readPages[(r28+-32672)>>>12][((r28+-32672)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    r5 = r5 + 19788;
                    r6 = r6 + 19768;
                    r7 = r0 + 160;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x32440;
                    return;
                case 0x32440:
                    r5 = 7 << 16;
                    r6 = 7 << 16;
                    r4 = readPages[(r28+-32680)>>>12][((r28+-32680)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    r5 = r5 + 19820;
                    r6 = r6 + 19768;
                    r7 = r0 + 571;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x32464;
                    return;
                case 0x32464:
                    r5 = 7 << 16;
                    r6 = 7 << 16;
                    r4 = readPages[(r28+-32680)>>>12][((r28+-32680)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    r5 = r5 + 19832;
                    r6 = r6 + 19768;
                    r7 = r0 + 580;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x32488;
                    return;
                case 0x32488:
                case 0x32600:
                    pc=0x32600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32600() throws ExecutionException { /* 0x32600 - 0x32800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32600:
                    r29 = r29 + -32;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r7 = r29 + 44;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x3261c;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x3261c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32800:
                    pc=0x32800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32800() throws ExecutionException { /* 0x32800 - 0x32a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32800:
                    r29 = r29 + -32;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r7 = r29 + 44;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x32824;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x32824:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x32850;
                        continue;
                    }
                    r3 = r2 + 1;
                    r16 = ((r3 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32850;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32850:
                    r5 = 7 << 16;
                    r6 = 7 << 16;
                    r4 = readPages[(r28+-32680)>>>12][((r28+-32680)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    r5 = r5 + 19936;
                    r6 = r6 + 19768;
                    r7 = r0 + 676;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x32874;
                    return;
                case 0x32874:
                case 0x32a00:
                    pc=0x32a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32a00() throws ExecutionException { /* 0x32a00 - 0x32c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32a00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x32a18;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x32a18:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x32a44;
                        continue;
                    }
                    r3 = r2 + 1;
                    r16 = ((r3 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32a44;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32a44:
                    r5 = 7 << 16;
                    r6 = 7 << 16;
                    r4 = readPages[(r28+-32680)>>>12][((r28+-32680)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    r5 = r5 + 19936;
                    r6 = r6 + 19768;
                    r7 = r0 + 676;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x32a68;
                    return;
                case 0x32a68:
                case 0x32c00:
                    pc=0x32c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32c00() throws ExecutionException { /* 0x32c00 - 0x32e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32c00:
                    r5 = r4 + r0;
                    r6 = r0 + r0;
                    r4 = r0 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56600;
                    run_56600(); return;
                case 0x32e00:
                    pc=0x32e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32e00() throws ExecutionException { /* 0x32e00 - 0x33000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32e00:
                    r5 = r0 + r0;
                    r6 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x40a00;
                    run_40a00(); return;
                case 0x33000:
                    pc=0x33000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33000() throws ExecutionException { /* 0x33000 - 0x33200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33000:
                    r6 = r0 + r0;
                    r7 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x40600;
                    run_40600(); return;
                case 0x33200:
                    pc=0x33200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33200() throws ExecutionException { /* 0x33200 - 0x33400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33200:
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33400:
                    pc=0x33400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33400() throws ExecutionException { /* 0x33400 - 0x33600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33400:
                    r29 = r29 + -24;
                    r5 = r0 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3341c;
                    pc=0x56800;
                    run_56800(); return;
                case 0x3341c:
                    r4 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    r2 = readPages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3343c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x3343c;
                    return;
                case 0x3343c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x33448;
                    pc=0x48400;
                    run_48400(); return;
                case 0x33448:
                case 0x33600:
                    pc=0x33600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33600() throws ExecutionException { /* 0x33600 - 0x33800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33600:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3364c;
                        continue;
                    }
                    r17 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3363c;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33738;
                        continue;
                    }
                case 0x3363c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3366c;
                        continue;
                    }
                case 0x3364c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3366c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3367c;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x3367c:
                    r3 = readPages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff];
                    r18 = r2 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x336a4;
                        continue;
                    }
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x3369c;
                    return;
                case 0x3369c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x33748;
                        continue;
                    }
                case 0x336a4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33754;
                        continue;
                    }
                case 0x336b8:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x336e4;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x336e0;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x336e0;
                    pc=0x37400;
                    run_37400(); return;
                case 0x336e0:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x336e4:
                    r5 = readPages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33704;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x33700;
                    pc=0x37400;
                    run_37400(); return;
                case 0x33700:
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                case 0x33704:
                    /* Next insn is delay slot */ 
                    r31=0x3370c;
                    pc=0x35400;
                    run_35400(); return;
                case 0x3370c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x33718;
                    pc=0x35600;
                    run_35600(); return;
                case 0x33718:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33738:
                    /* Next insn is delay slot */ 
                    r31=0x33740;
                    pc=0x35000;
                    run_35000(); return;
                case 0x33740:
                    /* Next insn is delay slot */ 
                    pc=0x3363c;
                    continue;
                case 0x33748:
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x336a4;
                    continue;
                case 0x33754:
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x33764;
                    pc=0x37400;
                    run_37400(); return;
                case 0x33764:
                    /* Next insn is delay slot */ 
                    pc=0x336b8;
                    continue;
                case 0x33800:
                    pc=0x33800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33800() throws ExecutionException { /* 0x33800 - 0x33a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33800:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x33600;
                    run_33600(); return;
                case 0x33a00:
                    pc=0x33a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33a00() throws ExecutionException { /* 0x33a00 - 0x33c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33a00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -40;
                    r3 = r2 & 8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    r17 = r5 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33b40;
                        continue;
                    }
                    r3 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 | 2048;
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x33bf4;
                        continue;
                    }
                case 0x33a44:
                    r3 = readPages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33b1c;
                        continue;
                    }
                    r2 = r2 & 65535;
                    r4 = r2 & 4096;
                    r16 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33c0c;
                        run_33c00(); return;
                    }
                    r6 = readPages[(r17+80)>>>12][((r17+80)>>>2)&0x3ff];
                case 0x33a70:
                    r2 = r2 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33aa4;
                        continue;
                    }
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r6 = r6 - r2;
                    r2 = readPages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33aa4;
                        continue;
                    }
                    r2 = readPages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff];
                    r6 = r6 - r2;
                case 0x33aa4:
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x33ab8;
                    return;
                case 0x33ab8:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x33c44;
                        run_33c00(); return;
                    }
                case 0x33ac4:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r4 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r3 = r3 & 63487;
                    r3 = r3 << 16;
                    r3 = r3 >> 16;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 & 4096;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r0;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33cc8;
                        run_33c00(); return;
                    }
                case 0x33af0:
                    r5 = readPages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r16;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33b1c;
                        continue;
                    }
                    r2 = r17 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x33b18;
                        continue;
                    }
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x33b18;
                    pc=0x37400;
                    run_37400(); return;
                case 0x33b18:
                    writePages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff] = r0;
                case 0x33b1c:
                    r2 = r0 + r0;
                case 0x33b20:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33b40:
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33b1c;
                        continue;
                    }
                    r16 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r2 & 3;
                    r16 = r16 - r18;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r18;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33be8;
                        continue;
                    }
                    r2 = readPages[(r5+20)>>>12][((r5+20)>>>2)&0x3ff];
                case 0x33b70:
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    if(r16 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x33b94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x33b1c;
                    continue;
                case 0x33b84:
                    r16 = r16 - r2;
                    r18 = r18 + r2;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x33b1c;
                        continue;
                    }
                case 0x33b94:
                    r2 = readPages[(r17+36)>>>12][((r17+36)>>>2)&0x3ff];
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r6 = r18 + r0;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x33bb0;
                    return;
                case 0x33bb0:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x33b84;
                        continue;
                    }
                case 0x33bb8:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 | 64;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33be8:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33b70;
                    continue;
                case 0x33bf4:
                    r3 = readPages[(r5+60)>>>12][((r5+60)>>>2)&0x3ff];
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x33a44;
                        continue;
                    }
                case 0x33c00:
                    pc=0x33c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33c00() throws ExecutionException { /* 0x33c00 - 0x33e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33c00:
                    /* Next insn is delay slot */ 
                    pc=0x33b1c;
                    run_33a00(); return;
                case 0x33c0c:
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r4 = r19 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x33c24;
                    return;
                case 0x33c24:
                    r6 = r2 + r0;
                    r2 = r0 + -1;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x33c90;
                        continue;
                    }
                case 0x33c34:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = readPages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x33a70;
                    run_33a00(); return;
                case 0x33c44:
                    r3 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33ac4;
                        run_33a00(); return;
                    }
                    r2 = r0 + 29;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x33c6c;
                        continue;
                    }
                    r2 = r0 + 22;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x33bb8;
                        run_33a00(); return;
                    }
                case 0x33c6c:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r0;
                    r2 = r2 & 63487;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x33af0;
                    run_33a00(); return;
                case 0x33c90:
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33c34;
                        continue;
                    }
                    r3 = r0 + 29;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x33cb8;
                        continue;
                    }
                    r3 = r0 + 22;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x33bb8;
                        run_33a00(); return;
                    }
                case 0x33cb8:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r16;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33b20;
                    run_33a00(); return;
                case 0x33cc8:
                    writePages[(r17+80)>>>12][((r17+80)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x33af0;
                    run_33a00(); return;
                case 0x33e00:
                    pc=0x33e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33e00() throws ExecutionException { /* 0x33e00 - 0x34000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33e00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33e28;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33e68;
                        continue;
                    }
                case 0x33e28:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33e50;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33e50:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x33a00;
                    run_33a00(); return;
                case 0x33e68:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x33e74;
                    pc=0x35000;
                    run_35000(); return;
                case 0x33e74:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x33e28;
                    continue;
                case 0x34000:
                    pc=0x34000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34000() throws ExecutionException { /* 0x34000 - 0x34200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34000:
                    r5 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34018;
                        continue;
                    }
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x34018:
                    r5 = 3 << 16;
                    r4 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    r5 = r5 + 15872;
                    /* Next insn is delay slot */ 
                    pc=0x38600;
                    run_38600(); return;
                case 0x34200:
                    pc=0x34200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34200() throws ExecutionException { /* 0x34200 - 0x34400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34200:
                    r2 = r6 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x343a4;
                        continue;
                    }
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r21 = r4 + r0;
                    r22 = r5 + r0;
                    r17 = r7 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34254;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34340;
                        continue;
                    }
                case 0x34254:
                    r18 = r6 + -1;
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x342d0;
                    continue;
                case 0x34264:
                    r2 = ((r18 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    r20 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34278;
                        continue;
                    }
                    r16 = r18 + r0;
                case 0x34278:
                    r4 = r20 + r0;
                    r5 = r0 + 10;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3428c;
                    pc=0x3a000;
                    run_3a000(); return;
                case 0x3428c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34358;
                        continue;
                    }
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 - r16;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = r20 + r0;
                    r2 = r2 + r16;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r6 = r16 + r0;
                    r18 = r18 - r16;
                    /* Next insn is delay slot */ 
                    r31=0x342c4;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x342c4:
                    r19 = r19 + r16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3430c;
                        continue;
                    }
                case 0x342d0:
                    r16 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34264;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x342f0;
                    pc=0x3c800;
                    run_3c800(); return;
                case 0x342f0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34304;
                        continue;
                    }
                    r16 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x34264;
                    continue;
                case 0x34304:
                    if(r19 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x34398;
                        continue;
                    }
                case 0x3430c:
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r22 + r0;
                case 0x34314:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34340:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x3434c;
                    pc=0x35000;
                    run_35000(); return;
                case 0x3434c:
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x34254;
                    continue;
                case 0x34358:
                    r2 = r2 + 1;
                    r3 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r16 = r2 - r20;
                    r3 = r3 - r16;
                    r6 = r16 + r0;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r4 = r19 + r0;
                    r5 = r20 + r0;
                    r16 = r19 + r16;
                    /* Next insn is delay slot */ 
                    r31=0x34388;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x34388:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x34314;
                    continue;
                case 0x34398:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x34314;
                    continue;
                case 0x343a4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34400:
                    pc=0x34400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34400() throws ExecutionException { /* 0x34400 - 0x34600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34400:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x34200;
                    run_34200(); return;
                case 0x34600:
                    pc=0x34600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34600() throws ExecutionException { /* 0x34600 - 0x34800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34600:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34800:
                    pc=0x34800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34800() throws ExecutionException { /* 0x34800 - 0x34a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34800:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34a00:
                    pc=0x34a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34a00() throws ExecutionException { /* 0x34a00 - 0x34c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34a00:
                    r5 = 3 << 16;
                    r5 = r5 + 14336;
                    /* Next insn is delay slot */ 
                    pc=0x38400;
                    run_38400(); return;
                case 0x34c00:
                    pc=0x34c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34c00() throws ExecutionException { /* 0x34c00 - 0x34e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34c00:
                    r29 = r29 + -32;
                    r2 = r5 << 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r18 = r5 << 4;
                    r18 = r18 - r2;
                    r18 = r18 + r5;
                    r18 = r18 << 3;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = r5 + r0;
                    r5 = r18 + 12;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x34c38;
                    pc=0x39600;
                    run_39600(); return;
                case 0x34c38:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34c64;
                        continue;
                    }
                    r4 = r2 + 12;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r17;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r4;
                    r5 = r0 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x34c64;
                    pc=0x48bec;
                    run_48a00(); return;
                case 0x34c64:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34e00:
                    pc=0x34e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34e00() throws ExecutionException { /* 0x34e00 - 0x35000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34e00:
                    r5 = 3 << 16;
                    r4 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    r5 = r5 + 14336;
                    /* Next insn is delay slot */ 
                    pc=0x38400;
                    run_38400(); return;
                case 0x35000:
                    pc=0x35000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35000() throws ExecutionException { /* 0x35000 - 0x35200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35000:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    r29 = r29 + -48;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3517c;
                        continue;
                    }
                    r2 = 3 << 16;
                    r2 = r2 + 18944;
                    writePages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    r16 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r4+740)>>>12][((r4+740)>>>2)&0x3ff] = r2;
                    r2 = r4 + 748;
                    writePages[(r4+744)>>>12][((r4+744)>>>2)&0x3ff] = r2;
                    r22 = r0 + 1;
                    r2 = r0 + 4;
                    r21 = 4 << 16;
                    r20 = 4 << 16;
                    r19 = 4 << 16;
                    r18 = 4 << 16;
                    writePages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff] = r22;
                    writePages[(r4+736)>>>12][((r4+736)>>>2)&0x3ff] = r0;
                    r21 = r21 + -10240;
                    r4 = r16 + 92;
                    r20 = r20 + -9216;
                    r19 = r19 + -8704;
                    r18 = r18 + -8192;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x350bc;
                    pc=0x48bec;
                    run_48a00(); return;
                case 0x350bc:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                    r16 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r4 = r16 + 92;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r22&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x35110;
                    pc=0x48bec;
                    run_48a00(); return;
                case 0x35110:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                    r16 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r2 = r0 + 18;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 2;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x35168;
                    pc=0x48bec;
                    run_48a00(); return;
                case 0x35168:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                case 0x3517c:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35200:
                    pc=0x35200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35200() throws ExecutionException { /* 0x35200 - 0x35400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35200:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r2 = readPages[(r18+56)>>>12][((r18+56)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35300;
                        continue;
                    }
                case 0x3522c:
                    r18 = r18 + 736;
                    r17 = r0 + -1;
                case 0x35234:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35260;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x352e4;
                    continue;
                case 0x35250:
                    r2 = r2 + -1;
                    r16 = r16 + 104;
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x352e4;
                        continue;
                    }
                case 0x35260:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35250;
                        continue;
                    }
                    r2 = r0 + -1;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x352b0;
                    pc=0x48bec;
                    run_48a00(); return;
                case 0x352b0:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    writePages[(r16+72)>>>12][((r16+72)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x352c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x352e4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35314;
                        continue;
                    }
                case 0x352f4:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x35234;
                    continue;
                case 0x35300:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3530c;
                    pc=0x35000;
                    run_35000(); return;
                case 0x3530c:
                    /* Next insn is delay slot */ 
                    pc=0x3522c;
                    continue;
                case 0x35314:
                    r4 = r19 + r0;
                    r5 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x35324;
                    pc=0x34c00;
                    run_34c00(); return;
                case 0x35324:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x352f4;
                        continue;
                    }
                    r2 = r0 + 12;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x352c4;
                    continue;
                case 0x35400:
                    pc=0x35400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35400() throws ExecutionException { /* 0x35400 - 0x35600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35400:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35600:
                    pc=0x35600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35600() throws ExecutionException { /* 0x35600 - 0x35800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35600:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35800:
                    pc=0x35800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35800() throws ExecutionException { /* 0x35800 - 0x35a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35800:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35a00:
                    pc=0x35a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35a00() throws ExecutionException { /* 0x35a00 - 0x35c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35a00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35c00:
                    pc=0x35c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35c00() throws ExecutionException { /* 0x35c00 - 0x35e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35c00:
                    r5 = 3 << 16;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = r5 + 17920;
                    /* Next insn is delay slot */ 
                    pc=0x38400;
                    run_38400(); return;
                case 0x35e00:
                    pc=0x35e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35e00() throws ExecutionException { /* 0x35e00 - 0x36000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35e00:
                    r5 = 3 << 16;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = r5 + 18432;
                    /* Next insn is delay slot */ 
                    pc=0x38400;
                    run_38400(); return;
                case 0x36000:
                    pc=0x36000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36000() throws ExecutionException { /* 0x36000 - 0x36200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36000:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r19 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r29 + 16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x36030;
                    pc=0x58c00;
                    run_58c00(); return;
                case 0x36030:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x360f4;
                        continue;
                    }
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x36048;
                    pc=0x35200;
                    run_35200(); return;
                case 0x36048:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x360f4;
                        continue;
                    }
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    r7 = r0 + 438;
                    /* Next insn is delay slot */ 
                    r31=0x3606c;
                    pc=0x48420;
                    run_48400(); return;
                case 0x3606c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x360e0;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 4 << 16;
                    r2 = r2 + -10240;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r2;
                    r2 = 4 << 16;
                    r2 = r2 + -9216;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r2;
                    r2 = 4 << 16;
                    r2 = r2 + -8704;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r2;
                    r2 = 4 << 16;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r17&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -8192;
                    r17 = r17 & 256;
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r2;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36118;
                        continue;
                    }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x360e0:
                    /* Next insn is delay slot */ 
                    r31=0x360e8;
                    pc=0x35400;
                    run_35400(); return;
                case 0x360e8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x360f4;
                    pc=0x35600;
                    run_35600(); return;
                case 0x360f4:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36118:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x36130;
                    pc=0x37800;
                    run_37800(); return;
                case 0x36130:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36200:
                    pc=0x36200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36200() throws ExecutionException { /* 0x36200 - 0x36400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36200:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36000;
                    run_36000(); return;
                case 0x36400:
                    pc=0x36400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36400() throws ExecutionException { /* 0x36400 - 0x36600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36400:
                    r29 = r29 + -32;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r7 = r29 + 44;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x3641c;
                    pc=0x45800;
                    run_45800(); return;
                case 0x3641c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36600:
                    pc=0x36600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36600() throws ExecutionException { /* 0x36600 - 0x36800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36600:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r6 = r5 + r0;
                    r7 = r29 + 40;
                    r5 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x36630;
                    pc=0x45800;
                    run_45800(); return;
                case 0x36630:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36800:
                    pc=0x36800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36800() throws ExecutionException { /* 0x36800 - 0x36a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36800:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36840;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36840;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x36838;
                    pc=0x35000;
                    run_35000(); return;
                case 0x36838:
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x36840:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x3b800;
                    run_3b800(); return;
                case 0x36a00:
                    pc=0x36a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36a00() throws ExecutionException { /* 0x36a00 - 0x36c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36a00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r6 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36a5c;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36a44;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x36a3c;
                    pc=0x35000;
                    run_35000(); return;
                case 0x36a3c:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x36a44:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x3b800;
                    run_3b800(); return;
                case 0x36a5c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x3b800;
                    run_3b800(); return;
                case 0x36c00:
                    pc=0x36c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36c00() throws ExecutionException { /* 0x36c00 - 0x36e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36c00:
                    { long hilo = (long)(r7) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -64;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    r21 = lo;
                    r22 = r6 + r0;
                    r23 = r7 + r0;
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36d80;
                        continue;
                    }
                    r20 = r4 + r0;
                    r18 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36c68;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36eb8;
                        run_36e00(); return;
                    }
                case 0x36c68:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36c9c;
                        continue;
                    }
                case 0x36c80:
                    r4 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r3 | 8192;
                    r3 = r0 + -8193;
                    r3 = r4 & r3;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r3;
                    r2 = r2 & 65535;
                case 0x36c9c:
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x36da8;
                        continue;
                    }
                    r2 = r2 & 2;
                    r3 = r17 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36dc0;
                        continue;
                    }
                case 0x36cbc:
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36d08;
                    continue;
                case 0x36cc8:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x36cd4;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x36cd4:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r2 = r2 + r17;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r16 + r0;
                    r18 = r18 + r17;
                    r19 = r19 - r17;
                    /* Next insn is delay slot */ 
                    r31=0x36cf8;
                    pc=0x3c800;
                    run_3c800(); return;
                case 0x36cf8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36d8c;
                        continue;
                    }
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                case 0x36d08:
                    r3 = ((r17 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    r4 = r18 + r0;
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36cc8;
                        continue;
                    }
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x36d28;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x36d28:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 - r19;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r19 = r2 + r19;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r19;
                case 0x36d48:
                    r2 = r23 + r0;
                case 0x36d4c:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36d80:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36d4c;
                    continue;
                case 0x36d8c:
                    r2 = r21 - r19;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        if(r22!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                        }
                        pc=0x36d9c;
                        continue;
                    }
                    if(r22!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x36d9c:
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x36d4c;
                    continue;
                case 0x36da8:
                    r2 = r2 & 2;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    r3 = r0 + r0;
                    r17 = r0 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36cbc;
                        continue;
                    }
                case 0x36dc0:
                    r2 = ((r21 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    r17 = r3 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36dd4;
                        continue;
                    }
                    r17 = r21 + r0;
                case 0x36dd4:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x36de8;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x36de8:
                    r19 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r19 = r19 + r17;
                    r2 = r2 - r17;
                    r18 = r18 + r17;
                case 0x36e00:
                    pc=0x36e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36e00() throws ExecutionException { /* 0x36e00 - 0x37000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36e00:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r19;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r17 = r21 - r17;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36ee0;
                        continue;
                    }
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36d48;
                        run_36c00(); return;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x36e38;
                        continue;
                    }
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x36e34;
                    pc=0x37400;
                    run_37400(); return;
                case 0x36e34:
                    r19 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                case 0x36e38:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x36e3c:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r30 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x36e58;
                    continue;
                case 0x36e50:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36d48;
                        run_36c00(); return;
                    }
                case 0x36e58:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r18;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r17;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r18;
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x36e74;
                    pc=0x3c800;
                    run_3c800(); return;
                case 0x36e74:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r30;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r19;
                    r17 = r17 - r4;
                    r18 = r18 + r4;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36e50;
                        continue;
                    }
                    r2 = r21 - r17;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        if(r22!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                        }
                        pc=0x36eac;
                        continue;
                    }
                    if(r22!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x36eac:
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x36d4c;
                    run_36c00(); return;
                case 0x36eb8:
                    /* Next insn is delay slot */ 
                    r31=0x36ec0;
                    pc=0x35000;
                    run_35000(); return;
                case 0x36ec0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36c9c;
                        run_36c00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x36c80;
                    run_36c00(); return;
                case 0x36ee0:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36e3c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x36d48;
                    run_36c00(); return;
                case 0x37000:
                    pc=0x37000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37000() throws ExecutionException { /* 0x37000 - 0x37200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37000:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x37030;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x37030:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37200:
                    pc=0x37200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37200() throws ExecutionException { /* 0x37200 - 0x37400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37200:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r18 = 7 << 16;
                    r17 = r4 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r20 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r18 + 30336;
                    /* Next insn is delay slot */ 
                    r31=0x37234;
                    pc=0x48780;
                    run_48600(); return;
                case 0x37234:
                    r4 = r17 + r0;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37244;
                    pc=0x3b000;
                    run_3b000(); return;
                case 0x37244:
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r19 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r19 = r19 & r2;
                    r5 = r19 - r20;
                    r5 = r5 + -17;
                    r5 = r5 + r16;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        if(r16!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r16 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r16 & 0xffffffffL));
                        }
                        pc=0x37270;
                        continue;
                    }
                    if(r16!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r16 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r16 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x37270:
                    r20 = lo;
                    r20 = r20 + -1;
                    { long hilo = (long)(r20) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r20 = lo;
                    r16 = r20 < r16 ? 1 : 0;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x372b4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x372a0;
                    pc=0x48520;
                    run_48400(); return;
                case 0x372a0:
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r3 = r3 + r19;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x372e8;
                        continue;
                    }
                case 0x372b4:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x372c0;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x372c0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x372e8:
                    r4 = r17 + r0;
                    r5 = r0 - r20;
                    /* Next insn is delay slot */ 
                    r31=0x372f8;
                    pc=0x48520;
                    run_48400(); return;
                case 0x372f8:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x37358;
                        continue;
                    }
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r19 = r19 - r20;
                    r19 = r19 | 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r19;
                    r2 = 17 << 16;
                    r3 = readPages[(r2+32496)>>>12][((r2+32496)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r20 = r3 - r20;
                    writePages[(r2+32496)>>>12][((r2+32496)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    r31=0x37330;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x37330:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37358:
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37368;
                    pc=0x48520;
                    run_48400(); return;
                case 0x37368:
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r4 = r2 - r3;
                    r5 = r4 < 16 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x372b4;
                        continue;
                    }
                    r5 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    r4 = r4 | 1;
                    r2 = r2 - r5;
                    r5 = 17 << 16;
                    writePages[(r5+32496)>>>12][((r5+32496)>>>2)&0x3ff] = r2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x372b4;
                    continue;
                case 0x37400:
                    pc=0x37400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37400() throws ExecutionException { /* 0x37400 - 0x37600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37400:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x375a0;
                        continue;
                    }
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37428;
                    pc=0x3b000;
                    run_3b000(); return;
                case 0x37428:
                    r8 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r2 = r0 + -2;
                    r6 = r16 + -8;
                    r2 = r8 & r2;
                    r3 = r6 + r2;
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r7 = 7 << 16;
                    r4 = r0 + -4;
                    r7 = r7 + 30336;
                    r5 = r5 & r4;
                    r4 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x37644;
                        run_37600(); return;
                    }
                    r8 = r8 & 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r5;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37564;
                        continue;
                    }
                    r4 = r0 + r0;
                case 0x37474:
                    r8 = r3 + r5;
                    r8 = readPages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff];
                    r8 = r8 & 1;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x374ac;
                        continue;
                    }
                    r2 = r2 + r5;
                    r5 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3760c;
                        run_37600(); return;
                    }
                case 0x3749c:
                    r3 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r5;
                case 0x374ac:
                    r3 = r2 | 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    r3 = r6 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37548;
                        continue;
                    }
                    r3 = (r2&0xffffffffL) < (512&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x375b8;
                        continue;
                    }
                    r3 = r2 >>> 9;
                    r4 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x376b8;
                        run_37600(); return;
                    }
                    r4 = r2 >>> 6;
                    r4 = r4 + 56;
                    r8 = r4 << 1;
                case 0x374ec:
                    r8 = r8 << 2;
                    r8 = r7 + r8;
                    r3 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x376d4;
                        run_37600(); return;
                    }
                    r4 = r0 + -4;
                case 0x37508:
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r5 = r5 & r4;
                    r5 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37530;
                        continue;
                    }
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r8 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x37508;
                        continue;
                    }
                case 0x37530:
                    r2 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                case 0x37538:
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r2;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r3;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r6;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r6;
                case 0x37548:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x37564:
                    r4 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r8 = 7 << 16;
                    r6 = r6 - r4;
                    r2 = r2 + r4;
                    r4 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r8 = r8 + 30344;
                    if(r4 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x376ac;
                        run_37600(); return;
                    }
                    r8 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r8;
                    writePages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff] = r4;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37474;
                    continue;
                case 0x375a0:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x375b8:
                    r2 = r2 >>> 3;
                    r3 = r2 >> 2;
                    r4 = r0 + 1;
                    r3 = r4 << (r3&0x1f);
                    r4 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r2 = r2 << 3;
                    r3 = r3 | r4;
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r3;
                    r7 = r7 + r2;
                    r2 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r7;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r6;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r6;
                case 0x37600:
                    pc=0x37600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37600() throws ExecutionException { /* 0x37600 - 0x37800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37600:
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x3760c:
                    r8 = 7 << 16;
                    r8 = r8 + 30344;
                    if(r5 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x3749c;
                        run_37400(); return;
                    }
                    r3 = r2 | 1;
                    writePages[(r7+20)>>>12][((r7+20)>>>2)&0x3ff] = r6;
                    writePages[(r7+16)>>>12][((r7+16)>>>2)&0x3ff] = r6;
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r5;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r5;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    r6 = r6 + r2;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x37548;
                    run_37400(); return;
                case 0x37644:
                    r8 = r8 & 1;
                    r2 = r5 + r2;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37678;
                        continue;
                    }
                    r3 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r6 = r6 - r3;
                    r4 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r3 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r4;
                case 0x37678:
                    r5 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    r3 = r2 | 1;
                    r2 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37548;
                        run_37400(); return;
                    }
                    r5 = readPages[(r28+-32340)>>>12][((r28+-32340)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x376a4;
                    pc=0x37200;
                    run_37200(); return;
                case 0x376a4:
                    /* Next insn is delay slot */ 
                    pc=0x37548;
                    run_37400(); return;
                case 0x376ac:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x37474;
                    run_37400(); return;
                case 0x376b8:
                    r4 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x376fc;
                        continue;
                    }
                    r4 = r3 + 91;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x374ec;
                    run_37400(); return;
                case 0x376d4:
                    r2 = r0 + 1;
                    r4 = r4 >> 2;
                    r4 = r2 << (r4&0x1f);
                    r2 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r2 = r4 | r2;
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r2;
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37538;
                    run_37400(); return;
                case 0x376fc:
                    r4 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3771c;
                        continue;
                    }
                    r4 = r2 >>> 12;
                    r4 = r4 + 110;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x374ec;
                    run_37400(); return;
                case 0x3771c:
                    r4 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3773c;
                        continue;
                    }
                    r4 = r2 >>> 15;
                    r4 = r4 + 119;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x374ec;
                    run_37400(); return;
                case 0x3773c:
                    r3 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3775c;
                        continue;
                    }
                    r4 = r2 >>> 18;
                    r4 = r4 + 124;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x374ec;
                    run_37400(); return;
                case 0x3775c:
                    r8 = r0 + 252;
                    r4 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x374ec;
                    run_37400(); return;
                case 0x37800:
                    pc=0x37800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37800() throws ExecutionException { /* 0x37800 - 0x37a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37800:
                    r29 = r29 + -120;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r21;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r18;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r23;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r22;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r20;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r19;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    r21 = r6 + r0;
                    r18 = r7 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37850;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37a30;
                        run_37a00(); return;
                    }
                case 0x37850:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 264;
                    r3 = r3 & 264;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37a4c;
                        run_37a00(); return;
                    }
                case 0x37864:
                    r19 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37d88;
                        run_37c00(); return;
                    }
                    r2 = r0 + 1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x379c4;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x378d4;
                        continue;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x378d4;
                        continue;
                    }
                    r2 = r0 + 22;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                case 0x3789c:
                    r20 = r0 + -1;
                case 0x378a0:
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r23 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r22 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r21 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r20 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 120;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x378d4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    r20 = r0 + r0;
                case 0x378e0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37d24;
                        run_37c00(); return;
                    }
                case 0x378e8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 2074;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37924;
                        continue;
                    }
                    r2 = r2 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37ab8;
                        run_37a00(); return;
                    }
                    r2 = 4 << 16;
                    r2 = r2 + -8704;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37a64;
                        run_37a00(); return;
                    }
                case 0x3791c:
                    r3 = r3 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x37924:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37934;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x37934:
                    r20 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3789c;
                        continue;
                    }
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r21 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x37958;
                    return;
                case 0x37958:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3789c;
                        continue;
                    }
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37990;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3798c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3798c;
                    pc=0x37400;
                    run_37400(); return;
                case 0x3798c:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x37990:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r4 = r16 + 92;
                    r2 = r2 & 63455;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x379bc;
                    pc=0x48bec;
                    run_48a00(); return;
                case 0x379bc:
                    /* Next insn is delay slot */ 
                    pc=0x378a0;
                    continue;
                case 0x379c4:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x379d4;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x379d4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r2 & 4096;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37ce4;
                        run_37c00(); return;
                    }
                    r20 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x379ec:
                    r3 = r2 & 4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37ba0;
                        run_37a00(); return;
                    }
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37bc8;
                        run_37a00(); return;
                    }
                case 0x37a00:
                    pc=0x37a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37a00() throws ExecutionException { /* 0x37a00 - 0x37c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37a00:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37a1c;
                        continue;
                    }
                    r3 = r3 - r2;
                    r20 = r20 + r3;
                case 0x37a1c:
                    r21 = r21 + r20;
                    r22 = r0 + 1;
                    r18 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x378e0;
                    run_37800(); return;
                case 0x37a30:
                    /* Next insn is delay slot */ 
                    r31=0x37a38;
                    pc=0x35000;
                    run_35000(); return;
                case 0x37a38:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 264;
                    r3 = r3 & 264;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37864;
                        run_37800(); return;
                    }
                case 0x37a4c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37a5c;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x37a5c:
                    /* Next insn is delay slot */ 
                    pc=0x37864;
                    run_37800(); return;
                case 0x37a64:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3791c;
                        run_37800(); return;
                    }
                    r4 = r17 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x37a84;
                    pc=0x48560;
                    run_48400(); return;
                case 0x37a84:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37d18;
                        run_37c00(); return;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 | 32768;
                    r3 = r3 & 61440;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37d18;
                        run_37c00(); return;
                    }
                    r2 = r0 + 1024;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 1024;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x37ab8:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37bd4;
                        continue;
                    }
                    r23 = r21 + r0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37c04;
                        run_37c00(); return;
                    }
                case 0x37acc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 4096;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37d3c;
                        run_37c00(); return;
                    }
                    r2 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x37ae4:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r20 = r2 - r3;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37d68;
                        run_37c00(); return;
                    }
                    r6 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r20 = r20 - r6;
                case 0x37b04:
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r20 = r20 + r3;
                    r2 = r2 - r4;
                    r20 = r20 - r2;
                    r2 = r6 + r2;
                case 0x37b1c:
                    r3 = r23 < r20 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37c20;
                        run_37c00(); return;
                    }
                    r3 = r20 + r2;
                    r3 = ((r23 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37c20;
                        run_37c00(); return;
                    }
                    r20 = r23 - r20;
                    r4 = r4 + r20;
                    r2 = r2 - r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r4;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37b70;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37b6c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37b6c;
                    pc=0x37400;
                    run_37400(); return;
                case 0x37b6c:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x37b70:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 65503;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x37b80:
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x37b94;
                    pc=0x48bec;
                    run_48a00(); return;
                case 0x37b94:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x378a0;
                    run_37800(); return;
                case 0x37ba0:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r20 = r20 - r2;
                    r2 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37bc8;
                        continue;
                    }
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r20 = r20 - r2;
                case 0x37bc8:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x37a1c;
                    continue;
                case 0x37bd4:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x37be8;
                    pc=0x48560;
                    run_48400(); return;
                case 0x37be8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37924;
                        run_37800(); return;
                    }
                    r23 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r21 + r23;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37acc;
                        continue;
                    }
                case 0x37c00:
                    pc=0x37c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37c00() throws ExecutionException { /* 0x37c00 - 0x37e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37c00:
                case 0x37c04:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37d68;
                        continue;
                    }
                    r6 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x37b04;
                    run_37a00(); return;
                case 0x37c20:
                    r20 = readPages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r20 = r0 - r20;
                    r20 = r23 & r20;
                    r4 = r17 + r0;
                    r6 = r20 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x37c44;
                    return;
                case 0x37c44:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x37924;
                        run_37800(); return;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37c84;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37c80;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37c80;
                    pc=0x37400;
                    run_37400(); return;
                case 0x37c80:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x37c84:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r23 = r23 - r20;
                    r2 = r2 & 65503;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37b80;
                        run_37a00(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37cac;
                    pc=0x3c800;
                    run_3c800(); return;
                case 0x37cac:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37924;
                        run_37800(); return;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r23 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37924;
                        run_37800(); return;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 - r23;
                    r3 = r3 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x37b80;
                    run_37a00(); return;
                case 0x37ce4:
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x37cfc;
                    return;
                case 0x37cfc:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3789c;
                        run_37800(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x379ec;
                    run_37800(); return;
                case 0x37d18:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3791c;
                    run_37800(); return;
                case 0x37d24:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37d34;
                    pc=0x39000;
                    run_39000(); return;
                case 0x37d34:
                    /* Next insn is delay slot */ 
                    pc=0x378e8;
                    run_37800(); return;
                case 0x37d3c:
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x37d54;
                    return;
                case 0x37d54:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x37ae4;
                        run_37a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x37924;
                    run_37800(); return;
                case 0x37d68:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r2 = r2 - r4;
                    r20 = r20 - r2;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x37b1c;
                    run_37a00(); return;
                case 0x37d88:
                    r2 = r0 + 29;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r20 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x378a0;
                    run_37800(); return;
                case 0x37e00:
                    pc=0x37e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37e00() throws ExecutionException { /* 0x37e00 - 0x38000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37e00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37800;
                    run_37800(); return;
                case 0x38000:
                    pc=0x38000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38000() throws ExecutionException { /* 0x38000 - 0x38200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38000:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38030;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38140;
                        continue;
                    }
                case 0x38030:
                    r2 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3815c;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r3 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38124;
                        continue;
                    }
                case 0x38054:
                    r2 = r3 & 4096;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x380f0;
                        continue;
                    }
                    r2 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x38064:
                    r4 = r3 & 4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x380b0;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 - r3;
                    r3 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38098;
                        continue;
                    }
                    r3 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r2 = r2 - r3;
                case 0x38098:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x380b0:
                    r3 = r3 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38098;
                        continue;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38098;
                        continue;
                    }
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 - r4;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x380f0:
                    r2 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x3810c;
                    return;
                case 0x3810c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x38150;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x38064;
                    continue;
                case 0x38124:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x38134;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x38134:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x38054;
                    continue;
                case 0x38140:
                    /* Next insn is delay slot */ 
                    r31=0x38148;
                    pc=0x35000;
                    run_35000(); return;
                case 0x38148:
                    /* Next insn is delay slot */ 
                    pc=0x38030;
                    continue;
                case 0x38150:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x38098;
                    continue;
                case 0x3815c:
                    r2 = r0 + 29;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x38098;
                    continue;
                case 0x38200:
                    pc=0x38200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38200() throws ExecutionException { /* 0x38200 - 0x38400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x38000;
                    run_38000(); return;
                case 0x38400:
                    pc=0x38400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38400() throws ExecutionException { /* 0x38400 - 0x38600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38400:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = r4 + 736;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x384cc;
                        continue;
                    }
                    r21 = r5 + r0;
                    r20 = r0 + r0;
                    r18 = r0 + -1;
                case 0x38438:
                    r17 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r16 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r17 = r17 + -1;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x38490;
                        continue;
                    }
                case 0x3844c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r3 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38480;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x38480;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r21;
                    r31=0x3847c;
                    return;
                case 0x3847c:
                    r20 = r20 | r2;
                case 0x38480:
                    r17 = r17 + -1;
                    r16 = r16 + 104;
                    if(r17 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x3844c;
                        continue;
                    }
                case 0x38490:
                    r19 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38438;
                        continue;
                    }
                case 0x384a0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x384cc:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x384a0;
                    continue;
                case 0x38600:
                    pc=0x38600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38600() throws ExecutionException { /* 0x38600 - 0x38800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38600:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r19 = r4 + 736;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x386dc;
                        continue;
                    }
                    r21 = r5 + r0;
                    r22 = r0 + r0;
                    r18 = r0 + -1;
                case 0x38640:
                    r17 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r16 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r17 = r17 + -1;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3869c;
                        continue;
                    }
                case 0x38654:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r3 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3868c;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x3868c;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r21;
                    r31=0x38688;
                    return;
                case 0x38688:
                    r22 = r22 | r2;
                case 0x3868c:
                    r17 = r17 + -1;
                    r16 = r16 + 104;
                    if(r17 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x38654;
                        continue;
                    }
                case 0x3869c:
                    r19 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38640;
                        continue;
                    }
                case 0x386ac:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r22 + r0;
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x386dc:
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x386ac;
                    continue;
                case 0x38800:
                    pc=0x38800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38800() throws ExecutionException { /* 0x38800 - 0x38a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38800:
                    { long hilo = (long)(r7) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -64;
                    r2 = r29 + 28;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r18 = lo;
                    r19 = r6 + r0;
                    r20 = r7 + r0;
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38868;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38914;
                        continue;
                    }
                case 0x38868:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 8192;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38894;
                        continue;
                    }
                    r3 = r3 | 8192;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r2 = r3 & r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                case 0x38894:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x388a8;
                    pc=0x59200;
                    run_59200(); return;
                case 0x388a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x388ec;
                        continue;
                    }
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = r18 - r2;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        if(r19!=0) {
                        hi = (int)((r18 & 0xffffffffL) % (r19 & 0xffffffffL)); lo = (int)((r18 & 0xffffffffL) / (r19 & 0xffffffffL));
                        }
                        pc=0x388c8;
                        continue;
                    }
                    if(r19!=0) {
                    hi = (int)((r18 & 0xffffffffL) % (r19 & 0xffffffffL)); lo = (int)((r18 & 0xffffffffL) / (r19 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x388c8:
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x388ec:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38914:
                    /* Next insn is delay slot */ 
                    r31=0x3891c;
                    pc=0x35000;
                    run_35000(); return;
                case 0x3891c:
                    /* Next insn is delay slot */ 
                    pc=0x38868;
                    continue;
                case 0x38a00:
                    pc=0x38a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38a00() throws ExecutionException { /* 0x38a00 - 0x38c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38a00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x38a30;
                    pc=0x38800;
                    run_38800(); return;
                case 0x38a30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38c00:
                    pc=0x38c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38c00() throws ExecutionException { /* 0x38c00 - 0x38e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38c00:
                    r5 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = r5 + 124;
                    /* Next insn is delay slot */ 
                    pc=0x38e00;
                    run_38e00(); return;
                case 0x38e00:
                    pc=0x38e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38e00() throws ExecutionException { /* 0x38e00 - 0x39000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38e00:
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3a800;
                    run_3a800(); return;
                case 0x39000:
                    pc=0x39000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39000() throws ExecutionException { /* 0x39000 - 0x39200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39000:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -104;
                    r3 = r2 & 65535;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = r3 & 2;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r31;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r19;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r18;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39130;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r17 = r4 + r0;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x390f0;
                        continue;
                    }
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x3904c;
                    pc=0x48560;
                    run_48400(); return;
                case 0x3904c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x390e4;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r0 | 32768;
                    r2 = r2 & 61440;
                    r19 = r2 ^ 8192;
                    r19 = (r19&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x39170;
                        continue;
                    }
                case 0x39070:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r18 = r0 + 1024;
                    r2 = r2 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x39080:
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39090;
                    pc=0x39600;
                    run_39600(); return;
                case 0x39090:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39114;
                        continue;
                    }
                    r3 = 3 << 16;
                    r3 = r3 + 18944;
                    writePages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff] = r3;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r3 = r3 | 128;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r18;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x391a4;
                        continue;
                    }
                case 0x390c4:
                    r31 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x390e4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 65535;
                case 0x390f0:
                    r3 = r3 & 128;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39164;
                        continue;
                    }
                    r18 = r0 + 1024;
                case 0x39100:
                    r2 = r2 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39080;
                    continue;
                case 0x39114:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 512;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x390c4;
                        continue;
                    }
                    r2 = r2 | 2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x39130:
                    r2 = r16 + 67;
                    r31 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39164:
                    r18 = r0 + 64;
                    /* Next insn is delay slot */ 
                    pc=0x39100;
                    continue;
                case 0x39170:
                    r2 = 4 << 16;
                    r3 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    r2 = r2 + -8704;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x39070;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r18 = r0 + 1024;
                    r2 = r2 | 1024;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1024;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x39080;
                    continue;
                case 0x391a4:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x391b4;
                    pc=0x56400;
                    run_56400(); return;
                case 0x391b4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x390c4;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x390c4;
                    continue;
                case 0x39200:
                    pc=0x39200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39200() throws ExecutionException { /* 0x39200 - 0x39400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x39600;
                    run_39600(); return;
                case 0x39400:
                    pc=0x39400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39400() throws ExecutionException { /* 0x39400 - 0x39600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39400:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x37400;
                    run_37400(); return;
                case 0x39600:
                    pc=0x39600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39600() throws ExecutionException { /* 0x39600 - 0x39800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39600:
                    r2 = r5 + 11;
                    r29 = r29 + -64;
                    r3 = (r2&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39704;
                        continue;
                    }
                    r17 = r0 + -8;
                    r17 = r2 & r17;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x39714;
                        continue;
                    }
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39714;
                        continue;
                    }
                case 0x3965c:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39668;
                    pc=0x3b000;
                    run_3b000(); return;
                case 0x39668:
                    r2 = (r17&0xffffffffL) < (504&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39728;
                        continue;
                    }
                    r18 = 7 << 16;
                    r18 = r18 + 30336;
                    r2 = r18 + r17;
                    r16 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r7 = r17 >>> 3;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x39cd8;
                        run_39c00(); return;
                    }
                case 0x39690:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r3 & r2;
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r4;
                case 0x396b0:
                    r2 = r16 + r2;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r3 = r3 | 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x396cc;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x396cc:
                    r2 = r16 + 8;
                case 0x396d0:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39704:
                    r17 = r0 + 16;
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3965c;
                        continue;
                    }
                case 0x39714:
                    r2 = r0 + 12;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x396d0;
                    continue;
                case 0x39728:
                    r2 = r17 >>> 9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3994c;
                        run_39800(); return;
                    }
                    r3 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39bb8;
                        run_39a00(); return;
                    }
                    r8 = r17 >>> 6;
                    r8 = r8 + 56;
                    r6 = r8 << 1;
                case 0x3974c:
                    r18 = 7 << 16;
                    r6 = r6 << 2;
                    r18 = r18 + 30336;
                    r6 = r18 + r6;
                    r16 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    if(r6 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x397d0;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = r3 & r2;
                    r4 = r3 - r17;
                    r2 = r4 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3995c;
                        run_39800(); return;
                    }
                    r7 = r0 + -4;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x397c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x39968;
                    run_39800(); return;
                case 0x3979c:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r7;
                    r2 = r3 - r17;
                    r5 = r2 < 16 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3995c;
                        run_39800(); return;
                    }
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x39968;
                        run_39800(); return;
                    }
                case 0x397c0:
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r6 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x3979c;
                        continue;
                    }
                case 0x397d0:
                    r7 = r8 + 1;
                case 0x397d4:
                    r9 = 7 << 16;
                    r16 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r9 = r9 + 30344;
                    if(r16 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x39cb0;
                        run_39c00(); return;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r2 = r3 & r2;
                    r3 = r2 - r17;
                    r4 = r3 < 16 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39c6c;
                        run_39c00(); return;
                    }
                case 0x39800:
                    pc=0x39800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39800() throws ExecutionException { /* 0x39800 - 0x39a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39800:
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r9;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r9;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x396b0;
                        run_39600(); return;
                    }
                    r3 = (r2&0xffffffffL) < (512&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39be4;
                        run_39a00(); return;
                    }
                    r3 = r2 >>> 3;
                    r2 = r3 >> 2;
                    r4 = r0 + 1;
                    r4 = r4 << (r2&0x1f);
                    r3 = r3 << 3;
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r3 = r18 + r3;
                    r2 = r4 | r2;
                    r4 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r4;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r16;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r16;
                case 0x39858:
                    r3 = r7 >> 2;
                    r4 = r0 + 1;
                    r4 = r4 << (r3&0x1f);
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x399a0;
                        continue;
                    }
                    r3 = r2 & r4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39898;
                        continue;
                    }
                    r3 = r0 + -4;
                    r7 = r7 & r3;
                case 0x39884:
                    r4 = r4 << 1;
                    r3 = r2 & r4;
                    r7 = r7 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39884;
                        continue;
                    }
                case 0x39898:
                    r8 = r0 + -4;
                case 0x3989c:
                    r10 = r7 << 3;
                    r10 = r18 + r10;
                    r6 = r10 + r0;
                    r11 = r7 + r0;
                case 0x398ac:
                    r16 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    if(r6 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x398dc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x39cbc;
                    run_39c00(); return;
                case 0x398c4:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x39cf4;
                        run_39c00(); return;
                    }
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r6 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x39cbc;
                        run_39c00(); return;
                    }
                case 0x398dc:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r8;
                    r2 = r3 - r17;
                    r5 = r2 < 16 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x398c4;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r16 + r17;
                    r17 = r17 | 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r17;
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r5;
                    r4 = r2 | 1;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r3;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r9;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r9;
                    r3 = r3 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39940;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x39940:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x396d0;
                    run_39600(); return;
                case 0x3994c:
                    r6 = r0 + 126;
                    r8 = r0 + 63;
                    /* Next insn is delay slot */ 
                    pc=0x3974c;
                    run_39600(); return;
                case 0x3995c:
                    r8 = r8 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x397d0;
                    run_39600(); return;
                case 0x39968:
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r16 + r3;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x39994;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x39994:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x396d0;
                    run_39600(); return;
                case 0x399a0:
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r21 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r21 = r21 & r2;
                    r2 = ((r21 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x399d0;
                        continue;
                    }
                    r2 = r21 - r17;
                    r3 = r2 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39b88;
                        run_39a00(); return;
                    }
                case 0x399d0:
                    r22 = readPages[(r28+-32340)>>>12][((r28+-32340)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x399dc;
                    pc=0x48780;
                    run_48600(); return;
                case 0x399dc:
                    r3 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    r22 = r22 + 16;
                    r23 = r2 + r0;
                    r2 = r0 + -1;
                    r30 = r16 + r21;
                    r22 = r22 + r17;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x39a0c;
                        run_39a00(); return;
                    }
                    r2 = r22 + -1;
                case 0x39a00:
                    pc=0x39a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39a00() throws ExecutionException { /* 0x39a00 - 0x39c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39a00:
                    r2 = r2 + r23;
                    r22 = r0 - r23;
                    r22 = r22 & r2;
                case 0x39a0c:
                    r4 = r19 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39a1c;
                    pc=0x48520;
                    run_48400(); return;
                case 0x39a1c:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x39b58;
                        continue;
                    }
                    r2 = ((r20 & 0xffffffffL) < (r30 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39d54;
                        run_39c00(); return;
                    }
                case 0x39a38:
                    r3 = 17 << 16;
                    r2 = readPages[(r3+32496)>>>12][((r3+32496)>>>2)&0x3ff];
                    r4 = r23 + -1;
                    r2 = r22 + r2;
                    writePages[(r3+32496)>>>12][((r3+32496)>>>2)&0x3ff] = r2;
                    if(r30 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x39eac;
                        run_39e00(); return;
                    }
                case 0x39a54:
                    r6 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    r5 = r0 + -1;
                    if(r6 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x39ed0;
                        run_39e00(); return;
                    }
                    r30 = r20 - r30;
                    r2 = r2 + r30;
                    writePages[(r3+32496)>>>12][((r3+32496)>>>2)&0x3ff] = r2;
                case 0x39a70:
                    r2 = r20 & 7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39e10;
                        run_39e00(); return;
                    }
                    r5 = r0 + 8;
                    r2 = r5 - r2;
                    r20 = r20 + r2;
                case 0x39a88:
                    r22 = r20 + r22;
                    r2 = r2 + r23;
                    r4 = r22 & r4;
                    r22 = r2 - r4;
                    r5 = r22 + r0;
                    r4 = r19 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x39aac;
                    pc=0x48520;
                    run_48400(); return;
                case 0x39aac:
                    r4 = r0 + -1;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x39efc;
                        run_39e00(); return;
                    }
                    r2 = r2 - r20;
                    r4 = r22 + r2;
                    r4 = r4 | 1;
                case 0x39ac8:
                    r2 = readPages[(r3+32496)>>>12][((r3+32496)>>>2)&0x3ff];
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r20;
                    r2 = r22 + r2;
                    writePages[(r3+32496)>>>12][((r3+32496)>>>2)&0x3ff] = r2;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r4;
                    if(r16 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x39b28;
                        continue;
                    }
                    r3 = (r21&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39e44;
                        run_39e00(); return;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r21 = r21 + -12;
                    r3 = r0 + -8;
                    r3 = r21 & r3;
                    r4 = r4 & 1;
                    r4 = r3 | r4;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r5 = r0 + 5;
                    r4 = r16 + r3;
                    r3 = (r3&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r5;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r5;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39edc;
                        run_39e00(); return;
                    }
                case 0x39b28:
                    r3 = readPages[(r28+-32344)>>>12][((r28+-32344)>>>2)&0x3ff];
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39b40;
                        continue;
                    }
                    writePages[(r28+-32344)>>>12][((r28+-32344)>>>2)&0x3ff] = r2;
                case 0x39b40:
                    r3 = readPages[(r28+-32348)>>>12][((r28+-32348)>>>2)&0x3ff];
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39b58;
                        continue;
                    }
                    writePages[(r28+-32348)>>>12][((r28+-32348)>>>2)&0x3ff] = r2;
                case 0x39b58:
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r2;
                case 0x39b6c:
                    r2 = r3 - r17;
                    r3 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39dd8;
                        run_39c00(); return;
                    }
                    r3 = r2 < 16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39dd8;
                        run_39c00(); return;
                    }
                case 0x39b88:
                    r3 = r17 | 1;
                    r2 = r2 | 1;
                    r17 = r16 + r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    r4 = r19 + r0;
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r17;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x39bac;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x39bac:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x396d0;
                    run_39600(); return;
                case 0x39bb8:
                    r3 = (r2&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39d30;
                        run_39c00(); return;
                    }
                    r3 = (r2&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39df0;
                        run_39c00(); return;
                    }
                    r8 = r17 >>> 12;
                    r8 = r8 + 110;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x3974c;
                    run_39600(); return;
                case 0x39be4:
                    r3 = r2 >>> 9;
                    r4 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39d40;
                        run_39c00(); return;
                    }
                    r4 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39e7c;
                        run_39e00(); return;
                    }
                case 0x39c00:
                    pc=0x39c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39c00() throws ExecutionException { /* 0x39c00 - 0x39e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39c00:
                    r4 = r3 + 91;
                    r5 = r4 << 1;
                case 0x39c08:
                    r5 = r5 << 2;
                    r5 = r18 + r5;
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x39e1c;
                        run_39e00(); return;
                    }
                    r6 = r0 + -4;
                case 0x39c24:
                    r4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r4 & r6;
                    r4 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39c4c;
                        continue;
                    }
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r5 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x39c24;
                        continue;
                    }
                case 0x39c4c:
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                case 0x39c54:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r16;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x39858;
                    run_39800(); return;
                case 0x39c6c:
                    r2 = r16 + r17;
                    r4 = r3 | 1;
                    r17 = r17 | 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r17;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r2;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r2;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r9;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r9;
                    r2 = r2 + r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39ca4;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x39ca4:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x396d0;
                    run_39600(); return;
                case 0x39cb0:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x39858;
                    run_39800(); return;
                case 0x39cbc:
                    r11 = r11 + 1;
                    r2 = r11 & 3;
                    r6 = r6 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x398ac;
                        run_39800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x39d78;
                    continue;
                case 0x39cd8:
                    r2 = r16 + 8;
                    r16 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r7 = r7 + 2;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x397d4;
                        run_39600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x39690;
                    run_39600(); return;
                case 0x39cf4:
                    r3 = r16 + r3;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x39d24;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x39d24:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x396d0;
                    run_39600(); return;
                case 0x39d30:
                    r8 = r2 + 91;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x3974c;
                    run_39600(); return;
                case 0x39d40:
                    r4 = r2 >>> 6;
                    r4 = r4 + 56;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x39c08;
                    continue;
                case 0x39d54:
                    if(r16 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x39b58;
                        run_39a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x39a38;
                    run_39a00(); return;
                case 0x39d64:
                    r2 = r10 + -8;
                    r10 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    r7 = r7 + -1;
                    if(r10 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x39f5c;
                        run_39e00(); return;
                    }
                case 0x39d78:
                    r2 = r7 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39d64;
                        continue;
                    }
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r3 = ~(r0 | r4);
                    r2 = r3 & r2;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                case 0x39d94:
                    r4 = r4 << 1;
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x399a0;
                        run_39800(); return;
                    }
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x399a0;
                        run_39800(); return;
                    }
                    r3 = r2 & r4;
                    r7 = r11 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3989c;
                        run_39800(); return;
                    }
                case 0x39dbc:
                    r4 = r4 << 1;
                    r3 = r2 & r4;
                    r7 = r7 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39dbc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3989c;
                    run_39800(); return;
                case 0x39dd8:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39de4;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x39de4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x396d0;
                    run_39600(); return;
                case 0x39df0:
                    r3 = (r2&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39e5c;
                        run_39e00(); return;
                    }
                    r8 = r17 >>> 15;
                case 0x39e00:
                    pc=0x39e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39e00() throws ExecutionException { /* 0x39e00 - 0x3a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39e00:
                    r8 = r8 + 119;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x3974c;
                    run_39600(); return;
                case 0x39e10:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39a88;
                    run_39a00(); return;
                case 0x39e1c:
                    r2 = r0 + 1;
                    r4 = r4 >> 2;
                    r4 = r2 << (r4&0x1f);
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r2 = r4 | r2;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                    r4 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39c54;
                    run_39c00(); return;
                case 0x39e44:
                    r2 = r0 + 1;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    r16 = r20 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39b6c;
                    run_39a00(); return;
                case 0x39e5c:
                    r2 = (r2&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39e9c;
                        continue;
                    }
                    r8 = r17 >>> 18;
                    r8 = r8 + 124;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x3974c;
                    run_39600(); return;
                case 0x39e7c:
                    r4 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39f0c;
                        continue;
                    }
                    r4 = r2 >>> 12;
                    r4 = r4 + 110;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x39c08;
                    run_39c00(); return;
                case 0x39e9c:
                    r6 = r0 + 252;
                    r8 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x3974c;
                    run_39600(); return;
                case 0x39eac:
                    r5 = r30 & r4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39a54;
                        run_39a00(); return;
                    }
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r4 = r22 + r21;
                    r4 = r4 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x39b28;
                    run_39a00(); return;
                case 0x39ed0:
                    writePages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    pc=0x39a70;
                    run_39a00(); return;
                case 0x39edc:
                    r4 = r19 + r0;
                    r5 = r16 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x39eec;
                    pc=0x37400;
                    run_37400(); return;
                case 0x39eec:
                    r2 = 17 << 16;
                    r2 = readPages[(r2+32496)>>>12][((r2+32496)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x39b28;
                    run_39a00(); return;
                case 0x39efc:
                    r4 = r0 + 1;
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39ac8;
                    run_39a00(); return;
                case 0x39f0c:
                    r4 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39f2c;
                        continue;
                    }
                    r4 = r2 >>> 15;
                    r4 = r4 + 119;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x39c08;
                    run_39c00(); return;
                case 0x39f2c:
                    r3 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39f4c;
                        continue;
                    }
                    r4 = r2 >>> 18;
                    r4 = r4 + 124;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x39c08;
                    run_39c00(); return;
                case 0x39f4c:
                    r5 = r0 + 252;
                    r4 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x39c08;
                    run_39c00(); return;
                case 0x39f5c:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x39d94;
                    run_39c00(); return;
                case 0x3a000:
                    pc=0x3a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a000() throws ExecutionException { /* 0x3a000 - 0x3a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a000:
                    r2 = r4 & 3;
                    r7 = r5 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a05c;
                        continue;
                    }
                    r2 = r6 + -1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a040;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3a0b0;
                    continue;
                case 0x3a024:
                    r4 = r4 + 1;
                    r3 = r4 & 3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a060;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a0b0;
                        continue;
                    }
                    r2 = r2 + -1;
                case 0x3a040:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x3a024;
                        continue;
                    }
                case 0x3a050:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3a05c:
                    r2 = r6 + r0;
                case 0x3a060:
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a0bc;
                        continue;
                    }
                case 0x3a06c:
                    r5 = r2 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a0b0;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x3a050;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3a0a4;
                    continue;
                case 0x3a094:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 + 1;
                    if(r3 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x3a050;
                        continue;
                    }
                case 0x3a0a4:
                    r4 = r4 + 1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x3a094;
                        continue;
                    }
                case 0x3a0b0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3a0bc:
                    r5 = r5 & 255;
                    r3 = r5 << 8;
                    r3 = r3 | r5;
                    r9 = r3 << 16;
                    r8 = 65278 << 16;
                    r6 = 32896 << 16;
                    r9 = r9 | r3;
                    r8 = r8 | 65279;
                    r6 = r6 | 32896;
                case 0x3a0e0:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r9 ^ r3;
                    r5 = r3 + r8;
                    r3 = ~(r0 | r3);
                    r3 = r5 & r3;
                    r3 = r3 & r6;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a06c;
                        continue;
                    }
                    r2 = r2 + -4;
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a0e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3a06c;
                    continue;
                case 0x3a200:
                    pc=0x3a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a200() throws ExecutionException { /* 0x3a200 - 0x3a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a200:
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a29c;
                        continue;
                    }
                    r2 = r4 | r5;
                    r2 = r2 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a270;
                        continue;
                    }
                case 0x3a21c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r7 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3a2ac;
                        continue;
                    }
                    r6 = r6 + -1;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3a254;
                    continue;
                case 0x3a240:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 + 1;
                    if(r7 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3a2ac;
                        continue;
                    }
                case 0x3a254:
                    r4 = r4 + 1;
                    r5 = r5 + 1;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x3a240;
                        continue;
                    }
                case 0x3a264:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3a270:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3a29c;
                        continue;
                    }
                    r6 = r6 + -4;
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 4;
                    r5 = r5 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a270;
                        continue;
                    }
                case 0x3a29c:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a21c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3a264;
                    continue;
                case 0x3a2ac:
                    r2 = r7 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3a400:
                    pc=0x3a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a400() throws ExecutionException { /* 0x3a400 - 0x3a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a400:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x3a41c;
                    pc=0x5a000;
                    run_5a000(); return;
                case 0x3a41c:
                    r3 = r16 < 1970 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a638;
                        run_3a600(); return;
                    }
                    r3 = r16 + -1970;
                    r5 = r3 << 3;
                    r4 = r3 << 6;
                    r4 = r5 + r4;
                    r3 = r4 + r3;
                    r5 = r3 << 2;
                    r4 = r16 + -1969;
                    r3 = r3 + r5;
                    r4 = r4 >> 2;
                    r3 = r3 + r4;
                    r5 = r16 + -1901;
                    r4 = r0 + -100;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r5%r4; lo = r5/r4;
                        pc=0x3a464;
                        continue;
                    }
                    hi = r5%r4; lo = r5/r4;
                    throw new ExecutionException("Break");
                case 0x3a464:
                    r4 = r16 + -1601;
                    r14 = r0 + 100;
                    r24 = 7 << 16;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r16;
                    r7 = r2 + r0;
                    r8 = r0 + r0;
                    r11 = r0 + 74;
                    r13 = r0 + 68;
                    r24 = r24 + 21356;
                    r9 = r0 + 7;
                    r10 = r0 + 2;
                    r5 = lo;
                    r5 = r3 + r5;
                    r3 = r0 + 400;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r3; lo = r4/r3;
                        pc=0x3a4a8;
                        continue;
                    }
                    hi = r4%r3; lo = r4/r3;
                    throw new ExecutionException("Break");
                case 0x3a4a8:
                    r12 = lo;
                    r12 = r5 + r12;
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r16%r14; lo = r16/r14;
                        pc=0x3a4c0;
                        continue;
                    }
                    hi = r16%r14; lo = r16/r14;
                    throw new ExecutionException("Break");
                case 0x3a4c0:
                    r14 = hi;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r16%r3; lo = r16/r3;
                        pc=0x3a4d8;
                        continue;
                    }
                    hi = r16%r3; lo = r16/r3;
                    throw new ExecutionException("Break");
                case 0x3a4d8:
                    r16 = r16 & 3;
                    r15 = hi;
                    r15 = (r15&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                case 0x3a4e4:
                    addr=r7+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x3a654;
                        run_3a600(); return;
                    }
                    if(r3 == r13) {
                        /* Next insn is delay slot */ 
                        pc=0x3a6a4;
                        run_3a600(); return;
                    }
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a624;
                        run_3a600(); return;
                    }
                case 0x3a504:
                    r3 = r15 + r0;
                case 0x3a508:
                    r4 = r3 << 4;
                    r25 = r3 << 6;
                    r25 = r25 - r4;
                    r4 = readPages[(r7+12)>>>12][((r7+12)>>>2)&0x3ff];
                    r25 = r24 + r25;
                    r3 = r4 < 2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a6c4;
                        run_3a600(); return;
                    }
                    r17 = r4 << 2;
                    r4 = r25 + -4;
                    r3 = r25 + r0;
                    r4 = r4 + r17;
                    r5 = r12 + r0;
                case 0x3a53c:
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    r5 = r5 + r6;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3a53c;
                        continue;
                    }
                    r17 = r17 + -4;
                case 0x3a554:
                    r4 = r5 + 4;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r9; lo = r4/r9;
                        pc=0x3a564;
                        continue;
                    }
                    hi = r4%r9; lo = r4/r9;
                    throw new ExecutionException("Break");
                case 0x3a564:
                    r4 = readPages[(r7+20)>>>12][((r7+20)>>>2)&0x3ff];
                    r6 = hi;
                    r4 = r4 - r6;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a6b8;
                        run_3a600(); return;
                    }
                case 0x3a578:
                    r3 = readPages[(r7+16)>>>12][((r7+16)>>>2)&0x3ff];
                    r25 = r25 + r17;
                    r3 = r3 + -1;
                    r6 = r3 << 3;
                    r3 = r6 - r3;
                    r3 = r3 + r4;
                    r4 = readPages[(r25+0)>>>12][((r25+0)>>>2)&0x3ff];
                    r6 = r3 < r4 ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a5b4;
                        continue;
                    }
                case 0x3a5a4:
                    r3 = r3 + -7;
                    r6 = r3 < r4 ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a5a4;
                        continue;
                    }
                case 0x3a5b4:
                    r5 = r5 + r3;
                case 0x3a5b8:
                    r4 = r5 << 7;
                    r3 = r5 << 9;
                    r3 = r3 - r4;
                    r4 = r3 << 4;
                    r3 = r4 - r3;
                    r5 = readPages[(r7+24)>>>12][((r7+24)>>>2)&0x3ff];
                    r4 = r3 << 4;
                    r4 = r4 - r3;
                    r4 = r4 + r5;
                    r5 = readPages[(r7+32)>>>12][((r7+32)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    r4 = r4 + r5;
                    writePages[(r7+28)>>>12][((r7+28)>>>2)&0x3ff] = r4;
                    r7 = r7 + 28;
                    if(r8 != r10) {
                        /* Next insn is delay slot */ 
                        pc=0x3a4e4;
                        continue;
                    }
                    r4 = readPages[(r2+28)>>>12][((r2+28)>>>2)&0x3ff];
                    r3 = readPages[(r2+56)>>>12][((r2+56)>>>2)&0x3ff];
                case 0x3a600:
                    pc=0x3a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a600() throws ExecutionException { /* 0x3a600 - 0x3a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a600:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r4 < r3 ? 1 : 0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3a624:
                    if(r14 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a504;
                        run_3a400(); return;
                    }
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3a508;
                    run_3a400(); return;
                case 0x3a638:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3a654:
                    r3 = readPages[(r7+20)>>>12][((r7+20)>>>2)&0x3ff];
                    r5 = r3 + r12;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a688;
                        continue;
                    }
                    if(r14 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a688;
                        continue;
                    }
                case 0x3a670:
                    r3 = r3 < 60 ? 1 : 0;
                    r3 = r3 ^ 1;
                    r5 = r5 + r3;
                    r5 = r5 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3a5b8;
                    run_3a400(); return;
                case 0x3a688:
                    if(r15 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a670;
                        continue;
                    }
                    r3 = r0 + r0;
                    r5 = r5 + r3;
                    r5 = r5 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3a5b8;
                    run_3a400(); return;
                case 0x3a6a4:
                    r5 = readPages[(r7+20)>>>12][((r7+20)>>>2)&0x3ff];
                    r5 = r12 + r5;
                    /* Next insn is delay slot */ 
                    pc=0x3a5b8;
                    run_3a400(); return;
                case 0x3a6b8:
                    r4 = r4 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x3a578;
                    run_3a400(); return;
                case 0x3a6c4:
                    r5 = r12 + r0;
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3a554;
                    run_3a400(); return;
                case 0x3a800:
                    pc=0x3a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a800() throws ExecutionException { /* 0x3a800 - 0x3aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a800:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r17 = r5 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r20 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a834;
                    pc=0x5a000;
                    run_5a000(); return;
                case 0x3a834:
                    r3 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r7 = 1 << 16;
                    r7 = r7 + 20864;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r7; lo = r3/r7;
                        pc=0x3a84c;
                        continue;
                    }
                    hi = r3%r7; lo = r3/r7;
                    throw new ExecutionException("Break");
                case 0x3a84c:
                    r19 = r2 + r0;
                    r5 = hi;
                    r3 = lo;
                    if(r5 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a868;
                        continue;
                    }
                    r5 = r5 + r7;
                    r3 = r3 + -1;
                case 0x3a868:
                    r4 = r0 + 3600;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r5%r4; lo = r5/r4;
                        pc=0x3a878;
                        continue;
                    }
                    hi = r5%r4; lo = r5/r4;
                    throw new ExecutionException("Break");
                case 0x3a878:
                    r2 = r0 + 60;
                    r4 = hi;
                    r5 = lo;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r5;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x3a898;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x3a898:
                    r4 = r3 + 4;
                    r2 = lo;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    r2 = r0 + 7;
                    r6 = hi;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x3a8c0;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x3a8c0:
                    r5 = hi;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ab10;
                        run_3aa00(); return;
                    }
                case 0x3a8cc:
                    writePages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff] = r5;
                    r16 = r0 + 1970;
                    r10 = r28 + -32640;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3aa9c;
                        run_3aa00(); return;
                    }
                    r9 = r0 + 400;
                    r11 = r0 + 100;
                    /* Next insn is delay slot */ 
                    pc=0x3a930;
                    continue;
                case 0x3a8f0:
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r16%r11; lo = r16/r11;
                        pc=0x3a8fc;
                        continue;
                    }
                    hi = r16%r11; lo = r16/r11;
                    throw new ExecutionException("Break");
                case 0x3a8fc:
                    r5 = hi;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a93c;
                        continue;
                    }
                    r5 = r0 + 1;
                    r7 = r5 << 2;
                    r7 = r10 + r7;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r8 = r3 < r7 ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a96c;
                        continue;
                    }
                case 0x3a928:
                    r16 = r16 + 1;
                    r3 = r3 - r7;
                case 0x3a930:
                    r5 = r16 & 3;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a8f0;
                        continue;
                    }
                case 0x3a93c:
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r16%r9; lo = r16/r9;
                        pc=0x3a948;
                        continue;
                    }
                    hi = r16%r9; lo = r16/r9;
                    throw new ExecutionException("Break");
                case 0x3a948:
                    r5 = hi;
                    r5 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r7 = r5 << 2;
                    r7 = r10 + r7;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r8 = r3 < r7 ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a928;
                        continue;
                    }
                case 0x3a96c:
                    r2 = r16 + -1900;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r2;
                    r21 = 7 << 16;
                    r2 = r5 << 4;
                    r5 = r5 << 6;
                    r5 = r5 - r2;
                    r21 = r21 + 21356;
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r3;
                    r21 = r21 + r5;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r0;
                    r7 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r2 = r3 < r7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a9d0;
                        continue;
                    }
                    r9 = r21 + 4;
                    r8 = r0 + 1;
                case 0x3a9b0:
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r8;
                    r3 = r3 - r7;
                    r7 = readPages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    r10 = r3 < r7 ? 1 : 0;
                    r9 = r9 + 4;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a9b0;
                        continue;
                    }
                case 0x3a9d0:
                    r3 = r3 + 1;
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r3;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3aa10;
                        run_3aa00(); return;
                    }
                    writePages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff] = r0;
                case 0x3a9e4:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                case 0x3aa00:
                    pc=0x3aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3aa00() throws ExecutionException { /* 0x3aa00 - 0x3ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3aa00:
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3aa10:
                    /* Next insn is delay slot */ 
                    r31=0x3aa18;
                    pc=0x45200;
                    run_45200(); return;
                case 0x3aa18:
                    r2 = readPages[(r28+-32324)>>>12][((r28+-32324)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ab1c;
                        continue;
                    }
                    r2 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x3aa4c;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3aa44;
                    pc=0x3a400;
                    run_3a400(); return;
                case 0x3aa44:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ad60;
                        run_3ac00(); return;
                    }
                case 0x3aa4c:
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ad24;
                        run_3ac00(); return;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r3 = readPages[(r19+28)>>>12][((r19+28)>>>2)&0x3ff];
                    r3 = r2 < r3 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ab1c;
                        continue;
                    }
                    r3 = readPages[(r19+56)>>>12][((r19+56)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ab1c;
                        continue;
                    }
                case 0x3aa88:
                    r2 = r0 + 1;
                    writePages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r19+60)>>>12][((r19+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3ab24;
                    continue;
                case 0x3aa9c:
                    r4 = r0 + 400;
                    r6 = r0 + 100;
                    /* Next insn is delay slot */ 
                    pc=0x3aae4;
                    continue;
                case 0x3aaac:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r16%r6; lo = r16/r6;
                        pc=0x3aab8;
                        continue;
                    }
                    hi = r16%r6; lo = r16/r6;
                    throw new ExecutionException("Break");
                case 0x3aab8:
                    r2 = hi;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3aaf4;
                        continue;
                    }
                    r5 = r0 + 1;
                case 0x3aac8:
                    r2 = r5 << 2;
                    r2 = r10 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a96c;
                        run_3a800(); return;
                    }
                case 0x3aae4:
                    r16 = r16 + -1;
                    r2 = r16 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3aaac;
                        continue;
                    }
                case 0x3aaf4:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r16%r4; lo = r16/r4;
                        pc=0x3ab00;
                        continue;
                    }
                    hi = r16%r4; lo = r16/r4;
                    throw new ExecutionException("Break");
                case 0x3ab00:
                    r5 = hi;
                    r5 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=0x3aac8;
                    continue;
                case 0x3ab10:
                    r5 = r5 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x3a8cc;
                    run_3a800(); return;
                case 0x3ab1c:
                    writePages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff] = r0;
                case 0x3ab20:
                    r4 = readPages[(r19+32)>>>12][((r19+32)>>>2)&0x3ff];
                case 0x3ab24:
                    r2 = r0 + 3600;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x3ab34;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x3ab34:
                    r3 = r0 + 60;
                    r6 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = hi;
                    r2 = lo;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r3; lo = r4/r3;
                        pc=0x3ab58;
                        continue;
                    }
                    hi = r4%r3; lo = r4/r3;
                    throw new ExecutionException("Break");
                case 0x3ab58:
                    r5 = hi;
                    r4 = r6 - r5;
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r3 = lo;
                    r3 = r5 - r3;
                    r5 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    r2 = r5 - r2;
                    r5 = r4 < 60 ? 1 : 0;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r3;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3acf8;
                        run_3ac00(); return;
                    }
                    r3 = r3 + 1;
                    r4 = r4 + -60;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                case 0x3ab9c:
                    r4 = r3 < 60 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3acd8;
                        run_3ac00(); return;
                    }
                    r2 = r2 + 1;
                    r3 = r3 + -60;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r3;
                case 0x3abb8:
                    r3 = r2 < 24 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ac50;
                        run_3ac00(); return;
                    }
                    r3 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 7 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ad18;
                        run_3ac00(); return;
                    }
                    writePages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff] = r3;
                case 0x3abf0:
                    r2 = r2 + -24;
                    r3 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                case 0x3ac00:
                    pc=0x3ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ac00() throws ExecutionException { /* 0x3ac00 - 0x3ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ac00:
                    r3 = r3 + 1;
                    r4 = r2 << 2;
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r3;
                    r21 = r21 + r4;
                    r4 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r5 = r4 < r3 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ac40;
                        continue;
                    }
                    r3 = r3 - r4;
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    r3 = r0 + 12;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3ad7c;
                        continue;
                    }
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r2;
                case 0x3ac40:
                    /* Next insn is delay slot */ 
                    r31=0x3ac48;
                    pc=0x45400;
                    run_45400(); return;
                case 0x3ac48:
                    /* Next insn is delay slot */ 
                    pc=0x3a9e4;
                    run_3a800(); return;
                case 0x3ac50:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ac40;
                        continue;
                    }
                    r3 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ad70;
                        continue;
                    }
                case 0x3ac7c:
                    writePages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r2 = r2 + 24;
                    r3 = r3 + -1;
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r3;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ac40;
                        continue;
                    }
                    r2 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ada0;
                        continue;
                    }
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r2;
                    r2 = r2 << 2;
                case 0x3acb8:
                    r2 = r21 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x3acd0;
                    pc=0x45400;
                    run_45400(); return;
                case 0x3acd0:
                    /* Next insn is delay slot */ 
                    pc=0x3a9e4;
                    run_3a800(); return;
                case 0x3acd8:
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3abb8;
                        run_3aa00(); return;
                    }
                    r2 = r2 + -1;
                    r3 = r3 + 60;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3abb8;
                    run_3aa00(); return;
                case 0x3acf8:
                    if(r4 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ab9c;
                        run_3aa00(); return;
                    }
                    r3 = r3 + -1;
                    r4 = r4 + 60;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x3ab9c;
                    run_3aa00(); return;
                case 0x3ad18:
                    writePages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x3abf0;
                    run_3aa00(); return;
                case 0x3ad24:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r3 = readPages[(r19+28)>>>12][((r19+28)>>>2)&0x3ff];
                    r3 = r2 < r3 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3aa88;
                        run_3aa00(); return;
                    }
                    r3 = readPages[(r19+56)>>>12][((r19+56)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    writePages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ab20;
                        run_3aa00(); return;
                    }
                    r4 = readPages[(r19+60)>>>12][((r19+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3ab24;
                    run_3aa00(); return;
                case 0x3ad60:
                    r2 = r0 + -1;
                    writePages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x3ab20;
                    run_3aa00(); return;
                case 0x3ad70:
                    r3 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x3ac7c;
                    continue;
                case 0x3ad7c:
                    r2 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r2;
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ad98;
                    pc=0x45400;
                    run_45400(); return;
                case 0x3ad98:
                    /* Next insn is delay slot */ 
                    pc=0x3a9e4;
                    run_3a800(); return;
                case 0x3ada0:
                    r2 = r0 + 11;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r3;
                    r3 = r3 & 3;
                    r2 = r2 + 1899;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3adf8;
                        continue;
                    }
                    r3 = r0 + 100;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r3; lo = r2/r3;
                        pc=0x3add8;
                        continue;
                    }
                    hi = r2%r3; lo = r2/r3;
                    throw new ExecutionException("Break");
                case 0x3add8:
                    r4 = hi;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3adf8;
                        continue;
                    }
                    r2 = r0 + 365;
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r2;
                    r2 = r0 + 44;
                    /* Next insn is delay slot */ 
                    pc=0x3acb8;
                    continue;
                case 0x3adf8:
                    r3 = r0 + 400;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r3; lo = r2/r3;
                        pc=0x3ae08;
                        run_3ae00(); return;
                    }
                case 0x3ae00:
                    pc=0x3ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ae00() throws ExecutionException { /* 0x3ae00 - 0x3b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ae00:
                    hi = r2%r3; lo = r2/r3;
                    throw new ExecutionException("Break");
                case 0x3ae08:
                    r4 = hi;
                    r2 = (r4&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r2 = r2 + 364;
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r2;
                    r2 = r0 + 44;
                    /* Next insn is delay slot */ 
                    pc=0x3acb8;
                    run_3ac00(); return;
                case 0x3b000:
                    pc=0x3b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b000() throws ExecutionException { /* 0x3b000 - 0x3b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b000:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3b200:
                    pc=0x3b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b200() throws ExecutionException { /* 0x3b200 - 0x3b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b200:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3b400:
                    pc=0x3b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b400() throws ExecutionException { /* 0x3b400 - 0x3b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b400:
                    r29 = r29 + -32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r6 = r5 + r0;
                    r5 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r7 = r29 + 40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x3b428;
                    pc=0x45800;
                    run_45800(); return;
                case 0x3b428:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3b600:
                    pc=0x3b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b600() throws ExecutionException { /* 0x3b600 - 0x3b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b600:
                    r29 = r29 + -32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    r6 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    r5 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r7 = r29 + 36;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x3b630;
                    pc=0x45800;
                    run_45800(); return;
                case 0x3b630:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3b800:
                    pc=0x3b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b800() throws ExecutionException { /* 0x3b800 - 0x3ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b800:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b828;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b8c8;
                        continue;
                    }
                case 0x3b828:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b874;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                case 0x3b854:
                    r3 = r2 + 1;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3b874:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b8e8;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3b854;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = r0 + 10;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x47e00;
                    run_47e00(); return;
                case 0x3b8c8:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x3b8d8;
                    pc=0x35000;
                    run_35000(); return;
                case 0x3b8d8:
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3b828;
                    continue;
                case 0x3b8e8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x47e00;
                    run_47e00(); return;
                case 0x3ba00:
                    pc=0x3ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ba00() throws ExecutionException { /* 0x3ba00 - 0x3bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ba00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ba34;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bacc;
                        continue;
                    }
                case 0x3ba34:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ba84;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                case 0x3ba60:
                    r3 = r2 + 1;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ba84:
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3badc;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3ba60;
                        continue;
                    }
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x3bae4;
                    continue;
                case 0x3bacc:
                    /* Next insn is delay slot */ 
                    r31=0x3bad4;
                    pc=0x35000;
                    run_35000(); return;
                case 0x3bad4:
                    /* Next insn is delay slot */ 
                    pc=0x3ba34;
                    continue;
                case 0x3badc:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = r17 + r0;
                case 0x3bae4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = r16 + r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x47e00;
                    run_47e00(); return;
                case 0x3bc00:
                    pc=0x3bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3bc00() throws ExecutionException { /* 0x3bc00 - 0x3be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3bc00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3be00;
                    run_3be00(); return;
                case 0x3be00:
                    pc=0x3be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3be00() throws ExecutionException { /* 0x3be00 - 0x3c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3be00:
                    r29 = r29 + -56;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    r20 = r6 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c14c;
                        run_3c000(); return;
                    }
                    r21 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3be48;
                    pc=0x3b000;
                    run_3b000(); return;
                case 0x3be48:
                    r3 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r2 = r20 + 11;
                    r17 = r0 + -4;
                    r4 = (r2&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    r19 = r16 + -8;
                    r17 = r3 & r17;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bf8c;
                        continue;
                    }
                    r4 = r0 + 16;
                    r18 = r0 + 16;
                case 0x3be70:
                    r2 = ((r18 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bfa0;
                        continue;
                    }
                    r2 = r17 < r4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bfe0;
                        continue;
                    }
                    r23 = 7 << 16;
                    r23 = r23 + 30336;
                    r5 = readPages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff];
                    r2 = r19 + r17;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c184;
                        run_3c000(); return;
                    }
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r7 = r0 + -2;
                    r7 = r6 & r7;
                    r7 = r2 + r7;
                    r7 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r7 = r7 & 1;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bfb4;
                        continue;
                    }
                    r6 = r0 + r0;
                    r2 = r0 + r0;
                case 0x3becc:
                    r3 = r3 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c0a4;
                        run_3c000(); return;
                    }
                    r22 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r22 = r19 - r22;
                    r7 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r3 = r7 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c298;
                        run_3c200(); return;
                    }
                    r3 = r3 + r17;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x3c2a4;
                        run_3c200(); return;
                    }
                    r23 = r6 + r3;
                    r5 = r23 < r4 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c094;
                        run_3c000(); return;
                    }
                    r3 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                case 0x3bf28:
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    r3 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r6 = r17 + -4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    r19 = r22 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c270;
                        run_3c200(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c1e4;
                        run_3c000(); return;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c3c0;
                        run_3c200(); return;
                    }
                    r3 = r22 + 16;
                    r16 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3c1e8;
                    run_3c000(); return;
                case 0x3bf8c:
                    r18 = r0 + -8;
                    r18 = r2 & r18;
                    r4 = r18 + r0;
                    if(r18 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3be70;
                        continue;
                    }
                case 0x3bfa0:
                    r2 = r0 + 12;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3c020;
                    run_3c000(); return;
                case 0x3bfb4:
                    r7 = r0 + -4;
                    r6 = r6 & r7;
                    r7 = r6 + r17;
                    r8 = r7 < r4 ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3becc;
                        continue;
                    }
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r17 = r7 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                case 0x3bfe0:
                    r6 = r17 - r18;
                    r2 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c054;
                        run_3c000(); return;
                    }
                    r3 = r3 & 1;
                    r3 = r3 | r17;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r17 = r19 + r17;
                case 0x3c000:
                    pc=0x3c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c000() throws ExecutionException { /* 0x3c000 - 0x3c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c000:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r2 = r2 | 1;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                case 0x3c010:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c01c;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x3c01c:
                    r2 = r16 + r0;
                case 0x3c020:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3c054:
                    r3 = r3 & 1;
                    r5 = r19 + r18;
                    r2 = r6 | 1;
                    r18 = r3 | r18;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r18;
                    r6 = r5 + r6;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 | 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r2;
                    r5 = r5 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x3c08c;
                    pc=0x37400;
                    run_37400(); return;
                case 0x3c08c:
                    /* Next insn is delay slot */ 
                    pc=0x3c010;
                    continue;
                case 0x3c094:
                    r23 = r3 + r0;
                case 0x3c098:
                    r4 = r23 < r4 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bf28;
                        run_3be00(); return;
                    }
                case 0x3c0a4:
                    r5 = r20 + r0;
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c0b4;
                    pc=0x39600;
                    run_39600(); return;
                case 0x3c0b4:
                    r20 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c48c;
                        run_3c400(); return;
                    }
                    r3 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r4 = r2 + -8;
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    r2 = r19 + r2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c3a8;
                        run_3c200(); return;
                    }
                    r6 = r17 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c258;
                        run_3c200(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c1b0;
                        continue;
                    }
                    r2 = r20 + r0;
                    r3 = r16 + r0;
                case 0x3c100:
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                case 0x3c124:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c134;
                    pc=0x37400;
                    run_37400(); return;
                case 0x3c134:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c140;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x3c140:
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3c020;
                    continue;
                case 0x3c14c:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r6 + r0;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=0x39600;
                    run_39600(); return;
                case 0x3c184:
                    r6 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r6 = r6 & r2;
                    r2 = r6 + r17;
                    r7 = r18 + 16;
                    r7 = r2 < r7 ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c21c;
                        run_3c200(); return;
                    }
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3becc;
                    run_3be00(); return;
                case 0x3c1b0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c374;
                        run_3c200(); return;
                    }
                    r2 = r20 + 8;
                    r3 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3c100;
                    continue;
                case 0x3c1e4:
                    r3 = r19 + r0;
                case 0x3c1e8:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                case 0x3c200:
                    pc=0x3c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c200() throws ExecutionException { /* 0x3c200 - 0x3c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c200:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r16 = r19 + r0;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3bfe0;
                    run_3be00(); return;
                case 0x3c21c:
                    r2 = r2 - r18;
                    r19 = r19 + r18;
                    r2 = r2 | 1;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r19;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 & 1;
                    r18 = r18 | r2;
                    writePages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x3c24c;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x3c24c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3c020;
                    run_3c000(); return;
                case 0x3c258:
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c268;
                    pc=0x5c400;
                    run_5c400(); return;
                case 0x3c268:
                    /* Next insn is delay slot */ 
                    pc=0x3c124;
                    run_3c000(); return;
                case 0x3c270:
                    r4 = r19 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c280;
                    pc=0x5c400;
                    run_5c400(); return;
                case 0x3c280:
                    r16 = r19 + r0;
                    r3 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3bfe0;
                    run_3be00(); return;
                case 0x3c298:
                    r23 = r3 + r17;
                    /* Next insn is delay slot */ 
                    pc=0x3c098;
                    run_3c000(); return;
                case 0x3c2a4:
                    r30 = r6 + r3;
                    r2 = r18 + 16;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c094;
                        run_3c000(); return;
                    }
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    r3 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r6 = r17 + -4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    r19 = r22 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c440;
                        run_3c400(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c434;
                        run_3c400(); return;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c458;
                        run_3c400(); return;
                    }
                    r3 = r22 + 16;
                    r16 = r16 + 8;
                case 0x3c314:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                case 0x3c338:
                    r2 = r30 - r18;
                    r3 = r22 + r18;
                    r2 = r2 | 1;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r3;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 & 1;
                    r18 = r18 | r2;
                    writePages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x3c368;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x3c368:
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3c020;
                    run_3c000(); return;
                case 0x3c374:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c3f4;
                        continue;
                    }
                    r2 = r20 + 16;
                    r3 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x3c100;
                    run_3c000(); return;
                case 0x3c3a8:
                    r4 = readPages[(r20+-4)>>>12][((r20+-4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r2 = r4 & r2;
                    r17 = r17 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x3bfe0;
                    run_3be00(); return;
                case 0x3c3c0:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c414;
                        run_3c400(); return;
                    }
                    r3 = r22 + 24;
                    r16 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x3c1e8;
                    run_3c000(); return;
                case 0x3c3f4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r16 + 24;
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r2;
                case 0x3c400:
                    pc=0x3c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c400() throws ExecutionException { /* 0x3c400 - 0x3c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c400:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = r20 + 24;
                    writePages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x3c100;
                    run_3c000(); return;
                case 0x3c414:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r22 + 32;
                    writePages[(r22+24)>>>12][((r22+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r16 = r16 + 24;
                    writePages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x3c1e8;
                    run_3c000(); return;
                case 0x3c434:
                    r3 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3c314;
                    run_3c200(); return;
                case 0x3c440:
                    r4 = r19 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c450;
                    pc=0x5c400;
                    run_5c400(); return;
                case 0x3c450:
                    /* Next insn is delay slot */ 
                    pc=0x3c338;
                    run_3c200(); return;
                case 0x3c458:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c4a4;
                        continue;
                    }
                    r3 = r22 + 24;
                    r16 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x3c314;
                    run_3c200(); return;
                case 0x3c48c:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c498;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x3c498:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3c020;
                    run_3c000(); return;
                case 0x3c4a4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r22 + 32;
                    writePages[(r22+24)>>>12][((r22+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r16 = r16 + 24;
                    writePages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x3c314;
                    run_3c200(); return;
                case 0x3c600:
                    pc=0x3c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c600() throws ExecutionException { /* 0x3c600 - 0x3c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c600:
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 9;
                    r3 = r3 & 9;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c620;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3c620:
                    /* Next insn is delay slot */ 
                    pc=0x34000;
                    run_34000(); return;
                case 0x3c800:
                    pc=0x3c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c800() throws ExecutionException { /* 0x3c800 - 0x3ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c800:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c838;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c9a0;
                        continue;
                    }
                case 0x3c838:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c86c;
                        continue;
                    }
                    r4 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x3c86c:
                    r4 = r2 & 32;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c97c;
                        continue;
                    }
                    r4 = r2 & 4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c93c;
                        continue;
                    }
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c8c4;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c8b0;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c8b0;
                    pc=0x37400;
                    run_37400(); return;
                case 0x3c8b0:
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ca6c;
                        run_3ca00(); return;
                    }
                case 0x3c8c4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ca98;
                        run_3ca00(); return;
                    }
                case 0x3c8d4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r19 = tmp;
                    r18 = r19 & 65535;
                    r2 = r18 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c9b0;
                        continue;
                    }
                case 0x3c8ec:
                    r6 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = readPages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r6;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x3c90c;
                    return;
                case 0x3c90c:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c964;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x3c91c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3c93c:
                    r4 = r2 & 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cab0;
                        run_3ca00(); return;
                    }
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ca2c;
                        run_3ca00(); return;
                    }
                    r3 = r3 | 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3c8c4;
                    continue;
                case 0x3c964:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c9f8;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 32;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x3c97c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3c9a0:
                    /* Next insn is delay slot */ 
                    r31=0x3c9a8;
                    pc=0x35000;
                    run_35000(); return;
                case 0x3c9a8:
                    /* Next insn is delay slot */ 
                    pc=0x3c838;
                    continue;
                case 0x3c9b0:
                    r2 = r0 + 1;
                    r4 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r5 + -14848;
                    /* Next insn is delay slot */ 
                    r31=0x3c9cc;
                    pc=0x38400;
                    run_38400(); return;
                case 0x3c9cc:
                    r18 = r18 & 9;
                    r2 = r0 + 9;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r19&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c8ec;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c9f0;
                    pc=0x33a00;
                    run_33a00(); return;
                case 0x3c9f0:
                    /* Next insn is delay slot */ 
                    pc=0x3c8ec;
                    continue;
                case 0x3c9f8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                case 0x3ca00:
                    pc=0x3ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ca00() throws ExecutionException { /* 0x3ca00 - 0x3cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ca00:
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    r2 = r0 + -1;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ca2c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ca3c;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x3ca3c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c97c;
                        run_3c800(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r3 = r3 & 65527;
                    r3 = r3 << 16;
                    r3 = r3 >> 16;
                    r3 = r3 | 4;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3c8c4;
                    run_3c800(); return;
                case 0x3ca6c:
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ca98:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3caa8;
                    pc=0x39000;
                    run_39000(); return;
                case 0x3caa8:
                    /* Next insn is delay slot */ 
                    pc=0x3c8d4;
                    run_3c800(); return;
                case 0x3cab0:
                    r2 = r0 + 9;
                    r3 = r3 | 64;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3c91c;
                    run_3c800(); return;
                case 0x3cc00:
                    pc=0x3cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3cc00() throws ExecutionException { /* 0x3cc00 - 0x3ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3cc00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc30;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc84;
                        continue;
                    }
                case 0x3cc30:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3cc40;
                    pc=0x3c800;
                    run_3c800(); return;
                case 0x3cc40:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc94;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x3cc6c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3cc84:
                    /* Next insn is delay slot */ 
                    r31=0x3cc8c;
                    pc=0x35000;
                    run_35000(); return;
                case 0x3cc8c:
                    /* Next insn is delay slot */ 
                    pc=0x3cc30;
                    continue;
                case 0x3cc94:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3cc6c;
                    continue;
                case 0x3ce00:
                    pc=0x3ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ce00() throws ExecutionException { /* 0x3ce00 - 0x3d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ce00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x3d000:
                    pc=0x3d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d000() throws ExecutionException { /* 0x3d000 - 0x3d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d000:
                    r29 = r29 + -136;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 148;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x3d048;
                    pc=0x41200;
                    run_41200(); return;
                case 0x3d048:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d200:
                    pc=0x3d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d200() throws ExecutionException { /* 0x3d200 - 0x3d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d200:
                    r29 = r29 + -136;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    r2 = r2 | 65535;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r6;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 144;
                    r6 = r5 + r0;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x3d254;
                    pc=0x41200;
                    run_41200(); return;
                case 0x3d254:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d400:
                    pc=0x3d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d400() throws ExecutionException { /* 0x3d400 - 0x3d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d400:
                    r29 = r29 + -136;
                    r3 = r0 + 516;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r6;
                    r16 = r5 + r0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r7;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    r31=0x3d430;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3d430:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = 4 << 16;
                    r2 = r2 + -9728;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r7 = r29 + 144;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    r6 = r16 + r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r0;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x3d470;
                    pc=0x43600;
                    run_43600(); return;
                case 0x3d470:
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r16 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d600:
                    pc=0x3d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d600() throws ExecutionException { /* 0x3d600 - 0x3d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d600:
                    r29 = r29 + -144;
                    r2 = r0 + 516;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r6;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x3d634;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3d634:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = 4 << 16;
                    r2 = r2 + -9728;
                    r6 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r16 + r0;
                    r5 = r29 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r0;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x3d674;
                    pc=0x43600;
                    run_43600(); return;
                case 0x3d674:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r16 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d800:
                    pc=0x3d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d800() throws ExecutionException { /* 0x3d800 - 0x3da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3d81c;
                    pc=0x484a0;
                    run_48400(); return;
                case 0x3d81c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d844;
                        continue;
                    }
                    r3 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r3;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d844:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 & 61439;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3da00:
                    pc=0x3da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3da00() throws ExecutionException { /* 0x3da00 - 0x3dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3da00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3dc00:
                    pc=0x3dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3dc00() throws ExecutionException { /* 0x3dc00 - 0x3de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3dc00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -40;
                    r3 = r2 & 256;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r19 = r4 + r0;
                    r16 = r5 + r0;
                    r18 = r6 + r0;
                    r17 = r7 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dc50;
                        continue;
                    }
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r6 = r0 + r0;
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x3dc4c;
                    pc=0x485a0;
                    run_48400(); return;
                case 0x3dc4c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                case 0x3dc50:
                    r3 = r0 + -4097;
                    r2 = r2 & r3;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r19 + r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + r0;
                    r7 = r17 + r0;
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x484e0;
                    run_48400(); return;
                case 0x3de00:
                    pc=0x3de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3de00() throws ExecutionException { /* 0x3de00 - 0x3e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3de00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3de1c;
                    pc=0x485a0;
                    run_48400(); return;
                case 0x3de1c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3de4c;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 | 4096;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3de4c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 & 61439;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e000:
                    pc=0x3e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e000() throws ExecutionException { /* 0x3e000 - 0x3e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e000:
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x48460;
                    run_48400(); return;
                case 0x3e200:
                    pc=0x3e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e200() throws ExecutionException { /* 0x3e200 - 0x3e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e200:
                    r3 = r5 | r4;
                    r3 = r3 & 3;
                    r2 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e2a4;
                        continue;
                    }
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r8 = 65278 << 16;
                    r8 = r8 | 65279;
                    r6 = ~(r0 | r3);
                    r4 = r3 + r8;
                    r7 = 32896 << 16;
                    r4 = r6 & r4;
                    r7 = r7 | 32896;
                    r4 = r4 & r7;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e2a4;
                        continue;
                    }
                case 0x3e240:
                    r2 = r2 + 4;
                    r5 = r5 + 4;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r6 = ~(r0 | r3);
                    r4 = r3 + r8;
                    r4 = r6 & r4;
                    r4 = r4 & r7;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e2a4;
                        continue;
                    }
                    r2 = r2 + 4;
                    r5 = r5 + 4;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r6 = ~(r0 | r3);
                    r4 = r3 + r8;
                    r4 = r6 & r4;
                    r4 = r4 & r7;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e240;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3e2a4;
                    continue;
                case 0x3e2a0:
                    r2 = r4 + r0;
                case 0x3e2a4:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e2a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e400:
                    pc=0x3e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e400() throws ExecutionException { /* 0x3e400 - 0x3e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e400:
                    r2 = r4 | r5;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e468;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3e444;
                    continue;
                case 0x3e41c:
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3e454;
                        continue;
                    }
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r5 + 2;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e48c;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r6 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3e48c;
                        continue;
                    }
                case 0x3e444:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r4 + 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e41c;
                        continue;
                    }
                case 0x3e454:
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e460:
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3e454;
                        continue;
                    }
                case 0x3e468:
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e460;
                        continue;
                    }
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e48c:
                    r2 = r6 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e600:
                    pc=0x3e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e600() throws ExecutionException { /* 0x3e600 - 0x3e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e600:
                    r3 = r4 | r5;
                    r3 = r3 & 3;
                    r2 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e690;
                        continue;
                    }
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r10 = 65278 << 16;
                    r10 = r10 | 65279;
                    r4 = ~(r0 | r6);
                    r3 = r6 + r10;
                    r9 = 32896 << 16;
                    r3 = r4 & r3;
                    r9 = r9 | 32896;
                    r3 = r3 & r9;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e690;
                        continue;
                    }
                    r3 = r2 + r0;
                case 0x3e644:
                    r3 = r3 + 4;
                    r5 = r5 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r8 = ~(r0 | r6);
                    r7 = r6 + r10;
                    r7 = r8 & r7;
                    r7 = r7 & r9;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e644;
                        continue;
                    }
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e694;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e690:
                    r3 = r2 + r0;
                case 0x3e694:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e694;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e800:
                    pc=0x3e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e800() throws ExecutionException { /* 0x3e800 - 0x3ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e800:
                    r29 = r29 + -24;
                    r2 = (r5&0xffffffffL) < (143&0xffffffffL) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ecdc;
                        run_3ec00(); return;
                    }
                    r2 = 7 << 16;
                    r3 = r5 << 2;
                    r2 = r2 + 23044;
                    r2 = r2 + r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x3e834:
                    r2 = 7 << 16;
                    r2 = r2 + 21460;
                case 0x3e83c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e84c:
                    r2 = 7 << 16;
                    r2 = r2 + 21452;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e85c:
                    r2 = 7 << 16;
                    r2 = r2 + 22944;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e86c:
                    r2 = 7 << 16;
                    r2 = r2 + 22920;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e87c:
                    r2 = 7 << 16;
                    r2 = r2 + 22900;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e88c:
                    r2 = 7 << 16;
                    r2 = r2 + 22140;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e89c:
                    r2 = 7 << 16;
                    r2 = r2 + 22848;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e8ac:
                    r2 = 7 << 16;
                    r2 = r2 + 22872;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e8bc:
                    r2 = 7 << 16;
                    r2 = r2 + 22452;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e8cc:
                    r2 = 7 << 16;
                    r2 = r2 + 23000;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e8dc:
                    r2 = 7 << 16;
                    r2 = r2 + 21676;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e8ec:
                    r2 = 7 << 16;
                    r2 = r2 + 21620;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e8fc:
                    r2 = 7 << 16;
                    r2 = r2 + 21884;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e90c:
                    r2 = 7 << 16;
                    r2 = r2 + 22096;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e91c:
                    r2 = 7 << 16;
                    r2 = r2 + 21868;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e92c:
                    r2 = 7 << 16;
                    r2 = r2 + 23020;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e93c:
                    r2 = 7 << 16;
                    r2 = r2 + 21952;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e94c:
                    r2 = 7 << 16;
                    r2 = r2 + 22320;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e95c:
                    r2 = 7 << 16;
                    r2 = r2 + 22812;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e96c:
                    r2 = 7 << 16;
                    r2 = r2 + 22788;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e97c:
                    r2 = 7 << 16;
                    r2 = r2 + 22768;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e98c:
                    r2 = 7 << 16;
                    r2 = r2 + 22744;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e99c:
                    r2 = 7 << 16;
                    r2 = r2 + 22712;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e9ac:
                    r2 = 7 << 16;
                    r2 = r2 + 22680;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e9bc:
                    r2 = 7 << 16;
                    r2 = r2 + 22632;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e9cc:
                    r2 = 7 << 16;
                    r2 = r2 + 22604;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e9dc:
                    r2 = 7 << 16;
                    r2 = r2 + 22964;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e9ec:
                    r2 = 7 << 16;
                    r2 = r2 + 22580;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    continue;
                case 0x3e9fc:
                    r2 = 7 << 16;
                case 0x3ea00:
                    pc=0x3ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ea00() throws ExecutionException { /* 0x3ea00 - 0x3ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ea00:
                    r2 = r2 + 22552;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ea0c:
                    r2 = 7 << 16;
                    r2 = r2 + 22532;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ea1c:
                    r2 = 7 << 16;
                    r2 = r2 + 22504;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ea2c:
                    r2 = 7 << 16;
                    r2 = r2 + 22492;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ea3c:
                    r2 = 7 << 16;
                    r2 = r2 + 22472;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ea4c:
                    r2 = 7 << 16;
                    r2 = r2 + 22436;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ea5c:
                    r2 = 7 << 16;
                    r2 = r2 + 22412;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ea6c:
                    r2 = 7 << 16;
                    r2 = r2 + 22392;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ea7c:
                    r2 = 7 << 16;
                    r2 = r2 + 22368;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ea8c:
                    r2 = 7 << 16;
                    r2 = r2 + 22352;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ea9c:
                    r2 = 7 << 16;
                    r2 = r2 + 22344;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eaac:
                    r2 = 7 << 16;
                    r2 = r2 + 22308;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eabc:
                    r2 = 7 << 16;
                    r2 = r2 + 22288;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eacc:
                    r2 = 7 << 16;
                    r2 = r2 + 22260;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eadc:
                    r2 = 7 << 16;
                    r2 = r2 + 22240;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eaec:
                    r2 = 7 << 16;
                    r2 = r2 + 22224;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eafc:
                    r2 = 7 << 16;
                    r2 = r2 + 22212;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eb0c:
                    r2 = 7 << 16;
                    r2 = r2 + 22196;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eb1c:
                    r2 = 7 << 16;
                    r2 = r2 + 22172;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eb2c:
                    r2 = 7 << 16;
                    r2 = r2 + 22156;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eb3c:
                    r2 = 7 << 16;
                    r2 = r2 + 22116;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eb4c:
                    r2 = 7 << 16;
                    r2 = r2 + 22080;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eb5c:
                    r2 = 7 << 16;
                    r2 = r2 + 22064;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eb6c:
                    r2 = 7 << 16;
                    r2 = r2 + 22040;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eb7c:
                    r2 = 7 << 16;
                    r2 = r2 + 22020;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eb8c:
                    r2 = 7 << 16;
                    r2 = r2 + 21988;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eb9c:
                    r2 = 7 << 16;
                    r2 = r2 + 21932;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ebac:
                    r2 = 7 << 16;
                    r2 = r2 + 21916;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ebbc:
                    r2 = 7 << 16;
                    r2 = r2 + 21852;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ebcc:
                    r2 = 7 << 16;
                    r2 = r2 + 21836;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ebdc:
                    r2 = 7 << 16;
                    r2 = r2 + 21816;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ebec:
                    r2 = 7 << 16;
                    r2 = r2 + 21804;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ebfc:
                    r2 = 7 << 16;
                case 0x3ec00:
                    pc=0x3ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ec00() throws ExecutionException { /* 0x3ec00 - 0x3ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ec00:
                    r2 = r2 + 21780;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ec0c:
                    r2 = 7 << 16;
                    r2 = r2 + 21768;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ec1c:
                    r2 = 7 << 16;
                    r2 = r2 + 21748;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ec2c:
                    r2 = 7 << 16;
                    r2 = r2 + 21728;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ec3c:
                    r2 = 7 << 16;
                    r2 = r2 + 21708;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ec4c:
                    r2 = 7 << 16;
                    r2 = r2 + 21664;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ec5c:
                    r2 = 7 << 16;
                    r2 = r2 + 21648;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ec6c:
                    r2 = 7 << 16;
                    r2 = r2 + 21600;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ec7c:
                    r2 = 7 << 16;
                    r2 = r2 + 21580;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ec8c:
                    r2 = 7 << 16;
                    r2 = r2 + 21552;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ec9c:
                    r2 = 7 << 16;
                    r2 = r2 + 21540;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ecac:
                    r2 = 7 << 16;
                    r2 = r2 + 21516;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ecbc:
                    r2 = 7 << 16;
                    r2 = r2 + 21500;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3eccc:
                    r2 = 7 << 16;
                    r2 = r2 + 21472;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ecdc:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ed10;
                        continue;
                    }
                case 0x3ece4:
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ecf8;
                    pc=0x45600;
                    run_45600(); return;
                case 0x3ecf8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e83c;
                        run_3e800(); return;
                    }
                    r2 = 7 << 16;
                    r2 = r2 + -7564;
                    /* Next insn is delay slot */ 
                    pc=0x3e83c;
                    run_3e800(); return;
                case 0x3ed10:
                    r7 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ece4;
                    continue;
                case 0x3ee00:
                    pc=0x3ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ee00() throws ExecutionException { /* 0x3ee00 - 0x3f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ee00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e800;
                    run_3e800(); return;
                case 0x3f000:
                    pc=0x3f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f000() throws ExecutionException { /* 0x3f000 - 0x3f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f000:
                    r2 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f048;
                        continue;
                    }
                    r3 = r2 + -100;
                    r5 = r3 & 3;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f03c;
                        continue;
                    }
                    r5 = r0 + 100;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r5; lo = r3/r5;
                        pc=0x3f030;
                        continue;
                    }
                    hi = r3%r5; lo = r3/r5;
                    throw new ExecutionException("Break");
                case 0x3f030:
                    r6 = hi;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f074;
                        continue;
                    }
                case 0x3f03c:
                    r3 = r0 + -100;
                    /* Next insn is delay slot */ 
                    pc=0x3f184;
                    continue;
                case 0x3f048:
                    r3 = r2 + 1900;
                    r5 = r3 & 3;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f180;
                        continue;
                    }
                    r5 = r0 + 100;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r5; lo = r3/r5;
                        pc=0x3f068;
                        continue;
                    }
                    hi = r3%r5; lo = r3/r5;
                    throw new ExecutionException("Break");
                case 0x3f068:
                    r6 = hi;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f180;
                        continue;
                    }
                case 0x3f074:
                    r2 = r0 + 1;
                case 0x3f078:
                    r5 = readPages[(r4+28)>>>12][((r4+28)>>>2)&0x3ff];
                    r4 = readPages[(r4+24)>>>12][((r4+24)>>>2)&0x3ff];
                    r5 = r5 << 4;
                    r4 = r4 << 1;
                    r4 = r5 + r4;
                    r2 = r2 + r4;
                    r3 = r2 < 34 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f0d8;
                        continue;
                    }
                    r3 = r2 < 32 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f124;
                        continue;
                    }
                    r3 = r2 < 14 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f15c;
                        continue;
                    }
                    r3 = r2 < 10 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f124;
                        continue;
                    }
                case 0x3f0c0:
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f124;
                        continue;
                    }
                case 0x3f0cc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f0d8:
                    r3 = r2 < 5831 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f130;
                        continue;
                    }
                    r3 = r2 < 5826 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f118;
                        continue;
                    }
                    r3 = r0 + 5794;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3f118;
                        continue;
                    }
                    r3 = r2 < 5794 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f0cc;
                        continue;
                    }
                    r2 = r2 + -5810;
                    r2 = (r2&0xffffffffL) < (3&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f0cc;
                        continue;
                    }
                case 0x3f118:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f124:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f130:
                    r3 = r0 + 5845;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3f118;
                        continue;
                    }
                    r3 = r0 + 5847;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3f118;
                        continue;
                    }
                    r3 = r0 + 5843;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3f0cc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3f118;
                    continue;
                case 0x3f15c:
                    r3 = r2 < 16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f0cc;
                        continue;
                    }
                    r3 = r2 < 18 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f124;
                        continue;
                    }
                    r2 = r2 + -28;
                    /* Next insn is delay slot */ 
                    pc=0x3f0c0;
                    continue;
                case 0x3f180:
                    r3 = r0 + 1900;
                case 0x3f184:
                    r2 = r3 + r2;
                    r3 = r0 + 400;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r3; lo = r2/r3;
                        pc=0x3f198;
                        continue;
                    }
                    hi = r2%r3; lo = r2/r3;
                    throw new ExecutionException("Break");
                case 0x3f198:
                    r5 = hi;
                    r2 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=0x3f078;
                    continue;
                case 0x3f200:
                    pc=0x3f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f200() throws ExecutionException { /* 0x3f200 - 0x3f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f200:
                    r29 = r29 + -120;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r23;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r21;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r20;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r19;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r18;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r17;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r16;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r6;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r30;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r22;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    r18 = r7 + r0;
                    r19 = 7 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x3f248;
                    pc=0x44e00;
                    run_44e00(); return;
                case 0x3f248:
                    r20 = 7 << 16;
                    r6 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r21 = r2 + r0;
                    r23 = r0 + r0;
                    r19 = r19 + 23724;
                    r20 = r20 + 23632;
                case 0x3f260:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f2a8;
                        continue;
                    }
                case 0x3f270:
                    r4 = r0 + 37;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3f2c4;
                        continue;
                    }
                    r4 = r16 + -1;
                    r4 = ((r23 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        continue;
                    }
                    r4 = r17 + r23;
                    r6 = r6 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r23 = r23 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f270;
                        continue;
                    }
                case 0x3f2a8:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40020;
                        run_40000(); return;
                    }
                    r17 = r17 + r23;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r23 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f3e0;
                    continue;
                case 0x3f2c4:
                    addr=r6+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r22 = tmp;
                    r2 = r0 + 48;
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3f414;
                        run_3f400(); return;
                    }
                    r2 = r0 + 43;
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3f414;
                        run_3f400(); return;
                    }
                    r30 = r6 + 1;
                    r6 = r22 + r0;
                    r2 = r6 + -49;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    r22 = r0 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f434;
                        run_3f400(); return;
                    }
                case 0x3f300:
                    r4 = r0 + 69;
                    r7 = r0 + r0;
                    if(r6 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3f460;
                        run_3f400(); return;
                    }
                case 0x3f310:
                    r2 = r0 + 79;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3f460;
                        run_3f400(); return;
                    }
                case 0x3f31c:
                    r4 = r6 + -37;
                    r4 = r4 & 255;
                    r5 = (r4&0xffffffffL) < (86&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        continue;
                    }
                    r4 = r4 << 2;
                    r4 = r19 + r4;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r4;
                    return;
                case 0x3f348:
                    r4 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r10 = r4 < -1900 ? 1 : 0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x40380;
                        run_40200(); return;
                    }
                    r2 = r0 + 100;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x3f36c;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x3f36c:
                    r2 = lo;
                    r2 = r2 + 19;
                case 0x3f374:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x400c4;
                        run_40000(); return;
                    }
                    r4 = r2 < 100 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40148;
                        run_40000(); return;
                    }
                case 0x3f388:
                    r9 = 7 << 16;
                    r6 = 7 << 16;
                    r9 = r9 + -7564;
                    r6 = r6 + 23624;
                case 0x3f398:
                    r4 = (r7&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x401b0;
                        run_40000(); return;
                    }
                case 0x3f3a4:
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3bc;
                        continue;
                    }
                    r9 = 7 << 16;
                    r9 = r9 + -8860;
                case 0x3f3bc:
                    r10 = r7 - r10;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r10;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r7 = r9 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f3d4;
                    pc=0x60600;
                    run_60600(); return;
                case 0x3f3d4:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f828;
                        run_3f800(); return;
                    }
                case 0x3f3dc:
                    r2 = r0 + r0;
                case 0x3f3e0:
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r30 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r23 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r22 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r21 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r20 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r19 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r18 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                case 0x3f400:
                    pc=0x3f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f400() throws ExecutionException { /* 0x3f400 - 0x3f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f400:
                    r17 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r29 = r29 + 120;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f414:
                    r30 = r6 + 2;
                    addr=r6+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r2 = r6 + -49;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f300;
                        run_3f200(); return;
                    }
                case 0x3f434:
                    r4 = r30 + r0;
                    r6 = r0 + 10;
                    r5 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r31=0x3f448;
                    pc=0x41000;
                    run_41000(); return;
                case 0x3f448:
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + 69;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r7 = r2 + r0;
                    if(r6 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3f310;
                        run_3f200(); return;
                    }
                case 0x3f460:
                    addr=r30+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r30 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3f31c;
                    run_3f200(); return;
                case 0x3f470:
                    r4 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x40334;
                        run_40200(); return;
                    }
                    r2 = r0 + 100;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x3f490;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x3f490:
                    r5 = r16 - r23;
                    r4 = r17 + r23;
                    r7 = hi;
                case 0x3f49c:
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f850;
                    run_3f800(); return;
                case 0x3f4a8:
                    r2 = r16 + -1;
                    r2 = ((r23 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                    r2 = r17 + r23;
                    r4 = r0 + 37;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 + 1;
                case 0x3f4c8:
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f2a8;
                        run_3f200(); return;
                    }
                case 0x3f4d8:
                    r6 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3f260;
                    run_3f200(); return;
                case 0x3f4e4:
                    r2 = readPages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff];
                    r2 = r2 + 30;
                    r2 = r2 << 2;
                    r2 = r21 + r2;
                    r22 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f50c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3f50c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f4c8;
                        continue;
                    }
                    r4 = r16 + -1;
                    r5 = ((r23 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                    r10 = r2 + r23;
                    r3 = r23 + r0;
                    r6 = r0 + r0;
                    r5 = r0 + r0;
                    r2 = r17 + r23;
                    /* Next insn is delay slot */ 
                    pc=0x3f54c;
                    continue;
                case 0x3f540:
                    r7 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                case 0x3f54c:
                    r6 = r22 + r6;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r3 + 1;
                    r6 = r2 + r5;
                    r5 = r5 + 1;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r5 + r0;
                    if(r3 != r10) {
                        /* Next insn is delay slot */ 
                        pc=0x3f540;
                        continue;
                    }
                case 0x3f570:
                    r23 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f4c8;
                    continue;
                case 0x3f57c:
                    r2 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r2 = r2 + 12;
                    r2 = r2 << 2;
                    r2 = r21 + r2;
                    r22 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f5a4;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3f5a4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f4c8;
                        continue;
                    }
                    r4 = r16 + -1;
                    r5 = ((r23 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                    r10 = r2 + r23;
                    r3 = r23 + r0;
                    r6 = r0 + r0;
                    r5 = r0 + r0;
                    r2 = r17 + r23;
                    /* Next insn is delay slot */ 
                    pc=0x3f5e4;
                    continue;
                case 0x3f5d8:
                    r7 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                case 0x3f5e4:
                    r6 = r22 + r6;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r3 + 1;
                    r6 = r2 + r5;
                    r5 = r5 + 1;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r5 + r0;
                case 0x3f600:
                    pc=0x3f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f600() throws ExecutionException { /* 0x3f600 - 0x3f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f600:
                    if(r3 != r10) {
                        /* Next insn is delay slot */ 
                        pc=0x3f5d8;
                        run_3f400(); return;
                    }
                    r23 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f4c8;
                    run_3f400(); return;
                case 0x3f614:
                    r2 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r10 = r2 + 1900;
                    r2 = r2 < -1900 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4002c;
                        run_40000(); return;
                    }
                    r2 = r0 + 45;
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r10 = r0 - r10;
                case 0x3f638:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40494;
                        run_40400(); return;
                    }
                    r7 = r7 + -1;
                    r2 = r29 + 25;
                    r6 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x40040;
                    run_40000(); return;
                case 0x3f654:
                    r2 = readPages[(r18+32)>>>12][((r18+32)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f4d8;
                        run_3f400(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3f66c;
                    pc=0x45200;
                    run_45200(); return;
                case 0x3f66c:
                    r2 = readPages[(r18+32)>>>12][((r18+32)>>>2)&0x3ff];
                    r7 = r28 + -32632;
                    r2 = r0 < r2 ? 1 : 0;
                    r2 = r2 << 2;
                    r2 = r7 + r2;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x3f690;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3f690:
                    r22 = r23 + r0;
                    r7 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f70c;
                        continue;
                    }
                    r9 = r16 + -1;
                    r4 = ((r23 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40234;
                        run_40200(); return;
                    }
                    r10 = r2 + r23;
                    r22 = r23 + r0;
                    r4 = r0 + r0;
                    r2 = r17 + r23;
                    /* Next insn is delay slot */ 
                    pc=0x3f6d4;
                    continue;
                case 0x3f6c8:
                    r5 = ((r22 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40234;
                        run_40200(); return;
                    }
                case 0x3f6d4:
                    r5 = readPages[(r18+32)>>>12][((r18+32)>>>2)&0x3ff];
                    r22 = r22 + 1;
                    r5 = r0 < r5 ? 1 : 0;
                    r5 = r5 << 2;
                    r5 = r7 + r5;
                    r5 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + r4;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r5 = r2 + r4;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r4 + 1;
                    if(r22 != r10) {
                        /* Next insn is delay slot */ 
                        pc=0x3f6c8;
                        continue;
                    }
                case 0x3f70c:
                    /* Next insn is delay slot */ 
                    r31=0x3f714;
                    pc=0x45400;
                    run_45400(); return;
                case 0x3f714:
                    r23 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f4c8;
                    run_3f400(); return;
                case 0x3f720:
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r2 < 12 ? 1 : 0;
                    r2 = r2 ^ 1;
                    r2 = r2 + 40;
                    r2 = r2 << 2;
                    r2 = r21 + r2;
                    r22 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f750;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3f750:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f4c8;
                        run_3f400(); return;
                    }
                    r4 = r16 + -1;
                    r5 = ((r23 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                    r11 = r2 + r23;
                    r3 = r23 + r0;
                    r6 = r0 + r0;
                    r5 = r0 + r0;
                    r2 = r17 + r23;
                    r10 = r0 + 80;
                    r12 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3f7b4;
                    continue;
                case 0x3f78c:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                case 0x3f790:
                    r6 = r2 + r5;
                    r5 = r5 + 1;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r5 + r0;
                    if(r3 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x3f570;
                        run_3f400(); return;
                    }
                    r7 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                case 0x3f7b4:
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r3 + 1;
                    r6 = r22 + r6;
                    if(r7 != r10) {
                        /* Next insn is delay slot */ 
                        pc=0x3f78c;
                        continue;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r6 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r6 = r6 + r7;
                    addr=r6+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r6 = r6 & 3;
                    if(r6 == r12) {
                        /* Next insn is delay slot */ 
                        pc=0x4000c;
                        run_40000(); return;
                    }
                    r7 = r7 << 24;
                    r7 = r7 >> 24;
                    /* Next insn is delay slot */ 
                    pc=0x3f790;
                    continue;
                case 0x3f7fc:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                case 0x3f800:
                    pc=0x3f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f800() throws ExecutionException { /* 0x3f800 - 0x3fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f800:
                    r6 = 7 << 16;
                    r7 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    r6 = r6 + 23684;
                    /* Next insn is delay slot */ 
                    r31=0x3f820;
                    pc=0x60600;
                    run_60600(); return;
                case 0x3f820:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                case 0x3f828:
                    r23 = r23 + r2;
                    r2 = ((r23 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f4c8;
                        run_3f400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3f3dc;
                    run_3f200(); return;
                case 0x3f840:
                    r7 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    r6 = r20 + r0;
                case 0x3f850:
                    /* Next insn is delay slot */ 
                    r31=0x3f858;
                    pc=0x60600;
                    run_60600(); return;
                case 0x3f858:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f828;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3f3dc;
                    run_3f200(); return;
                case 0x3f868:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r7 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r17 + r23;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r5 = r16 - r23;
                    r6 = r2 + 23696;
                    /* Next insn is delay slot */ 
                    r31=0x3f894;
                    pc=0x60600;
                    run_60600(); return;
                case 0x3f894:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f828;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3f3dc;
                    run_3f200(); return;
                case 0x3f8a4:
                    r7 = readPages[(r18+28)>>>12][((r18+28)>>>2)&0x3ff];
                    r2 = readPages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff];
                    r7 = r7 + 7;
                    r7 = r7 - r2;
                    r2 = r0 + 7;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r7%r2; lo = r7/r2;
                        pc=0x3f8c4;
                        continue;
                    }
                    hi = r7%r2; lo = r7/r2;
                    throw new ExecutionException("Break");
                case 0x3f8c4:
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    r7 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x3f49c;
                    run_3f400(); return;
                case 0x3f8d8:
                    r2 = readPages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40124;
                        run_40000(); return;
                    }
                    r7 = r2 + -1;
                case 0x3f8ec:
                    r4 = readPages[(r18+28)>>>12][((r18+28)>>>2)&0x3ff];
                    r2 = r0 + 7;
                    r4 = r4 + 7;
                    r7 = r4 - r7;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r7%r2; lo = r7/r2;
                        pc=0x3f908;
                        continue;
                    }
                    hi = r7%r2; lo = r7/r2;
                    throw new ExecutionException("Break");
                case 0x3f908:
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    r7 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x3f49c;
                    run_3f400(); return;
                case 0x3f91c:
                    r22 = readPages[(r21+152)>>>12][((r21+152)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f930;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3f930:
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f4c8;
                        run_3f400(); return;
                    }
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    r6 = r22 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f958;
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3f958:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                    r23 = r23 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x3f4c8;
                    run_3f400(); return;
                case 0x3f96c:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f978;
                    pc=0x3f000;
                    run_3f000(); return;
                case 0x3f978:
                    r4 = readPages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40118;
                        run_40000(); return;
                    }
                    r4 = r4 + -1;
                case 0x3f98c:
                    r5 = readPages[(r18+28)>>>12][((r18+28)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x401bc;
                        run_40000(); return;
                    }
                    r7 = r0 + 1;
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    /* Next insn is delay slot */ 
                    pc=0x3f49c;
                    run_3f400(); return;
                case 0x3f9ac:
                    r5 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r11 = r5 < -1900 ? 1 : 0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r5;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r7;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r11;
                    /* Next insn is delay slot */ 
                    r31=0x3f9cc;
                    pc=0x3f000;
                    run_3f000(); return;
                case 0x3f9cc:
                    r5 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r6 = r2 + r0;
                    r7 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r11 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x402a4;
                        run_40200(); return;
                    }
                    r2 = r0 + 100;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r5%r2; lo = r5/r2;
                        pc=0x3f9f4;
                        continue;
                    }
                    hi = r5%r2; lo = r5/r2;
                    throw new ExecutionException("Break");
                case 0x3f9f4:
                    r10 = lo;
                    r10 = r10 + 19;
                case 0x3f9fc:
                    r2 = r0 + 100;
                case 0x3fa00:
                    pc=0x3fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fa00() throws ExecutionException { /* 0x3fa00 - 0x3fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fa00:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r5%r2; lo = r5/r2;
                        pc=0x3fa0c;
                        continue;
                    }
                    hi = r5%r2; lo = r5/r2;
                    throw new ExecutionException("Break");
                case 0x3fa0c:
                    r4 = hi;
                case 0x3fa10:
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x401f0;
                        run_40000(); return;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fa30;
                        continue;
                    }
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fa30;
                        continue;
                    }
                    r6 = r0 + -1;
                    r11 = r0 + 1;
                case 0x3fa30:
                    r6 = r6 + r4;
                    r2 = r0 + -1;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4016c;
                        run_40000(); return;
                    }
                    r2 = r0 + 100;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x40248;
                        run_40200(); return;
                    }
                case 0x3fa4c:
                    r2 = r10 << 2;
                    r10 = r10 << 4;
                    r10 = r2 + r10;
                    r2 = r10 << 2;
                    r10 = r10 + r2;
                    r10 = r10 + r6;
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4002c;
                        run_40000(); return;
                    }
                    r2 = r0 + 45;
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3f638;
                    run_3f600(); return;
                case 0x3fa7c:
                    r7 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r4 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r22 = r17 + r23;
                    r5 = r16 - r23;
                    r7 = r7 + 1;
                    r10 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x40264;
                        run_40200(); return;
                    }
                    r6 = r0 + 100;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r6; lo = r4/r6;
                        pc=0x3faac;
                        continue;
                    }
                    hi = r4%r6; lo = r4/r6;
                    throw new ExecutionException("Break");
                case 0x3faac:
                    r2 = hi;
                case 0x3fab0:
                    r6 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r10;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r4 = r22 + r0;
                    r6 = r6 + 23644;
                    /* Next insn is delay slot */ 
                    r31=0x3facc;
                    pc=0x60600;
                    run_60600(); return;
                case 0x3facc:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f828;
                        run_3f800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3f3dc;
                    run_3f200(); return;
                case 0x3fadc:
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r7 = r0 + 12;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fb04;
                        continue;
                    }
                    if(r2 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x40258;
                        run_40200(); return;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r7; lo = r2/r7;
                        pc=0x3fb00;
                        continue;
                    }
                    hi = r2%r7; lo = r2/r7;
                    throw new ExecutionException("Break");
                case 0x3fb00:
                    r7 = hi;
                case 0x3fb04:
                    r9 = r0 + 73;
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    if(r6 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x3f49c;
                        run_3f400(); return;
                    }
                    r6 = 7 << 16;
                    r6 = r6 + 23640;
                    /* Next insn is delay slot */ 
                    pc=0x3f850;
                    run_3f800(); return;
                case 0x3fb28:
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    r6 = r20 + r0;
                    r7 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3f850;
                    run_3f800(); return;
                case 0x3fb40:
                    r2 = r0 + 107;
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x40188;
                        run_40000(); return;
                    }
                    r6 = r20 + r0;
                case 0x3fb58:
                    r7 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x3fb64;
                    pc=0x60600;
                    run_60600(); return;
                case 0x3fb64:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f828;
                        run_3f800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3f3dc;
                    run_3f200(); return;
                case 0x3fb74:
                    r2 = r0 + 37;
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x400dc;
                        run_40000(); return;
                    }
                    r2 = (r7&0xffffffffL) < (6&0xffffffffL) ? 1 : 0;
                    addr=r29+25;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r22&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4047c;
                        run_40400(); return;
                    }
                    r22 = r29 + 26;
                case 0x3fb98:
                    r4 = r22 + r0;
                case 0x3fb9c:
                    r5 = 7 << 16;
                    r5 = r5 + 23664;
                    /* Next insn is delay slot */ 
                    r31=0x3fbac;
                    pc=0x3e600;
                    run_3e600(); return;
                case 0x3fbac:
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    r6 = r29 + 24;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3fbc4;
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3fbc4:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                    r23 = r23 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x3f4c8;
                    run_3f400(); return;
                case 0x3fbd8:
                    r2 = readPages[(r18+32)>>>12][((r18+32)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f4d8;
                        run_3f400(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3fbf0;
                    pc=0x5a000;
                    run_5a000(); return;
                case 0x3fbf0:
                    r22 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3fbfc;
                    pc=0x45200;
                    run_45200(); return;
                case 0x3fbfc:
                    r4 = readPages[(r18+32)>>>12][((r18+32)>>>2)&0x3ff];
                case 0x3fc00:
                    pc=0x3fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fc00() throws ExecutionException { /* 0x3fc00 - 0x3fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fc00:
                    r4 = r0 < r4 ? 1 : 0;
                    r5 = r4 << 2;
                    r4 = r4 << 5;
                    r4 = r4 - r5;
                    r2 = r22 + r4;
                    r2 = readPages[(r2+32)>>>12][((r2+32)>>>2)&0x3ff];
                    r22 = r0 - r2;
                    /* Next insn is delay slot */ 
                    r31=0x3fc2c;
                    pc=0x45400;
                    run_45400(); return;
                case 0x3fc2c:
                    r6 = r0 + 60;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r22%r6; lo = r22/r6;
                        pc=0x3fc3c;
                        continue;
                    }
                    hi = r22%r6; lo = r22/r6;
                    throw new ExecutionException("Break");
                case 0x3fc3c:
                    r9 = r17 + r23;
                    r5 = r16 - r23;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r5;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r6;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r9;
                    r4 = lo;
                    /* Next insn is delay slot */ 
                    r31=0x3fc5c;
                    pc=0x5a600;
                    run_5a600(); return;
                case 0x3fc5c:
                    r7 = r0 + 3600;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r22%r7; lo = r22/r7;
                        pc=0x3fc6c;
                        continue;
                    }
                    hi = r22%r7; lo = r22/r7;
                    throw new ExecutionException("Break");
                case 0x3fc6c:
                    r6 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r9 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r5 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r4 = r9 + r0;
                    r7 = lo;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r6; lo = r2/r6;
                        pc=0x3fc94;
                        continue;
                    }
                    hi = r2%r6; lo = r2/r6;
                    throw new ExecutionException("Break");
                case 0x3fc94:
                    r6 = 7 << 16;
                    r6 = r6 + 23712;
                    r2 = hi;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x3fcac;
                    pc=0x60600;
                    run_60600(); return;
                case 0x3fcac:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f828;
                        run_3f800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3f3dc;
                    run_3f200(); return;
                case 0x3fcbc:
                    r7 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    r6 = r20 + r0;
                    r7 = r7 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x3fcd8;
                    pc=0x60600;
                    run_60600(); return;
                case 0x3fcd8:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f828;
                        run_3f800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3f3dc;
                    run_3f200(); return;
                case 0x3fce8:
                    r22 = readPages[(r21+160)>>>12][((r21+160)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3fcfc;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3fcfc:
                    /* Next insn is delay slot */ 
                    pc=0x3f930;
                    run_3f800(); return;
                case 0x3fd04:
                    r2 = r0 + 100;
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4017c;
                        run_40000(); return;
                    }
                    r6 = 7 << 16;
                    r6 = r6 + 23640;
                case 0x3fd20:
                    r7 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x3fd2c;
                    pc=0x60600;
                    run_60600(); return;
                case 0x3fd2c:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f828;
                        run_3f800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3f3dc;
                    run_3f200(); return;
                case 0x3fd3c:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3fd48;
                    pc=0x3f000;
                    run_3f000(); return;
                case 0x3fd48:
                    r4 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r22 = r2 + r0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x40358;
                        run_40200(); return;
                    }
                    r2 = r0 + 100;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x3fd68;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x3fd68:
                    r6 = hi;
                case 0x3fd6c:
                    if(r22 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x40214;
                        run_40200(); return;
                    }
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fd94;
                        continue;
                    }
                    r2 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r2 = r2 < -1900 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fd94;
                        continue;
                    }
                    r22 = r0 + -1;
                case 0x3fd94:
                    r2 = r0 + 100;
                    r5 = r22 + r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r5%r2; lo = r5/r2;
                        pc=0x3fda8;
                        continue;
                    }
                    hi = r5%r2; lo = r5/r2;
                    throw new ExecutionException("Break");
                case 0x3fda8:
                    r7 = hi;
                    r7 = r7 + 100;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r7%r2; lo = r7/r2;
                        pc=0x3fdc0;
                        continue;
                    }
                    hi = r7%r2; lo = r7/r2;
                    throw new ExecutionException("Break");
                case 0x3fdc0:
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    r7 = hi;
                    /* Next insn is delay slot */ 
                    pc=0x3f49c;
                    run_3f400(); return;
                case 0x3fdd4:
                    r7 = readPages[(r18+28)>>>12][((r18+28)>>>2)&0x3ff];
                    r6 = 7 << 16;
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    r6 = r6 + 23676;
                    r7 = r7 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3f850;
                    run_3f800(); return;
                case 0x3fdf4:
                    r2 = readPages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff];
                    r2 = r2 + 24;
                case 0x3fe00:
                    pc=0x3fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fe00() throws ExecutionException { /* 0x3fe00 - 0x40000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fe00:
                    r2 = r2 << 2;
                    r2 = r21 + r2;
                    r22 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3fe1c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3fe1c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f4c8;
                        run_3f400(); return;
                    }
                    r4 = r16 + -1;
                    r5 = ((r23 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                    r10 = r2 + r23;
                    r3 = r23 + r0;
                    r6 = r0 + r0;
                    r5 = r0 + r0;
                    r2 = r17 + r23;
                    /* Next insn is delay slot */ 
                    pc=0x3fe5c;
                    continue;
                case 0x3fe50:
                    r7 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                case 0x3fe5c:
                    r6 = r22 + r6;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r3 + 1;
                    r6 = r2 + r5;
                    r5 = r5 + 1;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r5 + r0;
                    if(r3 != r10) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe50;
                        continue;
                    }
                    r23 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f4c8;
                    run_3f400(); return;
                case 0x3fe8c:
                    r2 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r21 + r2;
                    r22 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3feb0;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3feb0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f4c8;
                        run_3f400(); return;
                    }
                    r4 = r16 + -1;
                    r5 = ((r23 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                    r10 = r2 + r23;
                    r3 = r23 + r0;
                    r6 = r0 + r0;
                    r5 = r0 + r0;
                    r2 = r17 + r23;
                    /* Next insn is delay slot */ 
                    pc=0x3fef0;
                    continue;
                case 0x3fee4:
                    r7 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                case 0x3fef0:
                    r6 = r22 + r6;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r3 + 1;
                    r6 = r2 + r5;
                    r5 = r5 + 1;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r5 + r0;
                    if(r3 != r10) {
                        /* Next insn is delay slot */ 
                        pc=0x3fee4;
                        continue;
                    }
                    r23 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f4c8;
                    run_3f400(); return;
                case 0x3ff20:
                    r2 = r16 + -1;
                    r2 = ((r23 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                    r2 = r17 + r23;
                    r4 = r0 + 9;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3f4c8;
                    run_3f400(); return;
                case 0x3ff48:
                    r2 = r16 + -1;
                    r2 = ((r23 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                    r2 = readPages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40130;
                        run_40000(); return;
                    }
                    r2 = r17 + r23;
                    r4 = r0 + 55;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3f4c8;
                    run_3f400(); return;
                case 0x3ff80:
                    r2 = r16 + -1;
                    r2 = ((r23 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                    r4 = readPages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff];
                    r2 = r17 + r23;
                    r4 = r4 + 48;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3f4c8;
                    run_3f400(); return;
                case 0x3ffac:
                    r2 = r16 + -1;
                    r2 = ((r23 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                    r2 = r17 + r23;
                    r4 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3f4c8;
                    run_3f400(); return;
                case 0x3ffd4:
                    r22 = readPages[(r21+228)>>>12][((r21+228)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ffe8;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3ffe8:
                    /* Next insn is delay slot */ 
                    pc=0x3f930;
                    run_3f800(); return;
                case 0x3fff0:
                    r22 = readPages[(r21+156)>>>12][((r21+156)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x40004;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x40000:
                    pc=0x40000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40000() throws ExecutionException { /* 0x40000 - 0x40200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40000:
                case 0x40004:
                    /* Next insn is delay slot */ 
                    pc=0x3f930;
                    run_3f800(); return;
                case 0x4000c:
                    r7 = r7 + 32;
                    r7 = r7 << 24;
                    r7 = r7 >> 24;
                    /* Next insn is delay slot */ 
                    pc=0x3f790;
                    run_3f600(); return;
                case 0x40020:
                    r2 = r23 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f3e0;
                    run_3f200(); return;
                case 0x4002c:
                    r2 = r0 + 43;
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x40198;
                        continue;
                    }
                    r6 = r29 + 24;
                    r2 = r6 + r0;
                case 0x40040:
                    r4 = r0 + 37;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x400b0;
                        continue;
                    }
                    r4 = r2 + 1;
                case 0x40054:
                    r2 = 7 << 16;
                    r5 = r2 + 23672;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r6;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r7;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x40070;
                    pc=0x3e600;
                    run_3e600(); return;
                case 0x40070:
                    r10 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r6 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r7 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r10;
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    /* Next insn is delay slot */ 
                    r31=0x40090;
                    pc=0x60600;
                    run_60600(); return;
                case 0x40090:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f828;
                        run_3f800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3f3dc;
                    run_3f200(); return;
                case 0x400a0:
                    r2 = r0 + 37;
                    r6 = r29 + 24;
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r6 + r0;
                case 0x400b0:
                    r5 = r0 + 48;
                    r4 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x40054;
                    continue;
                case 0x400c4:
                    r9 = 7 << 16;
                    r6 = 7 << 16;
                    r9 = r9 + -7564;
                    r6 = r6 + 23616;
                    /* Next insn is delay slot */ 
                    pc=0x3f398;
                    run_3f200(); return;
                case 0x400dc:
                    r2 = r0 + 43;
                    addr=r29+25;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r7 = r0 + 4;
                case 0x400e8:
                    r22 = r29 + 26;
                    r6 = 7 << 16;
                    r4 = r22 + r0;
                    r5 = r0 + 30;
                    r6 = r6 + 23660;
                    /* Next insn is delay slot */ 
                    r31=0x40104;
                    pc=0x60600;
                    run_60600(); return;
                case 0x40104:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fb98;
                        run_3fa00(); return;
                    }
                    r4 = r22 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x3fb9c;
                    run_3fa00(); return;
                case 0x40118:
                    r4 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x3f98c;
                    run_3f800(); return;
                case 0x40124:
                    r7 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x3f8ec;
                    run_3f800(); return;
                case 0x40130:
                    r4 = r17 + r23;
                    r2 = r2 + 48;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3f4c8;
                    run_3f400(); return;
                case 0x40148:
                    r4 = r0 + 43;
                    if(r22 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3f388;
                        run_3f200(); return;
                    }
                    r9 = 7 << 16;
                    r6 = 7 << 16;
                    r9 = r9 + -8948;
                    r6 = r6 + 23624;
                    /* Next insn is delay slot */ 
                    pc=0x3f398;
                    run_3f200(); return;
                case 0x4016c:
                    r10 = r10 + -1;
                    r6 = r0 + 99;
                    /* Next insn is delay slot */ 
                    pc=0x3fa4c;
                    run_3fa00(); return;
                case 0x4017c:
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3fd20;
                    run_3fc00(); return;
                case 0x40188:
                    r6 = 7 << 16;
                    r6 = r6 + 23640;
                    /* Next insn is delay slot */ 
                    pc=0x3fb58;
                    run_3fa00(); return;
                case 0x40198:
                    r2 = (r10&0xffffffffL) < (10000&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x400a0;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r22&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3f638;
                    run_3f600(); return;
                case 0x401b0:
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x3f3a4;
                    run_3f200(); return;
                case 0x401bc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x403b8;
                        run_40200(); return;
                    }
                    r5 = r5 + 10;
                    r4 = r5 - r4;
                    r2 = r0 + 7;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x401dc;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x401dc:
                    r5 = r16 - r23;
                    r4 = r17 + r23;
                    r7 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x3f49c;
                    run_3f400(); return;
                case 0x401f0:
                    r2 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r2 = r2 < -1899 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fa30;
                        run_3fa00(); return;
                    }
                case 0x40200:
                    pc=0x40200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40200() throws ExecutionException { /* 0x40200 - 0x40400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40200:
                    r6 = r0 + 1;
                    r11 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3fa30;
                    run_3fa00(); return;
                case 0x40214:
                    r2 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r2 = r2 < -1899 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fd94;
                        run_3fc00(); return;
                    }
                    r22 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3fd94;
                    run_3fc00(); return;
                case 0x40234:
                    /* Next insn is delay slot */ 
                    r31=0x4023c;
                    pc=0x45400;
                    run_45400(); return;
                case 0x4023c:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f3e0;
                    run_3f200(); return;
                case 0x40248:
                    r10 = r10 + 1;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3fa4c;
                    run_3fa00(); return;
                case 0x40258:
                    r7 = r0 + 12;
                    /* Next insn is delay slot */ 
                    pc=0x3fb04;
                    run_3fa00(); return;
                case 0x40264:
                    r4 = r4 + 1900;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r5;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r7;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x4027c;
                    pc=0x56c00;
                    run_56c00(); return;
                case 0x4027c:
                    r4 = r0 + 100;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r4; lo = r2/r4;
                        pc=0x4028c;
                        continue;
                    }
                    hi = r2%r4; lo = r2/r4;
                    throw new ExecutionException("Break");
                case 0x4028c:
                    r10 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r7 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r5 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = hi;
                    /* Next insn is delay slot */ 
                    pc=0x3fab0;
                    run_3fa00(); return;
                case 0x402a4:
                    r4 = r5 + 1900;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r7;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r11;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x402bc;
                    pc=0x56c00;
                    run_56c00(); return;
                case 0x402bc:
                    r12 = r0 + 100;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r12; lo = r2/r12;
                        pc=0x402cc;
                        continue;
                    }
                    hi = r2%r12; lo = r2/r12;
                    throw new ExecutionException("Break");
                case 0x402cc:
                    r5 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r6 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r7 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r11 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r10 = lo;
                    if(r5 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f9fc;
                        run_3f800(); return;
                    }
                    r4 = r5 + 1900;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r6;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r7;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r10;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r11;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r12;
                    /* Next insn is delay slot */ 
                    r31=0x40308;
                    pc=0x56c00;
                    run_56c00(); return;
                case 0x40308:
                    r12 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r11 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r12; lo = r2/r12;
                        pc=0x4031c;
                        continue;
                    }
                    hi = r2%r12; lo = r2/r12;
                    throw new ExecutionException("Break");
                case 0x4031c:
                    r10 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r7 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r6 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r4 = hi;
                    /* Next insn is delay slot */ 
                    pc=0x3fa10;
                    run_3fa00(); return;
                case 0x40334:
                    r4 = r4 + 1900;
                    /* Next insn is delay slot */ 
                    r31=0x40340;
                    pc=0x56c00;
                    run_56c00(); return;
                case 0x40340:
                    r7 = r0 + 100;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r7; lo = r2/r7;
                        pc=0x40350;
                        continue;
                    }
                    hi = r2%r7; lo = r2/r7;
                    throw new ExecutionException("Break");
                case 0x40350:
                    /* Next insn is delay slot */ 
                    pc=0x3fdc0;
                    run_3fc00(); return;
                case 0x40358:
                    r4 = r4 + 1900;
                    /* Next insn is delay slot */ 
                    r31=0x40364;
                    pc=0x56c00;
                    run_56c00(); return;
                case 0x40364:
                    r6 = r0 + 100;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r6; lo = r2/r6;
                        pc=0x40374;
                        continue;
                    }
                    hi = r2%r6; lo = r2/r6;
                    throw new ExecutionException("Break");
                case 0x40374:
                    r6 = hi;
                    /* Next insn is delay slot */ 
                    pc=0x3fd6c;
                    run_3fc00(); return;
                case 0x40380:
                    r4 = r4 + 1900;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r7;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x40394;
                    pc=0x56c00;
                    run_56c00(); return;
                case 0x40394:
                    r4 = r0 + 100;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r4; lo = r2/r4;
                        pc=0x403a4;
                        continue;
                    }
                    hi = r2%r4; lo = r2/r4;
                    throw new ExecutionException("Break");
                case 0x403a4:
                    r10 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r7 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x3f374;
                    run_3f200(); return;
                case 0x403b8:
                    r6 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r4 = r4 - r5;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x40438;
                        run_40400(); return;
                    }
                    r2 = r6 + -101;
                    r5 = r2 & 3;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x403f4;
                        continue;
                    }
                    r7 = r0 + 100;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r7; lo = r2/r7;
                        pc=0x403e8;
                        continue;
                    }
                    hi = r2%r7; lo = r2/r7;
                    throw new ExecutionException("Break");
                case 0x403e8:
                    r5 = hi;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40470;
                        run_40400(); return;
                    }
                case 0x403f4:
                    r2 = r0 + -101;
                case 0x403f8:
                    r2 = r2 + r6;
                    r7 = r0 + 400;
                case 0x40400:
                    pc=0x40400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40400() throws ExecutionException { /* 0x40400 - 0x40600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40400:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r7; lo = r2/r7;
                        pc=0x4040c;
                        continue;
                    }
                    hi = r2%r7; lo = r2/r7;
                    throw new ExecutionException("Break");
                case 0x4040c:
                    r5 = hi;
                    r2 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                case 0x40414:
                    r2 = r4 - r2;
                    r7 = r2 < 5 ? 1 : 0;
                    r7 = (r7&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r2 = r0 + 53;
                    r7 = r2 - r7;
                    r4 = r17 + r23;
                    r5 = r16 - r23;
                    /* Next insn is delay slot */ 
                    pc=0x3f49c;
                    run_3f400(); return;
                case 0x40438:
                    r2 = r6 + 1899;
                    r5 = r2 & 3;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40464;
                        continue;
                    }
                    r7 = r0 + 100;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r7; lo = r2/r7;
                        pc=0x40458;
                        continue;
                    }
                    hi = r2%r7; lo = r2/r7;
                    throw new ExecutionException("Break");
                case 0x40458:
                    r5 = hi;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40470;
                        continue;
                    }
                case 0x40464:
                    r2 = r0 + 1899;
                    /* Next insn is delay slot */ 
                    pc=0x403f8;
                    run_40200(); return;
                case 0x40470:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x40414;
                    continue;
                case 0x4047c:
                    r7 = r7 + -6;
                    r22 = r29 + 26;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fb98;
                        run_3fa00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x400e8;
                    run_40000(); return;
                case 0x40494:
                    r2 = r29 + 25;
                    r6 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x40040;
                    run_40000(); return;
                case 0x40600:
                    pc=0x40600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40600() throws ExecutionException { /* 0x40600 - 0x40800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40600:
                    r29 = r29 + -8;
                    r11 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x4061c;
                    continue;
                case 0x40618:
                    r2 = r3 + r0;
                case 0x4061c:
                    r3 = r2 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r9 = r11 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 8;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40618;
                        continue;
                    }
                    r9 = r0 + 45;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x40818;
                        run_40800(); return;
                    }
                    r9 = r0 + 43;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x4082c;
                        run_40800(); return;
                    }
                    r25 = r0 + r0;
                case 0x4065c:
                    r2 = r0 + -17;
                    r2 = r7 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4079c;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x40780;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4079c;
                        continue;
                    }
                    r24 = r0 + 10;
                    r7 = r0 + 10;
                case 0x40688:
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x407a8;
                        continue;
                    }
                case 0x40690:
                    r13 = 32768 << 16;
                case 0x40694:
                    if(r24 != r0) {
                        /* Next insn is delay slot */ 
                        if(r24!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r24 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r24 & 0xffffffffL));
                        }
                        pc=0x406a0;
                        continue;
                    }
                    if(r24!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r24 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r24 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x406a0:
                    r12 = r0 + r0;
                    r2 = r0 + r0;
                    r15 = r0 + 1;
                    r14 = r0 + -1;
                    r16 = hi;
                    r13 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x40708;
                    continue;
                case 0x406c0:
                    r8 = r8 + -48;
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40748;
                        continue;
                    }
                case 0x406d0:
                    if(r12 == r14) {
                        /* Next insn is delay slot */ 
                        pc=0x406fc;
                        continue;
                    }
                    r9 = ((r13 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x407c4;
                        continue;
                    }
                    if(r2 == r13) {
                        /* Next insn is delay slot */ 
                        pc=0x407b8;
                        continue;
                    }
                case 0x406ec:
                    { long hilo = (long)(r2) * ((long)r24); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r12 = r0 + 1;
                    r2 = lo;
                    r2 = r8 + r2;
                case 0x406fc:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                case 0x40708:
                    r9 = r11 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r10 = r9 & 4;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x406c0;
                        continue;
                    }
                    r9 = r9 & 3;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40748;
                        continue;
                    }
                    if(r9 == r15) {
                        /* Next insn is delay slot */ 
                        pc=0x407d0;
                        continue;
                    }
                    r9 = r0 + 87;
                    r8 = r8 - r9;
                case 0x4073c:
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x406d0;
                        continue;
                    }
                case 0x40748:
                    r7 = r0 + -1;
                    if(r12 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x407e0;
                        continue;
                    }
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4080c;
                        run_40800(); return;
                    }
                case 0x4075c:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40770;
                        continue;
                    }
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40800;
                        run_40800(); return;
                    }
                case 0x4076c:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r5;
                case 0x40770:
                    r16 = readPages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff];
                    r29 = r29 + 8;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40780:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r2 = r0 + 88;
                    r9 = r9 & 223;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4084c;
                        run_40800(); return;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40864;
                        run_40800(); return;
                    }
                case 0x4079c:
                    r24 = r7 + r0;
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40690;
                        continue;
                    }
                case 0x407a8:
                    r13 = 32767 << 16;
                    r13 = r13 | 65535;
                    /* Next insn is delay slot */ 
                    pc=0x40694;
                    continue;
                case 0x407b8:
                    r9 = r16 < r8 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x406ec;
                        continue;
                    }
                case 0x407c4:
                    r12 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x406fc;
                    continue;
                case 0x407d0:
                    r9 = r0 + 55;
                    r8 = r8 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x4073c;
                    continue;
                case 0x407e0:
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40840;
                        run_40800(); return;
                    }
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                case 0x407f0:
                    r5 = r0 + 34;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40770;
                        continue;
                    }
                case 0x40800:
                    pc=0x40800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40800() throws ExecutionException { /* 0x40800 - 0x40a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40800:
                    r5 = r3 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4076c;
                    run_40600(); return;
                case 0x4080c:
                    r2 = r0 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x4075c;
                    run_40600(); return;
                case 0x40818:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4065c;
                    run_40600(); return;
                case 0x4082c:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4065c;
                    run_40600(); return;
                case 0x40840:
                    r2 = 32768 << 16;
                    /* Next insn is delay slot */ 
                    pc=0x407f0;
                    run_40600(); return;
                case 0x4084c:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r24 = r0 + 16;
                    r3 = r3 + 2;
                    r7 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x40688;
                    run_40600(); return;
                case 0x40864:
                    r24 = r0 + 8;
                    r7 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x40688;
                    run_40600(); return;
                case 0x40a00:
                    pc=0x40a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40a00() throws ExecutionException { /* 0x40a00 - 0x40c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40a00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x40600;
                    run_40600(); return;
                case 0x40c00:
                    pc=0x40c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40c00() throws ExecutionException { /* 0x40c00 - 0x40e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40c00:
                    r12 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x40c14;
                    continue;
                case 0x40c10:
                    r2 = r3 + r0;
                case 0x40c14:
                    r3 = r2 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r9 = r12 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 8;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40c10;
                        continue;
                    }
                    r9 = r0 + 45;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x40dcc;
                        continue;
                    }
                    r9 = r0 + 43;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x40de0;
                        continue;
                    }
                    r25 = r0 + r0;
                case 0x40c54:
                    r2 = r0 + -17;
                    r2 = r7 & r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40d7c;
                        continue;
                    }
                    r24 = r0 + -1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r24 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r24 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x40c74;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r24 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r24 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x40c74:
                    r15 = r7 + r0;
                    r24 = hi;
                    r13 = lo;
                case 0x40c80:
                    r10 = r0 + r0;
                    r2 = r0 + r0;
                    r14 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x40cdc;
                    continue;
                case 0x40c94:
                    r8 = r8 + -48;
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40d1c;
                        continue;
                    }
                case 0x40ca4:
                    if(r10 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x40d58;
                        continue;
                    }
                    r9 = ((r13 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40d58;
                        continue;
                    }
                    if(r2 == r13) {
                        /* Next insn is delay slot */ 
                        pc=0x40d4c;
                        continue;
                    }
                case 0x40cc0:
                    { long hilo = (long)(r2) * ((long)r15); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = r0 + 1;
                    r2 = lo;
                    r2 = r8 + r2;
                case 0x40cd0:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                case 0x40cdc:
                    r9 = r12 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r11 = r9 & 4;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40c94;
                        continue;
                    }
                    r9 = r9 & 3;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40d1c;
                        continue;
                    }
                    if(r9 == r14) {
                        /* Next insn is delay slot */ 
                        pc=0x40d64;
                        continue;
                    }
                    r9 = r0 + 87;
                    r8 = r8 - r9;
                case 0x40d10:
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40ca4;
                        continue;
                    }
                case 0x40d1c:
                    if(r10 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x40db8;
                        continue;
                    }
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40dac;
                        continue;
                    }
                case 0x40d2c:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40d74;
                        continue;
                    }
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40d40;
                        continue;
                    }
                    r5 = r3 + -1;
                case 0x40d40:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40d4c:
                    r9 = r24 < r8 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40cc0;
                        continue;
                    }
                case 0x40d58:
                    r10 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x40cd0;
                    continue;
                case 0x40d64:
                    r9 = r0 + 55;
                    r8 = r8 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x40d10;
                    continue;
                case 0x40d74:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40d7c:
                    r2 = r0 + 48;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x40df4;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40e50;
                        run_40e00(); return;
                    }
                    r13 = 6553 << 16;
                    r24 = r0 + 5;
                    r13 = r13 | 39321;
                    r15 = r0 + 10;
                    r7 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x40c80;
                    continue;
                case 0x40dac:
                    r2 = r0 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x40d2c;
                    continue;
                case 0x40db8:
                    r2 = r0 + 34;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x40d2c;
                    continue;
                case 0x40dcc:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x40c54;
                    continue;
                case 0x40de0:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x40c54;
                    continue;
                case 0x40df4:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r2 = r0 + 88;
                    r9 = r9 & 223;
                case 0x40e00:
                    pc=0x40e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40e00() throws ExecutionException { /* 0x40e00 - 0x41000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40e00:
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x40e2c;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40e50;
                        continue;
                    }
                    r13 = 8191 << 16;
                    r24 = r0 + 7;
                    r13 = r13 | 65535;
                    r15 = r0 + 8;
                    r7 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x40c80;
                    run_40c00(); return;
                case 0x40e2c:
                    r13 = 4095 << 16;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r24 = r0 + 15;
                    r3 = r3 + 2;
                    r13 = r13 | 65535;
                    r15 = r0 + 16;
                    r7 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x40c80;
                    run_40c00(); return;
                case 0x40e50:
                    r13 = r0 + -1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x40e60;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x40e60:
                    r15 = r7 + r0;
                    r24 = hi;
                    r13 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x40c80;
                    run_40c00(); return;
                case 0x41000:
                    pc=0x41000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41000() throws ExecutionException { /* 0x41000 - 0x41200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41000:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x40c00;
                    run_40c00(); return;
                case 0x41200:
                    pc=0x41200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41200() throws ExecutionException { /* 0x41200 - 0x41400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41200:
                    r29 = r29 + -304;
                    writePages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff] = r31;
                    writePages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff] = r22;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r4;
                    r22 = r5 + r0;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r6;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r7;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r30;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r23;
                    writePages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff] = r21;
                    writePages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff] = r20;
                    writePages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff] = r19;
                    writePages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff] = r18;
                    writePages[(r29+268)>>>12][((r29+268)>>>2)&0x3ff] = r17;
                    writePages[(r29+264)>>>12][((r29+264)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x41244;
                    pc=0x5b600;
                    run_5b600(); return;
                case 0x41244:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4125c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4125c:
                    writePages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff] = r2;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41284;
                        continue;
                    }
                    r2 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42e64;
                        run_42e00(); return;
                    }
                case 0x41284:
                    r21 = r29 + 40;
                    r2 = 7 << 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r21;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r0;
                    writePages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff] = r0;
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r0;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r0;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r0;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r0;
                    r8 = r21 + r0;
                    r19 = r2 + 24464;
                case 0x412b8:
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x419a4;
                        run_41800(); return;
                    }
                case 0x412d0:
                    r3 = r0 + 37;
                    r16 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x412f0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4135c;
                    continue;
                case 0x412e8:
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x41304;
                        continue;
                    }
                case 0x412f0:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x412e8;
                        continue;
                    }
                case 0x41304:
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    r17 = r16 - r3;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4135c;
                        continue;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    r2 = r2 + r17;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41404;
                        run_41400(); return;
                    }
                    r8 = r8 + 8;
                case 0x4134c:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r3 = r3 + r17;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r3;
                case 0x4135c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4142c;
                        run_41400(); return;
                    }
                    r16 = r16 + 1;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r30 = r0 + -1;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r0;
                    r17 = r0 + r0;
                    r6 = r0 + 42;
                    r7 = r0 + r0;
                case 0x4138c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r3 = r16 + 1;
                case 0x41394:
                    r2 = r18 + -32;
                    r4 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41f2c;
                        run_41e00(); return;
                    }
                    r4 = 7 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + 24092;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x413c4:
                    r17 = r17 | 16;
                case 0x413c8:
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4138c;
                    continue;
                case 0x413d4:
                    r4 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r7 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x41f1c;
                        run_41e00(); return;
                    }
                    r7 = r0 - r7;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r2;
                case 0x413f4:
                    r17 = r17 | 4;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4138c;
                    continue;
                case 0x41400:
                    pc=0x41400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41400() throws ExecutionException { /* 0x41400 - 0x41600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41400:
                case 0x41404:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x41418;
                    pc=0x63600;
                    run_63600(); return;
                case 0x41418:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        continue;
                    }
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4134c;
                    run_41200(); return;
                case 0x4142c:
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        continue;
                    }
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x41450;
                    pc=0x63600;
                    run_63600(); return;
                case 0x41450:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4149c;
                        continue;
                    }
                    r2 = r0 + -1;
                case 0x41468:
                    r31 = readPages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff];
                    r30 = readPages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff];
                    r23 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r22 = readPages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff];
                    r21 = readPages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff];
                    r20 = readPages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff];
                    r19 = readPages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff];
                    r18 = readPages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff];
                    r17 = readPages[(r29+268)>>>12][((r29+268)>>>2)&0x3ff];
                    r16 = readPages[(r29+264)>>>12][((r29+264)>>>2)&0x3ff];
                    r29 = r29 + 304;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4149c:
                    r2 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x41468;
                    continue;
                case 0x414a8:
                    r5 = r0 + 43;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4138c;
                    run_41200(); return;
                case 0x414b8:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r3 + 4;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4300c;
                        run_43000(); return;
                    }
                    r4 = r16 + r0;
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42ee0;
                        run_42e00(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x414f8;
                    pc=0x3a000;
                    run_3a000(); return;
                case 0x414f8:
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x432ac;
                        run_43200(); return;
                    }
                    r2 = r2 - r16;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4151c;
                        continue;
                    }
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r30;
                case 0x4151c:
                    r2 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42efc;
                        run_42e00(); return;
                    }
                case 0x4152c:
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                case 0x41540:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41558;
                        continue;
                    }
                case 0x41548:
                    r2 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                case 0x41558:
                    r4 = r17 & 2;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41578;
                        continue;
                    }
                    r5 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r5;
                case 0x41578:
                    r2 = r17 & 132;
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41f50;
                        run_41e00(); return;
                    }
                    r4 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r5 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r20 = r4 - r5;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x41f50;
                        run_41e00(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42f48;
                        run_42e00(); return;
                    }
                    r4 = r20 + r0;
                    writePages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff] = r16;
                    r20 = r17 + r0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    r23 = r0 + 16;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x415ec;
                    continue;
                case 0x415d8:
                    r17 = r17 + -16;
                    r4 = r17 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41648;
                        run_41600(); return;
                    }
                case 0x415ec:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r23;
                case 0x41600:
                    pc=0x41600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41600() throws ExecutionException { /* 0x41600 - 0x41800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41600:
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x415d8;
                        run_41400(); return;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x41624;
                    pc=0x63600;
                    run_63600(); return;
                case 0x41624:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r17 = r17 + -16;
                    r4 = r17 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x415ec;
                        run_41400(); return;
                    }
                case 0x41648:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff];
                    r17 = r20 + r0;
                    r20 = r4 + r0;
                case 0x41658:
                    r3 = r3 + 1;
                    r4 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r2 = r20 + r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4261c;
                        run_42600(); return;
                    }
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r8 = r8 + 8;
                case 0x41688:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x416c4;
                        continue;
                    }
                    r3 = r29 + 182;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42450;
                        run_42400(); return;
                    }
                    r8 = r8 + 8;
                case 0x416c4:
                    r3 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41708;
                        continue;
                    }
                    r3 = r29 + 180;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 2;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4247c;
                        run_42400(); return;
                    }
                    r8 = r8 + 8;
                case 0x41708:
                    r4 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r3 = r0 + 128;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x422bc;
                        run_42200(); return;
                    }
                case 0x41718:
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r20 = r30 - r3;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x41814;
                        run_41800(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42ac0;
                        run_42a00(); return;
                    }
                    r5 = 7 << 16;
                    r23 = r5 + 24448;
                    r4 = r23 + r0;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r16;
                    r23 = r20 + r0;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r17 + r0;
                    r30 = r0 + 16;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4177c;
                    continue;
                case 0x41768:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x417d8;
                        continue;
                    }
                case 0x4177c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r17;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41768;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x417b4;
                    pc=0x63600;
                    run_63600(); return;
                case 0x417b4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4177c;
                        continue;
                    }
                case 0x417d8:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r17 = r20 + r0;
                    r20 = r23 + r0;
                    r23 = r4 + r0;
                case 0x417ec:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                case 0x41800:
                    pc=0x41800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41800() throws ExecutionException { /* 0x41800 - 0x41a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41800:
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42424;
                        run_42400(); return;
                    }
                    r8 = r8 + 8;
                case 0x41814:
                    r3 = r17 & 256;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42150;
                        run_42000(); return;
                    }
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42054;
                        run_42000(); return;
                    }
                case 0x4184c:
                    r8 = r8 + 8;
                case 0x41850:
                    r17 = r17 & 4;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41950;
                        continue;
                    }
                    r3 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r4 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r16 = r3 - r4;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x41950;
                        continue;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42ffc;
                        run_42e00(); return;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    r17 = r0 + 16;
                    r18 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x418ac;
                    continue;
                case 0x41898:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41908;
                        continue;
                    }
                case 0x418ac:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41898;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x418e4;
                    pc=0x63600;
                    run_63600(); return;
                case 0x418e4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x418ac;
                        continue;
                    }
                case 0x41908:
                    r3 = r3 + 1;
                    r5 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r2 = r2 + r16;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41950;
                        continue;
                    }
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x41944;
                    pc=0x63600;
                    run_63600(); return;
                case 0x41944:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                case 0x41950:
                    r3 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r5 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4196c;
                        continue;
                    }
                    r3 = r5 + r0;
                case 0x4196c:
                    r4 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r4 + r3;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42080;
                        run_42000(); return;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    r8 = r21 + r0;
                case 0x4198c:
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x412d0;
                        run_41200(); return;
                    }
                case 0x419a4:
                    r16 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4135c;
                    run_41200(); return;
                case 0x419b0:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x413c8;
                        run_41200(); return;
                    }
                    r5 = r0 + 32;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4138c;
                    run_41200(); return;
                case 0x419c8:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r4 = r3 + 1;
                    if(r18 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x43504;
                        run_43400(); return;
                    }
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r30 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41a1c;
                        run_41a00(); return;
                    }
                case 0x419ec:
                    r4 = r4 + 1;
                    r3 = r30 << 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r30 = r30 << 3;
                    r30 = r3 + r30;
                case 0x41a00:
                    pc=0x41a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41a00() throws ExecutionException { /* 0x41a00 - 0x41c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41a00:
                    r30 = r2 + r30;
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x419ec;
                        run_41800(); return;
                    }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42e54;
                        run_42e00(); return;
                    }
                case 0x41a1c:
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41394;
                    run_41200(); return;
                case 0x41a28:
                    r17 = r17 | 128;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4138c;
                    run_41200(); return;
                case 0x41a38:
                    r7 = r0 + r0;
                    r2 = r18 + -48;
                case 0x41a40:
                    r3 = r3 + 1;
                    r4 = r7 << 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r7 = r7 << 3;
                    r7 = r4 + r7;
                    r7 = r7 + r2;
                    r2 = r18 + -48;
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41a40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x41394;
                    run_41200(); return;
                case 0x41a70:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41eec;
                        run_41e00(); return;
                    }
                case 0x41a88:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                case 0x41aa4:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x41ab4;
                        continue;
                    }
                    r5 = r0 + -129;
                    r17 = r17 & r5;
                case 0x41ab4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x420ac;
                        run_42000(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x420ac;
                        run_42000(); return;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x424d0;
                        run_42400(); return;
                    }
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x424d0;
                        run_42400(); return;
                    }
                    r2 = r0 + 48;
                    addr=r29+143;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r16 = r29 + 143;
                case 0x41aec:
                    r2 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r4 = r2 < r30 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b04;
                        continue;
                    }
                    r2 = r30 + r0;
                case 0x41b04:
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x41540;
                    run_41400(); return;
                case 0x41b14:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41ea8;
                        run_41e00(); return;
                    }
                case 0x41b2c:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41aa4;
                    continue;
                case 0x41b50:
                    r2 = 7 << 16;
                    r2 = r2 + 19696;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r2;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41d90;
                        run_41c00(); return;
                    }
                case 0x41b74:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                case 0x41b88:
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x424e0;
                        run_42400(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x424e0;
                        run_42400(); return;
                    }
                    r3 = r0 + 48;
                    addr=r29+180;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+181;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = r17 | 2;
                    r4 = r0 + 2;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41aa4;
                    continue;
                case 0x41bc0:
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41d2c;
                        run_41c00(); return;
                    }
                case 0x41bd8:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                case 0x41bec:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x41d50;
                        run_41c00(); return;
                    }
                case 0x41bf4:
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x41aa4;
                    continue;
                case 0x41c00:
                    pc=0x41c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41c00() throws ExecutionException { /* 0x41c00 - 0x41e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41c00:
                case 0x41c04:
                    r17 = r17 | 64;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4138c;
                    run_41200(); return;
                case 0x41c14:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r29+104;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                case 0x41c34:
                    r4 = r0 + 1;
                    r5 = r0 + 1;
                    r3 = r0 + r0;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r4;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r5;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    r16 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=0x41558;
                    run_41400(); return;
                case 0x41c5c:
                    r17 = r17 | 1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4138c;
                    run_41200(); return;
                case 0x41c6c:
                    r2 = r17 & 16;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4276c;
                        run_42600(); return;
                    }
                    r17 = r17 & 64;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4276c;
                        run_42600(); return;
                    }
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x412b8;
                    run_41200(); return;
                case 0x41cbc:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r0 + 48;
                    addr=r29+180;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 120;
                    addr=r29+181;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r17 = r17 | 2;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r3 = 7 << 16;
                    r3 = r3 + 19716;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r3;
                    r4 = r0 + 2;
                    r18 = r0 + 120;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41aa4;
                    run_41a00(); return;
                case 0x41d10:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41bd8;
                        run_41a00(); return;
                    }
                case 0x41d2c:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a6c;
                        run_42a00(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x41bf4;
                        run_41a00(); return;
                    }
                case 0x41d50:
                    r3 = r0 + 45;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    r3 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x41aa4;
                    run_41a00(); return;
                case 0x41d6c:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = 7 << 16;
                    r3 = r3 + 19716;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b74;
                        run_41a00(); return;
                    }
                case 0x41d90:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a58;
                        run_42a00(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x41b88;
                    run_41a00(); return;
                case 0x41db4:
                    r2 = r17 & 8;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a44;
                        run_42a00(); return;
                    }
                    r4 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r4 + 7;
                case 0x41dd8:
                    r2 = r0 + -8;
                    r2 = r3 & r2;
                    r3 = r2 + 8;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    writePages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff] = f0;
                    f12 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                case 0x41e00:
                    pc=0x41e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41e00() throws ExecutionException { /* 0x41e00 - 0x42000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41e00:
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = f1;
                    f13 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x41e10;
                    pc=0x5ee00;
                    run_5ee00(); return;
                case 0x41e10:
                    r3 = r0 + 1;
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x429e4;
                        run_42800(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x430e0;
                        run_43000(); return;
                    }
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                case 0x41e48:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42e44;
                        run_42e00(); return;
                    }
                    r16 = 7 << 16;
                    r16 = r16 + 24072;
                case 0x41e5c:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r4 = r0 + 3;
                    r2 = r0 + 3;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r4;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x41540;
                    run_41400(); return;
                case 0x41e84:
                    r17 = r17 | 8;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4138c;
                    run_41200(); return;
                case 0x41e94:
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b2c;
                        run_41a00(); return;
                    }
                case 0x41ea8:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a80;
                        run_42a00(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41aa4;
                    run_41a00(); return;
                case 0x41ed8:
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41a88;
                        run_41a00(); return;
                    }
                case 0x41eec:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42aa0;
                        run_42a00(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41aa4;
                    run_41a00(); return;
                case 0x41f1c:
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r2;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4138c;
                    run_41200(); return;
                case 0x41f2c:
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4142c;
                        run_41400(); return;
                    }
                    addr=r29+104;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x41c34;
                    run_41c00(); return;
                case 0x41f50:
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x41688;
                    run_41600(); return;
                case 0x41f5c:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    r3 = r4 < 2 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x423cc;
                        run_42200(); return;
                    }
                case 0x41f80:
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42934;
                        run_42800(); return;
                    }
                    r4 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r8 = r8 + 8;
                    r3 = r3 + 1;
                    r5 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42988;
                        run_42800(); return;
                    }
                case 0x41fcc:
                    r8 = r8 + 8;
                case 0x41fd0:
                    f0 = r0;
                    f2 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4264c;
                        run_42600(); return;
                    }
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r4 = r5 + -1;
                case 0x42000:
                    pc=0x42000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42000() throws ExecutionException { /* 0x42000 - 0x42200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42000:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r4;
                case 0x4200c:
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x423f4;
                        run_42200(); return;
                    }
                case 0x42024:
                    r8 = r8 + 8;
                case 0x42028:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r29 + 164;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    r2 = r5 + r2;
                case 0x4203c:
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4184c;
                        run_41800(); return;
                    }
                case 0x42054:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42068;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42068:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41850;
                    run_41800(); return;
                case 0x42080:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42094;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42094:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4198c;
                    run_41800(); return;
                case 0x420ac:
                    r5 = r0 + 1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x424a8;
                        run_42400(); return;
                    }
                    r6 = r29 + 144;
                    r5 = r0 + 2;
                    r16 = r6 + r0;
                    if(r4 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x42100;
                        continue;
                    }
                    r5 = readPages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff];
                case 0x420d0:
                    r4 = r2 & 15;
                    r4 = r5 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r16 = r16 + -1;
                    r2 = r2 >>> 4;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x420d0;
                        continue;
                    }
                case 0x420f0:
                    r6 = r6 - r16;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x41aec;
                    run_41a00(); return;
                case 0x42100:
                    r4 = r2 & 7;
                    r16 = r16 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42100;
                        continue;
                    }
                    r2 = r17 & 1;
                    r5 = r16 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x420f0;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x420f0;
                        continue;
                    }
                    r16 = r16 + -1;
                    r6 = r6 - r16;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x41aec;
                    run_41a00(); return;
                case 0x42150:
                    r18 = r18 < 102 ? 1 : 0;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41f5c;
                        run_41e00(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x424f4;
                        run_42400(); return;
                    }
                    r3 = 7 << 16;
                    r3 = r3 + 19828;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42ad4;
                        run_42a00(); return;
                    }
                    r8 = r8 + 8;
                case 0x421b8:
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r3 = r3 < r4 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x421dc;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41850;
                        run_41800(); return;
                    }
                case 0x421dc:
                    r3 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                case 0x42200:
                    pc=0x42200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42200() throws ExecutionException { /* 0x42200 - 0x42400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42200:
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42e18;
                        run_42e00(); return;
                    }
                    r8 = r8 + 8;
                case 0x42218:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x41850;
                        run_41800(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42708;
                        run_42600(); return;
                    }
                    r5 = 7 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r5 + 24448;
                    r18 = r0 + 16;
                    r20 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x42268;
                    continue;
                case 0x42254:
                    r8 = r8 + 8;
                case 0x42258:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42714;
                        run_42600(); return;
                    }
                case 0x42268:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42254;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x422a0;
                    pc=0x63600;
                    run_63600(); return;
                case 0x422a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42258;
                    continue;
                case 0x422bc:
                    r3 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r4 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r20 = r3 - r4;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x41718;
                        run_41600(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4312c;
                        run_43000(); return;
                    }
                    r4 = 7 << 16;
                    r23 = r4 + 24448;
                    r4 = r23 + r0;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r16;
                    r23 = r20 + r0;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r17 + r0;
                    r7 = r0 + 16;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42324;
                    continue;
                case 0x42310:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42388;
                        continue;
                    }
                case 0x42324:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r17;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r7;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42310;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    writePages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x42360;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42360:
                    r7 = readPages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42324;
                        continue;
                    }
                case 0x42388:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r17 = r20 + r0;
                    r20 = r23 + r0;
                    r23 = r4 + r0;
                case 0x4239c:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x429b8;
                        run_42800(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x41718;
                    run_41600(); return;
                case 0x423cc:
                    r3 = r17 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41f80;
                        run_41e00(); return;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42024;
                        run_42000(); return;
                    }
                case 0x423f4:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                case 0x42400:
                    pc=0x42400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42400() throws ExecutionException { /* 0x42400 - 0x42600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42400:
                    /* Next insn is delay slot */ 
                    r31=0x42408;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42408:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42028;
                    run_42000(); return;
                case 0x42424:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42438;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42438:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41814;
                    run_41800(); return;
                case 0x42450:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42464;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42464:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x416c4;
                    run_41600(); return;
                case 0x4247c:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42490;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42490:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41708;
                    run_41600(); return;
                case 0x424a8:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42728;
                        run_42600(); return;
                    }
                    r2 = r2 + 48;
                    r4 = r0 + 1;
                    addr=r29+143;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r4;
                    r16 = r29 + 143;
                    /* Next insn is delay slot */ 
                    pc=0x41aec;
                    run_41a00(); return;
                case 0x424d0:
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r0;
                    r16 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=0x41aec;
                    run_41a00(); return;
                case 0x424e0:
                    r4 = r0 + 2;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41aa4;
                    run_41a00(); return;
                case 0x424f4:
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42b00;
                        run_42a00(); return;
                    }
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r18 = r16 + r3;
                    r20 = r18 - r16;
                    r3 = r4 < r20 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42524;
                        continue;
                    }
                    r20 = r4 + r0;
                case 0x42524:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42558;
                        continue;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42f68;
                        run_42e00(); return;
                    }
                    r8 = r8 + 8;
                case 0x42558:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42f5c;
                        run_42e00(); return;
                    }
                case 0x42560:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r20 = r3 - r20;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x427dc;
                        run_42600(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43494;
                        run_43400(); return;
                    }
                    r5 = 7 << 16;
                    r23 = r5 + 24448;
                    r4 = r23 + r0;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r16;
                    r23 = r20 + r0;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r30 = r0 + 16;
                    r18 = r17 + r0;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x425c8;
                    continue;
                case 0x425b4:
                    r8 = r8 + 8;
                case 0x425b8:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4279c;
                        run_42600(); return;
                    }
                case 0x425c8:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r17;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x425b4;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42600;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42600:
                    pc=0x42600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42600() throws ExecutionException { /* 0x42600 - 0x42800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42600:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x425b8;
                    run_42400(); return;
                case 0x4261c:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42630;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42630:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41688;
                    run_41600(); return;
                case 0x4264c:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r4 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42028;
                        run_42000(); return;
                    }
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43484;
                        run_43400(); return;
                    }
                    r4 = 7 << 16;
                    r23 = r4 + 24448;
                    r18 = r0 + 16;
                    r20 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x42698;
                    continue;
                case 0x42684:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x426f4;
                        continue;
                    }
                case 0x42698:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42684;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x426d0;
                    pc=0x63600;
                    run_63600(); return;
                case 0x426d0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42698;
                        continue;
                    }
                case 0x426f4:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                    /* Next insn is delay slot */ 
                    pc=0x4200c;
                    run_42000(); return;
                case 0x42708:
                    r4 = 7 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r4 + 24448;
                case 0x42714:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                    /* Next insn is delay slot */ 
                    pc=0x4203c;
                    run_42000(); return;
                case 0x42728:
                    r6 = r29 + 144;
                    r16 = r6 + r0;
                    r4 = r0 + 10;
                case 0x42734:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x42740;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x42740:
                    r16 = r16 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42734;
                        continue;
                    }
                    r6 = r6 - r16;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x41aec;
                    run_41a00(); return;
                case 0x4276c:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x412b8;
                    run_41200(); return;
                case 0x4279c:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r17 = r18 + r0;
                    r18 = r20 + r0;
                    r20 = r23 + r0;
                    r23 = r4 + r0;
                case 0x427b4:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43050;
                        run_43000(); return;
                    }
                    r8 = r8 + 8;
                case 0x427dc:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r16 + r3;
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42808;
                        run_42800(); return;
                    }
                    r4 = r17 & 1;
                case 0x42800:
                    pc=0x42800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42800() throws ExecutionException { /* 0x42800 - 0x42a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42800:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4283c;
                        continue;
                    }
                case 0x42808:
                    r4 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r5 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + r5;
                    r4 = r4 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42fcc;
                        run_42e00(); return;
                    }
                    r8 = r8 + 8;
                case 0x4283c:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r18 = r18 - r16;
                    r3 = r4 - r3;
                    r4 = r18 < r3 ? 1 : 0;
                    r20 = r3 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4285c;
                        continue;
                    }
                    r20 = r18 + r0;
                case 0x4285c:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42890;
                        continue;
                    }
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r4 = r4 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4307c;
                        run_43000(); return;
                    }
                    r8 = r8 + 8;
                case 0x42890:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x430b4;
                        run_43000(); return;
                    }
                case 0x42898:
                    r16 = r3 - r20;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x41850;
                        run_41800(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42708;
                        run_42600(); return;
                    }
                    r5 = 7 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r5 + 24448;
                    r18 = r0 + 16;
                    r20 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x428e0;
                    continue;
                case 0x428cc:
                    r8 = r8 + 8;
                case 0x428d0:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42714;
                        run_42600(); return;
                    }
                case 0x428e0:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x428cc;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42918;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42918:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x428d0;
                    continue;
                case 0x42934:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42948;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42948:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r4 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    r3 = r3 + 1;
                    r5 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41fcc;
                        run_41e00(); return;
                    }
                case 0x42988:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4299c;
                    pc=0x63600;
                    run_63600(); return;
                case 0x4299c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41fd0;
                    run_41e00(); return;
                case 0x429b8:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x429cc;
                    pc=0x63600;
                    run_63600(); return;
                case 0x429cc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41718;
                    run_41600(); return;
                case 0x429e4:
                    f12 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    f13 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x429f8;
                    pc=0x5ee00;
                    run_5ee00(); return;
                case 0x429f8:
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42c34;
                        run_42c00(); return;
                    }
                case 0x42a00:
                    pc=0x42a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42a00() throws ExecutionException { /* 0x42a00 - 0x42c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42a00:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42e94;
                        run_42e00(); return;
                    }
                    r16 = 7 << 16;
                    r16 = r16 + 24080;
                case 0x42a18:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r5 = r0 + 3;
                    r2 = r0 + 3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r5;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x41540;
                    run_41400(); return;
                case 0x42a44:
                    r2 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r2 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x41dd8;
                    run_41c00(); return;
                case 0x42a58:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x41b88;
                    run_41a00(); return;
                case 0x42a6c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x41bec;
                    run_41a00(); return;
                case 0x42a80:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41aa4;
                    run_41a00(); return;
                case 0x42aa0:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41aa4;
                    run_41a00(); return;
                case 0x42ac0:
                    r4 = 7 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r4 + 24448;
                    /* Next insn is delay slot */ 
                    pc=0x417ec;
                    run_41600(); return;
                case 0x42ad4:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42ae8;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42ae8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x421b8;
                    run_42000(); return;
                case 0x42b00:
                    r4 = 7 << 16;
                    r4 = r4 + 19828;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42ea4;
                        run_42e00(); return;
                    }
                    r8 = r8 + 8;
                    r18 = r3 + r0;
                case 0x42b3c:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42b60;
                        continue;
                    }
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42b60;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41850;
                        run_41800(); return;
                    }
                case 0x42b60:
                    r3 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x432e0;
                        run_43200(); return;
                    }
                    r8 = r8 + 8;
                case 0x42b9c:
                    r18 = r0 - r18;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42f30;
                        run_42e00(); return;
                    }
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42f94;
                        run_42e00(); return;
                    }
                    r5 = 7 << 16;
                    r23 = r5 + 24448;
                    r20 = r0 + 16;
                    r30 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x42be0;
                    continue;
                case 0x42bcc:
                    r8 = r8 + 8;
                case 0x42bd0:
                    r18 = r18 + -16;
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42f9c;
                        run_42e00(); return;
                    }
                case 0x42be0:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42bcc;
                        continue;
                    }
                case 0x42c00:
                    pc=0x42c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42c00() throws ExecutionException { /* 0x42c00 - 0x42e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42c00:
                    r4 = r30 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42c18;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42c18:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42bd0;
                    run_42a00(); return;
                case 0x42c34:
                    r9 = r0 + -33;
                    r2 = r0 + -1;
                    r20 = r18 & r9;
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x42ed4;
                        run_42e00(); return;
                    }
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x432cc;
                        run_43200(); return;
                    }
                case 0x42c54:
                    r2 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r23 = r17 | 256;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43314;
                        run_43200(); return;
                    }
                    f0 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r0;
                    f1 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    writePages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff] = f0;
                    writePages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff] = f1;
                case 0x42c7c:
                    r2 = r0 + 102;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43140;
                        run_43000(); return;
                    }
                    r2 = r0 + 70;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43140;
                        run_43000(); return;
                    }
                    r2 = r0 + 69;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4333c;
                        run_43200(); return;
                    }
                    r5 = r30 + r0;
                case 0x42ca4:
                    r2 = r0 + 2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 176;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 172;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r2 = r29 + 156;
                    r7 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    r6 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff] = r5;
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x42ce4;
                    pc=0x57200;
                    run_57200(); return;
                case 0x42ce4:
                    r16 = r2 + r0;
                    r2 = r0 + 103;
                    r5 = readPages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff];
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x42d08;
                        continue;
                    }
                    r2 = r0 + 71;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x42d14;
                        continue;
                    }
                case 0x42d08:
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4346c;
                        run_43400(); return;
                    }
                case 0x42d14:
                    r2 = r0 + 70;
                    r4 = r16 + r5;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4324c;
                        run_43200(); return;
                    }
                case 0x42d24:
                    f0 = r0;
                    f2 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x43120;
                        run_43000(); return;
                    }
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42d80;
                        continue;
                    }
                    r5 = r0 + 48;
                case 0x42d60:
                    r3 = r2 + 1;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42d60;
                        continue;
                    }
                case 0x42d80:
                    r2 = r2 - r16;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r2;
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x430f4;
                        run_43000(); return;
                    }
                    r2 = r18 < 102 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43580;
                        run_43400(); return;
                    }
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = r0 + 102;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x433ac;
                        run_43200(); return;
                    }
                case 0x42db4:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r2 = r4 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43348;
                        run_43200(); return;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43380;
                        run_43200(); return;
                    }
                    r2 = r4 + r0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43564;
                        run_43400(); return;
                    }
                case 0x42de4:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r18 = r0 + 103;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                case 0x42df0:
                    r5 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x430c0;
                        run_43000(); return;
                    }
                case 0x42e00:
                    pc=0x42e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42e00() throws ExecutionException { /* 0x42e00 - 0x43000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42e00:
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41540;
                    run_41400(); return;
                case 0x42e18:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42e2c;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42e2c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42218;
                    run_42200(); return;
                case 0x42e44:
                    r16 = 7 << 16;
                    r16 = r16 + 24068;
                    /* Next insn is delay slot */ 
                    pc=0x41e5c;
                    run_41e00(); return;
                case 0x42e54:
                    r30 = r0 + -1;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41394;
                    run_41200(); return;
                case 0x42e64:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r0 + 64;
                    /* Next insn is delay slot */ 
                    r31=0x42e74;
                    pc=0x39600;
                    run_39600(); return;
                case 0x42e74:
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r2;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4358c;
                        run_43400(); return;
                    }
                    r2 = r0 + 64;
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x41284;
                    run_41200(); return;
                case 0x42e94:
                    r16 = 7 << 16;
                    r16 = r16 + 24076;
                    /* Next insn is delay slot */ 
                    pc=0x42a18;
                    run_42a00(); return;
                case 0x42ea4:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42eb8;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42eb8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r18 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42b3c;
                    run_42a00(); return;
                case 0x42ed4:
                    r30 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x42c54;
                    run_42c00(); return;
                case 0x42ee0:
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x42eec;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x42eec:
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4152c;
                        run_41400(); return;
                    }
                case 0x42efc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4152c;
                    run_41400(); return;
                case 0x42f08:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42f1c;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42f1c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                case 0x42f30:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x4203c;
                    run_42000(); return;
                case 0x42f48:
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x41658;
                    run_41600(); return;
                case 0x42f5c:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42560;
                    run_42400(); return;
                case 0x42f68:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42f7c;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42f7c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42558;
                    run_42400(); return;
                case 0x42f94:
                    r4 = 7 << 16;
                    r23 = r4 + 24448;
                case 0x42f9c:
                    r3 = r3 + 1;
                    r2 = r2 + r18;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42f08;
                        continue;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x42f30;
                    continue;
                case 0x42fcc:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42fe0;
                    pc=0x63600;
                    run_63600(); return;
                case 0x42fe0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4283c;
                    run_42800(); return;
                case 0x42ffc:
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                case 0x43000:
                    pc=0x43000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43000() throws ExecutionException { /* 0x43000 - 0x43200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43000:
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x41908;
                    run_41800(); return;
                case 0x4300c:
                    r3 = (r30&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r2 = r30 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43020;
                        continue;
                    }
                    r2 = r0 + 6;
                case 0x43020:
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43478;
                        run_43400(); return;
                    }
                case 0x4302c:
                    r16 = 7 << 16;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r20;
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    r16 = r16 + 24084;
                    /* Next insn is delay slot */ 
                    pc=0x41558;
                    run_41400(); return;
                case 0x43050:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x43064;
                    pc=0x63600;
                    run_63600(); return;
                case 0x43064:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x427dc;
                    run_42600(); return;
                case 0x4307c:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x43090;
                    pc=0x63600;
                    run_63600(); return;
                case 0x43090:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = r5 - r3;
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42890;
                    run_42800(); return;
                case 0x430b4:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42898;
                    run_42800(); return;
                case 0x430c0:
                    r3 = r0 + 45;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r3 = r0 + 45;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41548;
                    run_41400(); return;
                case 0x430e0:
                    r2 = r0 + 45;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 45;
                    /* Next insn is delay slot */ 
                    pc=0x41e48;
                    run_41e00(); return;
                case 0x430f4:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r3 = r2 < -3 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43190;
                        continue;
                    }
                    r3 = r30 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43190;
                        continue;
                    }
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x42db4;
                    run_42c00(); return;
                case 0x43120:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42d80;
                    run_42c00(); return;
                case 0x4312c:
                    r5 = 7 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r5 + 24448;
                    /* Next insn is delay slot */ 
                    pc=0x4239c;
                    run_42200(); return;
                case 0x43140:
                    r2 = r0 + 3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 176;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 172;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r2 = r29 + 156;
                    r7 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    r6 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r30;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x4317c;
                    pc=0x57200;
                    run_57200(); return;
                case 0x4317c:
                    r16 = r2 + r0;
                    r5 = r30 + r0;
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x42d14;
                    run_42c00(); return;
                case 0x43190:
                    r18 = r18 + -2;
                case 0x43194:
                    r2 = r2 + -1;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r2;
                    addr=r29+164;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43534;
                        run_43400(); return;
                    }
                    r3 = r0 + 43;
                    addr=r29+165;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x431b0:
                    r3 = r2 < 10 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x433d8;
                        run_43200(); return;
                    }
                    r2 = r2 + 48;
                    r3 = r0 + 48;
                    addr=r29+167;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+166;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 168;
                    r4 = r29 + 164;
                case 0x431d4:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = r2 - r4;
                    r3 = r3 + r4;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    r2 = r3 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43220;
                        run_43200(); return;
                    }
                case 0x431f8:
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                case 0x43200:
                    pc=0x43200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43200() throws ExecutionException { /* 0x43200 - 0x43400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43200:
                    r3 = r3 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4323c;
                        continue;
                    }
                case 0x43214:
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x42df0;
                    run_42c00(); return;
                case 0x43220:
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x431f8;
                        run_43000(); return;
                    }
                    r2 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43214;
                        continue;
                    }
                case 0x4323c:
                    r2 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x42df0;
                    run_42c00(); return;
                case 0x4324c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 48;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43270;
                        continue;
                    }
                case 0x4325c:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x42d24;
                    run_42c00(); return;
                case 0x43270:
                    f0 = r0;
                    f2 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4325c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r2 = r2 - r5;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r2;
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x42d24;
                    run_42c00(); return;
                case 0x432ac:
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r30;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r30;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x41540;
                    run_41400(); return;
                case 0x432cc:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42c54;
                        run_42c00(); return;
                    }
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x42c54;
                    run_42c00(); return;
                case 0x432e0:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x432f4;
                    pc=0x63600;
                    run_63600(); return;
                case 0x432f4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41450;
                        run_41400(); return;
                    }
                    r18 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42b9c;
                    run_42a00(); return;
                case 0x43314:
                    r3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    r5 = r0 + 45;
                    writePages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff] = r2;
                    writePages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff] = r4;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x42c7c;
                    run_42c00(); return;
                case 0x4333c:
                    r5 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x42ca4;
                    run_42c00(); return;
                case 0x43348:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x434f4;
                        run_43400(); return;
                    }
                    r2 = r0 + 1;
                case 0x4335c:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4339c;
                        continue;
                    }
                case 0x43374:
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x42df0;
                    run_42c00(); return;
                case 0x43380:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43374;
                        continue;
                    }
                case 0x4339c:
                    r2 = r0 + r0;
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x42df0;
                    run_42c00(); return;
                case 0x433ac:
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x434cc;
                        run_43400(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x434a8;
                        run_43400(); return;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x434a8;
                        run_43400(); return;
                    }
                    r2 = r3 + r0;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x42df0;
                    run_42c00(); return;
                case 0x433d8:
                    r6 = r29 + 163;
                    r3 = r6 + r0;
                    r4 = r0 + 10;
                case 0x433e4:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r4; lo = r2/r4;
                        pc=0x433f0;
                        continue;
                    }
                    hi = r2%r4; lo = r2/r4;
                    throw new ExecutionException("Break");
                case 0x433f0:
                    r3 = r3 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x43400:
                    pc=0x43400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43400() throws ExecutionException { /* 0x43400 - 0x43600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43400:
                    r2 = lo;
                    r5 = r2 < 10 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x433e4;
                        run_43200(); return;
                    }
                    r2 = r2 + 48;
                    r5 = r2 << 24;
                    r4 = r3 + -1;
                    r5 = r5 >> 24;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43570;
                        continue;
                    }
                    r2 = r29 + 166;
                    /* Next insn is delay slot */ 
                    pc=0x43440;
                    continue;
                case 0x4343c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x43440:
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4343c;
                        continue;
                    }
                    r4 = r29 + 164;
                    r2 = r4 - r3;
                    r3 = r29 + 166;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x431d4;
                    run_43000(); return;
                case 0x4346c:
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x42d80;
                    run_42c00(); return;
                case 0x43478:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4302c;
                    run_43000(); return;
                case 0x43484:
                    r5 = 7 << 16;
                    r23 = r5 + 24448;
                    /* Next insn is delay slot */ 
                    pc=0x426f4;
                    run_42600(); return;
                case 0x43494:
                    r4 = 7 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r4 + 24448;
                    /* Next insn is delay slot */ 
                    pc=0x427b4;
                    run_42600(); return;
                case 0x434a8:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r2 = r30 + 1;
                    r2 = r3 + r2;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42df0;
                        run_42c00(); return;
                    }
                case 0x434c0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42df0;
                    run_42c00(); return;
                case 0x434cc:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43548;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43548;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = r0 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x42df0;
                    run_42c00(); return;
                case 0x434f4:
                    r2 = r0 + 2;
                    r2 = r2 - r3;
                    /* Next insn is delay slot */ 
                    pc=0x4335c;
                    run_43200(); return;
                case 0x43504:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r30 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = r3 + 4;
                    r3 = r4 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x41f1c;
                        run_41e00(); return;
                    }
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r2;
                    r30 = r0 + -1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4138c;
                    run_41200(); return;
                case 0x43534:
                    r3 = r0 + 45;
                    r2 = r0 - r2;
                    addr=r29+165;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x431b0;
                    run_43000(); return;
                case 0x43548:
                    r30 = r30 + 2;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r30;
                    r2 = r30 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42df0;
                        run_42c00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x434c0;
                    continue;
                case 0x43564:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42de4;
                    run_42c00(); return;
                case 0x43570:
                    r2 = r29 + 166;
                    r4 = r29 + 164;
                    /* Next insn is delay slot */ 
                    pc=0x431d4;
                    run_43000(); return;
                case 0x43580:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x43194;
                    run_43000(); return;
                case 0x4358c:
                    r3 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x41468;
                    run_41400(); return;
                case 0x43600:
                    pc=0x43600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43600() throws ExecutionException { /* 0x43600 - 0x43800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43600:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -752;
                    writePages[(r29+708)>>>12][((r29+708)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r2 & 8192;
                    writePages[(r29+736)>>>12][((r29+736)>>>2)&0x3ff] = r30;
                    writePages[(r29+720)>>>12][((r29+720)>>>2)&0x3ff] = r20;
                    writePages[(r29+704)>>>12][((r29+704)>>>2)&0x3ff] = r16;
                    writePages[(r29+740)>>>12][((r29+740)>>>2)&0x3ff] = r31;
                    writePages[(r29+732)>>>12][((r29+732)>>>2)&0x3ff] = r23;
                    writePages[(r29+728)>>>12][((r29+728)>>>2)&0x3ff] = r22;
                    writePages[(r29+724)>>>12][((r29+724)>>>2)&0x3ff] = r21;
                    writePages[(r29+716)>>>12][((r29+716)>>>2)&0x3ff] = r19;
                    writePages[(r29+712)>>>12][((r29+712)>>>2)&0x3ff] = r18;
                    writePages[(r29+748)>>>12][((r29+748)>>>2)&0x3ff] = f20;
                    writePages[(r29+744)>>>12][((r29+744)>>>2)&0x3ff] = f21;
                    r30 = r5 + r0;
                    r16 = r6 + r0;
                    r20 = r7 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4366c;
                        continue;
                    }
                    r2 = r2 | 8192;
                    r4 = readPages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff];
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r4 & r2;
                    writePages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff] = r2;
                case 0x4366c:
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r0;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r0;
                    r21 = r0 + r0;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r0;
                case 0x4367c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 1;
                    writePages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43940;
                        run_43800(); return;
                    }
                case 0x43690:
                    r4 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r3 = r4 + r2;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4372c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43708;
                        continue;
                    }
                case 0x436c0:
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r4 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4367c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = r2 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x436c0;
                        continue;
                    }
                case 0x43708:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43718;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x43718:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4367c;
                        continue;
                    }
                    r4 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x436c0;
                    continue;
                case 0x4372c:
                    r3 = r0 + 37;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x438ec;
                        run_43800(); return;
                    }
                    r18 = r0 + r0;
                    r23 = r0 + r0;
                case 0x43740:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 255;
                    r5 = (r2&0xffffffffL) < (121&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4377c;
                        continue;
                    }
                    r5 = 7 << 16;
                    r2 = r2 << 2;
                    r5 = r5 + 24488;
                    r2 = r5 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x4377c:
                    r3 = r4 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + 1;
                    r3 = r3 & 3;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43798;
                        continue;
                    }
                case 0x43794:
                    r18 = r18 | 1;
                case 0x43798:
                    r2 = 4 << 16;
                    r2 = r2 + 1536;
                    r3 = r0 + 10;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                case 0x437b0:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43974;
                        run_43800(); return;
                    }
                case 0x437c0:
                    r2 = r18 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43894;
                        run_43800(); return;
                    }
                case 0x437cc:
                    r2 = r0 + 2;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43ab8;
                        run_43a00(); return;
                    }
                    r2 = r19 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x439f0;
                        run_43800(); return;
                    }
                    r2 = r0 + 3;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43bec;
                        run_43a00(); return;
                    }
                    r2 = r0 + 4;
                    if(r19 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43b58;
                        run_43a00(); return;
                    }
                    r2 = r23 + -1;
                case 0x43800:
                    pc=0x43800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43800() throws ExecutionException { /* 0x43800 - 0x43a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43800:
                    r2 = (r2&0xffffffffL) < (349&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44308;
                        run_44200(); return;
                    }
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r0;
                case 0x43810:
                    r10 = r29 + 24;
                    r19 = r18 | 1920;
                    r3 = r0 + r0;
                    r18 = r0 + r0;
                    writePages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff] = r0;
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r0;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r0;
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r0;
                    r22 = r10 + r0;
                    r11 = r0 + -1921;
                case 0x43838:
                    r6 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r5 + -43;
                    r2 = r2 & 255;
                    r7 = (r2&0xffffffffL) < (79&0xffffffffL) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43cb4;
                        run_43c00(); return;
                    }
                    r4 = 7 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + 24972;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x4387c:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4388c;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x4388c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4398c;
                        continue;
                    }
                case 0x43894:
                    r4 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x438ac;
                    continue;
                case 0x438a4:
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                case 0x438ac:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r4 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x437cc;
                        run_43600(); return;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x438a4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4387c;
                    continue;
                case 0x438ec:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4495c;
                        run_44800(); return;
                    }
                case 0x438fc:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x43940;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r21 = r21 + 1;
                    writePages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff] = r2;
                    r16 = r16 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43690;
                        run_43600(); return;
                    }
                case 0x43940:
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x439b4;
                    continue;
                case 0x4394c:
                    r18 = r18 | 1;
                case 0x43950:
                    r2 = 4 << 16;
                    r2 = r2 + 3072;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r0 + 8;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x437c0;
                        run_43600(); return;
                    }
                case 0x43974:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43984;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x43984:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x437c0;
                        run_43600(); return;
                    }
                case 0x4398c:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x439b0;
                        continue;
                    }
                    addr=r30+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43940;
                        continue;
                    }
                case 0x439b0:
                    r2 = r0 + -1;
                case 0x439b4:
                    f20 = readPages[(r29+748)>>>12][((r29+748)>>>2)&0x3ff];
                    r31 = readPages[(r29+740)>>>12][((r29+740)>>>2)&0x3ff];
                    r30 = readPages[(r29+736)>>>12][((r29+736)>>>2)&0x3ff];
                    r23 = readPages[(r29+732)>>>12][((r29+732)>>>2)&0x3ff];
                    r22 = readPages[(r29+728)>>>12][((r29+728)>>>2)&0x3ff];
                    r21 = readPages[(r29+724)>>>12][((r29+724)>>>2)&0x3ff];
                    r20 = readPages[(r29+720)>>>12][((r29+720)>>>2)&0x3ff];
                    r19 = readPages[(r29+716)>>>12][((r29+716)>>>2)&0x3ff];
                    r18 = readPages[(r29+712)>>>12][((r29+712)>>>2)&0x3ff];
                    r17 = readPages[(r29+708)>>>12][((r29+708)>>>2)&0x3ff];
                    r16 = readPages[(r29+704)>>>12][((r29+704)>>>2)&0x3ff];
                    f21 = readPages[(r29+744)>>>12][((r29+744)>>>2)&0x3ff];
                    r29 = r29 + 752;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x439f0:
                    r2 = r0 + 1;
                    if(r19 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43b58;
                        run_43a00(); return;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43a08;
                        run_43a00(); return;
                    }
                case 0x43a00:
                    pc=0x43a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43a00() throws ExecutionException { /* 0x43a00 - 0x43c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43a00:
                    r23 = r0 + -1;
                case 0x43a08:
                    r18 = r18 & 16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44248;
                        run_44200(); return;
                    }
                    r10 = r29 + 24;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r0 + r0;
                    r19 = r10 + r0;
                case 0x43a24:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r19 + r3;
                    addr=r3+352;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43aa4;
                        continue;
                    }
                case 0x43a40:
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    r18 = r18 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r23 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x43aac;
                        continue;
                    }
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43a24;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43a78;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x43a78:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43aac;
                        continue;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r19 + r3;
                    addr=r3+352;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43a40;
                        continue;
                    }
                case 0x43aa4:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43940;
                        run_43800(); return;
                    }
                case 0x43aac:
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x4367c;
                    run_43600(); return;
                case 0x43ab8:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ac4;
                        continue;
                    }
                    r23 = r0 + -1;
                case 0x43ac4:
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4455c;
                        run_44400(); return;
                    }
                    r18 = r18 & 16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x445fc;
                        run_44400(); return;
                    }
                    r4 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r0 + r0;
                case 0x43ae8:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r4 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43aac;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    r18 = r18 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r23 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x43aac;
                        continue;
                    }
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ae8;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43b40;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x43b40:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43aac;
                        continue;
                    }
                    r4 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x43ae8;
                    continue;
                case 0x43b58:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43b64;
                        continue;
                    }
                    r23 = r0 + 1;
                case 0x43b64:
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4444c;
                        run_44400(); return;
                    }
                    r18 = r18 & 16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44918;
                        run_44800(); return;
                    }
                    r18 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43bb4;
                    continue;
                case 0x43b88:
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r18 + r2;
                    r23 = r23 - r2;
                    r2 = r3 + r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43bac;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x43bac:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44904;
                        run_44800(); return;
                    }
                case 0x43bb4:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r2 < r23 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43b88;
                        continue;
                    }
                    r2 = r2 - r23;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r18 + r23;
                    r8 = r2 + r23;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r8;
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x4367c;
                    run_43600(); return;
                case 0x43bec:
                    r2 = r23 + -1;
                    r2 = (r2&0xffffffffL) < (349&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44238;
                        run_44200(); return;
                    }
                    r6 = r0 + r0;
                case 0x43c00:
                    pc=0x43c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43c00() throws ExecutionException { /* 0x43c00 - 0x43e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43c00:
                    r10 = r29 + 24;
                    r4 = 7 << 16;
                    r11 = r20 + r0;
                    r20 = r16 + r0;
                    r16 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    r18 = r18 | 3456;
                    r8 = r0 + r0;
                    r19 = r10 + r0;
                    r7 = r0 + 512;
                    r22 = r4 + 25600;
                case 0x43c28:
                    r5 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r3 + -43;
                    r2 = r2 & 255;
                    r9 = (r2&0xffffffffL) < (78&0xffffffffL) ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x440cc;
                        run_44000(); return;
                    }
                    r4 = 7 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + 25288;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x43c6c:
                    r2 = r3 + r18;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43cb4;
                        continue;
                    }
                    r2 = r0 + -385;
                    r19 = r19 & r2;
                case 0x43c80:
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r22 = r22 + 1;
                case 0x43c88:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r23 = r23 + -1;
                    r2 = r2 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43eb4;
                        run_43e00(); return;
                    }
                case 0x43ca4:
                    r6 = r6 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r6;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43838;
                        run_43800(); return;
                    }
                case 0x43cb4:
                    r4 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ef4;
                        run_43e00(); return;
                    }
                case 0x43cc4:
                    r2 = r3 + -1;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44b60;
                        run_44a00(); return;
                    }
                    r2 = r18 + -1;
                    r2 = (r2&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43d5c;
                        continue;
                    }
                    r2 = r18 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44ae0;
                        run_44a00(); return;
                    }
                    r2 = r0 + 3;
                    r7 = r18 & 255;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43d5c;
                        continue;
                    }
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r16;
                    r23 = r22 + r0;
                    r16 = r7 + r0;
                    r18 = r10 + r0;
                case 0x43d10:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43d28;
                    pc=0x64c00;
                    run_64c00(); return;
                case 0x43d28:
                    r3 = r16 + -1;
                    r2 = r23 + r21;
                    r16 = r3 & 255;
                    r4 = r2 - r22;
                    r2 = r16 << 24;
                    r2 = r2 >> 24;
                    r2 = r2 < 4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43d10;
                        continue;
                    }
                    r16 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                    r10 = r18 + r0;
                    r21 = r4 + r0;
                    r22 = r23 + r0;
                case 0x43d5c:
                    r2 = r19 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43de4;
                        continue;
                    }
                    r2 = r19 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44b20;
                        run_44a00(); return;
                    }
                    addr=r22+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r2 = r0 + 101;
                    r23 = r22 + -1;
                    r7 = r21 + -1;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43dbc;
                        continue;
                    }
                    r2 = r0 + 69;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43dbc;
                        continue;
                    }
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x43dac;
                    pc=0x64c00;
                    run_64c00(); return;
                case 0x43dac:
                    addr=r22+-2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r23 = r22 + -2;
                    r7 = r21 + -2;
                case 0x43dbc:
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff] = r7;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x43dd4;
                    pc=0x64c00;
                    run_64c00(); return;
                case 0x43dd4:
                    r7 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r21 = r7 + r0;
                    r22 = r23 + r0;
                case 0x43de4:
                    r2 = r19 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4367c;
                        run_43600(); return;
                    }
                    r4 = r19 & 1536;
                    r2 = r0 + 1024;
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4497c;
                        run_44800(); return;
                    }
                case 0x43e00:
                    pc=0x43e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43e00() throws ExecutionException { /* 0x43e00 - 0x44000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43e00:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44854;
                        run_44800(); return;
                    }
                case 0x43e14:
                    r4 = r17 + r0;
                    r5 = r10 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43e28;
                    pc=0x61600;
                    run_61600(); return;
                case 0x43e28:
                    r2 = r19 & 1;
                    f20 = f0;
                    f21 = f1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44744;
                        run_44600(); return;
                    }
                case 0x43e38:
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f20;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f21;
                case 0x43e48:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4367c;
                    run_43600(); return;
                case 0x43e60:
                    r2 = r19 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43c6c;
                        run_43c00(); return;
                    }
                    r2 = r0 + -129;
                    r5 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r19 = r19 & r2;
                    r2 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                    r5 = r5 + 1;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43c88;
                        run_43c00(); return;
                    }
                    r2 = r2 + -1;
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r23 = r23 + 1;
                    r2 = r2 + -1;
                    r23 = r23 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ca4;
                        run_43c00(); return;
                    }
                case 0x43eb4:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff] = r3;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    writePages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff] = r11;
                    /* Next insn is delay slot */ 
                    r31=0x43ed0;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x43ed0:
                    r3 = readPages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r11 = readPages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43cb4;
                        run_43c00(); return;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43838;
                        run_43800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x43cb4;
                    run_43c00(); return;
                case 0x43ef4:
                    r2 = r0 + -257;
                    r19 = r19 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x43cc4;
                    run_43c00(); return;
                case 0x43f04:
                    r2 = r19 & 512;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43cb4;
                        run_43c00(); return;
                    }
                    r2 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r4 = r0 + -641;
                    r19 = r19 & r4;
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x43c80;
                    run_43c00(); return;
                case 0x43f28:
                    r2 = r19 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43cb4;
                        run_43c00(); return;
                    }
                    r2 = r0 + -129;
                    r19 = r19 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x43c80;
                    run_43c00(); return;
                case 0x43f44:
                    r2 = r0 + 7;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43cb4;
                        run_43c00(); return;
                    }
                    r18 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x43c80;
                    run_43c00(); return;
                case 0x43f5c:
                    r2 = r0 + 6;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43cb4;
                        run_43c00(); return;
                    }
                    r18 = r0 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x43c80;
                    run_43c00(); return;
                case 0x43f74:
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x446ac;
                        run_44600(); return;
                    }
                    r4 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44790;
                        run_44600(); return;
                    }
                case 0x43f8c:
                    r2 = r0 + 1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43fa4;
                        continue;
                    }
                    r2 = r0 + 4;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43cb4;
                        run_43c00(); return;
                    }
                case 0x43fa4:
                    r18 = r18 + 1;
                    r18 = r18 << 24;
                    r18 = r18 >> 24;
                    /* Next insn is delay slot */ 
                    pc=0x43c80;
                    run_43c00(); return;
                case 0x43fb8:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x446c4;
                        run_44600(); return;
                    }
                    r2 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ef4;
                        continue;
                    }
                    r4 = r19 & 1792;
                    r2 = r0 + 1792;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43cc4;
                        run_43c00(); return;
                    }
                    r19 = r19 & r11;
                    r18 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x43c80;
                    run_43c00(); return;
                case 0x43ff0:
                    r2 = r0 + 2;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43cb4;
                        run_43c00(); return;
                    }
                    r18 = r0 + 3;
                case 0x44000:
                    pc=0x44000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44000() throws ExecutionException { /* 0x44000 - 0x44200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44000:
                    /* Next insn is delay slot */ 
                    pc=0x43c80;
                    run_43c00(); return;
                case 0x44008:
                    r2 = r19 & 1280;
                    r4 = r0 + 1024;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x44034;
                        continue;
                    }
                    r2 = r19 & 1024;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43cb4;
                        run_43c00(); return;
                    }
                    r2 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43cc4;
                        run_43c00(); return;
                    }
                case 0x44034:
                    r2 = r19 & 512;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44054;
                        continue;
                    }
                    r4 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r2 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    writePages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff] = r22;
                    r4 = r4 - r2;
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r4;
                case 0x44054:
                    r19 = r19 & r11;
                    r19 = r19 | 384;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x43c80;
                    run_43c00(); return;
                case 0x44068:
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43cb4;
                        run_43c00(); return;
                    }
                    r3 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x43c80;
                    run_43c00(); return;
                case 0x44080:
                    r2 = r18 & 1536;
                    if(r2 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x440cc;
                        continue;
                    }
                    r2 = r0 + -513;
                    r18 = r18 & r2;
                    r18 = r18 | 1280;
                    r16 = r0 + 16;
                case 0x4409c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -1;
                    r19 = r19 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x441c4;
                        continue;
                    }
                case 0x440b8:
                    r5 = r5 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r5;
                case 0x440c0:
                    r23 = r23 + -1;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43c28;
                        run_43c00(); return;
                    }
                case 0x440cc:
                    r2 = r18 & 256;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r16;
                    r16 = r20 + r0;
                    r20 = r11 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x440f8;
                        continue;
                    }
                    r2 = ((r10 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44820;
                        run_44800(); return;
                    }
                case 0x440f0:
                    if(r10 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x43940;
                        run_43800(); return;
                    }
                case 0x440f8:
                    r2 = r18 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x446e4;
                        run_44600(); return;
                    }
                case 0x44104:
                    r10 = r19 - r10;
                    r23 = r10 + r8;
                    r21 = r21 + r23;
                    /* Next insn is delay slot */ 
                    pc=0x4367c;
                    run_43600(); return;
                case 0x44118:
                    r2 = r16 < 11 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x440cc;
                        continue;
                    }
                    r2 = r0 + -2945;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x4409c;
                    continue;
                case 0x44134:
                    r2 = r18 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x440cc;
                        continue;
                    }
                    r2 = r0 + -129;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x4409c;
                    continue;
                case 0x44150:
                    r2 = r16 << 1;
                    r2 = r2 + r22;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r16 = tmp;
                    r2 = r0 + -2945;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x4409c;
                    continue;
                case 0x4416c:
                    r2 = r18 & 2048;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4409c;
                        continue;
                    }
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44188;
                        continue;
                    }
                    r18 = r18 | 512;
                    r16 = r0 + 8;
                case 0x44188:
                    r2 = r18 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44780;
                        run_44600(); return;
                    }
                    r2 = r0 + -897;
                    r18 = r18 & r2;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x441ac;
                        continue;
                    }
                    r6 = r6 + -1;
                    r23 = r23 + 1;
                case 0x441ac:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    r2 = r2 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x440b8;
                        continue;
                    }
                case 0x441c4:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff] = r6;
                    writePages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff] = r7;
                    writePages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff] = r8;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    writePages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff] = r11;
                    /* Next insn is delay slot */ 
                    r31=0x441e8;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x441e8:
                    r6 = readPages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff];
                    r7 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    r8 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r11 = readPages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x440c0;
                        continue;
                    }
                case 0x44200:
                    pc=0x44200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44200() throws ExecutionException { /* 0x44200 - 0x44400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44200:
                    /* Next insn is delay slot */ 
                    pc=0x440cc;
                    run_44000(); return;
                case 0x4420c:
                    r2 = r16 << 1;
                    r2 = r2 + r22;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r16 = tmp;
                    r2 = r16 < 9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x440cc;
                        run_44000(); return;
                    }
                    r2 = r0 + -2945;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x4409c;
                    run_44000(); return;
                case 0x44238:
                    r6 = r23 + -349;
                    r23 = r0 + 349;
                    /* Next insn is delay slot */ 
                    pc=0x43c00;
                    run_43c00(); return;
                case 0x44248:
                    r18 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r10 = r29 + 24;
                    r19 = r20 + 4;
                    r22 = r10 + r0;
                    r20 = r18 + r0;
                case 0x4425c:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r22 + r3;
                    addr=r3+352;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x442dc;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r20 = r20 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    r3 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r23 + -1;
                    addr=r20+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x442dc;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4425c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x442cc;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x442cc:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4425c;
                        continue;
                    }
                    if(r18 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x4398c;
                        run_43800(); return;
                    }
                case 0x442dc:
                    r18 = r20 - r18;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43940;
                        run_43800(); return;
                    }
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    r20 = r19 + r0;
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x4367c;
                    run_43600(); return;
                case 0x44308:
                    r23 = r23 + -349;
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r23;
                    r23 = r0 + 349;
                    /* Next insn is delay slot */ 
                    pc=0x43810;
                    run_43800(); return;
                case 0x4431c:
                    r2 = 4 << 16;
                    r2 = r2 + 1536;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r0;
                    r19 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x437b0;
                    run_43600(); return;
                case 0x44338:
                    r18 = r18 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x43740;
                    run_43600(); return;
                case 0x44344:
                    r18 = r18 | 4;
                    /* Next insn is delay slot */ 
                    pc=0x43740;
                    run_43600(); return;
                case 0x44350:
                    r18 = r18 | 64;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x437b0;
                    run_43600(); return;
                case 0x44360:
                    r5 = r16 + r0;
                    r4 = r29 + 376;
                    /* Next insn is delay slot */ 
                    r31=0x44370;
                    pc=0x5f000;
                    run_5f000(); return;
                case 0x44370:
                    r16 = r2 + r0;
                    r18 = r18 | 64;
                    r19 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x437b0;
                    run_43600(); return;
                case 0x44384:
                    r18 = r18 | 512;
                case 0x44388:
                    r2 = 4 << 16;
                    r2 = r2 + 3072;
                    r3 = r0 + 16;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x437b0;
                    run_43600(); return;
                case 0x443a8:
                    r18 = r18 | 2;
                    /* Next insn is delay slot */ 
                    pc=0x43740;
                    run_43600(); return;
                case 0x443b4:
                    r19 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x437b0;
                    run_43600(); return;
                case 0x443c0:
                    r2 = r23 << 1;
                    r23 = r23 << 3;
                    r2 = r2 + r23;
                    r3 = r3 + -48;
                    r23 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x43740;
                    run_43600(); return;
                case 0x443dc:
                    r18 = r18 | 16;
                    /* Next insn is delay slot */ 
                    pc=0x43740;
                    run_43600(); return;
                case 0x443e8:
                    r2 = 4 << 16;
                    r2 = r2 + 3072;
                    r3 = r0 + 10;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                case 0x44400:
                    pc=0x44400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44400() throws ExecutionException { /* 0x44400 - 0x44600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44400:
                    /* Next insn is delay slot */ 
                    pc=0x437b0;
                    run_43600(); return;
                case 0x44408:
                    r19 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x437b0;
                    run_43600(); return;
                case 0x44414:
                    r18 = r18 | 544;
                    /* Next insn is delay slot */ 
                    pc=0x44388;
                    run_44200(); return;
                case 0x44420:
                    r2 = r18 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4367c;
                        run_43600(); return;
                    }
                    r2 = r18 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x449a0;
                        run_44800(); return;
                    }
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r21&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x4367c;
                    run_43600(); return;
                case 0x4444c:
                    r3 = r29 + 632;
                    r4 = r3 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r18 = r18 & 16;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x4446c;
                    pc=0x48bec;
                    run_48a00(); return;
                case 0x4446c:
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r18;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x447e4;
                        run_44600(); return;
                    }
                    r18 = r0 + r0;
                case 0x4447c:
                    r22 = r0 + r0;
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r16;
                    r19 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    r16 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r20;
                    r20 = r22 + r0;
                case 0x44494:
                    /* Next insn is delay slot */ 
                    r31=0x4449c;
                    pc=0x5b000;
                    run_5b000(); return;
                case 0x4449c:
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x4398c;
                        run_43800(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r4 = r29 + 24;
                    r3 = r4 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r22 = r20 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r5 = r18 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r4 = r17 + r0;
                    r6 = r29 + 24;
                    r7 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x444ec;
                    pc=0x5bc00;
                    run_5bc00(); return;
                case 0x444ec:
                    r5 = r0 + -1;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4398c;
                        run_43800(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x448e0;
                        run_44800(); return;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4450c;
                        continue;
                    }
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r0;
                case 0x4450c:
                    r21 = r21 + r22;
                    r23 = r23 + -1;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x448f8;
                        run_44800(); return;
                    }
                    r18 = r18 + 4;
                    r20 = r0 + r0;
                case 0x44524:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x447b0;
                        run_44600(); return;
                    }
                case 0x44534:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44494;
                        continue;
                    }
                    r16 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r20 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                case 0x44544:
                    r3 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43e48;
                        run_43e00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4367c;
                    run_43600(); return;
                case 0x4455c:
                    r3 = r29 + 632;
                    r4 = r3 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r18 = r18 & 16;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x4457c;
                    pc=0x48bec;
                    run_48a00(); return;
                case 0x4457c:
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r18;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x447f4;
                        run_44600(); return;
                    }
                    r19 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                case 0x44590:
                    r6 = r0 + r0;
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r16;
                    r22 = r0 + -2;
                    r16 = r6 + r0;
                case 0x445a0:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r3 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x445d0;
                        continue;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x449b4;
                        run_44800(); return;
                    }
                case 0x445d0:
                    r16 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                case 0x445d4:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4367c;
                        run_43600(); return;
                    }
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4367c;
                    run_43600(); return;
                case 0x445fc:
                    r19 = r20 + 4;
                case 0x44600:
                    pc=0x44600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44600() throws ExecutionException { /* 0x44600 - 0x44800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44600:
                    r20 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r18 = r20 + r0;
                case 0x4460c:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r5 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44688;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r18 = r18 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    r3 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r23 + -1;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44688;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4460c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x44680;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x44680:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4460c;
                        continue;
                    }
                case 0x44688:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    r18 = r18 - r20;
                    r21 = r21 + r18;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    r20 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4367c;
                    run_43600(); return;
                case 0x446ac:
                    r2 = r0 + 2;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43f8c;
                        run_43e00(); return;
                    }
                    r3 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x43c80;
                    run_43c00(); return;
                case 0x446c4:
                    r2 = r0 + 3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43fa4;
                        run_43e00(); return;
                    }
                    r2 = r0 + 5;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43fa4;
                        run_43e00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x43cb4;
                    run_43c00(); return;
                case 0x446e4:
                    r3 = readPages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff];
                    r7 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r10 + r0;
                    writePages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff] = r8;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x4470c;
                    return;
                case 0x4470c:
                    r3 = r18 & 32;
                    r8 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44800;
                        run_44800(); return;
                    }
                case 0x44720:
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x4472c:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x44104;
                    run_44000(); return;
                case 0x44744:
                    r9 = r19 & 2;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43e38;
                        run_43e00(); return;
                    }
                    f12 = f0;
                    f13 = f1;
                    r18 = r20 + 4;
                    r19 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x44764;
                    pc=0x5ee00;
                    run_5ee00(); return;
                case 0x44764:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44a78;
                        run_44a00(); return;
                    }
                    f20=Float.floatToRawIntBits((float)(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL))));
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = f20;
                    r20 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43e48;
                    run_43e00(); return;
                case 0x44780:
                    r2 = r0 + -1409;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x4409c;
                    run_44000(); return;
                case 0x44790:
                    r4 = r19 & 1792;
                    r2 = r0 + 1792;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43f8c;
                        run_43e00(); return;
                    }
                    r19 = r19 & r11;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x43c80;
                    run_43c00(); return;
                case 0x447b0:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x447c0;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x447c0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44534;
                        run_44400(); return;
                    }
                    r22 = r20 + r0;
                    r16 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r20 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44544;
                        run_44400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4398c;
                    run_43800(); return;
                case 0x447e4:
                    r18 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x4447c;
                    run_44400(); return;
                case 0x447f4:
                    r19 = r29 + 640;
                    /* Next insn is delay slot */ 
                    pc=0x44590;
                    run_44400(); return;
                case 0x44800:
                    pc=0x44800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44800() throws ExecutionException { /* 0x44800 - 0x44a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44800:
                    r3 = r18 & 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44720;
                        run_44600(); return;
                    }
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x4472c;
                    run_44600(); return;
                case 0x44820:
                    addr=r19+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r22 = r19 + -1;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff] = r8;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x44844;
                    pc=0x64c00;
                    run_64c00(); return;
                case 0x44844:
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r8 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x440f0;
                    run_44000(); return;
                case 0x44854:
                    r3 = readPages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r5 = r3 + 1;
                    r4 = r17 + r0;
                    r7 = r0 + 10;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x44874;
                    pc=0x40600;
                    run_40600(); return;
                case 0x44874:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r22 = readPages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r6 = r2 - r3;
                case 0x44884:
                    r2 = r29 + 363;
                    r2 = ((r22 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44898;
                        continue;
                    }
                    r22 = r29 + 362;
                case 0x44898:
                    r2 = 7 << 16;
                    r4 = r22 + r0;
                    r5 = r2 + 24480;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x448b0;
                    pc=0x3d200;
                    run_3d200(); return;
                case 0x448b0:
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r10 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x448c8;
                    pc=0x61600;
                    run_61600(); return;
                case 0x448c8:
                    r2 = r19 & 1;
                    f20 = f0;
                    f21 = f1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44744;
                        run_44600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x43e38;
                    run_43e00(); return;
                case 0x448e0:
                    r3 = r0 + -2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4450c;
                        run_44400(); return;
                    }
                    r20 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x44524;
                    run_44400(); return;
                case 0x448f8:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x44524;
                    run_44400(); return;
                case 0x44904:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4398c;
                        run_43800(); return;
                    }
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x4367c;
                    run_43600(); return;
                case 0x44918:
                    r5 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r6 = r0 + 1;
                    r7 = r23 + r0;
                    r18 = r20 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x44938;
                    pc=0x65000;
                    run_65000(); return;
                case 0x44938:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4398c;
                        run_43800(); return;
                    }
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    r21 = r2 + r21;
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    r20 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4367c;
                    run_43600(); return;
                case 0x4495c:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4496c;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x4496c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x438fc;
                        run_43800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4398c;
                    run_43800(); return;
                case 0x4497c:
                    r3 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r4 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    r18 = r3 - r4;
                    r6 = r0 - r18;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44884;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x43e14;
                    run_43e00(); return;
                case 0x449a0:
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r21;
                    /* Next insn is delay slot */ 
                    pc=0x4367c;
                    run_43600(); return;
                case 0x449b4:
                    /* Next insn is delay slot */ 
                    r31=0x449bc;
                    pc=0x5b000;
                    run_5b000(); return;
                case 0x449bc:
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x4398c;
                        run_43800(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r4 = r29 + 24;
                    r18 = r16 + 1;
                    r16 = r4 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r5 = r19 + r0;
                case 0x44a00:
                    pc=0x44a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44a00() throws ExecutionException { /* 0x44a00 - 0x44c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44a00:
                    r6 = r29 + 24;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x44a10;
                    pc=0x5bc00;
                    run_5bc00(); return;
                case 0x44a10:
                    r4 = r0 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4398c;
                        run_43800(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44a94;
                        continue;
                    }
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    r4 = r0 + r0;
                case 0x44a2c:
                    /* Next insn is delay slot */ 
                    r31=0x44a34;
                    pc=0x5a400;
                    run_5a400(); return;
                case 0x44a34:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44ba0;
                        continue;
                    }
                    r16 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x445d4;
                        run_44400(); return;
                    }
                case 0x44a48:
                    r18 = r18 + -1;
                    r5 = r29 + 24;
                    r2 = r5 + r18;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x44a68;
                    pc=0x64c00;
                    run_64c00(); return;
                case 0x44a68:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44a48;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x445d4;
                    run_44400(); return;
                case 0x44a78:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x44a84;
                    pc=0x5f200;
                    run_5f200(); return;
                case 0x44a84:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = f0;
                    r20 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43e48;
                    run_43e00(); return;
                case 0x44a94:
                    if(r2 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x44bc4;
                        continue;
                    }
                    r16 = r18 + r0;
                case 0x44aa0:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x445a0;
                        run_44400(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x44ac0;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x44ac0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x445a0;
                        run_44400(); return;
                    }
                    r6 = r16 + r0;
                    r16 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4398c;
                        run_43800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x445d4;
                    run_44400(); return;
                case 0x44ae0:
                    r2 = ((r10 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    r16 = r10 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43940;
                        run_43800(); return;
                    }
                case 0x44af4:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x44b0c;
                    pc=0x64c00;
                    run_64c00(); return;
                case 0x44b0c:
                    if(r23 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x44af4;
                        continue;
                    }
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x439b4;
                    run_43800(); return;
                case 0x44b20:
                    r2 = ((r10 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43940;
                        run_43800(); return;
                    }
                    r16 = r10 + r0;
                case 0x44b34:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x44b4c;
                    pc=0x64c00;
                    run_64c00(); return;
                case 0x44b4c:
                    if(r23 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x44b34;
                        continue;
                    }
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x439b4;
                    run_43800(); return;
                case 0x44b60:
                    r2 = ((r10 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43940;
                        run_43800(); return;
                    }
                    r16 = r10 + r0;
                case 0x44b74:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x44b8c;
                    pc=0x64c00;
                    run_64c00(); return;
                case 0x44b8c:
                    if(r23 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x44b74;
                        continue;
                    }
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x439b4;
                    run_43800(); return;
                case 0x44ba0:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r21 = r21 + r18;
                    r23 = r23 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44bd0;
                        continue;
                    }
                    r19 = r19 + 4;
                    r16 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x44aa0;
                    continue;
                case 0x44bc4:
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x44a2c;
                    continue;
                case 0x44bd0:
                    r16 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x44aa0;
                    continue;
                case 0x44c00:
                    pc=0x44c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44c00() throws ExecutionException { /* 0x44c00 - 0x44e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44c00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = r29 + 16;
                    r6 = r0 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x44c24;
                    pc=0x486b0;
                    run_48600(); return;
                case 0x44c24:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44c50;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44c3c;
                        continue;
                    }
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x44c3c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44c50:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x44c3c;
                    continue;
                case 0x44e00:
                    pc=0x44e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44e00() throws ExecutionException { /* 0x44e00 - 0x45000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44e00:
                    r2 = readPages[(r28+-32332)>>>12][((r28+-32332)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44e20;
                        continue;
                    }
                    r2 = 7 << 16;
                    r2 = r2 + 25988;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44e20:
                    r2 = 17 << 16;
                    r2 = r2 + 32536;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45000:
                    pc=0x45000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45000() throws ExecutionException { /* 0x45000 - 0x45200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45000:
                    r29 = r29 + -40;
                    r2 = r0 + 63;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = 17 << 16;
                    r2 = r2 + 32536;
                    r6 = readPages[(r28+-32336)>>>12][((r28+-32336)>>>2)&0x3ff];
                    r7 = 7 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r5 = r28 + -32332;
                    r7 = r7 + 25636;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x45038;
                    pc=0x5a800;
                    run_5a800(); return;
                case 0x45038:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45200:
                    pc=0x45200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45200() throws ExecutionException { /* 0x45200 - 0x45400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45200:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45400:
                    pc=0x45400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45400() throws ExecutionException { /* 0x45400 - 0x45600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45400:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45600:
                    pc=0x45600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45600() throws ExecutionException { /* 0x45600 - 0x45800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45600:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45800:
                    pc=0x45800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45800() throws ExecutionException { /* 0x45800 - 0x45a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45800:
                    r29 = r29 + -1328;
                    writePages[(r29+1324)>>>12][((r29+1324)>>>2)&0x3ff] = r31;
                    writePages[(r29+1312)>>>12][((r29+1312)>>>2)&0x3ff] = r22;
                    writePages[(r29+1308)>>>12][((r29+1308)>>>2)&0x3ff] = r21;
                    r22 = r5 + r0;
                    r21 = r4 + r0;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r6;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r7;
                    writePages[(r29+1320)>>>12][((r29+1320)>>>2)&0x3ff] = r30;
                    writePages[(r29+1316)>>>12][((r29+1316)>>>2)&0x3ff] = r23;
                    writePages[(r29+1304)>>>12][((r29+1304)>>>2)&0x3ff] = r20;
                    writePages[(r29+1300)>>>12][((r29+1300)>>>2)&0x3ff] = r19;
                    writePages[(r29+1296)>>>12][((r29+1296)>>>2)&0x3ff] = r18;
                    writePages[(r29+1292)>>>12][((r29+1292)>>>2)&0x3ff] = r17;
                    writePages[(r29+1288)>>>12][((r29+1288)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x45844;
                    pc=0x5b600;
                    run_5b600(); return;
                case 0x45844:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4585c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4585c:
                    writePages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff] = r2;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45878;
                        continue;
                    }
                    r2 = readPages[(r21+56)>>>12][((r21+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bec;
                        run_45a00(); return;
                    }
                case 0x45878:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x458ac;
                        continue;
                    }
                    r4 = readPages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff] = r2;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x458ac:
                    r4 = r2 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45a58;
                        run_45a00(); return;
                    }
                    r4 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45a58;
                        run_45a00(); return;
                    }
                    r2 = r2 & 26;
                    r4 = r0 + 10;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x45a88;
                        run_45a00(); return;
                    }
                case 0x458d8:
                    r3 = r29 + 40;
                    r2 = 7 << 16;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r3;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r0;
                    writePages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff] = r0;
                    writePages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff] = r0;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r0;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r0;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r0;
                    r8 = r3 + r0;
                    r19 = r2 + 26616;
                case 0x4590c:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x460a4;
                        run_46000(); return;
                    }
                case 0x45924:
                    r3 = r0 + 37;
                    r16 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x45944;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x459b0;
                    continue;
                case 0x4593c:
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x45958;
                        continue;
                    }
                case 0x45944:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4593c;
                        continue;
                    }
                case 0x45958:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r17 = r16 - r3;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x459b0;
                        continue;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r2 = r2 + r17;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45b80;
                        run_45a00(); return;
                    }
                    r8 = r8 + 8;
                case 0x459a0:
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r3 = r3 + r17;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r3;
                case 0x459b0:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45ba8;
                        run_45a00(); return;
                    }
                    r16 = r16 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r30 = r0 + -1;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r0;
                    r17 = r0 + r0;
                    r6 = r0 + 42;
                    r7 = r0 + r0;
                case 0x459e0:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r3 = r16 + 1;
                case 0x459e8:
                    r2 = r18 + -32;
                    r4 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46610;
                        run_46600(); return;
                    }
                    r4 = 7 << 16;
                    r2 = r2 << 2;
                case 0x45a00:
                    pc=0x45a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45a00() throws ExecutionException { /* 0x45a00 - 0x45c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45a00:
                    r4 = r4 + 26244;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x45a18:
                    r17 = r17 | 16;
                case 0x45a1c:
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x459e0;
                    run_45800(); return;
                case 0x45a28:
                    r4 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r7 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46600;
                        run_46600(); return;
                    }
                    r7 = r0 - r7;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                case 0x45a48:
                    r17 = r17 | 4;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x459e0;
                    run_45800(); return;
                case 0x45a58:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45a68;
                    pc=0x48200;
                    run_48200(); return;
                case 0x45a68:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45b48;
                        continue;
                    }
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 10;
                    r2 = r3 & 65535;
                    r2 = r2 & 26;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x458d8;
                        run_45800(); return;
                    }
                case 0x45a88:
                    addr=r22+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x458d8;
                        run_45800(); return;
                    }
                    addr=r29+1078;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r22+36)>>>12][((r22+36)>>>2)&0x3ff];
                    r3 = r3 & r4;
                    addr=r29+1076;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff];
                    r2 = r29 + 40;
                    r6 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r7 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r2;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    r2 = r0 + 1024;
                    r5 = r29 + 1064;
                    writePages[(r29+1164)>>>12][((r29+1164)>>>2)&0x3ff] = r3;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r2;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r2;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x45af4;
                    pc=0x45800;
                    run_45800(); return;
                case 0x45af4:
                    r16 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45b18;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    r31=0x45b10;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x45b10:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47b78;
                        run_47a00(); return;
                    }
                case 0x45b18:
                    addr=r29+1076;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45b3c;
                        continue;
                    }
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x45b3c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45b4c;
                    continue;
                case 0x45b48:
                    r2 = r0 + -1;
                case 0x45b4c:
                    r31 = readPages[(r29+1324)>>>12][((r29+1324)>>>2)&0x3ff];
                    r30 = readPages[(r29+1320)>>>12][((r29+1320)>>>2)&0x3ff];
                    r23 = readPages[(r29+1316)>>>12][((r29+1316)>>>2)&0x3ff];
                    r22 = readPages[(r29+1312)>>>12][((r29+1312)>>>2)&0x3ff];
                    r21 = readPages[(r29+1308)>>>12][((r29+1308)>>>2)&0x3ff];
                    r20 = readPages[(r29+1304)>>>12][((r29+1304)>>>2)&0x3ff];
                    r19 = readPages[(r29+1300)>>>12][((r29+1300)>>>2)&0x3ff];
                    r18 = readPages[(r29+1296)>>>12][((r29+1296)>>>2)&0x3ff];
                    r17 = readPages[(r29+1292)>>>12][((r29+1292)>>>2)&0x3ff];
                    r16 = readPages[(r29+1288)>>>12][((r29+1288)>>>2)&0x3ff];
                    r29 = r29 + 1328;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45b80:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x45b94;
                    pc=0x67600;
                    run_67600(); return;
                case 0x45b94:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        continue;
                    }
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x459a0;
                    run_45800(); return;
                case 0x45ba8:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x45bcc;
                    pc=0x67600;
                    run_67600(); return;
                case 0x45bcc:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45b48;
                        continue;
                    }
                    r2 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x45b4c;
                    continue;
                case 0x45bec:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45bf8;
                    pc=0x35000;
                    run_35000(); return;
                case 0x45bf8:
                    /* Next insn is delay slot */ 
                    pc=0x45878;
                    run_45800(); return;
                case 0x45c00:
                    pc=0x45c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45c00() throws ExecutionException { /* 0x45c00 - 0x45e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45c00:
                    r5 = r0 + 43;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x459e0;
                    run_45800(); return;
                case 0x45c10:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r3 + 4;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x476a4;
                        run_47600(); return;
                    }
                    r4 = r16 + r0;
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47584;
                        run_47400(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x45c50;
                    pc=0x3a000;
                    run_3a000(); return;
                case 0x45c50:
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47838;
                        run_47800(); return;
                    }
                    r2 = r2 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4747c;
                        run_47400(); return;
                    }
                case 0x45c70:
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x475a0;
                        run_47400(); return;
                    }
                case 0x45c80:
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                case 0x45c94:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45cac;
                        continue;
                    }
                case 0x45c9c:
                    r2 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                case 0x45cac:
                    r4 = r17 & 2;
                    writePages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff] = r4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45ccc;
                        continue;
                    }
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                case 0x45ccc:
                    r2 = r17 & 132;
                    writePages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46664;
                        run_46600(); return;
                    }
                    r4 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r20 = r4 - r5;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46664;
                        run_46600(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475ac;
                        run_47400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    r23 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x45d2c;
                    continue;
                case 0x45d18:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45d88;
                        continue;
                    }
                case 0x45d2c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r23;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45d18;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x45d64;
                    pc=0x67600;
                    run_67600(); return;
                case 0x45d64:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45d2c;
                        continue;
                    }
                case 0x45d88:
                    r3 = r3 + 1;
                    r4 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r2 = r20 + r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46ce4;
                        run_46c00(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r8 = r8 + 8;
                case 0x45db8:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45df4;
                        continue;
                    }
                    r3 = r29 + 1206;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46b60;
                        run_46a00(); return;
                    }
                    r8 = r8 + 8;
                case 0x45df4:
                    r3 = readPages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e38;
                        run_45e00(); return;
                    }
                case 0x45e00:
                    pc=0x45e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45e00() throws ExecutionException { /* 0x45e00 - 0x46000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45e00:
                    r3 = r29 + 1204;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 2;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46b34;
                        run_46a00(); return;
                    }
                    r8 = r8 + 8;
                case 0x45e38:
                    r4 = readPages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff];
                    r3 = r0 + 128;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x469cc;
                        run_46800(); return;
                    }
                case 0x45e48:
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r20 = r30 - r3;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45f18;
                        continue;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4730c;
                        run_47200(); return;
                    }
                    r5 = 7 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 26600;
                    r30 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x45e94;
                    continue;
                case 0x45e80:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45ef0;
                        continue;
                    }
                case 0x45e94:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e80;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x45ecc;
                    pc=0x67600;
                    run_67600(); return;
                case 0x45ecc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e94;
                        continue;
                    }
                case 0x45ef0:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46b08;
                        run_46a00(); return;
                    }
                    r8 = r8 + 8;
                case 0x45f18:
                    r3 = r17 & 256;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46864;
                        run_46800(); return;
                    }
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46768;
                        run_46600(); return;
                    }
                case 0x45f50:
                    r8 = r8 + 8;
                case 0x45f54:
                    r17 = r17 & 4;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46050;
                        run_46000(); return;
                    }
                    r3 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r16 = r3 - r4;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46050;
                        run_46000(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x476e8;
                        run_47600(); return;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    r17 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x45fac;
                    continue;
                case 0x45f98:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46008;
                        run_46000(); return;
                    }
                case 0x45fac:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r6 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45f98;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x45fe4;
                    pc=0x67600;
                    run_67600(); return;
                case 0x45fe4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x46000:
                    pc=0x46000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46000() throws ExecutionException { /* 0x46000 - 0x46200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46000:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45fac;
                        run_45e00(); return;
                    }
                case 0x46008:
                    r3 = r3 + 1;
                    r5 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r2 = r2 + r16;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46050;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x46044;
                    pc=0x67600;
                    run_67600(); return;
                case 0x46044:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                case 0x46050:
                    r3 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r5 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4606c;
                        continue;
                    }
                    r3 = r5 + r0;
                case 0x4606c:
                    r4 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r4 = r4 + r3;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46794;
                        run_46600(); return;
                    }
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    r8 = r29 + 40;
                case 0x4608c:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45924;
                        run_45800(); return;
                    }
                case 0x460a4:
                    r16 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x459b0;
                    run_45800(); return;
                case 0x460b0:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45a1c;
                        run_45a00(); return;
                    }
                    r5 = r0 + 32;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x459e0;
                    run_45800(); return;
                case 0x460c8:
                    r17 = r17 | 1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x459e0;
                    run_45800(); return;
                case 0x460d8:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r4 = r3 + 1;
                    if(r18 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x47afc;
                        run_47a00(); return;
                    }
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r30 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4612c;
                        continue;
                    }
                case 0x460fc:
                    r4 = r4 + 1;
                    r3 = r30 << 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r30 = r30 << 3;
                    r30 = r3 + r30;
                    r30 = r2 + r30;
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x460fc;
                        continue;
                    }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x474d8;
                        run_47400(); return;
                    }
                case 0x4612c:
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x459e8;
                    run_45800(); return;
                case 0x46138:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4658c;
                        run_46400(); return;
                    }
                case 0x46150:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                case 0x4616c:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4617c;
                        continue;
                    }
                    r5 = r0 + -129;
                    r17 = r17 & r5;
                case 0x4617c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x467c0;
                        run_46600(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x467c0;
                        run_46600(); return;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46bb4;
                        run_46a00(); return;
                    }
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46bb4;
                        run_46a00(); return;
                    }
                    r2 = r0 + 48;
                    addr=r29+1103;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r16 = r29 + 1103;
                case 0x461b4:
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r4 = r2 < r30 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x461cc;
                        continue;
                    }
                    r2 = r30 + r0;
                case 0x461cc:
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x45c94;
                    run_45c00(); return;
                case 0x461dc:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x465d0;
                        run_46400(); return;
                    }
                case 0x461f4:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                case 0x46200:
                    pc=0x46200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46200() throws ExecutionException { /* 0x46200 - 0x46400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46200:
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4616c;
                    run_46000(); return;
                case 0x46218:
                    r7 = r0 + r0;
                    r2 = r18 + -48;
                case 0x46220:
                    r3 = r3 + 1;
                    r4 = r7 << 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r7 = r7 << 3;
                    r7 = r4 + r7;
                    r7 = r7 + r2;
                    r2 = r18 + -48;
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46220;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x459e8;
                    run_45800(); return;
                case 0x46250:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x464bc;
                        run_46400(); return;
                    }
                case 0x46268:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x4627c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47034;
                        run_47000(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4616c;
                    run_46000(); return;
                case 0x46294:
                    r17 = r17 | 64;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x459e0;
                    run_45800(); return;
                case 0x462a4:
                    r17 = r17 | 128;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x459e0;
                    run_45800(); return;
                case 0x462b4:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r0 + 48;
                    addr=r29+1204;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 120;
                    addr=r29+1205;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r17 = r17 | 2;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r3 = 7 << 16;
                    r3 = r3 + 19716;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r3;
                    r4 = r0 + 2;
                    r18 = r0 + 120;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4616c;
                    run_46000(); return;
                case 0x46308:
                    r2 = r17 & 8;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47268;
                        run_47200(); return;
                    }
                    r4 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r4 + 7;
                case 0x4632c:
                    r2 = r0 + -8;
                    r2 = r3 & r2;
                    r3 = r2 + 8;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    writePages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff] = f0;
                    f12 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff] = f1;
                    f13 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x46364;
                    pc=0x5ee00;
                    run_5ee00(); return;
                case 0x46364:
                    r3 = r0 + 1;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x47050;
                        run_47000(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x47744;
                        run_47600(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                case 0x4639c:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x474c8;
                        run_47400(); return;
                    }
                    r16 = 7 << 16;
                    r16 = r16 + 24068;
                case 0x463b0:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r4 = r0 + 3;
                    r2 = r0 + 3;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r4;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x45c94;
                    run_45c00(); return;
                case 0x463d8:
                    r17 = r17 | 8;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x459e0;
                    run_45800(); return;
                case 0x463e8:
                    r2 = 7 << 16;
                    r2 = r2 + 19696;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r2;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                case 0x46400:
                    pc=0x46400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46400() throws ExecutionException { /* 0x46400 - 0x46600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46400:
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46504;
                        continue;
                    }
                case 0x4640c:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x46420:
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46bc4;
                        run_46a00(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46bc4;
                        run_46a00(); return;
                    }
                    r3 = r0 + 48;
                    addr=r29+1204;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1205;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = r17 | 2;
                    r4 = r0 + 2;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4616c;
                    run_46000(); return;
                case 0x46458:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x46478:
                    r4 = r0 + 1;
                    r5 = r0 + 1;
                    r3 = r0 + r0;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r4;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r5;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    r16 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    pc=0x45cac;
                    run_45c00(); return;
                case 0x464a0:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46268;
                        run_46200(); return;
                    }
                case 0x464bc:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4729c;
                        run_47200(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4627c;
                    run_46200(); return;
                case 0x464e0:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = 7 << 16;
                    r3 = r3 + 19716;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4640c;
                        continue;
                    }
                case 0x46504:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47254;
                        run_47200(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x46420;
                    continue;
                case 0x46528:
                    r2 = r17 & 16;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46634;
                        run_46600(); return;
                    }
                    r17 = r17 & 64;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46634;
                        run_46600(); return;
                    }
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4590c;
                    run_45800(); return;
                case 0x46578:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46150;
                        run_46000(); return;
                    }
                case 0x4658c:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4727c;
                        run_47200(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4616c;
                    run_46000(); return;
                case 0x465bc:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x461f4;
                        run_46000(); return;
                    }
                case 0x465d0:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x472b0;
                        run_47200(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4616c;
                    run_46000(); return;
                case 0x46600:
                    pc=0x46600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46600() throws ExecutionException { /* 0x46600 - 0x46800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46600:
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x459e0;
                    run_45800(); return;
                case 0x46610:
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45ba8;
                        run_45a00(); return;
                    }
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x46478;
                    run_46400(); return;
                case 0x46634:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4590c;
                    run_45800(); return;
                case 0x46664:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x45db8;
                    run_45c00(); return;
                case 0x46670:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    r3 = r4 < 2 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46ab0;
                        run_46a00(); return;
                    }
                case 0x46694:
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46f8c;
                        run_46e00(); return;
                    }
                    r8 = r8 + 8;
                case 0x466b4:
                    r4 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r5 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46fbc;
                        run_46e00(); return;
                    }
                    r8 = r8 + 8;
                case 0x466e4:
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x46d14;
                        run_46c00(); return;
                    }
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r4 = r5 + -1;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r4;
                case 0x46720:
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46ad8;
                        run_46a00(); return;
                    }
                case 0x46738:
                    r8 = r8 + 8;
                case 0x4673c:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = r29 + 1188;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    r2 = r5 + r2;
                case 0x46750:
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45f50;
                        run_45e00(); return;
                    }
                case 0x46768:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x4677c;
                    pc=0x67600;
                    run_67600(); return;
                case 0x4677c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x45f54;
                    run_45e00(); return;
                case 0x46794:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x467a8;
                    pc=0x67600;
                    run_67600(); return;
                case 0x467a8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x4608c;
                    run_46000(); return;
                case 0x467c0:
                    r5 = r0 + 1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x46b8c;
                        run_46a00(); return;
                    }
                    r6 = r29 + 1104;
                    r5 = r0 + 2;
                    r16 = r6 + r0;
                    if(r4 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x46814;
                        run_46800(); return;
                    }
                    r5 = readPages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff];
                case 0x467e4:
                    r4 = r2 & 15;
                    r4 = r5 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r16 = r16 + -1;
                    r2 = r2 >>> 4;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x467e4;
                        continue;
                    }
                case 0x46800:
                    pc=0x46800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46800() throws ExecutionException { /* 0x46800 - 0x46a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46800:
                case 0x46804:
                    r6 = r6 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x461b4;
                    run_46000(); return;
                case 0x46814:
                    r4 = r2 & 7;
                    r16 = r16 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46814;
                        continue;
                    }
                    r2 = r17 & 1;
                    r5 = r16 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46804;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x46804;
                        continue;
                    }
                    r16 = r16 + -1;
                    r6 = r6 - r16;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x461b4;
                    run_46000(); return;
                case 0x46864:
                    r18 = r18 < 102 ? 1 : 0;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46670;
                        run_46600(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x46bd8;
                        run_46a00(); return;
                    }
                    r3 = 7 << 16;
                    r3 = r3 + 19828;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47320;
                        run_47200(); return;
                    }
                    r8 = r8 + 8;
                case 0x468cc:
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r3 = r3 < r4 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x468f0;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45f54;
                        run_45e00(); return;
                    }
                case 0x468f0:
                    r3 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47518;
                        run_47400(); return;
                    }
                    r8 = r8 + 8;
                case 0x4692c:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45f54;
                        run_45e00(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46db0;
                        run_46c00(); return;
                    }
                    r5 = 7 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 26600;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x46978;
                    continue;
                case 0x46964:
                    r8 = r8 + 8;
                case 0x46968:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46dbc;
                        run_46c00(); return;
                    }
                case 0x46978:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46964;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x469b0;
                    pc=0x67600;
                    run_67600(); return;
                case 0x469b0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x46968;
                    continue;
                case 0x469cc:
                    r3 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r20 = r3 - r4;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e48;
                        run_45e00(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x477b8;
                        run_47600(); return;
                    }
                    r4 = 7 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 26600;
                    r7 = r0 + 16;
                case 0x46a00:
                    pc=0x46a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46a00() throws ExecutionException { /* 0x46a00 - 0x46c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46a00:
                    /* Next insn is delay slot */ 
                    pc=0x46a1c;
                    continue;
                case 0x46a08:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46a80;
                        continue;
                    }
                case 0x46a1c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r7;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46a08;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    writePages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x46a58;
                    pc=0x67600;
                    run_67600(); return;
                case 0x46a58:
                    r7 = readPages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46a1c;
                        continue;
                    }
                case 0x46a80:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47008;
                        run_47000(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x45e48;
                    run_45e00(); return;
                case 0x46ab0:
                    r3 = r17 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46694;
                        run_46600(); return;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46738;
                        run_46600(); return;
                    }
                case 0x46ad8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x46aec;
                    pc=0x67600;
                    run_67600(); return;
                case 0x46aec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x4673c;
                    run_46600(); return;
                case 0x46b08:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x46b1c;
                    pc=0x67600;
                    run_67600(); return;
                case 0x46b1c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x45f18;
                    run_45e00(); return;
                case 0x46b34:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x46b48;
                    pc=0x67600;
                    run_67600(); return;
                case 0x46b48:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x45e38;
                    run_45e00(); return;
                case 0x46b60:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x46b74;
                    pc=0x67600;
                    run_67600(); return;
                case 0x46b74:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x45df4;
                    run_45c00(); return;
                case 0x46b8c:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46dd0;
                        run_46c00(); return;
                    }
                    r2 = r2 + 48;
                    r4 = r0 + 1;
                    addr=r29+1103;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r4;
                    r16 = r29 + 1103;
                    /* Next insn is delay slot */ 
                    pc=0x461b4;
                    run_46000(); return;
                case 0x46bb4:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r0;
                    r16 = r29 + 1104;
                    /* Next insn is delay slot */ 
                    pc=0x461b4;
                    run_46000(); return;
                case 0x46bc4:
                    r4 = r0 + 2;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4616c;
                    run_46000(); return;
                case 0x46bd8:
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4734c;
                        run_47200(); return;
                    }
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r18 = r16 + r3;
                    r20 = r18 - r16;
                    r3 = r4 < r20 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46c08;
                        run_46c00(); return;
                    }
                case 0x46c00:
                    pc=0x46c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46c00() throws ExecutionException { /* 0x46c00 - 0x46e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46c00:
                    r20 = r4 + r0;
                case 0x46c08:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46c3c;
                        continue;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475cc;
                        run_47400(); return;
                    }
                    r8 = r8 + 8;
                case 0x46c3c:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x475c0;
                        run_47400(); return;
                    }
                case 0x46c44:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r20 = r3 - r20;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46e38;
                        run_46e00(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x472d0;
                        run_47200(); return;
                    }
                    r5 = 7 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 26600;
                    r30 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x46c90;
                    continue;
                case 0x46c7c:
                    r8 = r8 + 8;
                case 0x46c80:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x472dc;
                        run_47200(); return;
                    }
                case 0x46c90:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46c7c;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x46cc8;
                    pc=0x67600;
                    run_67600(); return;
                case 0x46cc8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x46c80;
                    continue;
                case 0x46ce4:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x46cf8;
                    pc=0x67600;
                    run_67600(); return;
                case 0x46cf8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x45db8;
                    run_45c00(); return;
                case 0x46d14:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r4 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4673c;
                        run_46600(); return;
                    }
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46fec;
                        run_46e00(); return;
                    }
                    r4 = 7 << 16;
                    r23 = r4 + 26600;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x46d5c;
                    continue;
                case 0x46d48:
                    r8 = r8 + 8;
                case 0x46d4c:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46ff4;
                        run_46e00(); return;
                    }
                case 0x46d5c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46d48;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x46d94;
                    pc=0x67600;
                    run_67600(); return;
                case 0x46d94:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x46d4c;
                    continue;
                case 0x46db0:
                    r4 = 7 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 26600;
                case 0x46dbc:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                    /* Next insn is delay slot */ 
                    pc=0x46750;
                    run_46600(); return;
                case 0x46dd0:
                    r6 = r29 + 1104;
                    r16 = r6 + r0;
                    r4 = r0 + 10;
                case 0x46ddc:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x46de8;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x46de8:
                    r16 = r16 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46ddc;
                        continue;
                    }
                case 0x46e00:
                    pc=0x46e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46e00() throws ExecutionException { /* 0x46e00 - 0x47000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46e00:
                    r6 = r6 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x461b4;
                    run_46000(); return;
                case 0x46e14:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x46e28;
                    pc=0x67600;
                    run_67600(); return;
                case 0x46e28:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x46e38:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r16 + r3;
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46e64;
                        continue;
                    }
                    r4 = r17 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46e98;
                        continue;
                    }
                case 0x46e64:
                    r4 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r5 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r5;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475f8;
                        run_47400(); return;
                    }
                    r8 = r8 + 8;
                case 0x46e98:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r18 = r18 - r16;
                    r3 = r4 - r3;
                    r4 = r18 < r3 ? 1 : 0;
                    r20 = r3 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46eb8;
                        continue;
                    }
                    r20 = r18 + r0;
                case 0x46eb8:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46eec;
                        continue;
                    }
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4766c;
                        run_47600(); return;
                    }
                    r8 = r8 + 8;
                case 0x46eec:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47660;
                        run_47600(); return;
                    }
                case 0x46ef4:
                    r16 = r3 - r20;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45f54;
                        run_45e00(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46db0;
                        run_46c00(); return;
                    }
                    r5 = 7 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 26600;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x46f38;
                    continue;
                case 0x46f24:
                    r8 = r8 + 8;
                case 0x46f28:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46dbc;
                        run_46c00(); return;
                    }
                case 0x46f38:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46f24;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x46f70;
                    pc=0x67600;
                    run_67600(); return;
                case 0x46f70:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x46f28;
                    continue;
                case 0x46f8c:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x46fa0;
                    pc=0x67600;
                    run_67600(); return;
                case 0x46fa0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x466b4;
                    run_46600(); return;
                case 0x46fbc:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x46fd0;
                    pc=0x67600;
                    run_67600(); return;
                case 0x46fd0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x466e4;
                    run_46600(); return;
                case 0x46fec:
                    r5 = 7 << 16;
                    r23 = r5 + 26600;
                case 0x46ff4:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                case 0x47000:
                    pc=0x47000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47000() throws ExecutionException { /* 0x47000 - 0x47200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47000:
                    /* Next insn is delay slot */ 
                    pc=0x46720;
                    run_46600(); return;
                case 0x47008:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x4701c;
                    pc=0x67600;
                    run_67600(); return;
                case 0x4701c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x45e48;
                    run_45e00(); return;
                case 0x47034:
                    r3 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    r3 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4616c;
                    run_46000(); return;
                case 0x47050:
                    f12 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    f13 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x47064;
                    pc=0x5ee00;
                    run_5ee00(); return;
                case 0x47064:
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47488;
                        run_47400(); return;
                    }
                    r9 = r0 + -33;
                    r2 = r0 + -1;
                    r20 = r18 & r9;
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x479f4;
                        run_47800(); return;
                    }
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x47914;
                        run_47800(); return;
                    }
                case 0x47090:
                    r2 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    r23 = r17 | 256;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47968;
                        run_47800(); return;
                    }
                    f0 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r0;
                    f1 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    writePages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff] = f0;
                    writePages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff] = f1;
                case 0x470b8:
                    r2 = r0 + 102;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x47768;
                        run_47600(); return;
                    }
                    r2 = r0 + 70;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x47768;
                        run_47600(); return;
                    }
                    r2 = r0 + 69;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4795c;
                        run_47800(); return;
                    }
                    r5 = r30 + r0;
                case 0x470e0:
                    r2 = r0 + 2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1200;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1196;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r7 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    r2 = r29 + 1180;
                    r6 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    writePages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff] = r5;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x47120;
                    pc=0x57200;
                    run_57200(); return;
                case 0x47120:
                    r16 = r2 + r0;
                    r2 = r0 + 103;
                    r5 = readPages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff];
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x47144;
                        continue;
                    }
                    r2 = r0 + 71;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x47150;
                        continue;
                    }
                case 0x47144:
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47a00;
                        run_47a00(); return;
                    }
                case 0x47150:
                    r2 = r0 + 70;
                    r4 = r16 + r5;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x477d8;
                        run_47600(); return;
                    }
                case 0x47160:
                    f0 = r0;
                    f2 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x477cc;
                        run_47600(); return;
                    }
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x471bc;
                        continue;
                    }
                    r5 = r0 + 48;
                case 0x4719c:
                    r3 = r2 + 1;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4719c;
                        continue;
                    }
                case 0x471bc:
                    r2 = r2 - r16;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r2;
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x47718;
                        run_47600(); return;
                    }
                    r2 = r18 < 102 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ba0;
                        run_47a00(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = r0 + 102;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x47a0c;
                        run_47a00(); return;
                    }
                case 0x471f0:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r2 = r4 < r3 ? 1 : 0;
                case 0x47200:
                    pc=0x47200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47200() throws ExecutionException { /* 0x47200 - 0x47400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47200:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47990;
                        run_47800(); return;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x479c8;
                        run_47800(); return;
                    }
                    r2 = r4 + r0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47bbc;
                        run_47a00(); return;
                    }
                case 0x47220:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r18 = r0 + 103;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                case 0x4722c:
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x476f8;
                        run_47600(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45c94;
                    run_45c00(); return;
                case 0x47254:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x46420;
                    run_46400(); return;
                case 0x47268:
                    r2 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r2 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x4632c;
                    run_46200(); return;
                case 0x4727c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4616c;
                    run_46000(); return;
                case 0x4729c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4627c;
                    run_46200(); return;
                case 0x472b0:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4616c;
                    run_46000(); return;
                case 0x472d0:
                    r4 = 7 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 26600;
                case 0x472dc:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46e14;
                        run_46e00(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x46e38;
                    run_46e00(); return;
                case 0x4730c:
                    r4 = 7 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 26600;
                    /* Next insn is delay slot */ 
                    pc=0x45ef0;
                    run_45e00(); return;
                case 0x47320:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x47334;
                    pc=0x67600;
                    run_67600(); return;
                case 0x47334:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x468cc;
                    run_46800(); return;
                case 0x4734c:
                    r4 = 7 << 16;
                    r4 = r4 + 19828;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x474e8;
                        run_47400(); return;
                    }
                    r8 = r8 + 8;
                    r18 = r3 + r0;
                case 0x47388:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x473ac;
                        continue;
                    }
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x473ac;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45f54;
                        run_45e00(); return;
                    }
                case 0x473ac:
                    r3 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47928;
                        run_47800(); return;
                    }
                    r8 = r8 + 8;
                case 0x473e8:
                    r18 = r0 - r18;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4756c;
                        run_47400(); return;
                    }
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47628;
                        run_47600(); return;
                    }
                case 0x47400:
                    pc=0x47400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47400() throws ExecutionException { /* 0x47400 - 0x47600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47400:
                    r5 = 7 << 16;
                    r23 = r5 + 26600;
                    r20 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x47428;
                    continue;
                case 0x47414:
                    r8 = r8 + 8;
                case 0x47418:
                    r18 = r18 + -16;
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47630;
                        run_47600(); return;
                    }
                case 0x47428:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47414;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x47460;
                    pc=0x67600;
                    run_67600(); return;
                case 0x47460:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x47418;
                    continue;
                case 0x4747c:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    /* Next insn is delay slot */ 
                    pc=0x45c70;
                    run_45c00(); return;
                case 0x47488:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47758;
                        run_47600(); return;
                    }
                    r16 = 7 << 16;
                    r16 = r16 + 24076;
                case 0x4749c:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r5 = r0 + 3;
                    r2 = r0 + 3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x45c94;
                    run_45c00(); return;
                case 0x474c8:
                    r16 = 7 << 16;
                    r16 = r16 + 24072;
                    /* Next insn is delay slot */ 
                    pc=0x463b0;
                    run_46200(); return;
                case 0x474d8:
                    r30 = r0 + -1;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x459e8;
                    run_45800(); return;
                case 0x474e8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x474fc;
                    pc=0x67600;
                    run_67600(); return;
                case 0x474fc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r18 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x47388;
                    run_47200(); return;
                case 0x47518:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x4752c;
                    pc=0x67600;
                    run_67600(); return;
                case 0x4752c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x4692c;
                    run_46800(); return;
                case 0x47544:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x47558;
                    pc=0x67600;
                    run_67600(); return;
                case 0x47558:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x4756c:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x46750;
                    run_46600(); return;
                case 0x47584:
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x47590;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x47590:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45c80;
                        run_45c00(); return;
                    }
                case 0x475a0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45c80;
                    run_45c00(); return;
                case 0x475ac:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x45d88;
                    run_45c00(); return;
                case 0x475c0:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46c44;
                    run_46c00(); return;
                case 0x475cc:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x475e0;
                    pc=0x67600;
                    run_67600(); return;
                case 0x475e0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x46c3c;
                    run_46c00(); return;
                case 0x475f8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                case 0x47600:
                    pc=0x47600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47600() throws ExecutionException { /* 0x47600 - 0x47800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47600:
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x4760c;
                    pc=0x67600;
                    run_67600(); return;
                case 0x4760c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x46e98;
                    run_46e00(); return;
                case 0x47628:
                    r4 = 7 << 16;
                    r23 = r4 + 26600;
                case 0x47630:
                    r3 = r3 + 1;
                    r2 = r2 + r18;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47544;
                        run_47400(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4756c;
                    run_47400(); return;
                case 0x47660:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46ef4;
                    run_46e00(); return;
                case 0x4766c:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x47680;
                    pc=0x67600;
                    run_67600(); return;
                case 0x47680:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = r5 - r3;
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x46eec;
                    run_46e00(); return;
                case 0x476a4:
                    r3 = (r30&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r2 = r30 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x476b8;
                        continue;
                    }
                    r2 = r0 + 6;
                case 0x476b8:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47af0;
                        run_47a00(); return;
                    }
                case 0x476c4:
                    r16 = 7 << 16;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    r16 = r16 + 24084;
                    /* Next insn is delay slot */ 
                    pc=0x45cac;
                    run_45c00(); return;
                case 0x476e8:
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x46008;
                    run_46000(); return;
                case 0x476f8:
                    r3 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r3 = r0 + 45;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45c9c;
                    run_45c00(); return;
                case 0x47718:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r3 = r2 < -3 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47858;
                        run_47800(); return;
                    }
                    r3 = r30 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47858;
                        run_47800(); return;
                    }
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x471f0;
                    run_47000(); return;
                case 0x47744:
                    r2 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 45;
                    /* Next insn is delay slot */ 
                    pc=0x4639c;
                    run_46200(); return;
                case 0x47758:
                    r16 = 7 << 16;
                    r16 = r16 + 24080;
                    /* Next insn is delay slot */ 
                    pc=0x4749c;
                    run_47400(); return;
                case 0x47768:
                    r2 = r0 + 3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1200;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1196;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r7 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    r2 = r29 + 1180;
                    r6 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r30;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x477a4;
                    pc=0x57200;
                    run_57200(); return;
                case 0x477a4:
                    r16 = r2 + r0;
                    r5 = r30 + r0;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x47150;
                    run_47000(); return;
                case 0x477b8:
                    r5 = 7 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 26600;
                    /* Next insn is delay slot */ 
                    pc=0x46a80;
                    run_46a00(); return;
                case 0x477cc:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x471bc;
                    run_47000(); return;
                case 0x477d8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 48;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x477fc;
                        continue;
                    }
                case 0x477e8:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x47160;
                    run_47000(); return;
                case 0x477fc:
                    f0 = r0;
                case 0x47800:
                    pc=0x47800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47800() throws ExecutionException { /* 0x47800 - 0x47a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47800:
                    f2 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x477e8;
                        run_47600(); return;
                    }
                    r2 = r0 + 1;
                    r2 = r2 - r5;
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r2;
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x47160;
                    run_47000(); return;
                case 0x47838:
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r30;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x45c94;
                    run_45c00(); return;
                case 0x47858:
                    r18 = r18 + -2;
                case 0x4785c:
                    r2 = r2 + -1;
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r2;
                    addr=r29+1188;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47b3c;
                        run_47a00(); return;
                    }
                    r3 = r0 + 43;
                    addr=r29+1189;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x47878:
                    r3 = r2 < 10 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47a38;
                        run_47a00(); return;
                    }
                    r2 = r2 + 48;
                    r3 = r0 + 48;
                    addr=r29+1191;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1190;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 1192;
                    r4 = r29 + 1188;
                case 0x4789c:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = r2 - r4;
                    r3 = r3 + r4;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    r2 = r3 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478e8;
                        continue;
                    }
                case 0x478c0:
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47904;
                        continue;
                    }
                case 0x478dc:
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4722c;
                    run_47200(); return;
                case 0x478e8:
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478c0;
                        continue;
                    }
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x478dc;
                        continue;
                    }
                case 0x47904:
                    r2 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4722c;
                    run_47200(); return;
                case 0x47914:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47090;
                        run_47000(); return;
                    }
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x47090;
                    run_47000(); return;
                case 0x47928:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x4793c;
                    pc=0x67600;
                    run_67600(); return;
                case 0x4793c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bcc;
                        run_45a00(); return;
                    }
                    r18 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x473e8;
                    run_47200(); return;
                case 0x4795c:
                    r5 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x470e0;
                    run_47000(); return;
                case 0x47968:
                    r3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    r5 = r0 + 45;
                    writePages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff] = r2;
                    writePages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff] = r4;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x470b8;
                    run_47000(); return;
                case 0x47990:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47b2c;
                        run_47a00(); return;
                    }
                    r2 = r0 + 1;
                case 0x479a4:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x479e4;
                        continue;
                    }
                case 0x479bc:
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x4722c;
                    run_47200(); return;
                case 0x479c8:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x479bc;
                        continue;
                    }
                case 0x479e4:
                    r2 = r0 + r0;
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x4722c;
                    run_47200(); return;
                case 0x479f4:
                    r30 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x47090;
                    run_47000(); return;
                case 0x47a00:
                    pc=0x47a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47a00() throws ExecutionException { /* 0x47a00 - 0x47c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47a00:
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x471bc;
                    run_47000(); return;
                case 0x47a0c:
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47b50;
                        continue;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47acc;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47acc;
                        continue;
                    }
                    r2 = r3 + r0;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4722c;
                    run_47200(); return;
                case 0x47a38:
                    r6 = r29 + 1187;
                    r3 = r6 + r0;
                    r4 = r0 + 10;
                case 0x47a44:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r4; lo = r2/r4;
                        pc=0x47a50;
                        continue;
                    }
                    hi = r2%r4; lo = r2/r4;
                    throw new ExecutionException("Break");
                case 0x47a50:
                    r3 = r3 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    r5 = r2 < 10 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47a44;
                        continue;
                    }
                    r2 = r2 + 48;
                    r5 = r2 << 24;
                    r4 = r3 + -1;
                    r5 = r5 >> 24;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47bac;
                        continue;
                    }
                    r2 = r29 + 1190;
                    /* Next insn is delay slot */ 
                    pc=0x47aa0;
                    continue;
                case 0x47a9c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x47aa0:
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x47a9c;
                        continue;
                    }
                    r4 = r29 + 1188;
                    r2 = r4 - r3;
                    r3 = r29 + 1190;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x4789c;
                    run_47800(); return;
                case 0x47acc:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r2 = r30 + 1;
                    r2 = r3 + r2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4722c;
                        run_47200(); return;
                    }
                case 0x47ae4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4722c;
                    run_47200(); return;
                case 0x47af0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x476c4;
                    run_47600(); return;
                case 0x47afc:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r30 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = r3 + 4;
                    r3 = r4 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46600;
                        run_46600(); return;
                    }
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                    r30 = r0 + -1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x459e0;
                    run_45800(); return;
                case 0x47b2c:
                    r2 = r0 + 2;
                    r2 = r2 - r3;
                    /* Next insn is delay slot */ 
                    pc=0x479a4;
                    run_47800(); return;
                case 0x47b3c:
                    r3 = r0 + 45;
                    r2 = r0 - r2;
                    addr=r29+1189;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x47878;
                    run_47800(); return;
                case 0x47b50:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47b84;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47b84;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = r0 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4722c;
                    run_47200(); return;
                case 0x47b78:
                    r16 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x45b18;
                    run_45a00(); return;
                case 0x47b84:
                    r30 = r30 + 2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    r2 = r30 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4722c;
                        run_47200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x47ae4;
                    continue;
                case 0x47ba0:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4785c;
                    run_47800(); return;
                case 0x47bac:
                    r2 = r29 + 1190;
                    r4 = r29 + 1188;
                    /* Next insn is delay slot */ 
                    pc=0x4789c;
                    run_47800(); return;
                case 0x47bbc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47220;
                    run_47200(); return;
                case 0x47c00:
                    pc=0x47c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47c00() throws ExecutionException { /* 0x47c00 - 0x47e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47c00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45800;
                    run_45800(); return;
                case 0x47e00:
                    pc=0x47e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47e00() throws ExecutionException { /* 0x47e00 - 0x48000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47e00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e38;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47fe4;
                        continue;
                    }
                case 0x47e38:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 65535;
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47fb8;
                        continue;
                    }
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47fb8;
                        continue;
                    }
                case 0x47e6c:
                    r3 = r3 & 8192;
                    r18 = r18 & 255;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ef4;
                        continue;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r3 - r4;
                    r2 = r4 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47f24;
                        continue;
                    }
                case 0x47e94:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x47f68;
                        continue;
                    }
                case 0x47ec0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47f8c;
                        continue;
                    }
                case 0x47ed4:
                    r2 = r18 + r0;
                case 0x47ed8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47ef4:
                    r3 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r2 | 8192;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r3 & r2;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r3 - r4;
                    r2 = r4 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e94;
                        continue;
                    }
                case 0x47f24:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47f34;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x47f34:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47f80;
                        continue;
                    }
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x47ec0;
                        continue;
                    }
                case 0x47f68:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47f78;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x47f78:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ed4;
                        continue;
                    }
                case 0x47f80:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x47ed8;
                    continue;
                case 0x47f8c:
                    r2 = r0 + 10;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x47ed4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47fa8;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x47fa8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ed4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x47f80;
                    continue;
                case 0x47fb8:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47fc8;
                    pc=0x48200;
                    run_48200(); return;
                case 0x47fc8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47f80;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r2 & 65535;
                    /* Next insn is delay slot */ 
                    pc=0x47e6c;
                    continue;
                case 0x47fe4:
                    /* Next insn is delay slot */ 
                    r31=0x47fec;
                    pc=0x35000;
                    run_35000(); return;
                case 0x47fec:
                    /* Next insn is delay slot */ 
                    pc=0x47e38;
                    continue;
                case 0x48000:
                    pc=0x48000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48000() throws ExecutionException { /* 0x48000 - 0x48200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47e00;
                    run_47e00(); return;
                case 0x48200:
                    pc=0x48200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48200() throws ExecutionException { /* 0x48200 - 0x48400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48200:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48234;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48344;
                        continue;
                    }
                case 0x48234:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r6 = tmp;
                    r2 = r6 & 65535;
                    r3 = r2 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x482a4;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x482d4;
                        continue;
                    }
                case 0x4825c:
                    r4 = r2 & 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48304;
                        continue;
                    }
                    r2 = r2 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48354;
                        continue;
                    }
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                case 0x48280:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4831c;
                        continue;
                    }
                case 0x48288:
                    r2 = r0 + r0;
                case 0x4828c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x482a4:
                    r3 = r2 & 16;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x483b0;
                        continue;
                    }
                    r2 = r2 & 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48364;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                case 0x482c0:
                    r2 = r6 | 8;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 & 65535;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4825c;
                        continue;
                    }
                case 0x482d4:
                    r5 = r2 & 640;
                    r4 = r0 + 512;
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4825c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x482f4;
                    pc=0x39000;
                    run_39000(); return;
                case 0x482f4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4825c;
                    continue;
                case 0x48304:
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r2 = r0 - r2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48288;
                        continue;
                    }
                case 0x4831c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + r0;
                    r4 = r3 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4828c;
                        continue;
                    }
                    r3 = r3 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4828c;
                    continue;
                case 0x48344:
                    /* Next insn is delay slot */ 
                    r31=0x4834c;
                    pc=0x35000;
                    run_35000(); return;
                case 0x4834c:
                    /* Next insn is delay slot */ 
                    pc=0x48234;
                    continue;
                case 0x48354:
                    r2 = r0 + r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x48280;
                    continue;
                case 0x48364:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48394;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x48390;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4838c;
                    pc=0x37400;
                    run_37400(); return;
                case 0x4838c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r6 = tmp;
                case 0x48390:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x48394:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r0 + -37;
                    r6 = r6 & r2;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x482c0;
                    continue;
                case 0x483b0:
                    r2 = r0 + 9;
                    r6 = r6 | 64;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r6&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4828c;
                    continue;
                case 0x48400:
                    pc=0x48400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48400() throws ExecutionException { /* 0x48400 - 0x48600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48400:
                    r2 = r0 + 1;
                    pc = 0x48404;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48408;
                        return;
                    }
                case 0x48408:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48410:
                    r2 = r0 + 2;
                    pc = 0x48414;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48418;
                        return;
                    }
                case 0x48418:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48420:
                    r2 = r0 + 3;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48434;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48438;
                        return;
                    }
                case 0x48438:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48450;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48450:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48460:
                    r2 = r0 + 4;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48474;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48478;
                        return;
                    }
                case 0x48478:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48490;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48490:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x484a0:
                    r2 = r0 + 5;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x484b4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x484b8;
                        return;
                    }
                case 0x484b8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x484d0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x484d0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x484e0:
                    r2 = r0 + 6;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x484f4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x484f8;
                        return;
                    }
                case 0x484f8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48510;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48510:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48520:
                    r2 = r0 + 7;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48534;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48538;
                        return;
                    }
                case 0x48538:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48550;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48550:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48560:
                    r2 = r0 + 8;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48574;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48578;
                        return;
                    }
                case 0x48578:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48590;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48590:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x485a0:
                    r2 = r0 + 10;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x485b4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x485b8;
                        return;
                    }
                case 0x485b8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x485d0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x485d0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x485e0:
                    r2 = r0 + 11;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x485f4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x485f8;
                        return;
                    }
                case 0x485f8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                case 0x48600:
                    pc=0x48600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48600() throws ExecutionException { /* 0x48600 - 0x48800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48600:
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48610;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48610:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48620:
                    r2 = r0 + 12;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48634;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48638;
                        return;
                    }
                case 0x48638:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48650;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48650:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48660:
                    r2 = r0 + 13;
                    pc = 0x48664;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48668;
                        return;
                    }
                case 0x48668:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48670:
                    r2 = r0 + 14;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48684;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48688;
                        return;
                    }
                case 0x48688:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x486a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x486a0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x486b0:
                    r2 = r0 + 15;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x486c4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x486c8;
                        return;
                    }
                case 0x486c8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x486e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x486e0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x486f0:
                    r2 = r0 + 16;
                    pc = 0x486f4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x486f8;
                        return;
                    }
                case 0x486f8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48700:
                    r2 = r0 + 17;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48714;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48718;
                        return;
                    }
                case 0x48718:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48730;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48730:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48740:
                    r2 = r0 + 18;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48754;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48758;
                        return;
                    }
                case 0x48758:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48770;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48770:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48780:
                    r2 = r0 + 19;
                    pc = 0x48784;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48788;
                        return;
                    }
                case 0x48788:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48790:
                    r2 = r0 + 20;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x487a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x487a8;
                        return;
                    }
                case 0x487a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x487c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x487c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x487d0:
                    r2 = r0 + 21;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x487e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x487e8;
                        return;
                    }
                case 0x487e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48800;
                        run_48800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48800:
                    pc=0x48800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48800() throws ExecutionException { /* 0x48800 - 0x48a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48800:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48810:
                    r2 = r0 + 22;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48824;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48828;
                        return;
                    }
                case 0x48828:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48840;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48840:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48850:
                    r2 = r0 + 23;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48864;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48868;
                        return;
                    }
                case 0x48868:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48880;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48880:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48890:
                    r2 = r0 + 24;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x488a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x488a8;
                        return;
                    }
                case 0x488a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x488c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x488c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x488d0:
                    r2 = r0 + 25;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x488e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x488e8;
                        return;
                    }
                case 0x488e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48900;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48900:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48910:
                    r2 = r0 + 26;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48924;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48928;
                        return;
                    }
                case 0x48928:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48940;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48940:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48950:
                    r2 = r0 + 27;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48964;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48968;
                        return;
                    }
                case 0x48968:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48980;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48980:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48990:
                    r2 = r0 + 28;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x489a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x489a8;
                        return;
                    }
                case 0x489a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x489c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x489c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x489d0:
                    r2 = r0 + 29;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x489e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x489e8;
                        return;
                    }
                case 0x489e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48a00;
                        run_48a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48a00:
                    pc=0x48a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48a00() throws ExecutionException { /* 0x48a00 - 0x48c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48a00:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48a10:
                    r2 = r0 + 30;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48a24;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48a28;
                        return;
                    }
                case 0x48a28:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48a40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48a40:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48a50:
                    r2 = r0 + 31;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48a64;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48a68;
                        return;
                    }
                case 0x48a68:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48a80;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48a80:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48a90:
                    r2 = r0 + 32;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48aa4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48aa8;
                        return;
                    }
                case 0x48aa8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48ac0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48ac0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48ad0:
                    r2 = r0 + 33;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48ae4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48ae8;
                        return;
                    }
                case 0x48ae8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48b00;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48b00:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48b10:
                    r2 = r0 + 34;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48b24;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48b28;
                        return;
                    }
                case 0x48b28:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48b40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48b40:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48b50:
                    r2 = r0 + 35;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48b64;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48b68;
                        return;
                    }
                case 0x48b68:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48b80;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48b80:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48b90:
                    r2 = r0 + 36;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x48bb0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48bb4;
                        return;
                    }
                case 0x48bb4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48bcc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48bcc:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48bdc:
                    r2 = r0 + 37;
                    pc = 0x48be0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48be4;
                        return;
                    }
                case 0x48be4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48bec:
                    r2 = r0 + 38;
                    pc = 0x48bf0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48bf4;
                        return;
                    }
                case 0x48bf4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48bfc:
                    r2 = r0 + 39;
                case 0x48c00:
                    pc=0x48c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48c00() throws ExecutionException { /* 0x48c00 - 0x48e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48c00:
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48c10;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48c14;
                        return;
                    }
                case 0x48c14:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48c2c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48c2c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48c3c:
                    r2 = r0 + 40;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48c50;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48c54;
                        return;
                    }
                case 0x48c54:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48c6c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48c6c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48c7c:
                    r2 = r0 + 41;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48c90;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48c94;
                        return;
                    }
                case 0x48c94:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48cac;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48cac:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48cbc:
                    r2 = r0 + 42;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48cd0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48cd4;
                        return;
                    }
                case 0x48cd4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48cec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48cec:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48cfc:
                    r2 = r0 + 43;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48d10;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48d14;
                        return;
                    }
                case 0x48d14:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48d2c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48d2c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48d3c:
                    r2 = r0 + 44;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48d50;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48d54;
                        return;
                    }
                case 0x48d54:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48d6c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48d6c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48d7c:
                    r2 = r0 + 45;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48d90;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48d94;
                        return;
                    }
                case 0x48d94:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48dac;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48dac:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48dbc:
                    r2 = r0 + 46;
                    pc = 0x48dc0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48dc4;
                        return;
                    }
                case 0x48dc4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48dcc:
                    r2 = r0 + 47;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48de0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48de4;
                        return;
                    }
                case 0x48de4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48dfc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48dfc:
                    r4 = r10 + r0;
                case 0x48e00:
                    pc=0x48e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48e00() throws ExecutionException { /* 0x48e00 - 0x49000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48e00:
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48e0c:
                    r2 = r0 + 51;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48e20;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48e24;
                        return;
                    }
                case 0x48e24:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48e3c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48e3c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48e4c:
                    r2 = r0 + 52;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48e60;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48e64;
                        return;
                    }
                case 0x48e64:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48e7c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48e7c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48e8c:
                    r2 = r0 + 53;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x48eac;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48eb0;
                        return;
                    }
                case 0x48eb0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48ec8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48ec8:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48ed8:
                    r2 = r0 + 55;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48eec;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48ef0;
                        return;
                    }
                case 0x48ef0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48f08;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48f08:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48f18:
                    r2 = r0 + 54;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48f2c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48f30;
                        return;
                    }
                case 0x48f30:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48f48;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48f48:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48f58:
                    r2 = r0 + 56;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48f6c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48f70;
                        return;
                    }
                case 0x48f70:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48f88;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48f88:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48f98:
                    r2 = r0 + 57;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48fac;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48fb0;
                        return;
                    }
                case 0x48fb0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48fc8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48fc8:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x48fd8:
                    r2 = r0 + 58;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x48fec;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x48ff0;
                        return;
                    }
                case 0x48ff0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49008;
                        run_49000(); return;
                    }
                case 0x49000:
                    pc=0x49000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49000() throws ExecutionException { /* 0x49000 - 0x49200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49000:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49008:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x49018:
                    r2 = r0 + 59;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x4902c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x49030;
                        return;
                    }
                case 0x49030:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49048;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49048:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x49058:
                    r2 = r0 + 60;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x49078;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x4907c;
                        return;
                    }
                case 0x4907c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49094;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49094:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x490a4:
                    r2 = r0 + 61;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x490c4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x490c8;
                        return;
                    }
                case 0x490c8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x490e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x490e0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x490f0:
                    r2 = r0 + 62;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x49104;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x49108;
                        return;
                    }
                case 0x49108:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49120;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49120:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x49130:
                    r2 = r0 + 63;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x49144;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x49148;
                        return;
                    }
                case 0x49148:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49160;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49160:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x49170:
                    r2 = r0 + 64;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x49184;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x49188;
                        return;
                    }
                case 0x49188:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x491a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x491a0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x491b0:
                    r2 = r0 + 65;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x491d0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x491d4;
                        return;
                    }
                case 0x491d4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x491ec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x491ec:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x491fc:
                    r2 = r0 + 66;
                case 0x49200:
                    pc=0x49200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49200() throws ExecutionException { /* 0x49200 - 0x49400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49200:
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x4921c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x49220;
                        return;
                    }
                case 0x49220:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49238;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49238:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x49248:
                    r2 = r0 + 67;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x49268;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x4926c;
                        return;
                    }
                case 0x4926c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49284;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49284:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x49294:
                    r2 = r0 + 73;
                    pc = 0x49298;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x4929c;
                        return;
                    }
                case 0x4929c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x492a4:
                    r2 = r0 + 68;
                    pc = 0x492a8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x492ac;
                        return;
                    }
                case 0x492ac:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x492b4:
                    r2 = r0 + 70;
                    pc = 0x492b8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x492bc;
                        return;
                    }
                case 0x492bc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x492c4:
                    r2 = r0 + 69;
                    pc = 0x492c8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x492cc;
                        return;
                    }
                case 0x492cc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x492d4:
                    r2 = r0 + 71;
                    pc = 0x492d8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x492dc;
                        return;
                    }
                case 0x492dc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x492e4:
                    r2 = r0 + 82;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x492f8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x492fc;
                        return;
                    }
                case 0x492fc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49314;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49314:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x49324:
                    r2 = r0 + 83;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x49338;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x4933c;
                        return;
                    }
                case 0x4933c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49354;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49354:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x49364:
                    r2 = r0 + 84;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x49378;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x4937c;
                        return;
                    }
                case 0x4937c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49394;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49394:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x493a4:
                    r2 = r0 + 85;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x493b8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x493bc;
                        return;
                    }
                case 0x493bc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x493d4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x493d4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x493e4:
                    r2 = r0 + 80;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x493f8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x493fc;
                        return;
                    }
                case 0x493fc:
                    r11 = r2 + 255;
                case 0x49400:
                    pc=0x49400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49400() throws ExecutionException { /* 0x49400 - 0x49600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49400:
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49414;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49414:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x49424:
                    r2 = r0 + 86;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x49438;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x4943c;
                        return;
                    }
                case 0x4943c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49454;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49454:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x49464:
                    r2 = r0 + 81;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x49478;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x4947c;
                        return;
                    }
                case 0x4947c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49494;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49494:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x494a4:
                    r2 = r0 + 87;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x494b8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x494bc;
                        return;
                    }
                case 0x494bc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x494d4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x494d4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x494e4:
                    r2 = r0 + 88;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x494f8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x494fc;
                        return;
                    }
                case 0x494fc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49514;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49514:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x49524:
                    r2 = r0 + 78;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x49538;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x4953c;
                        return;
                    }
                case 0x4953c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49554;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49554:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x49564:
                    r2 = r0 + 76;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x49578;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x4957c;
                        return;
                    }
                case 0x4957c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49594;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49594:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x495a4:
                    r2 = r0 + 77;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x495b8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x495bc;
                        return;
                    }
                case 0x495bc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x495d4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x495d4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x495e4:
                    r2 = r0 + 74;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x495f8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x495fc;
                        return;
                    }
                case 0x495fc:
                    r11 = r2 + 255;
                case 0x49600:
                    pc=0x49600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49600() throws ExecutionException { /* 0x49600 - 0x49800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49600:
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49614;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49614:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x49624:
                    r2 = r0 + 75;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x49638;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x4963c;
                        return;
                    }
                case 0x4963c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49654;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49654:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x49664:
                    r2 = r0 + 79;
                    pc = 0x49668;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x4966c;
                        return;
                    }
                case 0x4966c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49674:
                    r2 = r0 + 72;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x49688;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x4968c;
                        return;
                    }
                case 0x4968c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x496a4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x496a4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x496b4:
                    r2 = r0 + 90;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x496c8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x496cc;
                        return;
                    }
                case 0x496cc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x496e4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x496e4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x496f4:
                    r2 = r0 + 89;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x49708;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x4970c;
                        return;
                    }
                case 0x4970c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49724;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49724:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x49734:
                    r2 = r0 + 91;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x49748;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x4974c;
                        return;
                    }
                case 0x4974c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49764;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49764:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49800;
                    run_49800(); return;
                case 0x49800:
                    pc=0x49800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49800() throws ExecutionException { /* 0x49800 - 0x49a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49800:
                    r5 = r0 - r5;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49a00:
                    pc=0x49a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49a00() throws ExecutionException { /* 0x49a00 - 0x49c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49a00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48740;
                    run_48600(); return;
                case 0x49c00:
                    pc=0x49c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49c00() throws ExecutionException { /* 0x49c00 - 0x49e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49c00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49524;
                    run_49400(); return;
                case 0x49e00:
                    pc=0x49e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49e00() throws ExecutionException { /* 0x49e00 - 0x4a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49e00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x48a10;
                    run_48a00(); return;
                case 0x4a000:
                    pc=0x4a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a000() throws ExecutionException { /* 0x4a000 - 0x4a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a000:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x48a50;
                    run_48a00(); return;
                case 0x4a200:
                    pc=0x4a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a200() throws ExecutionException { /* 0x4a200 - 0x4a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x48810;
                    run_48800(); return;
                case 0x4a400:
                    pc=0x4a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a400() throws ExecutionException { /* 0x4a400 - 0x4a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a400:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x487d0;
                    run_48600(); return;
                case 0x4a600:
                    pc=0x4a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a600() throws ExecutionException { /* 0x4a600 - 0x4a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a600:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x48850;
                    run_48800(); return;
                case 0x4a800:
                    pc=0x4a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a800() throws ExecutionException { /* 0x4a800 - 0x4aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48890;
                    run_48800(); return;
                case 0x4aa00:
                    pc=0x4aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4aa00() throws ExecutionException { /* 0x4aa00 - 0x4ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4aa00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48910;
                    run_48800(); return;
                case 0x4ac00:
                    pc=0x4ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ac00() throws ExecutionException { /* 0x4ac00 - 0x4ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ac00:
                    r29 = r29 + -40;
                    r2 = r4 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ac70;
                        continue;
                    }
                    r6 = r5 + r0;
                    r4 = r18 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ac40;
                    pc=0x48950;
                    run_48800(); return;
                case 0x4ac40:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4acc4;
                        continue;
                    }
                case 0x4ac4c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ac70:
                    r16 = r0 + 256;
                    r19 = r0 + -1;
                    r20 = r0 + 34;
                case 0x4ac7c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ac88;
                    pc=0x39200;
                    run_39200(); return;
                case 0x4ac88:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r6 = r16 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4aca0;
                    pc=0x48950;
                    run_48800(); return;
                case 0x4aca0:
                    if(r2 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x4ac4c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4acb4;
                    pc=0x39400;
                    run_39400(); return;
                case 0x4acb4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = r16 << 1;
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x4ac7c;
                        continue;
                    }
                case 0x4acc4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ae00:
                    pc=0x4ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ae00() throws ExecutionException { /* 0x4ae00 - 0x4b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ae00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48950;
                    run_48800(); return;
                case 0x4b000:
                    pc=0x4b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b000() throws ExecutionException { /* 0x4b000 - 0x4b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48b10;
                    run_48a00(); return;
                case 0x4b200:
                    pc=0x4b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b200() throws ExecutionException { /* 0x4b200 - 0x4b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b200:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48a90;
                    run_48a00(); return;
                case 0x4b400:
                    pc=0x4b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b400() throws ExecutionException { /* 0x4b400 - 0x4b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b400:
                    r3 = r4 + r0;
                    r2 = r5 & 65535;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 & 65535;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49564;
                    run_49400(); return;
                case 0x4b600:
                    pc=0x4b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b600() throws ExecutionException { /* 0x4b600 - 0x4b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b600:
                    r3 = r4 + r0;
                    r2 = r5 & 65535;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 & 65535;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x495a4;
                    run_49400(); return;
                case 0x4b800:
                    pc=0x4b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b800() throws ExecutionException { /* 0x4b800 - 0x4ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b800:
                    r3 = r4 + r0;
                    r2 = r5 & 65535;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 & 65535;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48cfc;
                    run_48c00(); return;
                case 0x4ba00:
                    pc=0x4ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ba00() throws ExecutionException { /* 0x4ba00 - 0x4bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ba00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x495e4;
                    run_49400(); return;
                case 0x4bc00:
                    pc=0x4bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4bc00() throws ExecutionException { /* 0x4bc00 - 0x4be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4bc00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49624;
                    run_49600(); return;
                case 0x4be00:
                    pc=0x4be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4be00() throws ExecutionException { /* 0x4be00 - 0x4c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4be00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48ad0;
                    run_48a00(); return;
                case 0x4c000:
                    pc=0x4c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c000() throws ExecutionException { /* 0x4c000 - 0x4c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c000:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4c030;
                    pc=0x48b90;
                    run_48a00(); return;
                case 0x4c030:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c200:
                    pc=0x4c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c200() throws ExecutionException { /* 0x4c200 - 0x4c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x48bfc;
                    run_48a00(); return;
                case 0x4c400:
                    pc=0x4c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c400() throws ExecutionException { /* 0x4c400 - 0x4c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c400:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r5 = r5 + 26632;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4c428;
                    pc=0x36600;
                    run_36600(); return;
                case 0x4c428:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c600:
                    pc=0x4c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c600() throws ExecutionException { /* 0x4c600 - 0x4c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c600:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x48c3c;
                    run_48c00(); return;
                case 0x4c800:
                    pc=0x4c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c800() throws ExecutionException { /* 0x4c800 - 0x4ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c800:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x48c7c;
                    run_48c00(); return;
                case 0x4ca00:
                    pc=0x4ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ca00() throws ExecutionException { /* 0x4ca00 - 0x4cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ca00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r7 = r6 << 16;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r7 >> 16;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48cbc;
                    run_48c00(); return;
                case 0x4cc00:
                    pc=0x4cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4cc00() throws ExecutionException { /* 0x4cc00 - 0x4ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4cc00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48d3c;
                    run_48c00(); return;
                case 0x4ce00:
                    pc=0x4ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ce00() throws ExecutionException { /* 0x4ce00 - 0x4d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ce00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x48d7c;
                    run_48c00(); return;
                case 0x4d000:
                    pc=0x4d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d000() throws ExecutionException { /* 0x4d000 - 0x4d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48dcc;
                    run_48c00(); return;
                case 0x4d200:
                    pc=0x4d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d200() throws ExecutionException { /* 0x4d200 - 0x4d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d200:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48e0c;
                    run_48e00(); return;
                case 0x4d400:
                    pc=0x4d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d400() throws ExecutionException { /* 0x4d400 - 0x4d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d400:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48e4c;
                    run_48e00(); return;
                case 0x4d600:
                    pc=0x4d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d600() throws ExecutionException { /* 0x4d600 - 0x4d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d600:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4d640;
                    pc=0x48e8c;
                    run_48e00(); return;
                case 0x4d640:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d800:
                    pc=0x4d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d800() throws ExecutionException { /* 0x4d800 - 0x4da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d800:
                    r2 = r4 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    r3 = r0 + 8;
                    r8 = r5 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r16 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4d864;
                        continue;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d8a8;
                        continue;
                    }
                    r3 = r0 + 2;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4d8c8;
                        continue;
                    }
                case 0x4d844:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d864:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r9 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r2 + r0;
                    r6 = r8 + r0;
                    r7 = r9 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4d894;
                    pc=0x48e8c;
                    run_48e00(); return;
                case 0x4d894:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d8a8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d8c8:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r5 + 26672;
                    /* Next insn is delay slot */ 
                    r31=0x4d8e0;
                    pc=0x36600;
                    run_36600(); return;
                case 0x4d8e0:
                    /* Next insn is delay slot */ 
                    pc=0x4d844;
                    continue;
                case 0x4da00:
                    pc=0x4da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4da00() throws ExecutionException { /* 0x4da00 - 0x4dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4da00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48ed8;
                    run_48e00(); return;
                case 0x4dc00:
                    pc=0x4dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4dc00() throws ExecutionException { /* 0x4dc00 - 0x4de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4dc00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48f18;
                    run_48e00(); return;
                case 0x4de00:
                    pc=0x4de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4de00() throws ExecutionException { /* 0x4de00 - 0x4e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4de00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48f98;
                    run_48e00(); return;
                case 0x4e000:
                    pc=0x4e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e000() throws ExecutionException { /* 0x4e000 - 0x4e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e000:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48f58;
                    run_48e00(); return;
                case 0x4e200:
                    pc=0x4e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e200() throws ExecutionException { /* 0x4e200 - 0x4e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e200:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48fd8;
                    run_48e00(); return;
                case 0x4e400:
                    pc=0x4e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e400() throws ExecutionException { /* 0x4e400 - 0x4e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e400:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x496f4;
                    run_49600(); return;
                case 0x4e600:
                    pc=0x4e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e600() throws ExecutionException { /* 0x4e600 - 0x4e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e600:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49018;
                    run_49000(); return;
                case 0x4e800:
                    pc=0x4e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e800() throws ExecutionException { /* 0x4e800 - 0x4ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e800:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4e838;
                    pc=0x490a4;
                    run_49000(); return;
                case 0x4e838:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ea00:
                    pc=0x4ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ea00() throws ExecutionException { /* 0x4ea00 - 0x4ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ea00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4ea38;
                    pc=0x49058;
                    run_49000(); return;
                case 0x4ea38:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ec00:
                    pc=0x4ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ec00() throws ExecutionException { /* 0x4ec00 - 0x4ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ec00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49130;
                    run_49000(); return;
                case 0x4ee00:
                    pc=0x4ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ee00() throws ExecutionException { /* 0x4ee00 - 0x4f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ee00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x490f0;
                    run_49000(); return;
                case 0x4f000:
                    pc=0x4f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f000() throws ExecutionException { /* 0x4f000 - 0x4f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49170;
                    run_49000(); return;
                case 0x4f200:
                    pc=0x4f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f200() throws ExecutionException { /* 0x4f200 - 0x4f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f200:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4f240;
                    pc=0x491b0;
                    run_49000(); return;
                case 0x4f240:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4f400:
                    pc=0x4f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f400() throws ExecutionException { /* 0x4f400 - 0x4f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f400:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4f440;
                    pc=0x491fc;
                    run_49000(); return;
                case 0x4f440:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4f600:
                    pc=0x4f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f600() throws ExecutionException { /* 0x4f600 - 0x4f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f600:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4f638;
                    pc=0x49248;
                    run_49200(); return;
                case 0x4f638:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4f800:
                    pc=0x4f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f800() throws ExecutionException { /* 0x4f800 - 0x4fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f800:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4f830;
                    pc=0x492e4;
                    run_49200(); return;
                case 0x4f830:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4fa00:
                    pc=0x4fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4fa00() throws ExecutionException { /* 0x4fa00 - 0x4fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4fa00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4fa30;
                    pc=0x49324;
                    run_49200(); return;
                case 0x4fa30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4fc00:
                    pc=0x4fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4fc00() throws ExecutionException { /* 0x4fc00 - 0x4fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4fc00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49674;
                    run_49600(); return;
                case 0x4fe00:
                    pc=0x4fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4fe00() throws ExecutionException { /* 0x4fe00 - 0x50000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4fe00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49364;
                    run_49200(); return;
                case 0x50000:
                    pc=0x50000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50000() throws ExecutionException { /* 0x50000 - 0x50200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50000:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x493a4;
                    run_49200(); return;
                case 0x50200:
                    pc=0x50200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50200() throws ExecutionException { /* 0x50200 - 0x50400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50200:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x493e4;
                    run_49200(); return;
                case 0x50400:
                    pc=0x50400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50400() throws ExecutionException { /* 0x50400 - 0x50600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50400:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x49424;
                    run_49400(); return;
                case 0x50600:
                    pc=0x50600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50600() throws ExecutionException { /* 0x50600 - 0x50800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50600:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x49464;
                    run_49400(); return;
                case 0x50800:
                    pc=0x50800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50800() throws ExecutionException { /* 0x50800 - 0x50a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50800:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x494a4;
                    run_49400(); return;
                case 0x50a00:
                    pc=0x50a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50a00() throws ExecutionException { /* 0x50a00 - 0x50c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50a00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x494e4;
                    run_49400(); return;
                case 0x50c00:
                    pc=0x50c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50c00() throws ExecutionException { /* 0x50c00 - 0x50e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50c00:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x496b4;
                    run_49600(); return;
                case 0x50e00:
                    pc=0x50e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50e00() throws ExecutionException { /* 0x50e00 - 0x51000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50e00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x49734;
                    run_49600(); return;
                case 0x51000:
                    pc=0x51000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51000() throws ExecutionException { /* 0x51000 - 0x51200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51000:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48990;
                    run_48800(); return;
                case 0x51200:
                    pc=0x51200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51200() throws ExecutionException { /* 0x51200 - 0x51400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51200:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5125c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x5122c;
                    pc=0x48950;
                    run_48800(); return;
                case 0x5122c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x512b4;
                        continue;
                    }
                case 0x51238:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5125c:
                    r18 = r4 + r0;
                    r16 = r0 + 256;
                    r19 = r0 + -1;
                    r20 = r0 + 34;
                case 0x5126c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51278;
                    pc=0x39200;
                    run_39200(); return;
                case 0x51278:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r6 = r16 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51290;
                    pc=0x48950;
                    run_48800(); return;
                case 0x51290:
                    if(r2 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x51238;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x512a4;
                    pc=0x39400;
                    run_39400(); return;
                case 0x512a4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = r16 << 1;
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x5126c;
                        continue;
                    }
                case 0x512b4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51400:
                    pc=0x51400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51400() throws ExecutionException { /* 0x51400 - 0x51600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51400:
                    r6 = r5 + r0;
                    r7 = r0 + r0;
                    r5 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x48910;
                    run_48800(); return;
                case 0x51600:
                    pc=0x51600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51600() throws ExecutionException { /* 0x51600 - 0x51800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51600:
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r5 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + 26632;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x51628;
                    pc=0x36600;
                    run_36600(); return;
                case 0x51628:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51800:
                    pc=0x51800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51800() throws ExecutionException { /* 0x51800 - 0x51a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51800:
                    r8 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r3 = r0 + 8;
                    r2 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    if(r8 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5185c;
                        continue;
                    }
                    r16 = r4 + r0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51874;
                        continue;
                    }
                    r3 = r0 + 2;
                    if(r6 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x51894;
                        continue;
                    }
                case 0x5183c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5185c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x48e8c;
                    run_48e00(); return;
                case 0x51874:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51894:
                    r3 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r5 + 26672;
                    /* Next insn is delay slot */ 
                    r31=0x518b0;
                    pc=0x36600;
                    run_36600(); return;
                case 0x518b0:
                    /* Next insn is delay slot */ 
                    pc=0x5183c;
                    continue;
                case 0x51a00:
                    pc=0x51a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51a00() throws ExecutionException { /* 0x51a00 - 0x51c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51a00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51c00:
                    pc=0x51c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51c00() throws ExecutionException { /* 0x51c00 - 0x51e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51c00:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x51c10;
                    pc=0x5a200;
                    run_5a200(); return;
                case 0x51c10:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51c30;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = 7 << 16;
                    r2 = r2 + 26708;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51c30:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51e00:
                    pc=0x51e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51e00() throws ExecutionException { /* 0x51e00 - 0x52000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51e00:
                    r29 = r29 + -32;
                    r2 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r6 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51eb8;
                        continue;
                    }
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51e88;
                        continue;
                    }
                    r5 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r3 = r0 + -1;
                    if(r5 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x51e88;
                        continue;
                    }
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x51e50;
                    pc=0x5fe00;
                    run_5fe00(); return;
                case 0x51e50:
                    r17 = r2 + r0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51e68;
                        continue;
                    }
                case 0x51e5c:
                    r2 = r0 + -1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                case 0x51e68:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51e88:
                    /* Next insn is delay slot */ 
                    r31=0x51e90;
                    pc=0x33200;
                    run_33200(); return;
                case 0x51e90:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r0 + 22;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51eb8:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51e68;
                        continue;
                    }
                    r18 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51ecc;
                    pc=0x5fe00;
                    run_5fe00(); return;
                case 0x51ecc:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51ee0;
                    pc=0x5fe00;
                    run_5fe00(); return;
                case 0x51ee0:
                    /* Next insn is delay slot */ 
                    pc=0x51e5c;
                    continue;
                case 0x52000:
                    pc=0x52000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52000() throws ExecutionException { /* 0x52000 - 0x52200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52000:
                    r29 = r29 + -96;
                    r5 = r0 + r0;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x5201c;
                    pc=0x66800;
                    run_66800(); return;
                case 0x5201c:
                    r17 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x520ec;
                        continue;
                    }
                    r4 = r2 + r0;
                    r5 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x52038;
                    pc=0x66600;
                    run_66600(); return;
                case 0x52038:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x520b4;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 16384;
                    r3 = r3 & 61440;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x520b4;
                        continue;
                    }
                    r4 = r0 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x52060;
                    pc=0x39200;
                    run_39200(); return;
                case 0x52060:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x520f8;
                        continue;
                    }
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    r4 = r0 + 4096;
                    /* Next insn is delay slot */ 
                    r31=0x5207c;
                    pc=0x39200;
                    run_39200(); return;
                case 0x5207c:
                    r3 = r0 + 4096;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52120;
                        continue;
                    }
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x5209c:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 96;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x520b4:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x520c0;
                    pc=0x66200;
                    run_66200(); return;
                case 0x520c0:
                    /* Next insn is delay slot */ 
                    r31=0x520c8;
                    pc=0x33200;
                    run_33200(); return;
                case 0x520c8:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r3 = r0 + 20;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 96;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x520ec:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5209c;
                    continue;
                case 0x520f8:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x52104;
                    pc=0x66200;
                    run_66200(); return;
                case 0x52104:
                    /* Next insn is delay slot */ 
                    r31=0x5210c;
                    pc=0x33200;
                    run_33200(); return;
                case 0x5210c:
                    r3 = r0 + 12;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5209c;
                    continue;
                case 0x52120:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5212c;
                    pc=0x66200;
                    run_66200(); return;
                case 0x5212c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x52138;
                    pc=0x39400;
                    run_39400(); return;
                case 0x52138:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5209c;
                    continue;
                case 0x52200:
                    pc=0x52200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52200() throws ExecutionException { /* 0x52200 - 0x52400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52200:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x52218;
                    pc=0x33200;
                    run_33200(); return;
                case 0x52218:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52284;
                        continue;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x52284;
                        continue;
                    }
                    r6 = r3 + r0;
                case 0x5223c:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + r6;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x522c4;
                        continue;
                    }
                    r3 = r5 - r3;
                    r3 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x522c4;
                        continue;
                    }
                    r4 = r6 + r4;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r4;
                case 0x52270:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52284:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r6 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r7 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x522a0;
                    pc=0x48b90;
                    run_48a00(); return;
                case 0x522a0:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x522dc;
                        continue;
                    }
                    r5 = r2 + r0;
                    r6 = r0 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5223c;
                    continue;
                case 0x522c4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x522dc:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52270;
                    continue;
                case 0x52400:
                    pc=0x52400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52400() throws ExecutionException { /* 0x52400 - 0x52600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52400:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r4 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x52424;
                    pc=0x39400;
                    run_39400(); return;
                case 0x52424:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x52430;
                    pc=0x39400;
                    run_39400(); return;
                case 0x52430:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x66200;
                    run_66200(); return;
                case 0x52600:
                    pc=0x52600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52600() throws ExecutionException { /* 0x52600 - 0x52800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52600:
                    r2 = r4 >>> 16;
                    r29 = r29 + -40;
                    r2 = r2 & 255;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r4 >>> 8;
                    r2 = r2 & 255;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r16 = 18 << 16;
                    r2 = r4 & 255;
                    r7 = r4 + r0;
                    r6 = 7 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r4 = r16 + -27328;
                    r5 = r0 + 18;
                    r6 = r6 + 26724;
                    r7 = r7 >>> 24;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x52650;
                    pc=0x60a00;
                    run_60a00(); return;
                case 0x52650:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r16 + -27328;
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52800:
                    pc=0x52800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52800() throws ExecutionException { /* 0x52800 - 0x52a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52800:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52a00:
                    pc=0x52a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52a00() throws ExecutionException { /* 0x52a00 - 0x52c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52a00:
                    r2 = (r4&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52a28;
                        continue;
                    }
                    r2 = 7 << 16;
                    r2 = r2 + 26976;
                    r4 = r4 << 2;
                    r4 = r4 + r2;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52a28:
                    r2 = 7 << 16;
                    r2 = r2 + 26736;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52c00:
                    pc=0x52c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52c00() throws ExecutionException { /* 0x52c00 - 0x52e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52c00:
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r4 + r0;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32244)>>>12][((r28+-32244)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52c44;
                        continue;
                    }
                    r3 = 7 << 16;
                    r2 = r2 << 2;
                    r3 = r3 + 26976;
                    r2 = r2 + r3;
                    r5 = 7 << 16;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r5 + 26752;
                    /* Next insn is delay slot */ 
                    pc=0x36600;
                    run_36600(); return;
                case 0x52c44:
                    r7 = 7 << 16;
                    r5 = 7 << 16;
                    r7 = r7 + 26736;
                    r5 = r5 + 26752;
                    /* Next insn is delay slot */ 
                    pc=0x36600;
                    run_36600(); return;
                case 0x52e00:
                    pc=0x52e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52e00() throws ExecutionException { /* 0x52e00 - 0x53000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52e00:
                    r29 = r29 + -40;
                    r2 = r0 + 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    r16 = r6 + r0;
                    if(r6 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x52ed4;
                        continue;
                    }
                    r2 = r0 + 4;
                    r17 = r5 + r0;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x52ed4;
                        continue;
                    }
                    r18 = r4 + r0;
                    r5 = r18 + r0;
                    r4 = r29 + 16;
                    r6 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x52e4c;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x52e4c:
                    r5 = r18 + r0;
                    r4 = r28 + -32308;
                    r6 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x52e60;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x52e60:
                    r18 = 18 << 16;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r18 + -27456;
                    r7 = r0 + 128;
                    /* Next insn is delay slot */ 
                    r31=0x52e7c;
                    pc=0x496f4;
                    run_49600(); return;
                case 0x52e7c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52ef4;
                        continue;
                    }
                    r2 = 18 << 16;
                    r18 = r18 + -27456;
                    writePages[(r2+-27476)>>>12][((r2+-27476)>>>2)&0x3ff] = r18;
                    r3 = r28 + -32312;
                    r2 = r2 + -27476;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = r28 + -32316;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = r28 + -32308;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r16;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r17;
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32312)>>>12][((r28+-32312)>>>2)&0x3ff] = r0;
                    writePages[(r28+-32316)>>>12][((r28+-32316)>>>2)&0x3ff] = r3;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52ed4:
                    r2 = r0 + r0;
                case 0x52ed8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52ef4:
                    writePages[(r28+-32244)>>>12][((r28+-32244)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52ed8;
                    continue;
                case 0x53000:
                    pc=0x53000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53000() throws ExecutionException { /* 0x53000 - 0x53200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53000:
                    r29 = r29 + -1064;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r2 = r0 + 1024;
                    r5 = r18 + r0;
                    r6 = r29 + 16;
                    r7 = r29 + 1040;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r31;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    writePages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x53038;
                    pc=0x48fd8;
                    run_48e00(); return;
                case 0x53038:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5311c;
                        continue;
                    }
                    r17 = readPages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff];
                    r9 = 18 << 16;
                    r9 = r9 + -28500;
                    r4 = r9 + r0;
                    r5 = r29 + 16;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53060;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x53060:
                    r9 = r2 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53140;
                        continue;
                    }
                    r16 = 18 << 16;
                    r3 = r0 + r0;
                    r7 = r0 + r0;
                    r2 = r0 + r0;
                    r16 = r16 + -29528;
                    /* Next insn is delay slot */ 
                    pc=0x5308c;
                    continue;
                case 0x53088:
                    r3 = r2 + r0;
                case 0x5308c:
                    r8 = r16 + r3;
                    r2 = r9 + r2;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r2;
                    r2 = r3 + 4;
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    r7 = r7 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53088;
                        continue;
                    }
                case 0x530ac:
                    r2 = r7 << 2;
                    r17 = 18 << 16;
                    r2 = r16 + r2;
                    r4 = r17 + -29656;
                    r5 = r18 + r0;
                    r6 = r0 + 128;
                    r17 = r17 + -29656;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x530d4;
                    pc=0x61200;
                    run_61200(); return;
                case 0x530d4:
                    r2 = 18 << 16;
                    writePages[(r2+-29676)>>>12][((r2+-29676)>>>2)&0x3ff] = r17;
                    r3 = r28 + -32320;
                    r2 = r2 + -29676;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    r31 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r3 = r0 + 2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r3 = r0 + 4;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32320)>>>12][((r28+-32320)>>>2)&0x3ff] = r0;
                    r29 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5311c:
                    r31 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    writePages[(r28+-32244)>>>12][((r28+-32244)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    r29 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53140:
                    r16 = 18 << 16;
                    r7 = r0 + r0;
                    r16 = r16 + -29528;
                    /* Next insn is delay slot */ 
                    pc=0x530ac;
                    continue;
                case 0x53200:
                    pc=0x53200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53200() throws ExecutionException { /* 0x53200 - 0x53400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53200:
                    r29 = r29 + -1088;
                    r5 = 7 << 16;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r30;
                    r30 = r4 + r0;
                    r4 = 7 << 16;
                    r4 = r4 + 26760;
                    r5 = r5 + -11612;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r31;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r23;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r22;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r21;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r20;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r19;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x53248;
                    pc=0x36200;
                    run_36200(); return;
                case 0x53248:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53328;
                        continue;
                    }
                    r21 = 18 << 16;
                    r22 = 7 << 16;
                    r21 = r21 + -26284;
                    r23 = 18 << 16;
                    r22 = r22 + 26772;
                    r18 = 18 << 16;
                    r20 = 18 << 16;
                    r19 = r21 + r0;
                case 0x53274:
                    r16 = r0 + 35;
                case 0x53278:
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5328c;
                    pc=0x34400;
                    run_34400(); return;
                case 0x5328c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5331c;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x53278;
                        continue;
                    }
                    r2 = r23 + -20132;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 24;
                    r5 = r22 + r0;
                    r6 = r21 + r0;
                    r7 = r18 + -27308;
                    /* Next insn is delay slot */ 
                    r31=0x532c4;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x532c4:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5331c;
                        continue;
                    }
                    r16 = r20 + -20140;
                    r2 = r18 + -27308;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r4 = r30 + r0;
                    r2 = r28 + -32304;
                    r5 = r19 + r0;
                    writePages[(r20+-20140)>>>12][((r20+-20140)>>>2)&0x3ff] = r19;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    writePages[(r28+-32304)>>>12][((r28+-32304)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x532fc;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x532fc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53274;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53310;
                    pc=0x33800;
                    run_33800(); return;
                case 0x53310:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5332c;
                    continue;
                case 0x5331c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53328;
                    pc=0x33800;
                    run_33800(); return;
                case 0x53328:
                    r2 = r0 + r0;
                case 0x5332c:
                    r31 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r30 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r23 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r22 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r21 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r20 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r19 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    r29 = r29 + 1088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53400:
                    pc=0x53400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53400() throws ExecutionException { /* 0x53400 - 0x53600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53400:
                    r29 = r29 + -1088;
                    r5 = 7 << 16;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r23;
                    r23 = r4 & 65535;
                    r4 = 7 << 16;
                    r4 = r4 + 26760;
                    r5 = r5 + -11612;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r31;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r30;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r22;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r21;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r20;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r19;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x53448;
                    pc=0x36200;
                    run_36200(); return;
                case 0x53448:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5351c;
                        continue;
                    }
                    r20 = 18 << 16;
                    r21 = 7 << 16;
                    r20 = r20 + -26284;
                    r22 = 18 << 16;
                    r21 = r21 + 26772;
                    r18 = 18 << 16;
                    r19 = 18 << 16;
                    r30 = r20 + r0;
                case 0x53474:
                    r16 = r0 + 35;
                case 0x53478:
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5348c;
                    pc=0x34400;
                    run_34400(); return;
                case 0x5348c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53510;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x53478;
                        continue;
                    }
                    r2 = r22 + -20132;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 24;
                    r5 = r21 + r0;
                    r6 = r20 + r0;
                    r7 = r18 + -27308;
                    /* Next insn is delay slot */ 
                    r31=0x534c4;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x534c4:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53510;
                        continue;
                    }
                    r16 = r19 + -20140;
                    r2 = r18 + -27308;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = r28 + -32304;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    addr=r16+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r19+-20140)>>>12][((r19+-20140)>>>2)&0x3ff] = r30;
                    writePages[(r28+-32304)>>>12][((r28+-32304)>>>2)&0x3ff] = r0;
                    if(r2 != r23) {
                        /* Next insn is delay slot */ 
                        pc=0x53474;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53504;
                    pc=0x33800;
                    run_33800(); return;
                case 0x53504:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x53520;
                    continue;
                case 0x53510:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5351c;
                    pc=0x33800;
                    run_33800(); return;
                case 0x5351c:
                    r2 = r0 + r0;
                case 0x53520:
                    r31 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r30 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r23 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r22 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r21 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r20 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r19 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    r29 = r29 + 1088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53600:
                    pc=0x53600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53600() throws ExecutionException { /* 0x53600 - 0x53800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53600:
                    r6 = readPages[(r28+-32300)>>>12][((r28+-32300)>>>2)&0x3ff];
                    r29 = r29 + -2088;
                    writePages[(r29+2084)>>>12][((r29+2084)>>>2)&0x3ff] = r31;
                    writePages[(r29+2080)>>>12][((r29+2080)>>>2)&0x3ff] = r17;
                    writePages[(r29+2076)>>>12][((r29+2076)>>>2)&0x3ff] = r16;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5370c;
                        continue;
                    }
                    r4 = r29 + 1048;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x5362c;
                    pc=0x34400;
                    run_34400(); return;
                case 0x5362c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5370c;
                        continue;
                    }
                    addr=r29+1048;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r2 = r0 + 35;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x536bc;
                        continue;
                    }
                    r2 = 18 << 16;
                    r2 = r2 + -20132;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 1048;
                case 0x53654:
                    r5 = 7 << 16;
                    r17 = 18 << 16;
                    r16 = 18 << 16;
                    r5 = r5 + 26772;
                    r6 = r17 + -26284;
                    r7 = r16 + -27308;
                    /* Next insn is delay slot */ 
                    r31=0x53674;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x53674:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5370c;
                        continue;
                    }
                    r2 = 18 << 16;
                    r17 = r17 + -26284;
                    writePages[(r2+-20140)>>>12][((r2+-20140)>>>2)&0x3ff] = r17;
                    r16 = r16 + -27308;
                    r2 = r2 + -20140;
                    r3 = r28 + -32304;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r16;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32304)>>>12][((r28+-32304)>>>2)&0x3ff] = r0;
                case 0x536a4:
                    r31 = readPages[(r29+2084)>>>12][((r29+2084)>>>2)&0x3ff];
                    r17 = readPages[(r29+2080)>>>12][((r29+2080)>>>2)&0x3ff];
                    r16 = readPages[(r29+2076)>>>12][((r29+2076)>>>2)&0x3ff];
                    r29 = r29 + 2088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x536bc:
                    r6 = readPages[(r28+-32300)>>>12][((r28+-32300)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5370c;
                        continue;
                    }
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x536dc;
                    pc=0x34400;
                    run_34400(); return;
                case 0x536dc:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5370c;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x53728;
                        continue;
                    }
                    r2 = 18 << 16;
                    r2 = r2 + -20132;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x53654;
                    continue;
                case 0x5370c:
                    r31 = readPages[(r29+2084)>>>12][((r29+2084)>>>2)&0x3ff];
                    r17 = readPages[(r29+2080)>>>12][((r29+2080)>>>2)&0x3ff];
                    r16 = readPages[(r29+2076)>>>12][((r29+2076)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 2088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53728:
                    /* Next insn is delay slot */ 
                    r31=0x53730;
                    pc=0x53600;
                    continue;
                case 0x53730:
                    /* Next insn is delay slot */ 
                    pc=0x536a4;
                    continue;
                case 0x53800:
                    pc=0x53800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53800() throws ExecutionException { /* 0x53800 - 0x53a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53800:
                    r4 = readPages[(r28+-32300)>>>12][((r28+-32300)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5381c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x5381c;
                    pc=0x33800;
                    run_33800(); return;
                case 0x5381c:
                    r4 = 7 << 16;
                    r5 = 7 << 16;
                    r4 = r4 + 26760;
                    r5 = r5 + -11612;
                    /* Next insn is delay slot */ 
                    r31=0x53834;
                    pc=0x36200;
                    run_36200(); return;
                case 0x53834:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32300)>>>12][((r28+-32300)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53a00:
                    pc=0x53a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53a00() throws ExecutionException { /* 0x53a00 - 0x53c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53a00:
                    r4 = readPages[(r28+-32300)>>>12][((r28+-32300)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53a1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x53a1c;
                    pc=0x33800;
                    run_33800(); return;
                case 0x53a1c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32300)>>>12][((r28+-32300)>>>2)&0x3ff] = r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53c00:
                    pc=0x53c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53c00() throws ExecutionException { /* 0x53c00 - 0x53e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53c00:
                    r29 = r29 + -1104;
                    r5 = 7 << 16;
                    writePages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff] = r4;
                    r4 = 7 << 16;
                    r4 = r4 + 26788;
                    r5 = r5 + -11612;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r17;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r31;
                    writePages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff] = r30;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r23;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r22;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r21;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r20;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r19;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r18;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x53c48;
                    pc=0x36200;
                    run_36200(); return;
                case 0x53c48:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53d60;
                        continue;
                    }
                    r20 = 18 << 16;
                    r20 = r20 + -21164;
                    r19 = 18 << 16;
                    r18 = r20 + r0;
                case 0x53c64:
                    r16 = r0 + 35;
                case 0x53c68:
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53c7c;
                    pc=0x34400;
                    run_34400(); return;
                case 0x53c7c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53d54;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x53c68;
                        continue;
                    }
                    r3 = 18 << 16;
                    r2 = r3 + -20116;
                    r3 = 18 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r22 = r3 + -23212;
                    r8 = 18 << 16;
                    r3 = 18 << 16;
                    r2 = 18 << 16;
                    r2 = r2 + -20114;
                    r21 = r8 + -24236;
                    r30 = r3 + -25260;
                    r5 = 7 << 16;
                    r23 = 18 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r22;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r4 = r29 + 40;
                    r5 = r5 + 26800;
                    r6 = r20 + r0;
                    r7 = r23 + -22188;
                    /* Next insn is delay slot */ 
                    r31=0x53cf0;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x53cf0:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53d54;
                        continue;
                    }
                    r2 = 7 << 16;
                    r4 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r16 = r19 + -20124;
                    r10 = r23 + -22188;
                    r2 = r2 + -7564;
                    r5 = r18 + r0;
                    writePages[(r19+-20124)>>>12][((r19+-20124)>>>2)&0x3ff] = r18;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r10;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r22;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r21;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r30;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x53d34;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x53d34:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53c64;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53d48;
                    pc=0x33800;
                    run_33800(); return;
                case 0x53d48:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x53d64;
                    continue;
                case 0x53d54:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53d60;
                    pc=0x33800;
                    run_33800(); return;
                case 0x53d60:
                    r2 = r0 + r0;
                case 0x53d64:
                    r31 = readPages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff];
                    r30 = readPages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff];
                    r23 = readPages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff];
                    r22 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    r21 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r20 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r19 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r18 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r17 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r16 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r29 = r29 + 1104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53e00:
                    pc=0x53e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53e00() throws ExecutionException { /* 0x53e00 - 0x54000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53e00:
                    r29 = r29 + -1112;
                    r4 = r4 & 65535;
                    r5 = 7 << 16;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r4;
                    r4 = 7 << 16;
                    r4 = r4 + 26788;
                    r5 = r5 + -11612;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r17;
                    writePages[(r29+1108)>>>12][((r29+1108)>>>2)&0x3ff] = r31;
                    writePages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff] = r30;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r23;
                    writePages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff] = r22;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r21;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r20;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r19;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r18;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x53e4c;
                    pc=0x36200;
                    run_36200(); return;
                case 0x53e4c:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53f60;
                        continue;
                    }
                    r19 = 18 << 16;
                    r22 = 18 << 16;
                    r19 = r19 + -21164;
                    r18 = 18 << 16;
                case 0x53e68:
                    r16 = r0 + 35;
                case 0x53e6c:
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53e80;
                    pc=0x34400;
                    run_34400(); return;
                case 0x53e80:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53f54;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x53e6c;
                        continue;
                    }
                    r2 = r22 + -20116;
                    r3 = 18 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r20 = r3 + -23212;
                    r8 = 18 << 16;
                    r3 = 18 << 16;
                    r2 = 18 << 16;
                    r2 = r2 + -20114;
                    r23 = r8 + -24236;
                    r30 = r3 + -25260;
                    r5 = 7 << 16;
                    r21 = 18 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r23;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r4 = r29 + 40;
                    r5 = r5 + 26800;
                    r6 = r19 + r0;
                    r7 = r21 + -22188;
                    /* Next insn is delay slot */ 
                    r31=0x53ef0;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x53ef0:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53f54;
                        continue;
                    }
                    r2 = 18 << 16;
                    r2 = r2 + -21164;
                    writePages[(r18+-20124)>>>12][((r18+-20124)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r16 = r18 + -20124;
                    r2 = r2 + -7564;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    addr=r16+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r10 = r21 + -22188;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r10;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r20;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r23;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r30;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x53e68;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53f48;
                    pc=0x33800;
                    run_33800(); return;
                case 0x53f48:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x53f64;
                    continue;
                case 0x53f54:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53f60;
                    pc=0x33800;
                    run_33800(); return;
                case 0x53f60:
                    r2 = r0 + r0;
                case 0x53f64:
                    r31 = readPages[(r29+1108)>>>12][((r29+1108)>>>2)&0x3ff];
                    r30 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r23 = readPages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff];
                    r22 = readPages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff];
                    r21 = readPages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff];
                    r20 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    r19 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r18 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r17 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r16 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r29 = r29 + 1112;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54000:
                    pc=0x54000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54000() throws ExecutionException { /* 0x54000 - 0x54200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54000:
                    r6 = readPages[(r28+-32296)>>>12][((r28+-32296)>>>2)&0x3ff];
                    r29 = r29 + -2112;
                    writePages[(r29+2108)>>>12][((r29+2108)>>>2)&0x3ff] = r31;
                    writePages[(r29+2104)>>>12][((r29+2104)>>>2)&0x3ff] = r20;
                    writePages[(r29+2100)>>>12][((r29+2100)>>>2)&0x3ff] = r19;
                    writePages[(r29+2096)>>>12][((r29+2096)>>>2)&0x3ff] = r18;
                    writePages[(r29+2092)>>>12][((r29+2092)>>>2)&0x3ff] = r17;
                    writePages[(r29+2088)>>>12][((r29+2088)>>>2)&0x3ff] = r16;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54190;
                        continue;
                    }
                    r4 = r29 + 1064;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x54038;
                    pc=0x34400;
                    run_34400(); return;
                case 0x54038:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54190;
                        continue;
                    }
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r2 = r0 + 35;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x54110;
                        continue;
                    }
                    r2 = 18 << 16;
                    r2 = r2 + -20116;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r18 = 18 << 16;
                    r2 = 18 << 16;
                    r17 = 18 << 16;
                    r16 = 18 << 16;
                    r2 = r2 + -20114;
                    r18 = r18 + -23212;
                    r17 = r17 + -24236;
                    r16 = r16 + -25260;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r4 = r29 + 1064;
                case 0x54090:
                    r5 = 7 << 16;
                    r20 = 18 << 16;
                    r19 = 18 << 16;
                    r5 = r5 + 26800;
                    r6 = r20 + -21164;
                    r7 = r19 + -22188;
                    /* Next insn is delay slot */ 
                    r31=0x540b0;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x540b0:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54190;
                        continue;
                    }
                    r2 = 18 << 16;
                    r20 = r20 + -21164;
                    r3 = 7 << 16;
                    writePages[(r2+-20124)>>>12][((r2+-20124)>>>2)&0x3ff] = r20;
                    r19 = r19 + -22188;
                    r2 = r2 + -20124;
                    r3 = r3 + -7564;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r19;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r18;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r17;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r16;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                case 0x540ec:
                    r31 = readPages[(r29+2108)>>>12][((r29+2108)>>>2)&0x3ff];
                    r20 = readPages[(r29+2104)>>>12][((r29+2104)>>>2)&0x3ff];
                    r19 = readPages[(r29+2100)>>>12][((r29+2100)>>>2)&0x3ff];
                    r18 = readPages[(r29+2096)>>>12][((r29+2096)>>>2)&0x3ff];
                    r17 = readPages[(r29+2092)>>>12][((r29+2092)>>>2)&0x3ff];
                    r16 = readPages[(r29+2088)>>>12][((r29+2088)>>>2)&0x3ff];
                    r29 = r29 + 2112;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54110:
                    r6 = readPages[(r28+-32296)>>>12][((r28+-32296)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54190;
                        continue;
                    }
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x54130;
                    pc=0x34400;
                    run_34400(); return;
                case 0x54130:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54190;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x541b8;
                        continue;
                    }
                    r2 = 18 << 16;
                    r2 = r2 + -20116;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r18 = 18 << 16;
                    r2 = 18 << 16;
                    r17 = 18 << 16;
                    r16 = 18 << 16;
                    r2 = r2 + -20114;
                    r18 = r18 + -23212;
                    r17 = r17 + -24236;
                    r16 = r16 + -25260;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r4 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x54090;
                    continue;
                case 0x54190:
                    r31 = readPages[(r29+2108)>>>12][((r29+2108)>>>2)&0x3ff];
                    r20 = readPages[(r29+2104)>>>12][((r29+2104)>>>2)&0x3ff];
                    r19 = readPages[(r29+2100)>>>12][((r29+2100)>>>2)&0x3ff];
                    r18 = readPages[(r29+2096)>>>12][((r29+2096)>>>2)&0x3ff];
                    r17 = readPages[(r29+2092)>>>12][((r29+2092)>>>2)&0x3ff];
                    r16 = readPages[(r29+2088)>>>12][((r29+2088)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 2112;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x541b8:
                    /* Next insn is delay slot */ 
                    r31=0x541c0;
                    pc=0x54000;
                    continue;
                case 0x541c0:
                    /* Next insn is delay slot */ 
                    pc=0x540ec;
                    continue;
                case 0x54200:
                    pc=0x54200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54200() throws ExecutionException { /* 0x54200 - 0x54400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54200:
                    r4 = readPages[(r28+-32296)>>>12][((r28+-32296)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5421c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x5421c;
                    pc=0x33800;
                    run_33800(); return;
                case 0x5421c:
                    r4 = 7 << 16;
                    r5 = 7 << 16;
                    r4 = r4 + 26760;
                    r5 = r5 + -11612;
                    /* Next insn is delay slot */ 
                    r31=0x54234;
                    pc=0x36200;
                    run_36200(); return;
                case 0x54234:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32296)>>>12][((r28+-32296)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54400:
                    pc=0x54400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54400() throws ExecutionException { /* 0x54400 - 0x54600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54400:
                    r4 = readPages[(r28+-32296)>>>12][((r28+-32296)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5441c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x5441c;
                    pc=0x33800;
                    run_33800(); return;
                case 0x5441c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32296)>>>12][((r28+-32296)>>>2)&0x3ff] = r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54600:
                    pc=0x54600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54600() throws ExecutionException { /* 0x54600 - 0x54800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54600:
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x54620;
                    pc=0x59000;
                    run_59000(); return;
                case 0x54620:
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r16 = 18 << 16;
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x54634;
                    pc=0x34000;
                    run_34000(); return;
                case 0x54634:
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r4 = r16 + -30700;
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x5464c;
                    pc=0x34400;
                    run_34400(); return;
                case 0x5464c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x546b8;
                        continue;
                    }
                    r4 = r16 + -30700;
                    /* Next insn is delay slot */ 
                    r31=0x54660;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x54660:
                    r17 = r2 + -1;
                    r16 = r16 + -30700;
                    r3 = r16 + r17;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 10;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x54680;
                        continue;
                    }
                    r17 = r2 + r0;
                case 0x54680:
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r17 = r16 + r17;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x54698;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x54698:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x546b8:
                    r17 = r0 + r0;
                    r16 = r16 + -30700;
                    /* Next insn is delay slot */ 
                    pc=0x54680;
                    continue;
                case 0x54800:
                    pc=0x54800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54800() throws ExecutionException { /* 0x54800 - 0x54a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54800:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r0 + 128;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r18 = r5 + r0;
                    r17 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5482c;
                    pc=0x39200;
                    run_39200(); return;
                case 0x5482c:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x548bc;
                        continue;
                    }
                    r4 = r2 + r0;
                    r5 = r0 + 128;
                    r6 = r18 + r0;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x54850;
                    pc=0x69000;
                    run_69000(); return;
                case 0x54850:
                    r3 = r2 < 128 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54878;
                        continue;
                    }
                case 0x5485c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54878:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = r2 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x54888;
                    pc=0x3bc00;
                    run_3bc00(); return;
                case 0x54888:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x548c8;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r18 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = r17 + r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x69400;
                    run_69400(); return;
                case 0x548bc:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5485c;
                    continue;
                case 0x548c8:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x548d4;
                    pc=0x39400;
                    run_39400(); return;
                case 0x548d4:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5485c;
                    continue;
                case 0x54a00:
                    pc=0x54a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54a00() throws ExecutionException { /* 0x54a00 - 0x54c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54a00:
                    r4 = 7 << 16;
                    r4 = r4 + 26836;
                    /* Next insn is delay slot */ 
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x54c00:
                    pc=0x54c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54c00() throws ExecutionException { /* 0x54c00 - 0x54e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54c00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54cb4;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54cb4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x54c38;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x54c38:
                    r2 = r2 + -1;
                    r2 = r16 + r2;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54d0c;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 47;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x54ce0;
                        continue;
                    }
                    r4 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x54c78;
                    continue;
                case 0x54c68:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x54ce0;
                        continue;
                    }
                case 0x54c78:
                    r2 = r2 + -1;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x54c68;
                        continue;
                    }
                case 0x54c84:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 47;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x54db4;
                        continue;
                    }
                    r3 = 7 << 16;
                    r3 = r3 + 26848;
                case 0x54c9c:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = 18 << 16;
                    addr=r2+-31724;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -31724;
                    /* Next insn is delay slot */ 
                    pc=0x54cc4;
                    continue;
                case 0x54cb4:
                    r2 = 18 << 16;
                    r3 = r0 + 11776;
                    addr=r2+-31724;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -31724;
                case 0x54cc4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54ce0:
                    r4 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x54cfc;
                    continue;
                case 0x54cec:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x54d0c;
                        continue;
                    }
                case 0x54cfc:
                    r2 = r2 + -1;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54cec;
                        continue;
                    }
                case 0x54d0c:
                    r4 = r0 + 47;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x54d30;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x54c84;
                    continue;
                case 0x54d20:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x54d40;
                        continue;
                    }
                case 0x54d30:
                    r2 = r2 + -1;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54d20;
                        continue;
                    }
                case 0x54d40:
                    r2 = r2 - r16;
                    r3 = r2 + 2;
                    r3 = (r3&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54d98;
                        continue;
                    }
                    r17 = r2 + 1;
                    r18 = 18 << 16;
                    r4 = r18 + -31724;
                    r5 = r16 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x54d70;
                    pc=0x61200;
                    run_61200(); return;
                case 0x54d70:
                    r2 = r18 + -31724;
                    r17 = r17 + r2;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54d98:
                    /* Next insn is delay slot */ 
                    r31=0x54da0;
                    pc=0x33200;
                    run_33200(); return;
                case 0x54da0:
                    r3 = r0 + 91;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x54cc4;
                    continue;
                case 0x54db4:
                    r3 = 7 << 16;
                    r3 = r3 + 26844;
                    /* Next insn is delay slot */ 
                    pc=0x54c9c;
                    continue;
                case 0x54e00:
                    pc=0x54e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54e00() throws ExecutionException { /* 0x54e00 - 0x55000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54e00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54f4c;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54f4c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x54e34;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x54e34:
                    r2 = r2 + -1;
                    r2 = r16 + r2;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54f8c;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 47;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x54ee0;
                        continue;
                    }
                    r4 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x54e74;
                    continue;
                case 0x54e64:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x54ed4;
                        continue;
                    }
                case 0x54e74:
                    r2 = r2 + -1;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x54e64;
                        continue;
                    }
                case 0x54e80:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 47;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x54f74;
                        continue;
                    }
                case 0x54e90:
                    r5 = r2 + r0;
                    r2 = r0 + r0;
                case 0x54e98:
                    r16 = r2 + 1;
                    r17 = 18 << 16;
                    r6 = r16 + r0;
                    r4 = r17 + -32748;
                    /* Next insn is delay slot */ 
                    r31=0x54eb0;
                    pc=0x61200;
                    run_61200(); return;
                case 0x54eb0:
                    r2 = r17 + -32748;
                    r16 = r16 + r2;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x54ebc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54ed4:
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54e90;
                        continue;
                    }
                case 0x54ee0:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r3 = r0 + 47;
                    r5 = r2 + r0;
                    r4 = r0 + 47;
                    if(r6 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x54f10;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x54e90;
                    continue;
                case 0x54f00:
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x54f1c;
                        continue;
                    }
                case 0x54f10:
                    r5 = r5 + -1;
                    if(r5 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x54f00;
                        continue;
                    }
                case 0x54f1c:
                    r2 = r2 - r5;
                    r3 = r2 + 2;
                    r3 = (r3&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54e98;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x54f38;
                    pc=0x33200;
                    run_33200(); return;
                case 0x54f38:
                    r3 = r0 + 91;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x54ebc;
                    continue;
                case 0x54f4c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = 18 << 16;
                    r3 = r0 + 11776;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    addr=r2+-32748;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -32748;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54f74:
                    r2 = 18 << 16;
                    r3 = r0 + 12032;
                    addr=r2+-32748;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -32748;
                    /* Next insn is delay slot */ 
                    pc=0x54ebc;
                    continue;
                case 0x54f8c:
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x54e80;
                        continue;
                    }
                    r5 = r2 + r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x54e98;
                    continue;
                case 0x55000:
                    pc=0x55000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55000() throws ExecutionException { /* 0x55000 - 0x55200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55000:
                    r29 = r29 + -72;
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + 32;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r31;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    r17 = r4 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x5503c;
                    pc=0x33200;
                    run_33200(); return;
                case 0x5503c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x55098;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 26672;
                    /* Next insn is delay slot */ 
                    r31=0x5506c;
                    pc=0x36600;
                    run_36600(); return;
                case 0x5506c:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x55074:
                    /* Next insn is delay slot */ 
                    r31=0x5507c;
                    pc=0x33200;
                    run_33200(); return;
                case 0x5507c:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5545c;
                        run_55400(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x550d0;
                    continue;
                case 0x55098:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x550c0;
                    pc=0x48e8c;
                    run_48e00(); return;
                case 0x550c0:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x55074;
                        continue;
                    }
                case 0x550cc:
                    r18 = r0 + r0;
                case 0x550d0:
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 10;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    addr=r17+31;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x550f4;
                    pc=0x33200;
                    run_33200(); return;
                case 0x550f4:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x55150;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 26672;
                    /* Next insn is delay slot */ 
                    r31=0x55124;
                    pc=0x36600;
                    run_36600(); return;
                case 0x55124:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x5512c:
                    /* Next insn is delay slot */ 
                    r31=0x55134;
                    pc=0x33200;
                    run_33200(); return;
                case 0x55134:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x55470;
                        run_55400(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x55184;
                    continue;
                case 0x55150:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x55178;
                    pc=0x48e8c;
                    run_48e00(); return;
                case 0x55178:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5512c;
                        continue;
                    }
                case 0x55184:
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    addr=r17+63;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x551a8;
                    pc=0x33200;
                    run_33200(); return;
                case 0x551a8:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x55204;
                        run_55200(); return;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 26672;
                    /* Next insn is delay slot */ 
                    r31=0x551d8;
                    pc=0x36600;
                    run_36600(); return;
                case 0x551d8:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x551e0:
                    /* Next insn is delay slot */ 
                    r31=0x551e8;
                    pc=0x33200;
                    run_33200(); return;
                case 0x551e8:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x55484;
                        run_55400(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x55238;
                    run_55200(); return;
                case 0x55200:
                    pc=0x55200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55200() throws ExecutionException { /* 0x55200 - 0x55400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55200:
                case 0x55204:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + 64;
                    /* Next insn is delay slot */ 
                    r31=0x5522c;
                    pc=0x48e8c;
                    run_48e00(); return;
                case 0x5522c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x551e0;
                        run_55000(); return;
                    }
                case 0x55238:
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 4;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    addr=r17+95;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x5525c;
                    pc=0x33200;
                    run_33200(); return;
                case 0x5525c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r20 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = r17 + 96;
                    r19 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x552bc;
                        continue;
                    }
                    r4 = readPages[(r19+12)>>>12][((r19+12)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 26672;
                    /* Next insn is delay slot */ 
                    r31=0x55290;
                    pc=0x36600;
                    run_36600(); return;
                case 0x55290:
                    r2 = r0 + 22;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                case 0x55298:
                    /* Next insn is delay slot */ 
                    r31=0x552a0;
                    pc=0x33200;
                    run_33200(); return;
                case 0x552a0:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x55498;
                        run_55400(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x552f0;
                    continue;
                case 0x552bc:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r19 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x552e4;
                    pc=0x48e8c;
                    run_48e00(); return;
                case 0x552e4:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x55298;
                        continue;
                    }
                case 0x552f0:
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    addr=r17+127;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r2 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55360;
                        continue;
                    }
                    r4 = r0 + 32;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x55324;
                    continue;
                case 0x55314:
                    r3 = r3 + -1;
                    r16 = r16 + 1;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x55360;
                        continue;
                    }
                case 0x55324:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r5 = r5 + -9;
                    r5 = r5 & 255;
                    r5 = (r5&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55314;
                        continue;
                    }
                    r2 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x553e4;
                        continue;
                    }
                    r3 = r3 + -1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 + 1;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x55324;
                        continue;
                    }
                case 0x55360:
                    r2 = r0 + 6;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x55380;
                    pc=0x33200;
                    run_33200(); return;
                case 0x55380:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x553f0;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 7 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 26672;
                    /* Next insn is delay slot */ 
                    r31=0x553b0;
                    pc=0x36600;
                    run_36600(); return;
                case 0x553b0:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x553b8:
                    /* Next insn is delay slot */ 
                    r31=0x553c0;
                    pc=0x33200;
                    run_33200(); return;
                case 0x553c0:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x55450;
                        run_55400(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x553d8;
                    pc=0x33200;
                    run_33200(); return;
                case 0x553d8:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x55424;
                    run_55400(); return;
                case 0x553e4:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x55314;
                    continue;
                case 0x553f0:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                case 0x55400:
                    pc=0x55400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55400() throws ExecutionException { /* 0x55400 - 0x55600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55400:
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + 128;
                    /* Next insn is delay slot */ 
                    r31=0x55418;
                    pc=0x48e8c;
                    run_48e00(); return;
                case 0x55418:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x553b8;
                        run_55200(); return;
                    }
                case 0x55424:
                    r31 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    addr=r17+159;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r29 = r29 + 72;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x55450:
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x55424;
                    continue;
                case 0x5545c:
                    /* Next insn is delay slot */ 
                    r31=0x55464;
                    pc=0x33200;
                    run_33200(); return;
                case 0x55464:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x550cc;
                    run_55000(); return;
                case 0x55470:
                    /* Next insn is delay slot */ 
                    r31=0x55478;
                    pc=0x33200;
                    run_33200(); return;
                case 0x55478:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x55184;
                    run_55000(); return;
                case 0x55484:
                    /* Next insn is delay slot */ 
                    r31=0x5548c;
                    pc=0x33200;
                    run_33200(); return;
                case 0x5548c:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x55238;
                    run_55200(); return;
                case 0x55498:
                    /* Next insn is delay slot */ 
                    r31=0x554a0;
                    pc=0x33200;
                    run_33200(); return;
                case 0x554a0:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    pc=0x552f0;
                    run_55200(); return;
                case 0x55600:
                    pc=0x55600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55600() throws ExecutionException { /* 0x55600 - 0x55800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55600:
                    r29 = r29 + -56;
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 10;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r4 + r0;
                    r2 = r29 + 40;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x55644;
                    pc=0x48e8c;
                    run_48e00(); return;
                case 0x55644:
                    r2 = r2 + 1;
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r2 = r0 - r2;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x55800:
                    pc=0x55800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55800() throws ExecutionException { /* 0x55800 - 0x55a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55800:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r17 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r31=0x5582c;
                    pc=0x66400;
                    run_66400(); return;
                case 0x5582c:
                    r16 = r2 + r0;
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x55864;
                        continue;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55888;
                        continue;
                    }
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x5584c;
                    pc=0x496b4;
                    run_49600(); return;
                case 0x5584c:
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x5593c;
                        continue;
                    }
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55918;
                        continue;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55894;
                        continue;
                    }
                case 0x55864:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x55888:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x55894;
                    pc=0x48400;
                    run_48400(); return;
                case 0x55894:
                    r4 = 7 << 16;
                    r4 = r4 + 26852;
                    r5 = r0 + 2;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x558ac;
                    pc=0x66800;
                    run_66800(); return;
                case 0x558ac:
                    r17 = r2 + r0;
                    r2 = r0 + -1;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x55864;
                        continue;
                    }
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x558d0;
                    pc=0x48890;
                    run_48800(); return;
                case 0x558d0:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x558e4;
                    pc=0x48890;
                    run_48800(); return;
                case 0x558e4:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x558f8;
                    pc=0x48890;
                    run_48800(); return;
                case 0x558f8:
                    r2 = r17 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55864;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x55910;
                    pc=0x66200;
                    run_66200(); return;
                case 0x55910:
                    /* Next insn is delay slot */ 
                    pc=0x55864;
                    continue;
                case 0x55918:
                    r5 = 7 << 16;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = r5 + 26844;
                    /* Next insn is delay slot */ 
                    r31=0x5592c;
                    pc=0x48810;
                    run_48800(); return;
                case 0x5592c:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55864;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x55894;
                    continue;
                case 0x5593c:
                    r16 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x55864;
                    continue;
                case 0x55a00:
                    pc=0x55a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55a00() throws ExecutionException { /* 0x55a00 - 0x55c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55a00:
                    r29 = r29 + -80;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r31;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r23;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r22;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r21;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r20;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r19;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r18;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r16;
                    r23 = r4 + r0;
                    r22 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x55a38;
                    pc=0x33200;
                    run_33200(); return;
                case 0x55a38:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r4 = r23 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x55a50;
                    pc=0x41000;
                    run_41000(); return;
                case 0x55a50:
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x55a5c;
                    pc=0x33200;
                    run_33200(); return;
                case 0x55a5c:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r18 = r0 + 34;
                    r17 = r29 + 16;
                    r19 = r0 + r0;
                    r20 = r0 + 46;
                    r21 = r0 + 3;
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x55af0;
                        continue;
                    }
                case 0x55a7c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r3 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x55af0;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55b44;
                        continue;
                    }
                    if(r4 != r20) {
                        /* Next insn is delay slot */ 
                        pc=0x55b24;
                        continue;
                    }
                    r17 = r17 + 4;
                    if(r19 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x55af0;
                        continue;
                    }
                    r23 = r3 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x55abc;
                    pc=0x33200;
                    run_33200(); return;
                case 0x55abc:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r4 = r23 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x55ad4;
                    pc=0x41000;
                    run_41000(); return;
                case 0x55ad4:
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x55ae0;
                    pc=0x33200;
                    run_33200(); return;
                case 0x55ae0:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r19 = r19 + 1;
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x55a7c;
                        continue;
                    }
                case 0x55af0:
                    r2 = r0 + r0;
                case 0x55af4:
                    r31 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r23 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r22 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r21 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r20 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r18 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r16 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 80;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x55b24:
                    r2 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r4 = r4 & 255;
                    r4 = r2 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55af0;
                        continue;
                    }
                case 0x55b44:
                    r2 = r0 + 2;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x55be8;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x55b80;
                        continue;
                    }
                    r2 = r0 + 1;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x55c38;
                        run_55c00(); return;
                    }
                case 0x55b68:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55c6c;
                        run_55c00(); return;
                    }
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r16;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x55af4;
                    continue;
                case 0x55b80:
                    r2 = (r16&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55af0;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55af0;
                        continue;
                    }
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55af0;
                        continue;
                    }
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = (r3&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55af0;
                        continue;
                    }
                    r4 = r4 << 16;
                    r2 = r2 << 24;
                    r2 = r4 | r2;
                    r3 = r3 << 8;
                    r2 = r2 | r3;
                    r16 = r2 | r16;
                    /* Next insn is delay slot */ 
                    pc=0x55b68;
                    continue;
                case 0x55be8:
                    r2 = 1 << 16;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55af0;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x55c00:
                    pc=0x55c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55c00() throws ExecutionException { /* 0x55c00 - 0x55e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55c00:
                    r3 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55af0;
                        run_55a00(); return;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = (r3&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55af0;
                        run_55a00(); return;
                    }
                    r3 = r3 << 16;
                    r2 = r2 << 24;
                    r2 = r3 | r2;
                    r16 = r2 | r16;
                    /* Next insn is delay slot */ 
                    pc=0x55b68;
                    run_55a00(); return;
                case 0x55c38:
                    r2 = 256 << 16;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55af0;
                        run_55a00(); return;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55af0;
                        run_55a00(); return;
                    }
                    r2 = r2 << 24;
                    r16 = r16 | r2;
                    /* Next insn is delay slot */ 
                    pc=0x55b68;
                    run_55a00(); return;
                case 0x55c6c:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x55af4;
                    run_55a00(); return;
                case 0x55e00:
                    pc=0x55e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55e00() throws ExecutionException { /* 0x55e00 - 0x56000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55e00:
                    r29 = r29 + -32;
                    r5 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x55e14;
                    pc=0x55a00;
                    run_55a00(); return;
                case 0x55e14:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55e30;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x55e30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x56000:
                    pc=0x56000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56000() throws ExecutionException { /* 0x56000 - 0x56200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56000:
                    r29 = r29 + -56;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    r20 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r5 = r5 & 65535;
                    r2 = r20 < 2 ? 1 : 0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    r19 = r6 + r0;
                    r22 = r7 + r0;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x561cc;
                        continue;
                    }
                    addr=r6+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r0 + 2;
                case 0x56054:
                    r4 = readPages[(r28+-32300)>>>12][((r28+-32300)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5606c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x5606c;
                    pc=0x33800;
                    run_33800(); return;
                case 0x5606c:
                    r4 = 7 << 16;
                    r5 = 7 << 16;
                    r4 = r4 + 26760;
                    r5 = r5 + -11612;
                    /* Next insn is delay slot */ 
                    r31=0x56084;
                    pc=0x36200;
                    run_36200(); return;
                case 0x56084:
                    writePages[(r28+-32300)>>>12][((r28+-32300)>>>2)&0x3ff] = r2;
                    r21 = r0 + r0;
                case 0x5608c:
                    /* Next insn is delay slot */ 
                    r31=0x56094;
                    pc=0x53600;
                    run_53600(); return;
                case 0x56094:
                    r18 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5616c;
                        continue;
                    }
                case 0x560a0:
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x560ec;
                        continue;
                    }
                    addr=r2+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5608c;
                        continue;
                    }
                    r8 = r19 + 2;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x560e0;
                    continue;
                case 0x560cc:
                    r8 = r8 + 2;
                    addr=r8+-2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5608c;
                        continue;
                    }
                case 0x560e0:
                    r3 = r3 + 1;
                    if(r3 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x560cc;
                        continue;
                    }
                case 0x560ec:
                    r23 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r4 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5608c;
                        continue;
                    }
                    r23 = r23 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x56124;
                    continue;
                case 0x56110:
                    r23 = r23 + 4;
                    r4 = readPages[(r23+-4)>>>12][((r23+-4)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5608c;
                        continue;
                    }
                case 0x56124:
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x56130;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x56130:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56110;
                        continue;
                    }
                    r2 = r16 < r20 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x561c0;
                        continue;
                    }
                    addr=r18+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r16 << 1;
                    r2 = r19 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x5615c;
                    pc=0x53600;
                    run_53600(); return;
                case 0x5615c:
                    r16 = r16 + 1;
                    r18 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x560a0;
                        continue;
                    }
                case 0x5616c:
                    r4 = readPages[(r28+-32300)>>>12][((r28+-32300)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56184;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x56184;
                    pc=0x33800;
                    run_33800(); return;
                case 0x56184:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r16;
                    r2 = r21 + r0;
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32300)>>>12][((r28+-32300)>>>2)&0x3ff] = r0;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x561c0:
                    r21 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5608c;
                    continue;
                case 0x561cc:
                    r16 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x56054;
                    continue;
                case 0x56200:
                    pc=0x56200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56200() throws ExecutionException { /* 0x56200 - 0x56400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56200:
                    r29 = r29 + -96;
                    r6 = r29 + 16;
                    r7 = r29 + 80;
                    r2 = r0 + 32;
                    r5 = r5 & 65535;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x56224;
                    pc=0x56000;
                    run_56000(); return;
                case 0x56224:
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r5 = tmp;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x56238;
                    pc=0x494e4;
                    run_49400(); return;
                case 0x56238:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r29 = r29 + 96;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x56400:
                    pc=0x56400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56400() throws ExecutionException { /* 0x56400 - 0x56600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56400:
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5a200;
                    run_5a200(); return;
                case 0x56600:
                    pc=0x56600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56600() throws ExecutionException { /* 0x56600 - 0x56800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56600:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56730;
                        continue;
                    }
                case 0x56624:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r8 = r3 < 32 ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x566ac;
                        continue;
                    }
                    r2 = 4 << 16;
                    r2 = r2 + -28160;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56664;
                        continue;
                    }
                case 0x56648:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x56664:
                    r4 = r0 + 400;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x5667c;
                    pc=0x39200;
                    run_39200(); return;
                case 0x5667c:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r7 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56648;
                        continue;
                    }
                    r3 = readPages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    writePages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff] = r2;
                    r3 = r0 + r0;
                    writePages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff] = r0;
                    writePages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff] = r0;
                case 0x566ac:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x566e8;
                        continue;
                    }
                case 0x566b4:
                    r4 = r3 + 1;
                    r3 = r3 + 2;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x566e8:
                    r4 = r3 << 2;
                    r4 = r2 + r4;
                    writePages[(r4+136)>>>12][((r4+136)>>>2)&0x3ff] = r6;
                    r8 = readPages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r6 = r6 << (r3&0x1f);
                    r8 = r8 | r6;
                    writePages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff] = r8;
                    writePages[(r4+264)>>>12][((r4+264)>>>2)&0x3ff] = r7;
                    r4 = r0 + 2;
                    if(r17 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x566b4;
                        continue;
                    }
                    r4 = readPages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff];
                    r6 = r4 | r6;
                    writePages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x566b4;
                    continue;
                case 0x56730:
                    r2 = r16 + 332;
                    writePages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x56624;
                    continue;
                case 0x56800:
                    pc=0x56800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56800() throws ExecutionException { /* 0x56800 - 0x56a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56800:
                    r2 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    r2 = r2 + 328;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    r19 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r20 = r0 + 1;
                    r21 = r0 + -1;
                case 0x56848:
                    r2 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    r23 = readPages[(r2+328)>>>12][((r2+328)>>>2)&0x3ff];
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x568cc;
                        continue;
                    }
                    r30 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x56864:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x568bc;
                        continue;
                    }
                    r18 = r3 + 1;
                    r17 = r23 + 136;
                    r4 = r16 << 2;
                    r18 = r18 << 2;
                    r17 = r17 + r4;
                    r18 = r23 + r18;
                case 0x56890:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56900;
                        continue;
                    }
                    r3 = readPages[(r17+128)>>>12][((r17+128)>>>2)&0x3ff];
                    if(r3 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x56900;
                        continue;
                    }
                case 0x568a8:
                    r16 = r16 + -1;
                    r17 = r17 + -4;
                    r18 = r18 + -4;
                    if(r16 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x56890;
                        continue;
                    }
                case 0x568bc:
                    r2 = 4 << 16;
                    r2 = r2 + -27648;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x569b4;
                        continue;
                    }
                case 0x568cc:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x56900:
                    r4 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r3 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r4 + -1;
                    if(r4 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x56994;
                        continue;
                    }
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r0;
                case 0x56918:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x568a8;
                        continue;
                    }
                    r5 = readPages[(r23+392)>>>12][((r23+392)>>>2)&0x3ff];
                    r4 = r20 << (r16&0x1f);
                    r5 = r4 & r5;
                    r22 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56984;
                        continue;
                    }
                    r5 = readPages[(r23+396)>>>12][((r23+396)>>>2)&0x3ff];
                    r4 = r4 & r5;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x569a0;
                        continue;
                    }
                    r4 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r5 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x5695c;
                    return;
                case 0x5695c:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r3 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x56848;
                        continue;
                    }
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    if(r3 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x568a8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x56848;
                    continue;
                case 0x56984:
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x5698c;
                    return;
                case 0x5698c:
                    /* Next insn is delay slot */ 
                    pc=0x5695c;
                    continue;
                case 0x56994:
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x56918;
                    continue;
                case 0x569a0:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x569ac;
                    return;
                case 0x569ac:
                    /* Next insn is delay slot */ 
                    pc=0x5695c;
                    continue;
                case 0x569b4:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x569fc;
                        continue;
                    }
                    r3 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56a10;
                        run_56a00(); return;
                    }
                    r4 = r23 + r0;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x569e4;
                    pc=0x39400;
                    run_39400(); return;
                case 0x569e4:
                    r23 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                case 0x569ec:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56864;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x568cc;
                    continue;
                case 0x569fc:
                    r3 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                case 0x56a00:
                    pc=0x56a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56a00() throws ExecutionException { /* 0x56a00 - 0x56c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56a00:
                    r30 = r23 + r0;
                    r23 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x569ec;
                    run_56800(); return;
                case 0x56a10:
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56a00;
                    continue;
                case 0x56c00:
                    pc=0x56c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56c00() throws ExecutionException { /* 0x56c00 - 0x56e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56c00:
                    r2 = r4 + r0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x56c14;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x56c14:
                    r2 = r0 - r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x56e00:
                    pc=0x56e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56e00() throws ExecutionException { /* 0x56e00 - 0x57000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56e00:
                    r29 = r29 + -48;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r2 = r2 < r17 ? 1 : 0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57074;
                        run_57000(); return;
                    }
                    r17 = r17 + -1;
                    r12 = r17 << 2;
                    r16 = r5 + 20;
                    r18 = r16 + r12;
                    r19 = r4 + 20;
                    r12 = r19 + r12;
                    r22 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    r22 = r22 + 1;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        if(r22!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                        }
                        pc=0x56e6c;
                        continue;
                    }
                    if(r22!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x56e6c:
                    r22 = lo;
                    r21 = lo;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56f68;
                        continue;
                    }
                    r6 = r16 + r0;
                    r3 = r19 + r0;
                    r4 = r0 + r0;
                    r2 = r0 + r0;
                case 0x56e8c:
                    r6 = r6 + 4;
                    r11 = readPages[(r6+-4)>>>12][((r6+-4)>>>2)&0x3ff];
                    r8 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r10 = r11 & 65535;
                    { long hilo = (long)(r22) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = r11 >>> 16;
                    r3 = r3 + 4;
                    r10 = lo;
                    r10 = r4 + r10;
                    r4 = r10 >>> 16;
                    { long hilo = (long)(r22) * ((long)r11); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = r10 & 65535;
                    r7 = r2 - r7;
                    r11 = lo;
                    r9 = r4 + r11;
                    r11 = r8 & 65535;
                    r7 = r7 + r11;
                    r4 = r9 >>> 16;
                    r8 = r8 >>> 16;
                    r9 = r9 & 65535;
                    r2 = r7 >> 16;
                    r8 = r8 - r9;
                    r8 = r8 + r2;
                    r2 = r8 >> 16;
                    r7 = r7 & 65535;
                    r8 = r8 << 16;
                    r7 = r8 | r7;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r7;
                    r7 = ((r18 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56e8c;
                        continue;
                    }
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56f68;
                        continue;
                    }
                    r2 = r12 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56f64;
                        continue;
                    }
                    r3 = readPages[(r12+-4)>>>12][((r12+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56f50;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x56f64;
                    continue;
                case 0x56f40:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56f64;
                        continue;
                    }
                case 0x56f50:
                    r2 = r2 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r17 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56f40;
                        continue;
                    }
                case 0x56f64:
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r17;
                case 0x56f68:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x56f74;
                    pc=0x5dc00;
                    run_5dc00(); return;
                case 0x56f74:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57044;
                        run_57000(); return;
                    }
                    r21 = r22 + 1;
                    r3 = r19 + r0;
                    r8 = r0 + r0;
                case 0x56f88:
                    r16 = r16 + 4;
                    r7 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r5 = r7 & 65535;
                    r2 = r6 & 65535;
                    r5 = r8 - r5;
                    r5 = r5 + r2;
                    r6 = r6 >>> 16;
                    r7 = r7 >>> 16;
                    r2 = r5 >> 16;
                    r6 = r6 - r7;
                    r6 = r6 + r2;
                    r8 = r6 >> 16;
                    r5 = r5 & 65535;
                    r6 = r6 << 16;
                    r5 = r6 | r5;
                    r3 = r3 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r5;
                    r5 = ((r18 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56f88;
                        continue;
                    }
                    r3 = r17 << 2;
                    r3 = r19 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57044;
                        run_57000(); return;
                    }
                    r2 = r3 + -4;
                    r4 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57040;
                        run_57000(); return;
                    }
                case 0x57000:
                    pc=0x57000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57000() throws ExecutionException { /* 0x57000 - 0x57200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57000:
                    r3 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5702c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x57040;
                    continue;
                case 0x5701c:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57040;
                        continue;
                    }
                case 0x5702c:
                    r2 = r2 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r17 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5701c;
                        continue;
                    }
                case 0x57040:
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r17;
                case 0x57044:
                    r2 = r21 + r0;
                case 0x57048:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x57074:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x57048;
                    continue;
                case 0x57200:
                    pc=0x57200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57200() throws ExecutionException { /* 0x57200 - 0x57400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57200:
                    r5 = readPages[(r4+64)>>>12][((r4+64)>>>2)&0x3ff];
                    r29 = r29 + -128;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r17;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r16;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r30;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r23;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r22;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r21;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r20;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r19;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r18;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = f20;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = f21;
                    r16 = r4 + r0;
                    r17 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57270;
                        continue;
                    }
                    r2 = readPages[(r4+68)>>>12][((r4+68)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r2 = r3 << (r2&0x1f);
                    writePages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x5726c;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x5726c:
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r0;
                case 0x57270:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5737c;
                        continue;
                    }
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                case 0x57288:
                    r2 = 32752 << 16;
                    r3 = r18 & r2;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57324;
                        continue;
                    }
                    f20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f0 = r0;
                    f21 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x573a0;
                        continue;
                    }
                    r9 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5796c;
                        run_57800(); return;
                    }
                    r2 = 7 << 16;
                    r2 = r2 + 19829;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r2 = r2 + 19828;
                case 0x572e8:
                    f20 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r30 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r23 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r22 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r21 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r20 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r19 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r18 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r17 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    f21 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r29 = r29 + 128;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x57324:
                    r8 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r9 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + 9999;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r2;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5790c;
                        run_57800(); return;
                    }
                case 0x5733c:
                    r2 = 7 << 16;
                    r2 = r2 + 27008;
                case 0x57344:
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x572e8;
                        continue;
                    }
                    addr=r2+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57930;
                        run_57800(); return;
                    }
                    r3 = r2 + 3;
                case 0x57368:
                    r8 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x572e8;
                    continue;
                case 0x5737c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = 32767 << 16;
                    r18 = r18 | 65535;
                    r2 = r0 + 1;
                    r18 = r18 & r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x57288;
                    continue;
                case 0x573a0:
                    r2 = r29 + 24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r7 = f20;
                    r2 = r29 + 28;
                    r6 = f21;
                    r4 = r16 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x573c4;
                    pc=0x5e400;
                    run_5e400(); return;
                case 0x573c4:
                    r4 = r18 >>> 20;
                    r17 = r2 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5793c;
                        run_57800(); return;
                    }
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r5 + r4;
                    r2 = r4 < -1041 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57ff0;
                        run_57e00(); return;
                    }
                    r2 = r0 + -1010;
                    r2 = r2 - r4;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = r18 << (r2&0x1f);
                case 0x57400:
                    pc=0x57400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57400() throws ExecutionException { /* 0x57400 - 0x57600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57400:
                    r2 = r4 + 1042;
                    r2 = r6 >>> (r2&0x1f);
                    r18 = r18 | r2;
                case 0x5740c:
                    f0 = r18;
                    { long l = Double.doubleToLongBits(((double)f0)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r18 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58598;
                        run_58400(); return;
                    }
                case 0x57420:
                    r2 = f3;
                    r6 = 65040 << 16;
                    r3 = f2;
                    r2 = r6 + r2;
                    r4 = r4 + -1;
                    r19 = r0 + 1;
                case 0x57438:
                    f4 = r3;
                    f0 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    f5 = r2;
                    f1 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    f6 = r4;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r28+-32604)>>>12][((r28+-32604)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32608)>>>12][((r28+-32608)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32600)>>>12][((r28+-32600)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f0 = readPages[(r28+-32588)>>>12][((r28+-32588)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f6)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32592)>>>12][((r28+-32592)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = f0;
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x57f84;
                        run_57e00(); return;
                    }
                case 0x574dc:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = (r8&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57f4c;
                        run_57e00(); return;
                    }
                    r3 = 7 << 16;
                    r2 = r8 << 3;
                    r3 = r3 + 27112;
                    r2 = r2 + r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x58008;
                        run_58000(); return;
                    }
                    r8 = r8 + -1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                case 0x57530:
                    r4 = r5 - r4;
                    r23 = r4 + -1;
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57f74;
                        run_57e00(); return;
                    }
                    r18 = r0 + r0;
                case 0x57544:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    if(r8 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57f5c;
                        run_57e00(); return;
                    }
                    r23 = r23 + r8;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r8;
                    r22 = r0 + r0;
                case 0x57560:
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5797c;
                        run_57800(); return;
                    }
                    r2 = r3 < 6 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x589f8;
                        run_58800(); return;
                    }
                    r3 = r3 + -4;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r3;
                    r8 = r0 + r0;
                case 0x5758c:
                    r9 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x585b4;
                        run_58400(); return;
                    }
                    r2 = r9 < 4 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5842c;
                        run_58400(); return;
                    }
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x581fc;
                        run_58000(); return;
                    }
                    r2 = r0 + 5;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57980;
                        run_57800(); return;
                    }
                    r3 = r0 + 1;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r3;
                case 0x575cc:
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r9 = r9 + r3;
                    r30 = r9 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r9;
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58618;
                        run_58600(); return;
                    }
                    r6 = r30 + r0;
                case 0x575f0:
                    r2 = (r6&0xffffffffL) < (24&0xffffffffL) ? 1 : 0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58a04;
                        run_58a00(); return;
                    }
                case 0x57600:
                    pc=0x57600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57600() throws ExecutionException { /* 0x57600 - 0x57800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57600:
                    r3 = r0 + 1;
                    r2 = r0 + 4;
                case 0x57608:
                    r2 = r2 << 1;
                    r4 = r2 + 20;
                    r4 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r5 = r3 + r0;
                    r3 = r3 + 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57608;
                        continue;
                    }
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r5;
                    r21 = r6 + r0;
                case 0x5762c:
                    r4 = r16 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r8;
                    r21 = (r21&0xffffffffL) < (15&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    r31=0x57640;
                    pc=0x5c600;
                    run_5c600(); return;
                case 0x57640:
                    r20 = r2 + r0;
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x579b4;
                        run_57800(); return;
                    }
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x579b4;
                        run_57800(); return;
                    }
                    f8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    f9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r8 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5862c;
                        run_58600(); return;
                    }
                    r3 = r8 & 15;
                    r2 = 7 << 16;
                    r3 = r3 << 3;
                    r2 = r2 + 27112;
                    r2 = r3 + r2;
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r8 >> 4;
                    r3 = r2 & 16;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x585e0;
                        run_58400(); return;
                    }
                    r3 = 7 << 16;
                    f0 = readPages[(r3+27108)>>>12][((r3+27108)>>>2)&0x3ff];
                    r2 = r2 & 15;
                    f1 = readPages[(r3+27104)>>>12][((r3+27104)>>>2)&0x3ff];
                    r8 = r0 + 3;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x576b8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x576f8;
                        continue;
                    }
                    r3 = 7 << 16;
                    r3 = r3 + 27072;
                case 0x576c8:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x576e8;
                        continue;
                    }
                    f4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                case 0x576e8:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x576c8;
                        continue;
                    }
                case 0x576f8:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x576fc:
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5772c;
                        continue;
                    }
                    f2 = readPages[(r28+-32580)>>>12][((r28+-32580)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32584)>>>12][((r28+-32584)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x588b4;
                        run_58800(); return;
                    }
                case 0x5772c:
                    f4 = r8;
                    r2 = 64704 << 16;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r2 + r8;
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58500;
                        run_58400(); return;
                    }
                    r2 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = r30 + r0;
                case 0x5776c:
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r5 = r4 + -1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58774;
                        run_58600(); return;
                    }
                    r3 = 7 << 16;
                    r5 = r5 << 3;
                    r3 = r3 + 27112;
                    r3 = r5 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = readPages[(r28+-32548)>>>12][((r28+-32548)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r6 = fcsr;
                    r6 = fcsr;
                    r1 = r6 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f6 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f6 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f6 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f6 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r6;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f4 = r9;
                    r7 = f6;
                    f5 = r8;
                    r5 = r7 + 48;
                    r5 = r5 << 24;
                    r5 = r5 >> 24;
                    r3 = r20 + 1;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f6)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x578c0;
                        run_57800(); return;
                    }
                case 0x57800:
                    pc=0x57800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57800() throws ExecutionException { /* 0x57800 - 0x57a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57800:
                    f10 = readPages[(r28+-32580)>>>12][((r28+-32580)>>>2)&0x3ff];
                    f11 = readPages[(r28+-32584)>>>12][((r28+-32584)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x58980;
                        run_58800(); return;
                    }
                    r5 = r4 < 2 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58568;
                        run_58400(); return;
                    }
                    f6 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    r4 = r20 + r4;
                    f7 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x57864;
                    continue;
                case 0x57848:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x58980;
                        run_58800(); return;
                    }
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x58568;
                        run_58400(); return;
                    }
                case 0x57864:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r3 = r3 + 1;
                    r8 = fcsr;
                    r8 = fcsr;
                    r1 = r8 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f12 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f12 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f12 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f12 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r8;
                    { long l = Double.doubleToLongBits(((double)f12)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r9 = f12;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r5 = r9 + 48;
                    r5 = r5 << 24;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    r5 = r5 >> 24;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x57848;
                        continue;
                    }
                case 0x578c0:
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                case 0x578c4:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x578d8;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x578d8:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r2 = r8 + 1;
                    r9 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff] = r2;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58420;
                        run_58400(); return;
                    }
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x572e8;
                    run_57200(); return;
                case 0x5790c:
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r18 = r18 & r2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5733c;
                        run_57200(); return;
                    }
                    r2 = 7 << 16;
                    r2 = r2 + 26996;
                    /* Next insn is delay slot */ 
                    pc=0x57344;
                    run_57200(); return;
                case 0x57930:
                    r3 = r2 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x57368;
                    run_57200(); return;
                case 0x5793c:
                    r2 = f21;
                    r6 = 15 << 16;
                    r6 = r6 | 65535;
                    r5 = 16368 << 16;
                    r6 = r2 & r6;
                    r2 = r6 | r5;
                    r3 = f20;
                    r4 = r4 + -1023;
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x57438;
                    run_57400(); return;
                case 0x5796c:
                    r2 = 7 << 16;
                    r2 = r2 + 19828;
                    /* Next insn is delay slot */ 
                    pc=0x572e8;
                    run_57200(); return;
                case 0x5797c:
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r0;
                case 0x57980:
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x57994;
                    pc=0x5c600;
                    run_5c600(); return;
                case 0x57994:
                    r8 = r0 + -1;
                    r9 = r0 + 1;
                    r20 = r2 + r0;
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r8;
                    r30 = r0 + -1;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r9;
                case 0x579b4:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57b7c;
                        run_57a00(); return;
                    }
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = r8 < 15 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57b7c;
                        run_57a00(); return;
                    }
                    r3 = 7 << 16;
                    r2 = r8 << 3;
                    r3 = r3 + 27112;
                    r2 = r2 + r3;
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r9 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58228;
                        run_58200(); return;
                    }
                case 0x579fc:
                    f6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                case 0x57a00:
                    pc=0x57a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57a00() throws ExecutionException { /* 0x57a00 - 0x57c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57a00:
                    f7 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f10 = (int)(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL))); break; // Round towards zero
                        case 2: f10 = (int)Math.ceil((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    { long l = Double.doubleToLongBits(((double)f10)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = f10;
                    r3 = r20 + 1;
                    r2 = r4 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57b00;
                        continue;
                    }
                    f6 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    f8 = r0;
                    f7 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    f9 = r0;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x578c4;
                        run_57800(); return;
                    }
                    r2 = r20 + 2;
                    r30 = r20 + r30;
                    /* Next insn is delay slot */ 
                    pc=0x57aac;
                    continue;
                case 0x57a94:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = r2 + 1;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x578c4;
                        run_57800(); return;
                    }
                case 0x57aac:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r3 = r2 + r0;
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f10 = (int)(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL))); break; // Round towards zero
                        case 2: f10 = (int)Math.ceil((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    { long l = Double.doubleToLongBits(((double)f10)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r5 = f10;
                    r4 = r5 + 48;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r2 != r30) {
                        /* Next insn is delay slot */ 
                        pc=0x57a94;
                        continue;
                    }
                case 0x57b00:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x57b38;
                        continue;
                    }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x578c4;
                        run_57800(); return;
                    }
                    r4 = f10;
                    r2 = r4 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x578c4;
                        run_57800(); return;
                    }
                case 0x57b38:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x57b3c:
                    r4 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x57b58;
                    continue;
                case 0x57b48:
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x586b4;
                        run_58600(); return;
                    }
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r3 = r2 + r0;
                case 0x57b58:
                    r2 = r3 + -1;
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x57b48;
                        continue;
                    }
                    r4 = r5 + 1;
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x578c4;
                    run_57800(); return;
                case 0x57b7c:
                    r8 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57fb8;
                        run_57e00(); return;
                    }
                    r9 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r9 = r9 < 2 ? 1 : 0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r9;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x582fc;
                        run_58200(); return;
                    }
                    r3 = r30 + -1;
                    r2 = r22 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x585c0;
                        run_58400(); return;
                    }
                    r3 = r22 - r3;
                case 0x57bb8:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58878;
                        run_58800(); return;
                    }
                    r21 = r18 + r0;
                    r2 = r30 + r0;
                case 0x57bc8:
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    r18 = r18 + r2;
                    r23 = r23 + r2;
                    /* Next insn is delay slot */ 
                    r31=0x57be4;
                    pc=0x5d200;
                    run_5d200(); return;
                case 0x57be4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r19 = r2 + r0;
                case 0x57bec:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57c18;
                        run_57c00(); return;
                    }
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57c18;
                        run_57c00(); return;
                    }
                    r4 = r21 < r23 ? 1 : 0;
                case 0x57c00:
                    pc=0x57c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57c00() throws ExecutionException { /* 0x57c00 - 0x57e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57c00:
                    r2 = r23 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x581f0;
                        run_58000(); return;
                    }
                case 0x57c0c:
                    r18 = r18 - r2;
                    r21 = r21 - r2;
                    r23 = r23 - r2;
                case 0x57c18:
                    if(r22 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57c94;
                        continue;
                    }
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58578;
                        run_58400(); return;
                    }
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57c88;
                        continue;
                    }
                    r6 = r3 + r0;
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x57c50;
                    pc=0x5d800;
                    run_5d800(); return;
                case 0x57c50:
                    r5 = r2 + r0;
                    r6 = r17 + r0;
                    r4 = r16 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x57c68;
                    pc=0x5d400;
                    run_5d400(); return;
                case 0x57c68:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x57c7c;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x57c7c:
                    r2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r17 = r2 + r0;
                case 0x57c88:
                    r6 = r22 - r3;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x582a4;
                        run_58200(); return;
                    }
                case 0x57c94:
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x57ca4;
                    pc=0x5d200;
                    run_5d200(); return;
                case 0x57ca4:
                    r3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = r2 + r0;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57ccc;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x57cc8;
                    pc=0x5d800;
                    run_5d800(); return;
                case 0x57cc8:
                    r22 = r2 + r0;
                case 0x57ccc:
                    r7 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x581a0;
                        run_58000(); return;
                    }
                case 0x57cdc:
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                case 0x57ce0:
                    r7 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x583f0;
                        run_58200(); return;
                    }
                    r2 = r0 + 1;
                case 0x57cf4:
                    r2 = r2 + r23;
                    r2 = r2 & 31;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57fd8;
                        run_57e00(); return;
                    }
                    r3 = r0 + 32;
                    r3 = r3 - r2;
                    r4 = r3 < 5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x589dc;
                        run_58800(); return;
                    }
                    r3 = r0 + 28;
                    r2 = r3 - r2;
                    r18 = r18 + r2;
                    r21 = r21 + r2;
                    r23 = r23 + r2;
                case 0x57d2c:
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57d4c;
                        continue;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x57d48;
                    pc=0x5da00;
                    run_5da00(); return;
                case 0x57d48:
                    r17 = r2 + r0;
                case 0x57d4c:
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57d6c;
                        continue;
                    }
                    r5 = r22 + r0;
                    r4 = r16 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x57d68;
                    pc=0x5da00;
                    run_5da00(); return;
                case 0x57d68:
                    r22 = r2 + r0;
                case 0x57d6c:
                    r8 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58148;
                        run_58000(); return;
                    }
                case 0x57d7c:
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58444;
                        run_58400(); return;
                    }
                case 0x57d84:
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58014;
                        run_58000(); return;
                    }
                    if(r21 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57db4;
                        continue;
                    }
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x57db0;
                    pc=0x5da00;
                    run_5da00(); return;
                case 0x57db0:
                    r19 = r2 + r0;
                case 0x57db4:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x586d8;
                        run_58600(); return;
                    }
                    r21 = r19 + r0;
                case 0x57dc8:
                    r8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = r20 + r30;
                    r8 = r8 & 1;
                    r18 = r20 + 1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r8;
                case 0x57de0:
                    r9 = r18 + -1;
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x57df8;
                    pc=0x56e00;
                    run_56e00(); return;
                case 0x57df8:
                    r4 = r17 + r0;
                    r5 = r19 + r0;
                case 0x57e00:
                    pc=0x57e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57e00() throws ExecutionException { /* 0x57e00 - 0x58000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57e00:
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r23 = r2 + 48;
                    /* Next insn is delay slot */ 
                    r31=0x57e10;
                    pc=0x5dc00;
                    run_5dc00(); return;
                case 0x57e10:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r21 + r0;
                    r30 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x57e28;
                    pc=0x5de00;
                    run_5de00(); return;
                case 0x57e28:
                    r3 = r2 + r0;
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x583d4;
                        run_58200(); return;
                    }
                    r5 = r3 + r0;
                    r4 = r17 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x57e50;
                    pc=0x5dc00;
                    run_5dc00(); return;
                case 0x57e50:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = r3 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x57e68;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x57e68:
                    r2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57e98;
                        continue;
                    }
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57e98;
                        continue;
                    }
                    r8 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58390;
                        run_58200(); return;
                    }
                case 0x57e98:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58324;
                        run_58200(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57ec8;
                        continue;
                    }
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57ec8;
                        continue;
                    }
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58324;
                        run_58200(); return;
                    }
                case 0x57ec8:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58728;
                        run_58600(); return;
                    }
                    r8 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r18 + r0;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x58754;
                        run_58600(); return;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x57efc;
                    pc=0x5ca00;
                    run_5ca00(); return;
                case 0x57efc:
                    r17 = r2 + r0;
                    r4 = r16 + r0;
                    r5 = r19 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    if(r19 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x583b8;
                        run_58200(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x57f20;
                    pc=0x5ca00;
                    run_5ca00(); return;
                case 0x57f20:
                    r5 = r21 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x57f3c;
                    pc=0x5ca00;
                    run_5ca00(); return;
                case 0x57f3c:
                    r21 = r2 + r0;
                    r18 = r18 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x57de0;
                    run_57c00(); return;
                case 0x57f4c:
                    r3 = r0 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x57530;
                    run_57400(); return;
                case 0x57f5c:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    r18 = r18 - r9;
                    r22 = r0 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x57560;
                    run_57400(); return;
                case 0x57f74:
                    r18 = r0 - r23;
                    r23 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x57544;
                    run_57400(); return;
                case 0x57f84:
                    f4 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f4)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x574dc;
                        run_57400(); return;
                    }
                    r3 = f4;
                    r3 = r3 + -1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x574dc;
                    run_57400(); return;
                case 0x57fb8:
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r3 = r22 + r0;
                    r8 = r8 < 2 ? 1 : 0;
                    r21 = r18 + r0;
                    r19 = r0 + r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x57bec;
                    run_57a00(); return;
                case 0x57fd8:
                    r2 = r0 + 28;
                case 0x57fdc:
                    r18 = r18 + r2;
                    r21 = r21 + r2;
                    r23 = r23 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x57d2c;
                    run_57c00(); return;
                case 0x57ff0:
                    r18 = r0 + -1042;
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = r18 - r4;
                    r18 = r7 << (r18&0x1f);
                case 0x58000:
                    pc=0x58000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58000() throws ExecutionException { /* 0x58000 - 0x58200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58000:
                    /* Next insn is delay slot */ 
                    pc=0x5740c;
                    run_57400(); return;
                case 0x58008:
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x57530;
                    run_57400(); return;
                case 0x58014:
                    r18 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5803c;
                    continue;
                case 0x58020:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58038;
                    pc=0x5ca00;
                    run_5ca00(); return;
                case 0x58038:
                    r17 = r2 + r0;
                case 0x5803c:
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5804c;
                    pc=0x56e00;
                    run_56e00(); return;
                case 0x5804c:
                    r18 = r18 + 1;
                    r23 = r2 + 48;
                    r2 = r18 - r20;
                    r2 = r2 < r30 ? 1 : 0;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58020;
                        continue;
                    }
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58318;
                        run_58200(); return;
                    }
                case 0x58070:
                    r3 = r20 + r30;
                    r18 = r0 + r0;
                case 0x58078:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x58090;
                    pc=0x5da00;
                    run_5da00(); return;
                case 0x58090:
                    r4 = r2 + r0;
                    r5 = r22 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x580a4;
                    pc=0x5dc00;
                    run_5dc00(); return;
                case 0x580a4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x582c0;
                        run_58200(); return;
                    }
                case 0x580b0:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                case 0x580b4:
                    r5 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x580d0;
                    continue;
                case 0x580c0:
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x584b4;
                        run_58400(); return;
                    }
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r2 + r0;
                case 0x580d0:
                    r2 = r3 + -1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x580c0;
                        continue;
                    }
                    r4 = r4 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x580e4:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x580f8;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x580f8:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x578c4;
                        run_57800(); return;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58128;
                        continue;
                    }
                    if(r18 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x58128;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58124;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x58124:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                case 0x58128:
                    r4 = r16 + r0;
                    r5 = r19 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x5813c;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x5813c:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x578c4;
                    run_57800(); return;
                case 0x58148:
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58158;
                    pc=0x5dc00;
                    run_5dc00(); return;
                case 0x58158:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57d7c;
                        run_57c00(); return;
                    }
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r9 = r9 + -1;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x58184;
                    pc=0x5ca00;
                    run_5ca00(); return;
                case 0x58184:
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x589a8;
                        run_58800(); return;
                    }
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x57d7c;
                    run_57c00(); return;
                case 0x581a0:
                    r8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57cdc;
                        run_57c00(); return;
                    }
                    r2 = 15 << 16;
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r2 | 65535;
                    r2 = r2 & r9;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57cdc;
                        run_57c00(); return;
                    }
                    r2 = 32752 << 16;
                    r2 = r2 & r9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57cdc;
                        run_57c00(); return;
                    }
                    r3 = r0 + 1;
                    r18 = r18 + 1;
                    r23 = r23 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x57ce0;
                    run_57c00(); return;
                case 0x581f0:
                    r2 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x57c0c;
                    run_57c00(); return;
                case 0x581fc:
                    r9 = r0 + 1;
                case 0x58200:
                    pc=0x58200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58200() throws ExecutionException { /* 0x58200 - 0x58400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58200:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r9;
                case 0x58204:
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x585f0;
                        run_58400(); return;
                    }
                    r6 = r4 + r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    r30 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x575f0;
                    run_57400(); return;
                case 0x58228:
                    if(r30 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x579fc;
                        run_57800(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58558;
                        run_58400(); return;
                    }
                    f0 = readPages[(r28+-32556)>>>12][((r28+-32556)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    f1 = readPages[(r28+-32560)>>>12][((r28+-32560)>>>2)&0x3ff];
                    r19 = r0 + r0;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f1 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x58494;
                        run_58400(); return;
                    }
                case 0x5826c:
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = r20 + r0;
                    r9 = ~(r0 | r9);
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                case 0x5827c:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x58290;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x58290:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58128;
                        run_58000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x578c4;
                    run_57800(); return;
                case 0x582a4:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x582b4;
                    pc=0x5d800;
                    run_5d800(); return;
                case 0x582b4:
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x57c94;
                    run_57c00(); return;
                case 0x582c0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x582d4;
                        continue;
                    }
                    r23 = r23 & 1;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x580b0;
                        run_58000(); return;
                    }
                case 0x582d4:
                    r5 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x582e4;
                    continue;
                case 0x582e0:
                    r3 = r4 + r0;
                case 0x582e4:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r4 = r3 + -1;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x582e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x580e4;
                    run_58000(); return;
                case 0x582fc:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58888;
                        run_58800(); return;
                    }
                    r2 = r2 + 1075;
                    r3 = r22 + r0;
                    r21 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x57bc8;
                    run_57a00(); return;
                case 0x58318:
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x58070;
                    run_58000(); return;
                case 0x58324:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58374;
                        continue;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x58340;
                    pc=0x5da00;
                    run_5da00(); return;
                case 0x58340:
                    r4 = r2 + r0;
                    r5 = r22 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58354;
                    pc=0x5dc00;
                    run_5dc00(); return;
                case 0x58354:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5898c;
                        run_58800(); return;
                    }
                case 0x5835c:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5891c;
                        run_58800(); return;
                    }
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r3 + 49;
                case 0x58374:
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = r19 + r0;
                    r3 = r7 + 1;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x580e4;
                    run_58000(); return;
                case 0x58390:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5891c;
                        run_58800(); return;
                    }
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58374;
                        continue;
                    }
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r9 + 49;
                    /* Next insn is delay slot */ 
                    pc=0x58374;
                    continue;
                case 0x583b8:
                    /* Next insn is delay slot */ 
                    r31=0x583c0;
                    pc=0x5ca00;
                    run_5ca00(); return;
                case 0x583c0:
                    r19 = r2 + r0;
                    r21 = r2 + r0;
                    r18 = r18 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x57de0;
                    run_57c00(); return;
                case 0x583d4:
                    r4 = r16 + r0;
                    r5 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x583e4;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x583e4:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x57e98;
                    run_57e00(); return;
                case 0x583f0:
                    r2 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r2 = r2 << 2;
                case 0x58400:
                    pc=0x58400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58400() throws ExecutionException { /* 0x58400 - 0x58600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58400:
                    r2 = r22 + r2;
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x58410;
                    pc=0x5ce00;
                    run_5ce00(); return;
                case 0x58410:
                    r3 = r0 + 32;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x57cf4;
                    run_57c00(); return;
                case 0x58420:
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x572e8;
                    run_57200(); return;
                case 0x5842c:
                    r2 = r0 + 2;
                    if(r9 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57980;
                        run_57800(); return;
                    }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x58204;
                    run_58200(); return;
                case 0x58444:
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r8 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57d84;
                        run_57c00(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5826c;
                        run_58200(); return;
                    }
                    r5 = r22 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 5;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58478;
                    pc=0x5ca00;
                    run_5ca00(); return;
                case 0x58478:
                    r5 = r2 + r0;
                    r4 = r17 + r0;
                    r22 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5848c;
                    pc=0x5dc00;
                    run_5dc00(); return;
                case 0x5848c:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5826c;
                        run_58200(); return;
                    }
                case 0x58494:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 49;
                    r8 = r8 + 1;
                    r3 = r20 + 1;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x5827c;
                    run_58200(); return;
                case 0x584b4:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 49;
                    r9 = r9 + 1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x580e4;
                    run_58000(); return;
                case 0x584d0:
                    f4 = r8;
                    r2 = 64704 << 16;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r2 + r8;
                case 0x58500:
                    f2 = readPages[(r28+-32556)>>>12][((r28+-32556)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32560)>>>12][((r28+-32560)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f2 = r9;
                    f3 = r8;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x58764;
                        run_58600(); return;
                    }
                    r4 = 32768 << 16;
                    f2 = r9;
                    r2 = r4 ^ r8;
                    f3 = r2;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x58568;
                        continue;
                    }
                case 0x58558:
                    r22 = r0 + r0;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5826c;
                    run_58200(); return;
                case 0x58568:
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = f8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = f9;
                    /* Next insn is delay slot */ 
                    pc=0x579b4;
                    run_57800(); return;
                case 0x58578:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5858c;
                    pc=0x5d800;
                    run_5d800(); return;
                case 0x5858c:
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x57c94;
                    run_57c00(); return;
                case 0x58598:
                    f0 = readPages[(r28+-32620)>>>12][((r28+-32620)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32624)>>>12][((r28+-32624)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x57420;
                    run_57400(); return;
                case 0x585b4:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x575cc;
                    run_57400(); return;
                case 0x585c0:
                    r7 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = r3 - r22;
                    r7 = r7 + r22;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r7;
                    r22 = r3 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x57bb8;
                    run_57a00(); return;
                case 0x585e0:
                    f0 = f8;
                    f1 = f9;
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x576b8;
                    run_57600(); return;
                case 0x585f0:
                    r3 = r0 + 1;
                    r4 = r0 + 1;
                    r21 = r0 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r3;
                case 0x58600:
                    pc=0x58600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58600() throws ExecutionException { /* 0x58600 - 0x58800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58600:
                    r30 = r0 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5762c;
                    run_57600(); return;
                case 0x58618:
                    r21 = r30 + r0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5762c;
                    run_57600(); return;
                case 0x5862c:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 - r9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x588a4;
                        run_58800(); return;
                    }
                    r4 = r2 & 15;
                    r3 = 7 << 16;
                    r4 = r4 << 3;
                    r3 = r3 + 27112;
                    r3 = r4 + r3;
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 >> 4;
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x589d0;
                        run_58800(); return;
                    }
                    r3 = 7 << 16;
                    r3 = r3 + 27072;
                    r8 = r0 + 2;
                case 0x5867c:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5869c;
                        continue;
                    }
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x5869c:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5867c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x576fc;
                    run_57600(); return;
                case 0x586b4:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 + 1;
                    r4 = r0 + 49;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x578c4;
                    run_57800(); return;
                case 0x586d8:
                    r5 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x586e8;
                    pc=0x5c600;
                    run_5c600(); return;
                case 0x586e8:
                    r6 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r18 = r2 + r0;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r5 = r19 + 12;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x58708;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x58708:
                    r4 = r16 + r0;
                    r5 = r18 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x5871c;
                    pc=0x5da00;
                    run_5da00(); return;
                case 0x5871c:
                    r21 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x57dc8;
                    run_57c00(); return;
                case 0x58728:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5891c;
                        run_58800(); return;
                    }
                    r9 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r23 = r23 + 1;
                    r18 = r19 + r0;
                    r3 = r9 + 1;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x580e4;
                    run_58000(); return;
                case 0x58754:
                    r18 = r19 + r0;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58078;
                    run_58000(); return;
                case 0x58764:
                    r22 = r0 + r0;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58494;
                    run_58400(); return;
                case 0x58774:
                    r3 = 7 << 16;
                    r6 = r5 << 3;
                    r3 = r3 + 27112;
                    r3 = r6 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = r9;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f5 = r8;
                    r3 = r20 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f11 = (int)(l >>> 32); f10 = (int)l; }
                    r6 = fcsr;
                    r6 = fcsr;
                    r1 = r6 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f4 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f4 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r6;
                    r7 = f4;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r6 = r7 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r0 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x58844;
                        run_58800(); return;
                    }
                    f6 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    r4 = r20 + r4;
                    f7 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    r6 = r3 + r0;
                case 0x587f4:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r6 = r6 + 1;
                    r8 = fcsr;
                case 0x58800:
                    pc=0x58800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58800() throws ExecutionException { /* 0x58800 - 0x58a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58800:
                    r8 = fcsr;
                    r1 = r8 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f4 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f4 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r8;
                    r9 = f4;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r10 = r9 + 48;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x587f4;
                        run_58600(); return;
                    }
                    r3 = r3 + r5;
                case 0x58844:
                    f2 = readPages[(r28+-32548)>>>12][((r28+-32548)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x58940;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x57b3c;
                    run_57a00(); return;
                case 0x58878:
                    r21 = r18 - r30;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x57bc8;
                    run_57a00(); return;
                case 0x58888:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r0 + 54;
                    r2 = r3 - r2;
                    r21 = r18 + r0;
                    r3 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x57bc8;
                    run_57a00(); return;
                case 0x588a4:
                    f0 = f8;
                    f1 = f9;
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x576fc;
                    run_57600(); return;
                case 0x588b4:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x584d0;
                        run_58400(); return;
                    }
                    r9 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58568;
                        run_58400(); return;
                    }
                    f6 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f7 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    f4 = r8;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r3 + -1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    r3 = 64704 << 16;
                    f3 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r3 + r8;
                    /* Next insn is delay slot */ 
                    pc=0x5776c;
                    run_57600(); return;
                case 0x5891c:
                    r8 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r0 + 57;
                    r18 = r19 + r0;
                    r3 = r8 + 1;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    r4 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x580b4;
                    run_58000(); return;
                case 0x58940:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x58568;
                        run_58400(); return;
                    }
                    r6 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x58964;
                    continue;
                case 0x58960:
                    r3 = r5 + r0;
                case 0x58964:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r5 = r3 + -1;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x58960;
                        continue;
                    }
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x578c4;
                    run_57800(); return;
                case 0x58980:
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x57b3c;
                    run_57a00(); return;
                case 0x5898c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58374;
                        run_58200(); return;
                    }
                    r2 = r23 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58374;
                        run_58200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5835c;
                    run_58200(); return;
                case 0x589a8:
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x589c0;
                    pc=0x5ca00;
                    run_5ca00(); return;
                case 0x589c0:
                    r19 = r2 + r0;
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x57d7c;
                    run_57c00(); return;
                case 0x589d0:
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x576fc;
                    run_57600(); return;
                case 0x589dc:
                    r4 = r0 + 4;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x57d2c;
                        run_57c00(); return;
                    }
                    r3 = r0 + 60;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x57fdc;
                    run_57e00(); return;
                case 0x589f8:
                    r8 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5758c;
                    run_57400(); return;
                case 0x58a00:
                    pc=0x58a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58a00() throws ExecutionException { /* 0x58a00 - 0x58c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58a00:
                case 0x58a04:
                    r21 = r6 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5762c;
                    run_57600(); return;
                case 0x58c00:
                    pc=0x58c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58c00() throws ExecutionException { /* 0x58c00 - 0x58e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58c00:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 114;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x58c98;
                        continue;
                    }
                    r3 = r0 + 119;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x58c84;
                        continue;
                    }
                    r3 = r0 + 97;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x58c3c;
                        continue;
                    }
                    r2 = r0 + 22;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x58c3c:
                    r7 = r0 + 520;
                    r4 = r0 + 1;
                    r2 = r0 + 264;
                case 0x58c48:
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58c74;
                        continue;
                    }
                    r8 = r0 + 43;
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x58cac;
                        continue;
                    }
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x58cac;
                        continue;
                    }
                case 0x58c74:
                    r4 = r4 | r7;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x58c84:
                    r7 = r0 + 1536;
                    r4 = r0 + 1;
                    r2 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x58c48;
                    continue;
                case 0x58c98:
                    r7 = r0 + r0;
                    r4 = r0 + r0;
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x58c48;
                    continue;
                case 0x58cac:
                    r3 = r0 + -29;
                    r4 = r0 + 2;
                    r2 = r2 & r3;
                    r4 = r4 | r7;
                    r2 = r2 | 16;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x58e00:
                    pc=0x58e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58e00() throws ExecutionException { /* 0x58e00 - 0x59000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58e00:
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    r16 = r6 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x58e28;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x58e28:
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r29 + 28;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58e58;
                        continue;
                    }
                    r2 = readPages[(r17+56)>>>12][((r17+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58eb0;
                        continue;
                    }
                case 0x58e58:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 8192;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58e84;
                        continue;
                    }
                    r2 = r2 | 8192;
                    r3 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r3 & r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                case 0x58e84:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x58e98;
                    pc=0x59200;
                    run_59200(); return;
                case 0x58e98:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r16 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x58eb0:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58ebc;
                    pc=0x35000;
                    run_35000(); return;
                case 0x58ebc:
                    /* Next insn is delay slot */ 
                    pc=0x58e58;
                    continue;
                case 0x59000:
                    pc=0x59000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59000() throws ExecutionException { /* 0x59000 - 0x59200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58e00;
                    run_58e00(); return;
                case 0x59200:
                    pc=0x59200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59200() throws ExecutionException { /* 0x59200 - 0x59400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59200:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r19 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x592d4;
                        continue;
                    }
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r21 = r4 + r0;
                    r3 = r2 & 8;
                    r16 = r5 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5930c;
                        continue;
                    }
                    r3 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5930c;
                        continue;
                    }
                    r3 = r2 & 2;
                    r17 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59338;
                        continue;
                    }
                case 0x59274:
                    r20 = r0 + r0;
                    r18 = r0 + r0;
                case 0x5927c:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x593fc;
                        continue;
                    }
                    r2 = (r18&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r7 = r18 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5929c;
                        continue;
                    }
                    r7 = r0 + 1024;
                case 0x5929c:
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x592b0;
                    return;
                case 0x592b0:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5943c;
                        run_59400(); return;
                    }
                    r3 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r20 = r20 + r2;
                    r18 = r18 - r2;
                    r2 = r3 - r2;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5927c;
                        continue;
                    }
                case 0x592d4:
                    r2 = r0 + r0;
                case 0x592d8:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5930c:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5931c;
                    pc=0x48200;
                    run_48200(); return;
                case 0x5931c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x597ec;
                        run_59600(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r17 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r3 = r2 & 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59274;
                        continue;
                    }
                case 0x59338:
                    r3 = r2 & 1;
                    r22 = r0 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59458;
                        run_59400(); return;
                    }
                    r18 = r0 + r0;
                case 0x5934c:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x593e8;
                        continue;
                    }
                case 0x59354:
                    r3 = r2 & 512;
                    r20 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59538;
                        run_59400(); return;
                    }
                    r3 = ((r18 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59600;
                        run_59600(); return;
                    }
                    r3 = r2 & 1152;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59684;
                        run_59600(); return;
                    }
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r23 = r20 + r0;
                    r30 = r20 + r0;
                    r20 = r18 + r0;
                case 0x5938c:
                    r5 = r22 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5939c;
                    pc=0x5c400;
                    run_5c400(); return;
                case 0x5939c:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r30 = r2 - r30;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r30;
                    r3 = r2 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    r2 = r18 + r0;
                case 0x593bc:
                    r22 = r22 + r2;
                    r18 = r18 - r2;
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r20 = r2 - r20;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r20;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x592d4;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59354;
                        continue;
                    }
                case 0x593e8:
                    r22 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x5934c;
                    continue;
                case 0x593fc:
                    r20 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                case 0x59400:
                    pc=0x59400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59400() throws ExecutionException { /* 0x59400 - 0x59600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59400:
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x5927c;
                    run_59200(); return;
                case 0x59410:
                    /* Next insn is delay slot */ 
                    r31=0x59418;
                    pc=0x3be00;
                    run_3be00(); return;
                case 0x59418:
                    r30 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59710;
                        run_59600(); return;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x59434;
                    pc=0x37400;
                    run_37400(); return;
                case 0x59434:
                    r2 = r0 + 12;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                case 0x5943c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x592d8;
                    run_59200(); return;
                case 0x59458:
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    r18 = r0 + r0;
                case 0x59464:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59520;
                        continue;
                    }
                case 0x5946c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59654;
                        run_59600(); return;
                    }
                case 0x59474:
                    r2 = ((r18 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59488;
                        continue;
                    }
                    r23 = r18 + r0;
                case 0x59488:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r20 = r23 + r0;
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x594b8;
                        continue;
                    }
                    r8 = r6 + r7;
                    r2 = r8 < r23 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5973c;
                        run_59600(); return;
                    }
                case 0x594b8:
                    r2 = r23 < r7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x595a0;
                        continue;
                    }
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x594e0;
                    return;
                case 0x594e0:
                    r20 = r2 + r0;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5943c;
                        continue;
                    }
                case 0x594f0:
                    r22 = r22 - r20;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x595dc;
                        continue;
                    }
                case 0x594fc:
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r30 = r30 + r20;
                    r18 = r18 - r20;
                    r20 = r2 - r20;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r20;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x592d4;
                        run_59200(); return;
                    }
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5946c;
                        continue;
                    }
                case 0x59520:
                    r30 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r3 = r0 + r0;
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x59464;
                    continue;
                case 0x59538:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5955c;
                        continue;
                    }
                    r2 = ((r20 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59790;
                        run_59600(); return;
                    }
                case 0x5955c:
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = ((r18 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59618;
                        run_59600(); return;
                    }
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x59588;
                    return;
                case 0x59588:
                    r20 = r2 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5943c;
                        continue;
                    }
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x593bc;
                    run_59200(); return;
                case 0x595a0:
                    r6 = r23 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x595b4;
                    pc=0x5c400;
                    run_5c400(); return;
                case 0x595b4:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r22 = r22 - r20;
                    r2 = r2 - r23;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r23 = r2 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r23;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x594fc;
                        continue;
                    }
                case 0x595dc:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x595ec;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x595ec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5943c;
                        continue;
                    }
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x594fc;
                    continue;
                case 0x59600:
                    pc=0x59600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59600() throws ExecutionException { /* 0x59600 - 0x59800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59600:
                    r30 = r18 + r0;
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r23 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5938c;
                    run_59200(); return;
                case 0x59618:
                    r5 = r22 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x59628;
                    pc=0x5c400;
                    run_5c400(); return;
                case 0x59628:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r2 = r2 - r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 + r18;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x593bc;
                    run_59200(); return;
                case 0x59654:
                    r4 = r30 + r0;
                    r5 = r0 + 10;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x59668;
                    pc=0x3a000;
                    run_3a000(); return;
                case 0x59668:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x597dc;
                        continue;
                    }
                    r22 = r2 + 1;
                    r22 = r22 - r30;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x59474;
                    run_59400(); return;
                case 0x59684:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r6 = r4 << 1;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r6 + r4;
                    r20 = r4 >>> 31;
                    r23 = r3 - r5;
                    r4 = r20 + r4;
                    r6 = r23 + 1;
                    r20 = r4 >> 1;
                    r6 = r6 + r18;
                    r4 = ((r20 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x597d0;
                        continue;
                    }
                    r20 = r6 + r0;
                case 0x596c0:
                    r2 = r2 & 1024;
                    r4 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59410;
                        run_59400(); return;
                    }
                    r5 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x596dc;
                    pc=0x39600;
                    run_39600(); return;
                case 0x596dc:
                    r30 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59434;
                        run_59400(); return;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x596fc;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x596fc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + -1153;
                    r2 = r2 & r3;
                    r2 = r2 | 128;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x59710:
                    r4 = r30 + r23;
                    r3 = r20 - r23;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r30;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r4;
                    r30 = r18 + r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    r20 = r18 + r0;
                    r23 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5938c;
                    run_59200(); return;
                case 0x5973c:
                    r6 = r8 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x59754;
                    pc=0x5c400;
                    run_5c400(); return;
                case 0x59754:
                    r8 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 + r8;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x59774;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x59774:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r8 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5943c;
                        run_59400(); return;
                    }
                    r20 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x594f0;
                    run_59400(); return;
                case 0x59790:
                    r5 = r22 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x597a0;
                    pc=0x5c400;
                    run_5c400(); return;
                case 0x597a0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 + r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x597bc;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x597bc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5943c;
                        run_59400(); return;
                    }
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x593bc;
                    run_59200(); return;
                case 0x597d0:
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x596c0;
                    continue;
                case 0x597dc:
                    r22 = r18 + 1;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x59474;
                    run_59400(); return;
                case 0x597ec:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x592d8;
                    run_59200(); return;
                case 0x59800:
                    pc=0x59800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59800() throws ExecutionException { /* 0x59800 - 0x59a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59c00;
                    run_59c00(); return;
                case 0x59a00:
                    pc=0x59a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59a00() throws ExecutionException { /* 0x59a00 - 0x59c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59a00:
                    r29 = r29 + -32;
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x59a1c;
                    pc=0x59c00;
                    run_59c00(); return;
                case 0x59a1c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x59c00:
                    pc=0x59c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59c00() throws ExecutionException { /* 0x59c00 - 0x59e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59c00:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r20 = r4 + r0;
                    r18 = r5 + r0;
                    r21 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x59c38;
                    pc=0x69a00;
                    run_69a00(); return;
                case 0x59c38:
                    r16 = readPages[(r28+-32660)>>>12][((r28+-32660)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59cf0;
                        continue;
                    }
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59d54;
                        continue;
                    }
                    r5 = r0 + 61;
                    r2 = r18 + r0;
                    r4 = r0 + 61;
                    if(r3 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x59c7c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x59cf0;
                    continue;
                case 0x59c74:
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x59cf0;
                        continue;
                    }
                case 0x59c7c:
                    r2 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59c74;
                        continue;
                    }
                    r17 = r2 - r18;
                case 0x59c94:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59cf0;
                        continue;
                    }
                    r22 = r0 + 61;
                case 0x59ca8:
                    r5 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x59cb8;
                    pc=0x61000;
                    run_61000(); return;
                case 0x59cb8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59cdc;
                        continue;
                    }
                    r19 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r19 = r19 + r17;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x59d2c;
                        continue;
                    }
                case 0x59cdc:
                    r16 = r16 + 4;
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59ca8;
                        continue;
                    }
                case 0x59cf0:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x59cfc;
                    pc=0x69c00;
                    run_69c00(); return;
                case 0x59cfc:
                    r2 = r0 + r0;
                case 0x59d00:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x59d2c:
                    r2 = readPages[(r28+-32660)>>>12][((r28+-32660)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r16 = r16 - r2;
                    r16 = r16 >> 2;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x59d48;
                    pc=0x69c00;
                    run_69c00(); return;
                case 0x59d48:
                    r2 = r19 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x59d00;
                    continue;
                case 0x59d54:
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59c94;
                    continue;
                case 0x59e00:
                    pc=0x59e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59e00() throws ExecutionException { /* 0x59e00 - 0x5a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59e00:
                    r29 = r29 + -32;
                    r6 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x59e14;
                    pc=0x59c00;
                    run_59c00(); return;
                case 0x59e14:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5a000:
                    pc=0x5a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5a000() throws ExecutionException { /* 0x5a000 - 0x5a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5a000:
                    r2 = 7 << 16;
                    r2 = r2 + 31368;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5a200:
                    pc=0x5a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5a200() throws ExecutionException { /* 0x5a200 - 0x5a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5a200:
                    /* Next insn is delay slot */ 
                    pc=0x69600;
                    run_69600(); return;
                case 0x5a400:
                    pc=0x5a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5a400() throws ExecutionException { /* 0x5a400 - 0x5a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5a400:
                    r2 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a430;
                        continue;
                    }
                    r2 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    r2 = r2 & 255;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5a430:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5a600:
                    pc=0x5a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5a600() throws ExecutionException { /* 0x5a600 - 0x5a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5a600:
                    r2 = r4 + r0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a614;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5a614:
                    r2 = r0 - r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5a800:
                    pc=0x5a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5a800() throws ExecutionException { /* 0x5a800 - 0x5aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5a800:
                    r29 = r29 + -1144;
                    writePages[(r29+1136)>>>12][((r29+1136)>>>2)&0x3ff] = r30;
                    writePages[(r29+1124)>>>12][((r29+1124)>>>2)&0x3ff] = r21;
                    writePages[(r29+1120)>>>12][((r29+1120)>>>2)&0x3ff] = r20;
                    writePages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff] = r16;
                    writePages[(r29+1140)>>>12][((r29+1140)>>>2)&0x3ff] = r31;
                    writePages[(r29+1132)>>>12][((r29+1132)>>>2)&0x3ff] = r23;
                    writePages[(r29+1128)>>>12][((r29+1128)>>>2)&0x3ff] = r22;
                    writePages[(r29+1116)>>>12][((r29+1116)>>>2)&0x3ff] = r19;
                    writePages[(r29+1112)>>>12][((r29+1112)>>>2)&0x3ff] = r18;
                    writePages[(r29+1108)>>>12][((r29+1108)>>>2)&0x3ff] = r17;
                    r30 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r21 = r4 + r0;
                    r20 = r5 + r0;
                    r16 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aae0;
                        run_5aa00(); return;
                    }
                    r5 = 7 << 16;
                    r5 = r5 + 21352;
                    r19 = r6 + r0;
                    r17 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5a860;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x5a860:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a8a4;
                        continue;
                    }
                case 0x5a868:
                    r22 = r0 + r0;
                case 0x5a86c:
                    r31 = readPages[(r29+1140)>>>12][((r29+1140)>>>2)&0x3ff];
                    r2 = r22 + r0;
                    r30 = readPages[(r29+1136)>>>12][((r29+1136)>>>2)&0x3ff];
                    r23 = readPages[(r29+1132)>>>12][((r29+1132)>>>2)&0x3ff];
                    r22 = readPages[(r29+1128)>>>12][((r29+1128)>>>2)&0x3ff];
                    r21 = readPages[(r29+1124)>>>12][((r29+1124)>>>2)&0x3ff];
                    r20 = readPages[(r29+1120)>>>12][((r29+1120)>>>2)&0x3ff];
                    r19 = readPages[(r29+1116)>>>12][((r29+1116)>>>2)&0x3ff];
                    r18 = readPages[(r29+1112)>>>12][((r29+1112)>>>2)&0x3ff];
                    r17 = readPages[(r29+1108)>>>12][((r29+1108)>>>2)&0x3ff];
                    r16 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r29 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5a8a4:
                    r5 = 7 << 16;
                    r4 = r21 + r0;
                    r5 = r5 + 27012;
                    /* Next insn is delay slot */ 
                    r31=0x5a8b8;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x5a8b8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a868;
                        continue;
                    }
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a8e4;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5a8d8;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x5a8d8:
                    r22 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ab3c;
                        run_5aa00(); return;
                    }
                case 0x5a8e4:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5a8f0;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x5a8f0:
                    r5 = readPages[(r28+-32288)>>>12][((r28+-32288)>>>2)&0x3ff];
                    r18 = r2 + 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aae0;
                        run_5aa00(); return;
                    }
                    r4 = r29 + 16;
                    r22 = 7 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x5a910;
                    pc=0x3e600;
                    run_3e600(); return;
                case 0x5a910:
                    r4 = r29 + 16;
                    r5 = r22 + 26844;
                    /* Next insn is delay slot */ 
                    r31=0x5a920;
                    pc=0x60c00;
                    run_60c00(); return;
                case 0x5a920:
                    r4 = r29 + 16;
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5a930;
                    pc=0x60c00;
                    run_60c00(); return;
                case 0x5a930:
                    r4 = r29 + 16;
                    r5 = r22 + 26844;
                    /* Next insn is delay slot */ 
                    r31=0x5a940;
                    pc=0x60c00;
                    run_60c00(); return;
                case 0x5a940:
                    r4 = r29 + 16;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5a950;
                    pc=0x60c00;
                    run_60c00(); return;
                case 0x5a950:
                    r4 = r29 + 16;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5a960;
                    pc=0x66800;
                    run_66800(); return;
                case 0x5a960:
                    r23 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aae0;
                        run_5aa00(); return;
                    }
                    r4 = r2 + r0;
                    r5 = r29 + 1040;
                    /* Next insn is delay slot */ 
                    r31=0x5a97c;
                    pc=0x66600;
                    run_66600(); return;
                case 0x5a97c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aad4;
                        run_5aa00(); return;
                    }
                    r5 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    if(r5 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aad4;
                        run_5aa00(); return;
                    }
                    r5 = r18 + r5;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ab1c;
                        run_5aa00(); return;
                    }
                    r2 = r28 + -32544;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5ab1c;
                        run_5aa00(); return;
                    }
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5a9b8;
                    pc=0x3bc00;
                    run_3bc00(); return;
                case 0x5a9b8:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ab84;
                        run_5aa00(); return;
                    }
                case 0x5a9c4:
                    r4 = r17 + r0;
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5a9d4;
                    pc=0x3e600;
                    run_3e600(); return;
                case 0x5a9d4:
                    r18 = r17 + r18;
                    r6 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r5 = r18 + r0;
                    r19 = r18 + r6;
                    /* Next insn is delay slot */ 
                    r31=0x5a9f0;
                    pc=0x66a00;
                    run_66a00(); return;
                case 0x5a9f0:
                    r3 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5aac8;
                        run_5aa00(); return;
                    }
                case 0x5aa00:
                    pc=0x5aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5aa00() throws ExecutionException { /* 0x5aa00 - 0x5ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5aa00:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5aa0c;
                    pc=0x66200;
                    run_66200(); return;
                case 0x5aa0c:
                    r22 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aac8;
                        continue;
                    }
                    addr=r19+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 10;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5aac8;
                        continue;
                    }
                    r2 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    r21 = r0 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aa60;
                        continue;
                    }
                case 0x5aa38:
                    r4 = r18 + r0;
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x5aa48;
                    pc=0x60e00;
                    run_60e00(); return;
                case 0x5aa48:
                    r18 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    r21 = r21 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aa38;
                        continue;
                    }
                case 0x5aa60:
                    r3 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r2 = r21 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aaf0;
                        continue;
                    }
                    writePages[(r28+-32292)>>>12][((r28+-32292)>>>2)&0x3ff] = r3;
                    r19 = r3 + r0;
                case 0x5aa7c:
                    r18 = r0 + r0;
                    if(r19 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aab0;
                        continue;
                    }
                case 0x5aa88:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5aa94;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x5aa94:
                    r2 = r2 + 1;
                    r17 = r17 + r2;
                    r18 = r18 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                    r16 = r16 + 4;
                    if(r18 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x5aa88;
                        continue;
                    }
                case 0x5aab0:
                    r2 = r0 + 1;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x5a86c;
                    run_5a800(); return;
                case 0x5aac0:
                    writePages[(r28+-32292)>>>12][((r28+-32292)>>>2)&0x3ff] = r21;
                    r30 = r0 + r0;
                case 0x5aac8:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5aad4;
                    pc=0x39400;
                    run_39400(); return;
                case 0x5aad4:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5aae0;
                    pc=0x66200;
                    run_66200(); return;
                case 0x5aae0:
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r30;
                    r22 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5a86c;
                    run_5a800(); return;
                case 0x5aaf0:
                    r3 = readPages[(r29+1164)>>>12][((r29+1164)>>>2)&0x3ff];
                    r2 = r21 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aac0;
                        continue;
                    }
                    r2 = readPages[(r29+1164)>>>12][((r29+1164)>>>2)&0x3ff];
                    writePages[(r28+-32292)>>>12][((r28+-32292)>>>2)&0x3ff] = r2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5aa7c;
                    continue;
                case 0x5ab1c:
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5ab28;
                    pc=0x39200;
                    run_39200(); return;
                case 0x5ab28:
                    r17 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a9c4;
                        run_5a800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5aad4;
                    continue;
                case 0x5ab3c:
                    r18 = readPages[(r28+-32292)>>>12][((r28+-32292)>>>2)&0x3ff];
                    r17 = r0 + r0;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aab0;
                        continue;
                    }
                case 0x5ab4c:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5ab58;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x5ab58:
                    r2 = r2 + 1;
                    r19 = r19 + r2;
                    r17 = r17 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r19;
                    r16 = r16 + 4;
                    if(r17 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x5ab4c;
                        continue;
                    }
                    r2 = r0 + 1;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x5a86c;
                    run_5a800(); return;
                case 0x5ab84:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5ab90;
                    pc=0x39400;
                    run_39400(); return;
                case 0x5ab90:
                    /* Next insn is delay slot */ 
                    pc=0x5aad4;
                    continue;
                case 0x5ac00:
                    pc=0x5ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ac00() throws ExecutionException { /* 0x5ac00 - 0x5ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ac00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r6 + r0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ac38;
                        continue;
                    }
                    r5 = 7 << 16;
                    r4 = r6 + r0;
                    r5 = r5 + 27012;
                    /* Next insn is delay slot */ 
                    r31=0x5ac30;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x5ac30:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ac5c;
                        continue;
                    }
                case 0x5ac38:
                    r17 = 7 << 16;
                case 0x5ac3c:
                    r17 = r17 + 21352;
                case 0x5ac40:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5ac5c:
                    r17 = 7 << 16;
                    r4 = r16 + r0;
                    r5 = r17 + 21352;
                    /* Next insn is delay slot */ 
                    r31=0x5ac70;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x5ac70:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ac3c;
                        continue;
                    }
                    r5 = 7 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + -7564;
                    /* Next insn is delay slot */ 
                    r31=0x5ac8c;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x5ac8c:
                    r17 = r17 + 21352;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ac40;
                        continue;
                    }
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ac40;
                    continue;
                case 0x5ae00:
                    pc=0x5ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ae00() throws ExecutionException { /* 0x5ae00 - 0x5b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ae00:
                    r2 = 7 << 16;
                    r2 = r2 + 31464;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5b000:
                    pc=0x5b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5b000() throws ExecutionException { /* 0x5b000 - 0x5b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5b000:
                    r2 = readPages[(r28+-32540)>>>12][((r28+-32540)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5b200:
                    pc=0x5b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5b200() throws ExecutionException { /* 0x5b200 - 0x5b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5b200:
                    r2 = 7 << 16;
                    r2 = r2 + 31432;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5b400:
                    pc=0x5b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5b400() throws ExecutionException { /* 0x5b400 - 0x5b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5b400:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5b600:
                    pc=0x5b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5b600() throws ExecutionException { /* 0x5b600 - 0x5b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5b600:
                    r2 = 7 << 16;
                    r2 = r2 + 31496;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5b800:
                    pc=0x5b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5b800() throws ExecutionException { /* 0x5b800 - 0x5ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5b800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ac00;
                    run_5ac00(); return;
                case 0x5ba00:
                    pc=0x5ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ba00() throws ExecutionException { /* 0x5ba00 - 0x5bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ba00:
                    r2 = 7 << 16;
                    r2 = r2 + 31496;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5bc00:
                    pc=0x5bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5bc00() throws ExecutionException { /* 0x5bc00 - 0x5be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5bc00:
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r17 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r18 = readPages[(r28+-32536)>>>12][((r28+-32536)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5bc94;
                        continue;
                    }
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r5;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r6;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x5bc3c;
                    pc=0x5ae00;
                    run_5ae00(); return;
                case 0x5bc3c:
                    r5 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r7 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x5bc5c;
                    return;
                case 0x5bc5c:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5bc78;
                        continue;
                    }
                    r2 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                case 0x5bc78:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5bc94:
                    /* Next insn is delay slot */ 
                    r31=0x5bc9c;
                    pc=0x5ae00;
                    run_5ae00(); return;
                case 0x5bc9c:
                    r6 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    r6 = r6 + -7564;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x5bcc0;
                    return;
                case 0x5bcc0:
                    /* Next insn is delay slot */ 
                    pc=0x5bc5c;
                    continue;
                case 0x5be00:
                    pc=0x5be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5be00() throws ExecutionException { /* 0x5be00 - 0x5c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5be00:
                    r29 = r29 + -56;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r16 = r5 + r0;
                    r17 = r7 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5beb0;
                        continue;
                    }
                    r21 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r19 = r4 + r0;
                    r18 = r6 + r0;
                    r20 = readPages[(r28+-32536)>>>12][((r28+-32536)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x5be48;
                    pc=0x5ae00;
                    run_5ae00(); return;
                case 0x5be48:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r21 + r0;
                    r5 = r19 + r0;
                    r6 = r16 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r20;
                    r31=0x5be68;
                    return;
                case 0x5be68:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5be88;
                        continue;
                    }
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r3 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + -1;
                case 0x5be88:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5beb0:
                    r18 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32536)>>>12][((r28+-32536)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x5bec0;
                    pc=0x5ae00;
                    run_5ae00(); return;
                case 0x5bec0:
                    r6 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    r6 = r6 + -7564;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x5bee4;
                    return;
                case 0x5bee4:
                    /* Next insn is delay slot */ 
                    pc=0x5be68;
                    continue;
                case 0x5c000:
                    pc=0x5c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5c000() throws ExecutionException { /* 0x5c000 - 0x5c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5c000:
                    r29 = r29 + -8;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c040;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c04c;
                        continue;
                    }
                case 0x5c014:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c05c;
                        continue;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                case 0x5c034:
                    r29 = r29 + 8;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5c040:
                    r5 = r29 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c014;
                        continue;
                    }
                case 0x5c04c:
                    r2 = r0 + r0;
                    r29 = r29 + 8;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5c05c:
                    r2 = r0 + -2;
                    /* Next insn is delay slot */ 
                    pc=0x5c034;
                    continue;
                case 0x5c200:
                    pc=0x5c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5c200() throws ExecutionException { /* 0x5c200 - 0x5c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5c200:
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r16 = readPages[(r28+-32536)>>>12][((r28+-32536)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x5c228;
                    pc=0x5ae00;
                    run_5ae00(); return;
                case 0x5c228:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r6 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x5c24c;
                    return;
                case 0x5c24c:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5c400:
                    pc=0x5c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5c400() throws ExecutionException { /* 0x5c400 - 0x5c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5c400:
                    r3 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r2 = r4 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c450;
                        continue;
                    }
                    r7 = r5 + r6;
                    r3 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c450;
                        continue;
                    }
                    r3 = r4 + r6;
                    r5 = r3 - r6;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c548;
                        continue;
                    }
                case 0x5c430:
                    r7 = r7 + -1;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x5c430;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5c450:
                    r3 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c550;
                        continue;
                    }
                    r3 = r2 | r5;
                    r3 = r3 & 3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c564;
                        continue;
                    }
                    r7 = r5 + r0;
                    r3 = r2 + r0;
                    r4 = r6 + r0;
                case 0x5c478:
                    r8 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r7 = r7 + 16;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-12)>>>12][((r7+-12)>>>2)&0x3ff];
                    r3 = r3 + 16;
                    writePages[(r3+-12)>>>12][((r3+-12)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-8)>>>12][((r7+-8)>>>2)&0x3ff];
                    r4 = r4 + -16;
                    writePages[(r3+-8)>>>12][((r3+-8)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff];
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r8;
                    r8 = (r4&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c478;
                        continue;
                    }
                    r4 = r6 + -16;
                    r4 = r4 >>> 4;
                    r4 = r4 + 1;
                    r4 = r4 << 4;
                    r10 = r6 & 15;
                    r3 = r2 + r4;
                    r5 = r5 + r4;
                    r4 = (r10&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c578;
                        continue;
                    }
                    r8 = r5 + r0;
                    r7 = r3 + r0;
                    r4 = r10 + r0;
                case 0x5c4e8:
                    r8 = r8 + 4;
                    r9 = readPages[(r8+-4)>>>12][((r8+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    r4 = r4 + -4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r9;
                    r9 = (r4&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c4e8;
                        continue;
                    }
                    r4 = r10 + -4;
                    r4 = r4 >>> 2;
                    r4 = r4 + 1;
                    r4 = r4 << 2;
                    r6 = r6 & 3;
                    r3 = r3 + r4;
                    r5 = r5 + r4;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c570;
                        continue;
                    }
                case 0x5c52c:
                    r6 = r3 + r6;
                case 0x5c530:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x5c530;
                        continue;
                    }
                case 0x5c548:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5c550:
                    r3 = r2 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c52c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5c570;
                    continue;
                case 0x5c564:
                    r3 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5c52c;
                    continue;
                case 0x5c570:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5c578:
                    r6 = r10 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c52c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5c570;
                    continue;
                case 0x5c600:
                    pc=0x5c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5c600() throws ExecutionException { /* 0x5c600 - 0x5c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5c600:
                    r2 = readPages[(r4+76)>>>12][((r4+76)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    r17 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c670;
                        continue;
                    }
                case 0x5c628:
                    r3 = r17 << 2;
                    r3 = r2 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c698;
                        continue;
                    }
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                case 0x5c64c:
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                case 0x5c654:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5c670:
                    r5 = r0 + 4;
                    r6 = r0 + 33;
                    /* Next insn is delay slot */ 
                    r31=0x5c680;
                    pc=0x69800;
                    run_69800(); return;
                case 0x5c680:
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c628;
                        continue;
                    }
                case 0x5c68c:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5c654;
                    continue;
                case 0x5c698:
                    r18 = r0 + 1;
                    r18 = r18 << (r17&0x1f);
                    r6 = r18 + 5;
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x5c6b8;
                    pc=0x69800;
                    run_69800(); return;
                case 0x5c6b8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c68c;
                        continue;
                    }
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r17;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x5c64c;
                    continue;
                case 0x5c800:
                    pc=0x5c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5c800() throws ExecutionException { /* 0x5c800 - 0x5ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5c800:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c828;
                        continue;
                    }
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r3 = readPages[(r4+76)>>>12][((r4+76)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                case 0x5c828:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5ca00:
                    pc=0x5ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ca00() throws ExecutionException { /* 0x5ca00 - 0x5cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ca00:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r18 = r4 + r0;
                    r17 = r5 + r0;
                    r3 = r5 + 20;
                    r8 = r0 + r0;
                case 0x5ca2c:
                    r11 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    r9 = r11 & 65535;
                    { long hilo = (long)(r9) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = r11 >>> 16;
                    r3 = r3 + 4;
                    r9 = lo;
                    r9 = r9 + r7;
                    r7 = r9 >>> 16;
                    { long hilo = (long)(r11) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r9 = r9 & 65535;
                    r11 = lo;
                    r10 = r7 + r11;
                    r7 = r10 >>> 16;
                    r10 = r10 << 16;
                    r9 = r10 + r9;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r9;
                    r9 = r8 < r16 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ca2c;
                        continue;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cab0;
                        continue;
                    }
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r2 = r16 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cad4;
                        continue;
                    }
                case 0x5ca98:
                    r2 = r16 + 4;
                    r2 = r2 << 2;
                    r2 = r17 + r2;
                    r16 = r16 + 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r7;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r16;
                case 0x5cab0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5cad4:
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r5 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x5caec;
                    pc=0x5c600;
                    run_5c600(); return;
                case 0x5caec:
                    r6 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r5 = r17 + 12;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5cb0c;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x5cb0c:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r3 = readPages[(r18+76)>>>12][((r18+76)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    r17 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ca98;
                    continue;
                case 0x5cc00:
                    pc=0x5cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5cc00() throws ExecutionException { /* 0x5cc00 - 0x5ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5cc00:
                    r29 = r29 + -48;
                    r2 = r0 + 9;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r7 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x5cc20;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x5cc20:
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r20 = r5 + r0;
                    r18 = r6 + r0;
                    r19 = r7 + r0;
                    r4 = lo;
                    r2 = r4 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cd4c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r5 = r0 + r0;
                case 0x5cc5c:
                    r2 = r2 << 1;
                    r8 = r2 < r4 ? 1 : 0;
                    r5 = r5 + 1;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cc5c;
                        continue;
                    }
                case 0x5cc70:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5cc7c;
                    pc=0x5c600;
                    run_5c600(); return;
                case 0x5cc7c:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = r18 < 10 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cd3c;
                        continue;
                    }
                    r21 = r20 + 9;
                    r16 = r21 + r0;
                    r20 = r20 + r18;
                case 0x5cca8:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r4 = r17 + r0;
                    r5 = r2 + r0;
                    r6 = r0 + 10;
                    r7 = r7 + -48;
                    /* Next insn is delay slot */ 
                    r31=0x5ccc8;
                    pc=0x5ca00;
                    run_5ca00(); return;
                case 0x5ccc8:
                    if(r16 != r20) {
                        /* Next insn is delay slot */ 
                        pc=0x5cca8;
                        continue;
                    }
                    r16 = r21 + r18;
                    r16 = r16 + -8;
                case 0x5ccd8:
                    r3 = r18 < r19 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cd14;
                        continue;
                    }
                    r18 = r19 - r18;
                    r18 = r16 + r18;
                case 0x5ccec:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r4 = r17 + r0;
                    r5 = r2 + r0;
                    r6 = r0 + 10;
                    r7 = r7 + -48;
                    /* Next insn is delay slot */ 
                    r31=0x5cd0c;
                    pc=0x5ca00;
                    run_5ca00(); return;
                case 0x5cd0c:
                    if(r16 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x5ccec;
                        continue;
                    }
                case 0x5cd14:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5cd3c:
                    r16 = r20 + 10;
                    r18 = r0 + 9;
                    /* Next insn is delay slot */ 
                    pc=0x5ccd8;
                    continue;
                case 0x5cd4c:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5cc70;
                    continue;
                case 0x5ce00:
                    pc=0x5ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ce00() throws ExecutionException { /* 0x5ce00 - 0x5d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ce00:
                    r2 = 65535 << 16;
                    r2 = r4 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ce84;
                        continue;
                    }
                    r4 = r4 << 16;
                    r2 = r0 + 16;
                case 0x5ce18:
                    r3 = 65280 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ce30;
                        continue;
                    }
                    r2 = r2 + 8;
                    r4 = r4 << 8;
                case 0x5ce30:
                    r3 = 61440 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ce48;
                        continue;
                    }
                    r2 = r2 + 4;
                    r4 = r4 << 4;
                case 0x5ce48:
                    r3 = 49152 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ce60;
                        continue;
                    }
                    r2 = r2 + 2;
                    r4 = r4 << 2;
                case 0x5ce60:
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ce7c;
                        continue;
                    }
                    r3 = 16384 << 16;
                    r4 = r4 & r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ce90;
                        continue;
                    }
                    r2 = r0 + 32;
                case 0x5ce7c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5ce84:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ce18;
                    continue;
                case 0x5ce90:
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5d000:
                    pc=0x5d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5d000() throws ExecutionException { /* 0x5d000 - 0x5d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5d000:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r3 & 7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d040;
                        continue;
                    }
                    r2 = r3 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d0d0;
                        continue;
                    }
                    r2 = r3 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d0dc;
                        continue;
                    }
                    r3 = r3 >>> 2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5d040:
                    r2 = r3 & 65535;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d0b0;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x5d050:
                    r5 = r3 & 255;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d064;
                        continue;
                    }
                    r2 = r2 + 8;
                    r3 = r3 >>> 8;
                case 0x5d064:
                    r5 = r3 & 15;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d078;
                        continue;
                    }
                    r2 = r2 + 4;
                    r3 = r3 >>> 4;
                case 0x5d078:
                    r5 = r3 & 3;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d08c;
                        continue;
                    }
                    r2 = r2 + 2;
                    r3 = r3 >>> 2;
                case 0x5d08c:
                    r5 = r3 & 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d0c4;
                        continue;
                    }
                    r3 = r3 >>> 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d0c0;
                        continue;
                    }
                    r2 = r0 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5d0b0:
                    r3 = r3 >>> 16;
                    r2 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x5d050;
                    continue;
                case 0x5d0c0:
                    r2 = r2 + 1;
                case 0x5d0c4:
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5d0d0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5d0dc:
                    r3 = r3 >>> 1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5d200:
                    pc=0x5d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5d200() throws ExecutionException { /* 0x5d200 - 0x5d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5d200:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x5d21c;
                    pc=0x5c600;
                    run_5c600(); return;
                case 0x5d21c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r16;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r4;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5d400:
                    pc=0x5d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5d400() throws ExecutionException { /* 0x5d400 - 0x5d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5d400:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r19 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r2 = r18 < r19 ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r5 + r0;
                    r20 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d44c;
                        continue;
                    }
                    r2 = r18 + r0;
                    r17 = r6 + r0;
                    r18 = r19 + r0;
                    r20 = r5 + r0;
                    r19 = r2 + r0;
                case 0x5d44c:
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r16 = r18 + r19;
                    r2 = r2 < r16 ? 1 : 0;
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d468;
                        continue;
                    }
                    r5 = r5 + 1;
                case 0x5d468:
                    /* Next insn is delay slot */ 
                    r31=0x5d470;
                    pc=0x5c600;
                    run_5c600(); return;
                case 0x5d470:
                    r13 = r2 + 20;
                    r14 = r16 << 2;
                    r14 = r13 + r14;
                    r4 = ((r13 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    r3 = r13 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d4a0;
                        continue;
                    }
                case 0x5d48c:
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r3 = r3 + 4;
                    r4 = ((r3 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d48c;
                        continue;
                    }
                case 0x5d4a0:
                    r12 = r20 + 20;
                    r15 = r19 << 2;
                    r15 = r12 + r15;
                    r24 = r17 + 20;
                    r11 = r18 << 2;
                    r3 = ((r12 & 0xffffffffL) < (r15 & 0xffffffffL)) ? 1 : 0;
                    r11 = r24 + r11;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d604;
                        run_5d600(); return;
                    }
                case 0x5d4c4:
                    r9 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    r8 = r9 & 65535;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d560;
                        continue;
                    }
                    r4 = r13 + r0;
                    r3 = r24 + r0;
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5d4f0;
                    continue;
                case 0x5d4ec:
                    r4 = r7 + r0;
                case 0x5d4f0:
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r6 & 65535;
                    { long hilo = (long)(r5) * ((long)r8); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = r6 >>> 16;
                    r10 = r7 & 65535;
                    r7 = r7 >>> 16;
                    r3 = r3 + 4;
                    r5 = lo;
                    r5 = r5 + r10;
                    r5 = r5 + r9;
                    { long hilo = (long)(r6) * ((long)r8); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r9 = r5 >>> 16;
                    r5 = r5 & 65535;
                    r6 = lo;
                    r6 = r6 + r7;
                    r6 = r6 + r9;
                    r9 = r6 >>> 16;
                    r6 = r6 << 16;
                    r5 = r6 | r5;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    r5 = ((r3 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    r7 = r4 + 4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d4ec;
                        continue;
                    }
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r9;
                    r9 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                case 0x5d560:
                    r9 = r9 >>> 16;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d5f0;
                        continue;
                    }
                    r4 = readPages[(r13+0)>>>12][((r13+0)>>>2)&0x3ff];
                    r5 = r13 + r0;
                    r7 = r4 + r0;
                    r3 = r24 + r0;
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5d58c;
                    continue;
                case 0x5d588:
                    r5 = r8 + r0;
                case 0x5d58c:
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r6 = tmp;
                    r7 = r7 >>> 16;
                    { long hilo = (long)(r6) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = r4 & 65535;
                    r3 = r3 + 4;
                    r8 = r5 + 4;
                    r6 = lo;
                    r6 = r6 + r7;
                    r6 = r6 + r10;
                    r7 = r6 << 16;
                    r4 = r7 | r4;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r4;
                    addr=r3+-4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r7 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    { long hilo = (long)(r4) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = r7 & 65535;
                    r6 = r6 >>> 16;
                    r4 = lo;
                    r4 = r4 + r10;
                    r4 = r4 + r6;
                    r6 = ((r3 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    r10 = r4 >>> 16;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d588;
                        continue;
                    }
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r4;
                case 0x5d5f0:
                    r12 = r12 + 4;
                    r3 = ((r12 & 0xffffffffL) < (r15 & 0xffffffffL)) ? 1 : 0;
                    r13 = r13 + 4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d4c4;
                        continue;
                    }
                case 0x5d600:
                    pc=0x5d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5d600() throws ExecutionException { /* 0x5d600 - 0x5d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5d600:
                case 0x5d604:
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d644;
                        continue;
                    }
                    r4 = readPages[(r14+-4)>>>12][((r14+-4)>>>2)&0x3ff];
                    r3 = r14 + -4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d638;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5d644;
                    continue;
                case 0x5d624:
                    r3 = r3 + -4;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d644;
                        continue;
                    }
                case 0x5d638:
                    r16 = r16 + -1;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d624;
                        continue;
                    }
                case 0x5d644:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5d800:
                    pc=0x5d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5d800() throws ExecutionException { /* 0x5d800 - 0x5da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5d800:
                    r29 = r29 + -40;
                    r2 = r6 & 3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d924;
                        continue;
                    }
                case 0x5d830:
                    r16 = r16 >> 2;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d8cc;
                        continue;
                    }
                    r17 = readPages[(r19+72)>>>12][((r19+72)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d954;
                        continue;
                    }
                case 0x5d84c:
                    r3 = r16 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d884;
                        continue;
                    }
                case 0x5d858:
                    r16 = r16 >> 1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d8cc;
                        continue;
                    }
                case 0x5d864:
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d8f0;
                        continue;
                    }
                    r17 = r2 + r0;
                case 0x5d878:
                    r3 = r16 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d858;
                        continue;
                    }
                case 0x5d884:
                    r4 = r19 + r0;
                    r5 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5d898;
                    pc=0x5d400;
                    run_5d400(); return;
                case 0x5d898:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d918;
                        continue;
                    }
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = readPages[(r19+76)>>>12][((r19+76)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    r3 = r4 + r3;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r16 = r16 >> 1;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r18 = r2 + r0;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d864;
                        continue;
                    }
                case 0x5d8cc:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5d8f0:
                    r5 = r17 + r0;
                    r6 = r17 + r0;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5d904;
                    pc=0x5d400;
                    run_5d400(); return;
                case 0x5d904:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5d878;
                    continue;
                case 0x5d918:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5d858;
                    continue;
                case 0x5d924:
                    r2 = r2 + -1;
                    r3 = 7 << 16;
                    r3 = r3 + 27020;
                    r2 = r2 << 2;
                    r2 = r2 + r3;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5d948;
                    pc=0x5ca00;
                    run_5ca00(); return;
                case 0x5d948:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5d830;
                    continue;
                case 0x5d954:
                    r4 = r19 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x5d964;
                    pc=0x5c600;
                    run_5c600(); return;
                case 0x5d964:
                    r17 = r2 + r0;
                    r2 = r0 + 625;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r2;
                    writePages[(r19+72)>>>12][((r19+72)>>>2)&0x3ff] = r17;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x5d84c;
                    continue;
                case 0x5da00:
                    pc=0x5da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5da00() throws ExecutionException { /* 0x5da00 - 0x5dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5da00:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = r5 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    r20 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r6 >> 5;
                    r20 = r17 + r20;
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r20 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = r4 + r0;
                    r4 = r2 < r16 ? 1 : 0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r21 = r6 + r0;
                    r5 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5da64;
                        continue;
                    }
                case 0x5da50:
                    r2 = r2 << 1;
                    r7 = r2 < r16 ? 1 : 0;
                    r5 = r5 + 1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5da50;
                        continue;
                    }
                case 0x5da64:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5da70;
                    pc=0x5c600;
                    run_5c600(); return;
                case 0x5da70:
                    r7 = r2 + 20;
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5daa0;
                        continue;
                    }
                    r8 = r7 + r0;
                    r3 = r0 + r0;
                case 0x5da84:
                    r8 = r8 + 4;
                    r3 = r3 + 1;
                    writePages[(r8+-4)>>>12][((r8+-4)>>>2)&0x3ff] = r0;
                    if(r3 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x5da84;
                        continue;
                    }
                    r3 = r3 << 2;
                    r7 = r7 + r3;
                case 0x5daa0:
                    r10 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r3 = r18 + 20;
                    r10 = r10 << 2;
                    r6 = r21 & 31;
                    r10 = r3 + r10;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5db5c;
                        continue;
                    }
                    r4 = r0 + 32;
                    r4 = r4 - r6;
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5dad4;
                    continue;
                case 0x5dad0:
                    r7 = r8 + r0;
                case 0x5dad4:
                    r11 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    r11 = r11 << (r6&0x1f);
                    r9 = r9 | r11;
                    writePages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff] = r9;
                    r9 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r11 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    r8 = r7 + 4;
                    r9 = r9 >>> (r4&0x1f);
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dad0;
                        continue;
                    }
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r9;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5db10;
                        continue;
                    }
                    r16 = r20 + 2;
                case 0x5db10:
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = readPages[(r19+76)>>>12][((r19+76)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    r3 = r4 + r3;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = r16 + -1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r4;
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5db5c:
                    r3 = r3 + 4;
                    r6 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r6;
                    r6 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5db10;
                        continue;
                    }
                    r3 = r3 + 4;
                    r6 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r6;
                    r6 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5db5c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5db10;
                    continue;
                case 0x5dc00:
                    pc=0x5dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5dc00() throws ExecutionException { /* 0x5dc00 - 0x5de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5dc00:
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r3 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r2 = r2 - r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dc78;
                        continue;
                    }
                    r3 = r3 << 2;
                    r4 = r4 + 20;
                    r5 = r5 + 20;
                    r2 = r4 + r3;
                    r5 = r5 + r3;
                    /* Next insn is delay slot */ 
                    pc=0x5dc40;
                    continue;
                case 0x5dc34:
                    r3 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dc74;
                        continue;
                    }
                case 0x5dc40:
                    r2 = r2 + -4;
                    r5 = r5 + -4;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x5dc34;
                        continue;
                    }
                    r3 = ((r3 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dc80;
                        continue;
                    }
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5dc74:
                    r2 = r0 + r0;
                case 0x5dc78:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5dc80:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5de00:
                    pc=0x5de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5de00() throws ExecutionException { /* 0x5de00 - 0x5e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5de00:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r16 = r5 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r17 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5de34;
                    pc=0x5dc00;
                    run_5dc00(); return;
                case 0x5de34:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dfa4;
                        continue;
                    }
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5df8c;
                        continue;
                    }
                    r19 = r0 + r0;
                case 0x5de48:
                    r5 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5de58;
                    pc=0x5c600;
                    run_5c600(); return;
                case 0x5de58:
                    r10 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r13 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r16 + 20;
                    r12 = r10 << 2;
                    r7 = r17 + 20;
                    r13 = r13 << 2;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r19;
                    r12 = r4 + r12;
                    r13 = r7 + r13;
                    r3 = r2 + 20;
                    r5 = r0 + r0;
                case 0x5de84:
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r9 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r6 = r8 & 65535;
                    r5 = r6 + r5;
                    r11 = r9 & 65535;
                    r6 = r5 - r11;
                    r8 = r8 >>> 16;
                    r9 = r9 >>> 16;
                    r5 = r6 >> 16;
                    r8 = r8 - r9;
                    r8 = r8 + r5;
                    r7 = r7 + 4;
                    r5 = r8 >> 16;
                    r6 = r6 & 65535;
                    r8 = r8 << 16;
                    r6 = r8 | r6;
                    r3 = r3 + 4;
                    r8 = ((r7 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    r4 = r4 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5de84;
                        continue;
                    }
                    r7 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    r9 = r3 + r0;
                    r11 = r4 + r0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5df48;
                        continue;
                    }
                case 0x5def0:
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    r6 = r8 & 65535;
                    r6 = r6 + r5;
                    r7 = r6 >> 16;
                    r8 = r8 >>> 16;
                    r7 = r7 + r8;
                    r5 = r7 >> 16;
                    r6 = r6 & 65535;
                    r7 = r7 << 16;
                    r6 = r7 | r6;
                    r3 = r3 + 4;
                    r7 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5def0;
                        continue;
                    }
                    r3 = ~(r0 | r11);
                    r3 = r3 + r12;
                    r3 = r3 >>> 2;
                    r3 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r9 + r3;
                case 0x5df48:
                    r3 = r3 + -4;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5df68;
                        continue;
                    }
                case 0x5df54:
                    r3 = r3 + -4;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r10 = r10 + -1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5df54;
                        continue;
                    }
                case 0x5df68:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r10;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5df8c:
                    r2 = r16 + r0;
                    r19 = r0 + 1;
                    r16 = r17 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5de48;
                    continue;
                case 0x5dfa4:
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5dfb4;
                    pc=0x5c600;
                    run_5c600(); return;
                case 0x5dfb4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5e000:
                    pc=0x5e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5e000() throws ExecutionException { /* 0x5e000 - 0x5e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5e000:
                    r2 = f13;
                    r4 = 32752 << 16;
                    r2 = r2 & r4;
                    r3 = 64704 << 16;
                    r4 = r2 + r3;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e034;
                        continue;
                    }
                    r3 = r0 + r0;
                    f0 = r3;
                    r2 = r4 + r0;
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5e034:
                    r4 = r0 - r4;
                    r4 = r4 >> 20;
                    r2 = r4 < 20 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e090;
                        continue;
                    }
                    r5 = r4 < 51 ? 1 : 0;
                    r2 = r0 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e080;
                        continue;
                    }
                    r5 = r0 + 51;
                    r4 = r5 - r4;
                    r5 = r0 + 1;
                    r4 = r5 << (r4&0x1f);
                    r3 = r4 + r0;
                case 0x5e06c:
                    f0 = r3;
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5e080:
                    r4 = r0 + 1;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5e06c;
                    continue;
                case 0x5e090:
                    r3 = r0 + r0;
                    r5 = 8 << 16;
                    f0 = r3;
                    r2 = r5 >> (r4&0x1f);
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5e200:
                    pc=0x5e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5e200() throws ExecutionException { /* 0x5e200 - 0x5e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5e200:
                    r29 = r29 + -40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r16 = r16 << 2;
                    r18 = r4 + 20;
                    r16 = r18 + r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r4 = r17 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r20 = r5 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x5e240;
                    pc=0x5ce00;
                    run_5ce00(); return;
                case 0x5e240:
                    r3 = r0 + 32;
                    r3 = r3 - r2;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r3;
                    r3 = r2 < 11 ? 1 : 0;
                    r19 = r16 + -4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e2c0;
                        continue;
                    }
                    r3 = r0 + 11;
                    r3 = r3 - r2;
                    r5 = r17 >>> (r3&0x1f);
                    r4 = 16368 << 16;
                    r18 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    r6 = r5 | r4;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e344;
                        continue;
                    }
                    r4 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r3 = r4 >>> (r3&0x1f);
                case 0x5e288:
                    r2 = r2 + 21;
                    r17 = r17 << (r2&0x1f);
                    r7 = r3 | r17;
                case 0x5e294:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f0 = r7;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    f1 = r6;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5e2c0:
                    r3 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e31c;
                        continue;
                    }
                    r3 = r2 + -11;
                    r4 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e330;
                        continue;
                    }
                case 0x5e2dc:
                    r5 = r0 + 43;
                    r2 = r5 - r2;
                    r17 = r17 << (r3&0x1f);
                    r5 = 16368 << 16;
                    r17 = r17 | r5;
                    r18 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    r5 = r4 >>> (r2&0x1f);
                    r6 = r17 | r5;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e350;
                        continue;
                    }
                    r5 = readPages[(r19+-4)>>>12][((r19+-4)>>>2)&0x3ff];
                    r3 = r4 << (r3&0x1f);
                    r2 = r5 >>> (r2&0x1f);
                    r7 = r2 | r3;
                    /* Next insn is delay slot */ 
                    pc=0x5e294;
                    continue;
                case 0x5e31c:
                    r3 = r2 + -11;
                    r19 = r16 + -8;
                    r4 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e2dc;
                        continue;
                    }
                case 0x5e330:
                    r2 = 16368 << 16;
                    r6 = r17 | r2;
                    r7 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5e294;
                    continue;
                case 0x5e344:
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5e288;
                    continue;
                case 0x5e350:
                    r2 = r0 + r0;
                    r3 = r4 << (r3&0x1f);
                    r7 = r2 | r3;
                    /* Next insn is delay slot */ 
                    pc=0x5e294;
                    continue;
                case 0x5e400:
                    pc=0x5e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5e400() throws ExecutionException { /* 0x5e400 - 0x5e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5e400:
                    r29 = r29 + -48;
                    r5 = r0 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r16 = r6 + r0;
                    r17 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5e42c;
                    pc=0x5c600;
                    run_5c600(); return;
                case 0x5e42c:
                    r18 = r2 + r0;
                    r19 = r16 << 1;
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r19 = r19 >>> 21;
                    r2 = r2 & r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e454;
                        continue;
                    }
                    r3 = 16 << 16;
                    r2 = r2 | r3;
                case 0x5e454:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e4f4;
                        continue;
                    }
                    r4 = r29 + 20;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x5e470;
                    pc=0x5d000;
                    run_5d000(); return;
                case 0x5e470:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e564;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                case 0x5e484:
                    writePages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff] = r16;
                    r3 = r0 + 2;
                    r16 = (r16&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r16 = r3 - r16;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r16;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e520;
                        continue;
                    }
                case 0x5e4a0:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r2 + -1074;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r16 << 2;
                    r2 = r18 + r2;
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r16 = r16 << 5;
                    /* Next insn is delay slot */ 
                    r31=0x5e4c4;
                    pc=0x5ce00;
                    run_5ce00(); return;
                case 0x5e4c4:
                    r3 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 - r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5e4f4:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x5e500;
                    pc=0x5d000;
                    run_5d000(); return;
                case 0x5e500:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r2 + 32;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r3;
                    r16 = r0 + 1;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e4a0;
                        continue;
                    }
                case 0x5e520:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + -1075;
                    r19 = r19 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r19;
                    r3 = r0 + 53;
                    r2 = r3 - r2;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5e564:
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r0 - r2;
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r16 << (r3&0x1f);
                    r3 = r3 | r4;
                    r16 = r16 >>> (r2&0x1f);
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x5e484;
                    continue;
                case 0x5e600:
                    pc=0x5e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5e600() throws ExecutionException { /* 0x5e600 - 0x5e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5e600:
                    r29 = r29 + -56;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r18 = r5 + r0;
                    r5 = r29 + 20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f20;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f21;
                    /* Next insn is delay slot */ 
                    r31=0x5e634;
                    pc=0x5e200;
                    run_5e200(); return;
                case 0x5e634:
                    r4 = r18 + r0;
                    r5 = r29 + 16;
                    f20 = f0;
                    f21 = f1;
                    r17 = f0;
                    r16 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x5e650;
                    pc=0x5e200;
                    run_5e200(); return;
                case 0x5e650:
                    r5 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r4 = r5 - r4;
                    r5 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r3 = f0;
                    r5 = r6 - r5;
                    r5 = r5 << 5;
                    r4 = r4 + r5;
                    r2 = f1;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e6c0;
                        continue;
                    }
                    r4 = r4 << 20;
                    f20 = r17;
                    r16 = r4 + r16;
                    f21 = r16;
                case 0x5e694:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    f20 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    f21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5e6c0:
                    r4 = r4 << 20;
                    f0 = r3;
                    r2 = r2 - r4;
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=0x5e694;
                    continue;
                case 0x5e800:
                    pc=0x5e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5e800() throws ExecutionException { /* 0x5e800 - 0x5ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5e800:
                    r2 = r4 < 24 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e834;
                        continue;
                    }
                    f0 = readPages[(r28+-32524)>>>12][((r28+-32524)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32516)>>>12][((r28+-32516)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32528)>>>12][((r28+-32528)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32520)>>>12][((r28+-32520)>>>2)&0x3ff];
                case 0x5e81c:
                    r4 = r4 + -1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e81c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5e834:
                    r2 = 7 << 16;
                    r2 = r2 + 27112;
                    r4 = r4 << 3;
                    r4 = r4 + r2;
                    f0 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5ea00:
                    pc=0x5ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ea00() throws ExecutionException { /* 0x5ea00 - 0x5ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ea00:
                    r7 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r5 = r5 + -1;
                    r2 = r6 + 20;
                    r8 = r5 >> 5;
                    r7 = r7 << 2;
                    r8 = r8 + 1;
                    r7 = r2 + r7;
                    r8 = r8 << 2;
                    r3 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r8 = r4 + r8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ea7c;
                        continue;
                    }
                    r3 = r4 + r0;
                case 0x5ea34:
                    r2 = r2 + 4;
                    r5 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r5;
                    r5 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ea34;
                        continue;
                    }
                    r2 = r7 - r6;
                    r2 = r2 + -21;
                    r2 = r2 >>> 2;
                    r2 = r2 + 1;
                    r2 = r2 << 2;
                    r4 = r4 + r2;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ea88;
                        continue;
                    }
                case 0x5ea74:
                    r4 = r4 + 4;
                    writePages[(r4+-4)>>>12][((r4+-4)>>>2)&0x3ff] = r0;
                case 0x5ea7c:
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ea74;
                        continue;
                    }
                case 0x5ea88:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5ec00:
                    pc=0x5ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ec00() throws ExecutionException { /* 0x5ec00 - 0x5ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ec00:
                    r3 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r5 >> 5;
                    r6 = r4 + 20;
                    r4 = r3 < r2 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ec74;
                        continue;
                    }
                    r3 = r3 << 2;
                    r3 = r6 + r3;
                case 0x5ec20:
                    r2 = ((r6 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ec68;
                        continue;
                    }
                    r2 = r3 + -4;
                    r3 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ec5c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5ecac;
                    continue;
                case 0x5ec48:
                    r2 = r2 + -4;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ecac;
                        continue;
                    }
                case 0x5ec5c:
                    r3 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ec48;
                        continue;
                    }
                case 0x5ec68:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5ec74:
                    r3 = r2 < r3 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ecb8;
                        continue;
                    }
                    r2 = r2 << 2;
                    r5 = r5 & 31;
                    r3 = r6 + r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ec20;
                        continue;
                    }
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r2 >>> (r5&0x1f);
                    r5 = r4 << (r5&0x1f);
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5ec20;
                        continue;
                    }
                case 0x5ecac:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5ecb8:
                    r2 = r2 << 2;
                    r3 = r6 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x5ec20;
                    continue;
                case 0x5ee00:
                    pc=0x5ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ee00() throws ExecutionException { /* 0x5ee00 - 0x5f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ee00:
                    r4 = f13;
                    r3 = 32767 << 16;
                    r3 = r3 | 65535;
                    r3 = r3 & r4;
                    r5 = f12;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ee40;
                        continue;
                    }
                    r2 = 65520 << 16;
                    r2 = r3 + r2;
                    r6 = 32736 << 16;
                    r2 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ee54;
                        continue;
                    }
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5ee40:
                    r2 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r3 = r0 + 3;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5ee54:
                    r2 = 16 << 16;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ee70;
                        continue;
                    }
                    r2 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5ee70:
                    r2 = 32752 << 16;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5ee88;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5ee88:
                    r2 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5f000:
                    pc=0x5f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5f000() throws ExecutionException { /* 0x5f000 - 0x5f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5f000:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r2 = r0 + 94;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5f0e8;
                        continue;
                    }
                    r2 = r5 + 1;
                    r7 = r0 + r0;
                    r9 = r0 + r0;
                case 0x5f01c:
                    r3 = r0 + r0;
                    r6 = r0 + 256;
                case 0x5f024:
                    r5 = r4 + r3;
                    r3 = r3 + 1;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x5f024;
                        continue;
                    }
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f090;
                        continue;
                    }
                    r5 = r0 + 1;
                    r5 = r5 - r9;
                    r10 = r0 + 45;
                    r9 = r0 + 93;
                case 0x5f050:
                    r3 = r4 + r8;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x5f058:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r7 = r2 + 1;
                    if(r3 == r10) {
                        /* Next insn is delay slot */ 
                        pc=0x5f0a8;
                        continue;
                    }
                    if(r3 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x5f09c;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f088;
                        continue;
                    }
                    r8 = r3 + r0;
                    r2 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5f050;
                    continue;
                case 0x5f088:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5f090:
                    r2 = r2 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5f09c:
                    r2 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5f0a8:
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r6 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x5f100;
                        continue;
                    }
                    r3 = r6 < r8 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f100;
                        continue;
                    }
                    r2 = r2 + 2;
                case 0x5f0c8:
                    r8 = r8 + 1;
                    r3 = r4 + r8;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r8 < r6 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f0c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5f058;
                    continue;
                case 0x5f0e8:
                    r2 = r5 + 2;
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r7 = r0 + 1;
                    r9 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5f01c;
                    continue;
                case 0x5f100:
                    r8 = r0 + 45;
                    r2 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5f050;
                    continue;
                case 0x5f200:
                    pc=0x5f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5f200() throws ExecutionException { /* 0x5f200 - 0x5f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5f200:
                    f0 = readPages[(r28+-32512)>>>12][((r28+-32512)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5f400:
                    pc=0x5f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5f400() throws ExecutionException { /* 0x5f400 - 0x5f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5f400:
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f434;
                        continue;
                    }
                case 0x5f41c:
                    r2 = r0 + r0;
                case 0x5f420:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5f434:
                    r5 = r0 + 128;
                    /* Next insn is delay slot */ 
                    r31=0x5f440;
                    pc=0x39600;
                    run_39600(); return;
                case 0x5f440:
                    writePages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f480;
                        continue;
                    }
                    r3 = r0 + r0;
                    r4 = r0 + 128;
                    /* Next insn is delay slot */ 
                    pc=0x5f464;
                    continue;
                case 0x5f45c:
                    r2 = readPages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff];
                case 0x5f464:
                    r2 = r2 + r3;
                    r3 = r3 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5f45c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5f41c;
                    continue;
                case 0x5f480:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5f420;
                    continue;
                case 0x5f600:
                    pc=0x5f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5f600() throws ExecutionException { /* 0x5f600 - 0x5f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5f600:
                    r29 = r29 + -32;
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f650;
                        continue;
                    }
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f670;
                        continue;
                    }
                case 0x5f62c:
                    r5 = r5 << 2;
                    r5 = r2 + r5;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r6;
                case 0x5f63c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5f650:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5f670:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x5f680;
                    pc=0x5f400;
                    run_5f400(); return;
                case 0x5f680:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f69c;
                        continue;
                    }
                    r2 = readPages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5f62c;
                    continue;
                case 0x5f69c:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5f63c;
                    continue;
                case 0x5f800:
                    pc=0x5f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5f800() throws ExecutionException { /* 0x5f800 - 0x5fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5f800:
                    r29 = r29 + -32;
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f8f0;
                        continue;
                    }
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f8c0;
                        continue;
                    }
                    r3 = r5 << 2;
                    r3 = r2 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f8c0;
                        continue;
                    }
                    r4 = r0 + 1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5f8b4;
                        continue;
                    }
                    r4 = r0 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5f890;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x5f874;
                    return;
                case 0x5f874:
                    r2 = r0 + r0;
                case 0x5f878:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5f890:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5f8b4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5f878;
                    continue;
                case 0x5f8c0:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5f8cc;
                    pc=0x48620;
                    run_48600(); return;
                case 0x5f8cc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = r2 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x485e0;
                    run_48400(); return;
                case 0x5f8f0:
                    r2 = r0 + 22;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5f878;
                    continue;
                case 0x5fa00:
                    pc=0x5fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5fa00() throws ExecutionException { /* 0x5fa00 - 0x5fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5fa00:
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5fae0;
                        continue;
                    }
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5fabc;
                        continue;
                    }
                case 0x5fa28:
                    r3 = r5 << 2;
                    r3 = r2 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5fab0;
                        continue;
                    }
                    r4 = r0 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5fa98;
                        continue;
                    }
                    r4 = r0 + 1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5fa80;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x5fa68;
                    return;
                case 0x5fa68:
                    r2 = r0 + r0;
                case 0x5fa6c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5fa80:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5fa98:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5fab0:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5fa6c;
                    continue;
                case 0x5fabc:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x5fac8;
                    pc=0x5f400;
                    run_5f400(); return;
                case 0x5fac8:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5faec;
                        continue;
                    }
                    r2 = readPages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5fa28;
                    continue;
                case 0x5fae0:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5faec:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5fa6c;
                    continue;
                case 0x5fc00:
                    pc=0x5fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5fc00() throws ExecutionException { /* 0x5fc00 - 0x5fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5fc00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5f800;
                    run_5f800(); return;
                case 0x5fe00:
                    pc=0x5fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5fe00() throws ExecutionException { /* 0x5fe00 - 0x60000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5fe00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5f600;
                    run_5f600(); return;
                case 0x60000:
                    pc=0x60000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_60000() throws ExecutionException { /* 0x60000 - 0x60200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x60000:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5f400;
                    run_5f400(); return;
                case 0x60200:
                    pc=0x60200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_60200() throws ExecutionException { /* 0x60200 - 0x60400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x60200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x60400:
                    pc=0x60400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_60400() throws ExecutionException { /* 0x60400 - 0x60600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x60400:
                    r29 = r29 + -144;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r17;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r16;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r6 + r0;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x604f4;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x604a4;
                        continue;
                    }
                    r2 = r0 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 160;
                    r6 = r7 + r0;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    r7 = r2 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x6046c;
                    pc=0x63a00;
                    run_63a00(); return;
                case 0x6046c:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x604e4;
                        continue;
                    }
                case 0x60478:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6048c;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x6048c:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r17 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r16 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x604a4:
                    r2 = r6 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 160;
                    r6 = r7 + r0;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    r7 = r2 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x604d8;
                    pc=0x63a00;
                    run_63a00(); return;
                case 0x604d8:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60478;
                        continue;
                    }
                case 0x604e4:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x60478;
                    continue;
                case 0x604f4:
                    r2 = r0 + 139;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x6048c;
                    continue;
                case 0x60600:
                    pc=0x60600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_60600() throws ExecutionException { /* 0x60600 - 0x60800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x60600:
                    r29 = r29 + -144;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r17;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r16;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r7;
                    r17 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x606e8;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x606a0;
                        continue;
                    }
                    r2 = r0 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x60668;
                    pc=0x63a00;
                    run_63a00(); return;
                case 0x60668:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x606d8;
                        continue;
                    }
                case 0x60674:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60688;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x60688:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r17 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r16 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x606a0:
                    r2 = r5 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x606cc;
                    pc=0x63a00;
                    run_63a00(); return;
                case 0x606cc:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60674;
                        continue;
                    }
                case 0x606d8:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x60674;
                    continue;
                case 0x606e8:
                    r2 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x60688;
                    continue;
                case 0x60800:
                    pc=0x60800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_60800() throws ExecutionException { /* 0x60800 - 0x60a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x60800:
                    r29 = r29 + -144;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r17;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r16;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r6 + r0;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x608f4;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x608a4;
                        continue;
                    }
                    r2 = r0 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 160;
                    r6 = r7 + r0;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    r7 = r2 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x6086c;
                    pc=0x41200;
                    run_41200(); return;
                case 0x6086c:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x608e4;
                        continue;
                    }
                case 0x60878:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6088c;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x6088c:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r17 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r16 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x608a4:
                    r2 = r6 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 160;
                    r6 = r7 + r0;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    r7 = r2 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x608d8;
                    pc=0x41200;
                    run_41200(); return;
                case 0x608d8:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60878;
                        continue;
                    }
                case 0x608e4:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x60878;
                    continue;
                case 0x608f4:
                    r2 = r0 + 139;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x6088c;
                    continue;
                case 0x60a00:
                    pc=0x60a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_60a00() throws ExecutionException { /* 0x60a00 - 0x60c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x60a00:
                    r29 = r29 + -144;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r17;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r16;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r7;
                    r17 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x60ae8;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60aa0;
                        continue;
                    }
                    r2 = r0 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x60a68;
                    pc=0x41200;
                    run_41200(); return;
                case 0x60a68:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60ad8;
                        continue;
                    }
                case 0x60a74:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60a88;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x60a88:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r17 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r16 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x60aa0:
                    r2 = r5 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x60acc;
                    pc=0x41200;
                    run_41200(); return;
                case 0x60acc:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60a74;
                        continue;
                    }
                case 0x60ad8:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x60a74;
                    continue;
                case 0x60ae8:
                    r2 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x60a88;
                    continue;
                case 0x60c00:
                    pc=0x60c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_60c00() throws ExecutionException { /* 0x60c00 - 0x60e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x60c00:
                    r29 = r29 + -24;
                    r2 = r4 & 3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60c6c;
                        continue;
                    }
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r9 = 65278 << 16;
                    r9 = r9 | 65279;
                    r3 = r2 + r9;
                    r8 = 32896 << 16;
                    r2 = ~(r0 | r2);
                    r2 = r3 & r2;
                    r8 = r8 | 32896;
                    r2 = r2 & r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60c6c;
                        continue;
                    }
                case 0x60c48:
                    r4 = r4 + 4;
                    r6 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r7 = r6 + r9;
                    r6 = ~(r0 | r6);
                    r6 = r7 & r6;
                    r6 = r6 & r8;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60c48;
                        continue;
                    }
                case 0x60c6c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60c90;
                        continue;
                    }
                case 0x60c7c:
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60c7c;
                        continue;
                    }
                case 0x60c90:
                    /* Next insn is delay slot */ 
                    r31=0x60c98;
                    pc=0x3e600;
                    run_3e600(); return;
                case 0x60c98:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x60e00:
                    pc=0x60e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_60e00() throws ExecutionException { /* 0x60e00 - 0x61000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x60e00:
                    r3 = r5 & 255;
                    r2 = r4 & 3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60f04;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60e40;
                        continue;
                    }
                case 0x60e18:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60ef8;
                        continue;
                    }
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x60fa0;
                        continue;
                    }
                    r4 = r4 + 1;
                    r2 = r4 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60e18;
                        continue;
                    }
                case 0x60e40:
                    r5 = r5 & 255;
                    r8 = r5 << 8;
                    r5 = r8 | r5;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r8 = r5 << 16;
                    r8 = r8 | r5;
                    r6 = 65278 << 16;
                    r5 = r2 ^ r8;
                    r6 = r6 | 65279;
                    r7 = ~(r0 | r5);
                    r5 = r5 + r6;
                    r5 = r7 & r5;
                    r7 = ~(r0 | r2);
                    r2 = r2 + r6;
                    r2 = r7 & r2;
                    r9 = 32896 << 16;
                    r2 = r5 | r2;
                    r9 = r9 | 32896;
                    r2 = r2 & r9;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60ecc;
                        continue;
                    }
                case 0x60e94:
                    r4 = r4 + 4;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r8 ^ r2;
                    r7 = ~(r0 | r5);
                    r5 = r5 + r6;
                    r5 = r7 & r5;
                    r7 = ~(r0 | r2);
                    r2 = r2 + r6;
                    r2 = r7 & r2;
                    r2 = r5 | r2;
                    r2 = r2 & r9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60e94;
                        continue;
                    }
                case 0x60ecc:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60ef8;
                        continue;
                    }
                case 0x60edc:
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x60fa0;
                        continue;
                    }
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60edc;
                        continue;
                    }
                case 0x60ef8:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x60f04:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60f2c;
                        continue;
                    }
                case 0x60f0c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60fa0;
                        continue;
                    }
                    r4 = r4 + 1;
                    r2 = r4 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60f0c;
                        continue;
                    }
                case 0x60f2c:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r6 = 65278 << 16;
                    r6 = r6 | 65279;
                    r3 = ~(r0 | r2);
                    r5 = 32896 << 16;
                    r2 = r2 + r6;
                    r2 = r3 & r2;
                    r5 = r5 | 32896;
                    r2 = r2 & r5;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60f7c;
                        continue;
                    }
                case 0x60f58:
                    r4 = r4 + 4;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + r6;
                    r2 = ~(r0 | r2);
                    r2 = r3 & r2;
                    r2 = r2 & r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60f58;
                        continue;
                    }
                case 0x60f7c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60fa0;
                        continue;
                    }
                case 0x60f8c:
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60f8c;
                        continue;
                    }
                case 0x60fa0:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x61000:
                    pc=0x61000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_61000() throws ExecutionException { /* 0x61000 - 0x61200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x61000:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61098;
                        continue;
                    }
                    r2 = r4 | r5;
                    r2 = r2 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x610a4;
                        continue;
                    }
                case 0x61018:
                    r6 = r6 + -1;
                case 0x6101c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x61158;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61098;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61098;
                        continue;
                    }
                    r2 = r4 + 1;
                    r5 = r5 + 1;
                    r4 = r4 + r6;
                    /* Next insn is delay slot */ 
                    pc=0x6106c;
                    continue;
                case 0x61054:
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x61098;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61098;
                        continue;
                    }
                    r2 = r2 + 1;
                    r5 = r5 + 1;
                case 0x6106c:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x61054;
                        continue;
                    }
                case 0x61080:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x61098:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x610a4:
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61018;
                        continue;
                    }
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x61018;
                        continue;
                    }
                    r2 = r6 + -4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61098;
                        continue;
                    }
                    r8 = 65278 << 16;
                    r8 = r8 | 65279;
                    r6 = r3 + r8;
                    r7 = 32896 << 16;
                    r3 = ~(r0 | r3);
                    r3 = r6 & r3;
                    r7 = r7 | 32896;
                    r3 = r3 & r7;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61138;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x61098;
                    continue;
                case 0x61100:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x61164;
                        continue;
                    }
                    r2 = r2 + -4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61098;
                        continue;
                    }
                    r6 = r3 + r8;
                    r3 = ~(r0 | r3);
                    r3 = r6 & r3;
                    r3 = r3 & r7;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61098;
                        continue;
                    }
                case 0x61138:
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 4;
                    r5 = r5 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61100;
                        continue;
                    }
                    r6 = r2 + -1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6101c;
                        continue;
                    }
                case 0x61158:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x61080;
                    continue;
                case 0x61164:
                    r6 = r2 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x6101c;
                    continue;
                case 0x61200:
                    pc=0x61200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_61200() throws ExecutionException { /* 0x61200 - 0x61400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x61200:
                    r2 = r4 + r0;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x61234;
                    continue;
                case 0x61210:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x613cc;
                        continue;
                    }
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r6 + -1;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x613d4;
                        continue;
                    }
                case 0x61234:
                    r7 = r5 & 3;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61210;
                        continue;
                    }
                    r4 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r12 = r6 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x613f8;
                        continue;
                    }
                    r6 = r6 & 3;
                    r12 = r12 - r6;
                    /* Next insn is delay slot */ 
                    pc=0x61294;
                    continue;
                case 0x61260:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r9&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x612c0;
                        continue;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x612c8;
                        continue;
                    }
                    addr=r3+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r11&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x612d0;
                        continue;
                    }
                    r3 = r3 + 4;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x613f8;
                        continue;
                    }
                    r12 = r7 + r0;
                case 0x61294:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    addr=r5+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r11 = tmp;
                    r7 = r12 + -4;
                    r5 = r5 + 4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61260;
                        continue;
                    }
                    r7 = r12 + -3;
                    r3 = r3 + -1;
                case 0x612c0:
                    r7 = r7 + 1;
                    r3 = r3 + -1;
                case 0x612c8:
                    r7 = r7 + 1;
                    r3 = r3 + -1;
                case 0x612d0:
                    r6 = r7 + r6;
                    r3 = r3 + 4;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x613c4;
                        continue;
                    }
                    r4 = r3 & 3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61300;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x6131c;
                    continue;
                case 0x612f4:
                    r5 = r3 & 3;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6131c;
                        continue;
                    }
                case 0x61300:
                    r3 = r3 + 1;
                    r6 = r6 + -1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x612f4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6131c:
                    r4 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61468;
                        run_61400(); return;
                    }
                    r5 = r3 + r0;
                    r7 = r6 + r0;
                case 0x61330:
                    r7 = r7 + -16;
                    r5 = r5 + 16;
                    r8 = (r7&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    writePages[(r5+-16)>>>12][((r5+-16)>>>2)&0x3ff] = r0;
                    writePages[(r5+-12)>>>12][((r5+-12)>>>2)&0x3ff] = r0;
                    writePages[(r5+-8)>>>12][((r5+-8)>>>2)&0x3ff] = r0;
                    writePages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff] = r0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61330;
                        continue;
                    }
                    r5 = r6 + -16;
                    r5 = r5 >>> 4;
                    r5 = r5 + 1;
                    r5 = r5 << 4;
                    r4 = r6 & 15;
                    r3 = r3 + r5;
                case 0x6136c:
                    r5 = (r4&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61388;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r0;
                    r4 = r4 + -8;
                    r3 = r3 + 8;
                case 0x61388:
                    r5 = (r4&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x613a0;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r4 = r4 + -4;
                    r3 = r3 + 4;
                case 0x613a0:
                    r5 = (r4&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x613b8;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r4 + -2;
                    r3 = r3 + 2;
                case 0x613b8:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x613c4;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x613c4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x613cc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x613d4:
                    r6 = r3 + r6;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x613c4;
                        continue;
                    }
                case 0x613e0:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x613e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x613f8:
                    r6 = r3 + r6;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x613c4;
                        continue;
                    }
                case 0x61400:
                    pc=0x61400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_61400() throws ExecutionException { /* 0x61400 - 0x61600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x61400:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r8 = r5 + 1;
                    r7 = r3 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r8 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61440;
                        continue;
                    }
                case 0x61420:
                    if(r7 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x61460;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r7 = r7 + 1;
                    addr=r7+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61420;
                        continue;
                    }
                case 0x61440:
                    if(r6 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x613c4;
                        run_61200(); return;
                    }
                case 0x61448:
                    r7 = r7 + 1;
                    addr=r7+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r7 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x61448;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x61460:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x61468:
                    r4 = r6 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x6136c;
                    run_61200(); return;
                case 0x61600:
                    pc=0x61600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_61600() throws ExecutionException { /* 0x61600 - 0x61800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x61600:
                    r29 = r29 + -216;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r22;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r18;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r16;
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r31;
                    writePages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff] = r30;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r23;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r21;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r20;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r19;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r17;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = f30;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = f31;
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = f28;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = f29;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = f26;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = f27;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = f24;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = f25;
                    writePages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff] = f22;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = f23;
                    writePages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff] = f20;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = f21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    r16 = r5 + r0;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r18 = r4 + r0;
                    r2 = r21 & 255;
                    r4 = 7 << 16;
                    r3 = (r2&0xffffffffL) < (46&0xffffffffL) ? 1 : 0;
                    r22 = r5 + r0;
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r6;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                    r4 = r4 + 27328;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61a00;
                        run_61a00(); return;
                    }
                case 0x61694:
                    r2 = r2 << 2;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x616ac:
                    r7 = r0 + r0;
                    r3 = r0 + r0;
                    r9 = r0 + 1;
                case 0x616b8:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61b60;
                        run_61a00(); return;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61b60;
                        run_61a00(); return;
                    }
                case 0x616c8:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                case 0x616d8:
                    r3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x616f4;
                        continue;
                    }
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x616f4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61a74;
                        run_61a00(); return;
                    }
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                case 0x6170c:
                    f30 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    f28 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    f26 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    f24 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    f22 = readPages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff];
                    f20 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r31 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    f0 = r3;
                    r30 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r23 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r22 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r21 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r19 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r18 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r17 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r16 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    f31 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    f29 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    f27 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    f25 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    f23 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    f21 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    f1 = r2;
                    r29 = r29 + 216;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x61778:
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                case 0x6177c:
                    r2 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x616c8;
                        continue;
                    }
                    r16 = r2 + r0;
                    r2 = r0 + 48;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x61a10;
                        run_61a00(); return;
                    }
                case 0x617a4:
                    r19 = r0 + r0;
                case 0x617a8:
                    r2 = r21 + -48;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62c94;
                        run_62c00(); return;
                    }
                    r2 = r16 + 1;
                    r30 = r0 + r0;
                    r23 = r0 + r0;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x61810;
                    run_61800(); return;
                case 0x617d4:
                    r3 = r23 << 1;
                    r23 = r23 << 3;
                    r23 = r3 + r23;
                    r21 = r23 + r21;
                    r23 = r21 + -48;
                case 0x617e8:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r17 = r2 + r0;
                    r3 = r21 + -48;
                    r3 = r3 & 255;
                    r3 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                case 0x61800:
                    pc=0x61800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_61800() throws ExecutionException { /* 0x61800 - 0x61a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x61800:
                    r20 = r20 + 1;
                    r2 = r2 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61864;
                        continue;
                    }
                case 0x61810:
                    r3 = r20 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x617e8;
                        run_61600(); return;
                    }
                    r3 = r20 < 9 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x617d4;
                        run_61600(); return;
                    }
                    r3 = r30 << 1;
                    r30 = r30 << 3;
                    r30 = r3 + r30;
                    r21 = r30 + r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r30 = r21 + -48;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r17 = r2 + r0;
                    r3 = r21 + -48;
                    r3 = r3 & 255;
                    r3 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r20 = r20 + 1;
                    r2 = r2 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61810;
                        continue;
                    }
                case 0x61864:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x61870;
                    pc=0x5b600;
                    run_5b600(); return;
                case 0x61870:
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x61884;
                    pc=0x5b600;
                    run_5b600(); return;
                case 0x61884:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x61890;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x61890:
                    r5 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x618a4;
                    pc=0x61000;
                    run_61000(); return;
                case 0x618a4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61ce4;
                        run_61c00(); return;
                    }
                    r7 = r20 + r0;
                    r5 = r0 + r0;
                    r3 = r0 + r0;
                    r9 = r0 + r0;
                case 0x618bc:
                    r4 = r0 + -33;
                    r4 = r21 & r4;
                    r2 = r0 + 69;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x61b58;
                        run_61a00(); return;
                    }
                case 0x618d0:
                    r4 = r0 + r0;
                case 0x618d4:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61abc;
                        run_61a00(); return;
                    }
                case 0x618dc:
                    r3 = r4 - r3;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r3;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x618f0;
                        continue;
                    }
                    r20 = r7 + r0;
                case 0x618f0:
                    r3 = r7 < 17 ? 1 : 0;
                    r2 = r7 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61904;
                        continue;
                    }
                    r2 = r0 + 16;
                case 0x61904:
                    f2 = r23;
                    { long l = Double.doubleToLongBits(((double)f2)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x628d8;
                        run_62800(); return;
                    }
                case 0x61918:
                    r3 = r2 < 10 ? 1 : 0;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6196c;
                        continue;
                    }
                    r4 = r2 + -9;
                    r3 = 7 << 16;
                    r4 = r4 << 3;
                    r3 = r3 + 27112;
                    r3 = r4 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = r30;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x62cac;
                        run_62c00(); return;
                    }
                case 0x61960:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f4;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f5;
                case 0x6196c:
                    r3 = r7 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61d54;
                        run_61c00(); return;
                    }
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61cc4;
                        run_61c00(); return;
                    }
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x62e5c;
                        run_62e00(); return;
                    }
                    r3 = r3 < 23 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62cc8;
                        run_62c00(); return;
                    }
                    r4 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r2 = 7 << 16;
                    r3 = r4 << 3;
                    r2 = r2 + 27112;
                    r2 = r3 + r2;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x616d8;
                    run_61600(); return;
                case 0x619e0:
                    r16 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r2 = r21 & 255;
                    r3 = (r2&0xffffffffL) < (46&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61694;
                        run_61600(); return;
                    }
                case 0x61a00:
                    pc=0x61a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_61a00() throws ExecutionException { /* 0x61a00 - 0x61c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x61a00:
                    r2 = r0 + 48;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x617a4;
                        run_61600(); return;
                    }
                case 0x61a10:
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 88;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x62868;
                        run_62800(); return;
                    }
                    r3 = r0 + 120;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x62868;
                        run_62800(); return;
                    }
                    r2 = r16 + 1;
                    r3 = r0 + 48;
                case 0x61a34:
                    r16 = r2 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r2 = r2 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    if(r21 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x61a34;
                        continue;
                    }
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61c8c;
                        run_61c00(); return;
                    }
                    r19 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x617a8;
                    run_61600(); return;
                case 0x61a64:
                    r3 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x6177c;
                    run_61600(); return;
                case 0x61a74:
                    r5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r4 = 32768 << 16;
                    r2 = r5 ^ r4;
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x6170c;
                    run_61600(); return;
                case 0x61a8c:
                    r3 = r0 + r0;
                case 0x61a90:
                    r2 = r21 + -49;
                    r2 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62808;
                        run_62800(); return;
                    }
                    r4 = r0 + -33;
                    r4 = r21 & r4;
                    r2 = r0 + 69;
                    r5 = r3 + r0;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x616ac;
                        run_61600(); return;
                    }
                    r9 = r0 + 1;
                case 0x61abc:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61c8c;
                        run_61c00(); return;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61c8c;
                        run_61c00(); return;
                    }
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x616c8;
                        run_61600(); return;
                    }
                    r2 = r0 + 78;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x61b04;
                        continue;
                    }
                    r2 = r21 < 79 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62f18;
                        run_62e00(); return;
                    }
                    r2 = r0 + 105;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x62f24;
                        run_62e00(); return;
                    }
                    r2 = r0 + 110;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x616c8;
                        run_61600(); return;
                    }
                case 0x61b04:
                    r3 = 7 << 16;
                    r4 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r3 = r3 + 27324;
                case 0x61b10:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6308c;
                        run_63000(); return;
                    }
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r6 = r2 + -65;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61b48;
                        continue;
                    }
                    r2 = r2 + 32;
                case 0x61b48:
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x61b10;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x616c8;
                    run_61600(); return;
                case 0x61b58:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x616b8;
                        run_61600(); return;
                    }
                case 0x61b60:
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r22 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r22+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r2 = r0 + 43;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x626a8;
                        run_62600(); return;
                    }
                    r2 = r0 + 45;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x6269c;
                        run_62600(); return;
                    }
                    r10 = r0 + 1;
                case 0x61b90:
                    r2 = r22 + 2;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r22+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                case 0x61ba0:
                    r2 = r21 + -48;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x625c8;
                        run_62400(); return;
                    }
                    r2 = r0 + 48;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x61bdc;
                        continue;
                    }
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    r2 = r2 + 1;
                case 0x61bc8:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r2 = r2 + 1;
                    if(r21 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x61bc8;
                        continue;
                    }
                case 0x61bdc:
                    r2 = r21 + -49;
                    r2 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x618d0;
                        run_61800(); return;
                    }
                    r11 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r21 + -48;
                    r8 = r11 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r8;
                    addr=r11+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                case 0x61c00:
                    pc=0x61c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_61c00() throws ExecutionException { /* 0x61c00 - 0x61e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x61c00:
                    r2 = r21 + -48;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61c54;
                        continue;
                    }
                    r2 = r11 + 2;
                case 0x61c1c:
                    r6 = r4 << 1;
                    r4 = r4 << 3;
                    r4 = r6 + r4;
                    r21 = r4 + r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r4 = r21 + -48;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r8 = r2 + r0;
                    r6 = r21 + -48;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r2 = r2 + 1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61c1c;
                        continue;
                    }
                case 0x61c54:
                    r2 = r8 - r11;
                    r2 = r2 < 9 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6285c;
                        run_62800(); return;
                    }
                    r2 = r4 < 20000 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6285c;
                        run_62800(); return;
                    }
                case 0x61c70:
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x618d4;
                        run_61800(); return;
                    }
                    r4 = r0 - r4;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x618dc;
                        run_61800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x61abc;
                    run_61a00(); return;
                case 0x61c8c:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x616d8;
                    run_61600(); return;
                case 0x61c9c:
                    r4 = 32752 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r4;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                case 0x61ca8:
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61cc4;
                        continue;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r2 = r2 | r3;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                case 0x61cc4:
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x616d8;
                    run_61600(); return;
                case 0x61ce4:
                    r4 = r18 + r0;
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x61cf4;
                    pc=0x5b600;
                    run_5b600(); return;
                case 0x61cf4:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x61d00;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x61d00:
                    r2 = r17 + r2;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x625e0;
                        run_62400(); return;
                    }
                    r3 = r0 + 48;
                    if(r21 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x61a8c;
                        run_61a00(); return;
                    }
                    r3 = r0 + r0;
                    r5 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x61d34;
                    continue;
                case 0x61d30:
                    r2 = r4 + r0;
                case 0x61d34:
                    r4 = r2 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r3 = r3 + 1;
                    if(r21 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x61d30;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x61a90;
                    run_61a00(); return;
                case 0x61d54:
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r2 = r7 - r2;
                    r2 = r3 + r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x62b10;
                        run_62a00(); return;
                    }
                    r3 = r2 & 15;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61da4;
                        continue;
                    }
                    r4 = 7 << 16;
                    r3 = r3 << 3;
                    r4 = r4 + 27112;
                    r3 = r3 + r4;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                case 0x61da4:
                    r3 = r0 + -16;
                    r2 = r2 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x626fc;
                        run_62600(); return;
                    }
                case 0x61db4:
                    f4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    f5 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f4;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f5;
                case 0x61dcc:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r23;
                    r5 = r16 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x61de4;
                    pc=0x5cc00;
                    run_5cc00(); return;
                case 0x61de4:
                    r3 = r2 + 12;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r23 = r2 + r0;
                    f24 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    r2 = r0 - r3;
                    r3 = r3 >> 31;
                case 0x61e00:
                    pc=0x61e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_61e00() throws ExecutionException { /* 0x61e00 - 0x62000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x61e00:
                    r16 = r3 & r2;
                    f20 = readPages[(r28+-32468)>>>12][((r28+-32468)>>>2)&0x3ff];
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    f22 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    f25 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r3 = r0 < r3 ? 1 : 0;
                    f21 = readPages[(r28+-32472)>>>12][((r28+-32472)>>>2)&0x3ff];
                    f23 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r3;
                    f26 = f24;
                    f27 = f25;
                case 0x61e28:
                    r5 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x61e38;
                    pc=0x5c600;
                    run_5c600(); return;
                case 0x61e38:
                    r6 = readPages[(r23+16)>>>12][((r23+16)>>>2)&0x3ff];
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r6 = r6 << 2;
                    r21 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x61e58;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x61e58:
                    r5 = r29 + 24;
                    r7 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r4 = r29 + 32;
                    r6 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x61e7c;
                    pc=0x5e400;
                    run_5e400(); return;
                case 0x61e7c:
                    r4 = r18 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x61e90;
                    pc=0x5d200;
                    run_5d200(); return;
                case 0x61e90:
                    r3 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r19 = r2 + r0;
                    r7 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61ea8;
                        continue;
                    }
                    r7 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                case 0x61ea8:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x62320;
                        run_62200(); return;
                    }
                    r20 = r16 + r2;
                    r3 = r7 + r0;
                case 0x61ec0:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 - r22;
                    r5 = r2 + r4;
                    r5 = r5 < -1021 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6221c;
                        run_62200(); return;
                    }
                    r2 = r2 + 1075;
                case 0x61edc:
                    r30 = r20 + r2;
                    r4 = r20 < r30 ? 1 : 0;
                    r2 = r3 + r2;
                    r17 = r2 + r22;
                    r2 = r30 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61efc;
                        continue;
                    }
                    r2 = r20 + r0;
                case 0x61efc:
                    r4 = r17 < r2 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61f0c;
                        continue;
                    }
                    r2 = r17 + r0;
                case 0x61f0c:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x61f20;
                        continue;
                    }
                    r30 = r30 - r2;
                    r17 = r17 - r2;
                    r20 = r20 - r2;
                case 0x61f20:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61f78;
                        continue;
                    }
                    r5 = r19 + r0;
                    r4 = r18 + r0;
                    r6 = r16 + r0;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x61f40;
                    pc=0x5d800;
                    run_5d800(); return;
                case 0x61f40:
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x61f58;
                    pc=0x5d400;
                    run_5d400(); return;
                case 0x61f58:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x61f6c;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x61f6c:
                    r2 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r7 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                case 0x61f78:
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x61fa0;
                        continue;
                    }
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x61f98;
                    pc=0x5da00;
                    run_5da00(); return;
                case 0x61f98:
                    r7 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                case 0x61fa0:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61fc0;
                        continue;
                    }
                    r5 = r21 + r0;
                    r4 = r18 + r0;
                    r6 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x61fbc;
                    pc=0x5d800;
                    run_5d800(); return;
                case 0x61fbc:
                    r21 = r2 + r0;
                case 0x61fc0:
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x61fe0;
                        continue;
                    }
                    r5 = r21 + r0;
                    r4 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x61fdc;
                    pc=0x5da00;
                    run_5da00(); return;
                case 0x61fdc:
                    r21 = r2 + r0;
                case 0x61fe0:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x62000;
                        run_62000(); return;
                    }
                    r5 = r19 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x61ffc;
                    pc=0x5da00;
                    run_5da00(); return;
                case 0x61ffc:
                    r19 = r2 + r0;
                case 0x62000:
                    pc=0x62000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_62000() throws ExecutionException { /* 0x62000 - 0x62200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x62000:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x62014;
                    pc=0x5de00;
                    run_5de00(); return;
                case 0x62014:
                    r30 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                    r5 = r19 + r0;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x62030;
                    pc=0x5dc00;
                    run_5dc00(); return;
                case 0x62030:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x628f4;
                        run_62800(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x629e8;
                        run_62800(); return;
                    }
                    r4 = r20 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x62050;
                    pc=0x5e600;
                    run_5e600(); return;
                case 0x62050:
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x6222c;
                        run_62200(); return;
                    }
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62330;
                        run_62200(); return;
                    }
                    r3 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f26;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f27;
                case 0x6207c:
                    r5 = 32752 << 16;
                    r17 = r6 & r5;
                    r7 = 32736 << 16;
                    if(r17 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x62278;
                        run_62200(); return;
                    }
                case 0x62090:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62178;
                        continue;
                    }
                    r5 = 1696 << 16;
                    r5 = r5 + 1;
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62178;
                        continue;
                    }
                    f0 = readPages[(r28+-32452)>>>12][((r28+-32452)>>>2)&0x3ff];
                    f2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff];
                    f3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<=(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x6216c;
                        continue;
                    }
                    f0 = readPages[(r28+-32444)>>>12][((r28+-32444)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32448)>>>12][((r28+-32448)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x62558;
                        run_62400(); return;
                    }
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    r2 = f0;
                case 0x62120:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62538;
                        run_62400(); return;
                    }
                    f4 = r2;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x62838;
                        run_62800(); return;
                    }
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f3;
                case 0x62144:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x625a8;
                        run_62400(); return;
                    }
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r2;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r4;
                case 0x62164:
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                case 0x6216c:
                    r5 = 1712 << 16;
                    r5 = r2 + r5;
                    r2 = r5 - r17;
                case 0x62178:
                    f12 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f28 = r3;
                    f13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f29 = r2;
                    /* Next insn is delay slot */ 
                    r31=0x62190;
                    pc=0x5e000;
                    run_5e000(); return;
                case 0x62190:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f29&0xffffffffL) << 32) | (f28&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                case 0x621bc:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x621d4;
                        continue;
                    }
                    r3 = 32752 << 16;
                    r3 = r2 & r3;
                    if(r17 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x623f4;
                        run_62200(); return;
                    }
                case 0x621d4:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x621e4;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x621e4:
                    r4 = r18 + r0;
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x621f4;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x621f4:
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x62204;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x62200:
                    pc=0x62200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_62200() throws ExecutionException { /* 0x62200 - 0x62400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x62200:
                case 0x62204:
                    r4 = r18 + r0;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x62214;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x62214:
                    /* Next insn is delay slot */ 
                    pc=0x61e28;
                    run_61e00(); return;
                case 0x6221c:
                    r2 = r0 + 54;
                    r2 = r2 - r4;
                    /* Next insn is delay slot */ 
                    pc=0x61edc;
                    run_61e00(); return;
                case 0x6222c:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f23&0xffffffffL) << 32) | (f22&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f3;
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x623b8;
                        continue;
                    }
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r2;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r4;
                case 0x62258:
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r5 = 32752 << 16;
                    r17 = r6 & r5;
                    r7 = 32736 << 16;
                    r3 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    if(r17 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x62090;
                        run_62000(); return;
                    }
                case 0x62278:
                    r7 = 64688 << 16;
                    r7 = r6 + r7;
                    f28 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r7;
                    f30 = r3;
                    f29 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f31 = r2;
                    f12 = f28;
                    f13 = f29;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r5;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = f2;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    r31=0x622b4;
                    pc=0x5e000;
                    run_5e000(); return;
                case 0x622b4:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f31&0xffffffffL) << 32) | (f30&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r5 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f29&0xffffffffL) << 32) | (f28&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f5;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f4;
                    r3 = r5 & r2;
                    r2 = 31904 << 16;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6250c;
                        run_62400(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r5 = r5 + -1;
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x62ab4;
                        run_62a00(); return;
                    }
                case 0x622f0:
                    r5 = r0 + -1;
                    r2 = 32751 << 16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    r2 = r2 | 65535;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x621d4;
                    run_62000(); return;
                case 0x62320:
                    r3 = r7 - r2;
                    r20 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x61ec0;
                    run_61e00(); return;
                case 0x62330:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x624e4;
                        run_62400(); return;
                    }
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r2 = r2 & r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x623d8;
                        continue;
                    }
                    f2 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x62c6c;
                        run_62c00(); return;
                    }
                    f4 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    f5 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f5;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f4;
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r4 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r2;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r4;
                case 0x623a8:
                    r3 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r2 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x6207c;
                    run_62000(); return;
                case 0x623b8:
                    f0 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f1 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = f0;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x62258;
                    continue;
                case 0x623d8:
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                case 0x623dc:
                    r3 = readPages[(r28+-32460)>>>12][((r28+-32460)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32464)>>>12][((r28+-32464)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f24;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f25;
                    /* Next insn is delay slot */ 
                    pc=0x6207c;
                    run_62000(); return;
                case 0x623f4:
                    f2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                case 0x62400:
                    pc=0x62400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_62400() throws ExecutionException { /* 0x62400 - 0x62600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x62400:
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    { long l = Double.doubleToLongBits(((double)f0)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6244c;
                        continue;
                    }
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x626b4;
                        run_62600(); return;
                    }
                case 0x6244c:
                    f0 = readPages[(r28+-32436)>>>12][((r28+-32436)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32440)>>>12][((r28+-32440)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x6248c;
                        continue;
                    }
                    f0 = readPages[(r28+-32428)>>>12][((r28+-32428)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x621d4;
                        run_62000(); return;
                    }
                case 0x6248c:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6249c;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x6249c:
                    r4 = r18 + r0;
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x624ac;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x624ac:
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x624bc;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x624bc:
                    r4 = r18 + r0;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x624cc;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x624cc:
                    r4 = r18 + r0;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x624dc;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x624dc:
                    /* Next insn is delay slot */ 
                    pc=0x616d8;
                    run_61600(); return;
                case 0x624e4:
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x623d8;
                        run_62200(); return;
                    }
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x629d0;
                        run_62800(); return;
                    }
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x623dc;
                    run_62200(); return;
                case 0x6250c:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 848 << 16;
                    r2 = r2 + r3;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x621bc;
                    run_62000(); return;
                case 0x62538:
                    f0 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x62144;
                    run_62000(); return;
                case 0x62558:
                    f2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r3 = 32768 << 16;
                    f3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f2 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f2 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f2 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f2 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    r2 = f2;
                    r2 = r2 | r3;
                    /* Next insn is delay slot */ 
                    pc=0x62120;
                    run_62000(); return;
                case 0x625a8:
                    f0 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f1 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = f0;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x62164;
                    run_62000(); return;
                case 0x625c8:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    r4 = r0 + r0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x618dc;
                        run_61800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x61abc;
                    run_61a00(); return;
                case 0x625e0:
                    r7 = r20 + r0;
                    r5 = r0 + r0;
                    r3 = r0 + r0;
                case 0x625ec:
                    r2 = r21 + -48;
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x626f0;
                        run_62600(); return;
                    }
                    r5 = r5 + 1;
                case 0x62600:
                    pc=0x62600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_62600() throws ExecutionException { /* 0x62600 - 0x62800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x62600:
                    r9 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62824;
                        run_62800(); return;
                    }
                    r2 = r0 + 1;
                    r4 = r5 + r0;
                    r6 = r7 < 17 ? 1 : 0;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x62660;
                        continue;
                    }
                    r2 = r7 + 1;
                    r8 = r5 + r7;
                    r6 = r7 < 17 ? 1 : 0;
                case 0x62630:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62650;
                        continue;
                    }
                    r4 = r2 < 10 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x628c4;
                        run_62800(); return;
                    }
                    r4 = r23 << 1;
                    r23 = r23 << 3;
                    r23 = r4 + r23;
                case 0x62650:
                    r2 = r2 + 1;
                    r4 = r5 + r0;
                    if(r2 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x62630;
                        continue;
                    }
                case 0x62660:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62f0c;
                        run_62e00(); return;
                    }
                case 0x62668:
                    r2 = r7 + r5;
                    r2 = r2 < 10 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63074;
                        run_63000(); return;
                    }
                    r2 = r23 << 1;
                    r23 = r23 << 3;
                    r23 = r2 + r23;
                    r23 = r23 + r21;
                case 0x62688:
                    r3 = r3 + r4;
                    r7 = r7 + r4;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x62824;
                    run_62800(); return;
                case 0x6269c:
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x61ba0;
                    run_61a00(); return;
                case 0x626a8:
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x61b90;
                    run_61a00(); return;
                case 0x626b4:
                    r3 = 15 << 16;
                    r3 = r3 | 65535;
                    r2 = r2 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6244c;
                        run_62400(); return;
                    }
                    f0 = readPages[(r28+-32420)>>>12][((r28+-32420)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32424)>>>12][((r28+-32424)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x621d4;
                        run_62000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x6248c;
                    run_62400(); return;
                case 0x626f0:
                    r9 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x618bc;
                    run_61800(); return;
                case 0x626fc:
                    r3 = r2 < 309 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62af4;
                        run_62a00(); return;
                    }
                    r2 = r2 >> 4;
                    r3 = r2 < 2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63108;
                        run_63000(); return;
                    }
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r6 = 7 << 16;
                    r6 = r6 + 27072;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r6 + r0;
                    r4 = r0 + r0;
                case 0x62730:
                    r5 = r2 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62750;
                        continue;
                    }
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x62750:
                    r2 = r2 >> 1;
                    r5 = r2 < 2 ? 1 : 0;
                    r4 = r4 + 1;
                    r3 = r3 + 8;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62730;
                        continue;
                    }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                case 0x62770:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r4 = r4 << 3;
                    r6 = r6 + r4;
                    r2 = 64688 << 16;
                    r2 = r2 + r3;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f0 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f1 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r2 = 32752 << 16;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r4 = 31904 << 16;
                    r4 = r4 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                    r5 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                    r3 = r2 & r5;
                    r4 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62af4;
                        run_62a00(); return;
                    }
                    r4 = 31888 << 16;
                    r4 = r4 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62f78;
                        run_62e00(); return;
                    }
                    r2 = r2 + -1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                case 0x62800:
                    pc=0x62800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_62800() throws ExecutionException { /* 0x62800 - 0x62a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x62800:
                    /* Next insn is delay slot */ 
                    pc=0x61dcc;
                    run_61c00(); return;
                case 0x62808:
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = r21 + -48;
                    r9 = r16 + r0;
                    r7 = r0 + r0;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62d70;
                        run_62c00(); return;
                    }
                    r5 = r0 + 1;
                case 0x62824:
                    r2 = r9 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x625ec;
                    run_62400(); return;
                case 0x62838:
                    f0 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x62144;
                    run_62000(); return;
                case 0x6285c:
                    r4 = r0 + 19999;
                    /* Next insn is delay slot */ 
                    pc=0x61c70;
                    run_61c00(); return;
                case 0x62868:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r2 = r29 + 36;
                    r19 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r18 + r0;
                    r5 = r29 + 40;
                    r6 = r19 + 31572;
                    r7 = r29 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x62894;
                    pc=0x6a800;
                    run_6a800(); return;
                case 0x62894:
                    r17 = r2 & 7;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61c8c;
                        run_61c00(); return;
                    }
                    r3 = r0 + 6;
                    if(r17 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x62d80;
                        run_62c00(); return;
                    }
                    r16 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x616d8;
                    run_61600(); return;
                case 0x628c4:
                    r4 = r30 << 1;
                    r30 = r30 << 3;
                    r30 = r4 + r30;
                    /* Next insn is delay slot */ 
                    pc=0x62650;
                    run_62600(); return;
                case 0x628d8:
                    f2 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x61918;
                    run_61800(); return;
                case 0x628f4:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62a4c;
                        run_62a00(); return;
                    }
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62a4c;
                        run_62a00(); return;
                    }
                    r16 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r2 = r2 & r16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62a4c;
                        run_62a00(); return;
                    }
                    r3 = 32752 << 16;
                    r2 = 1712 << 16;
                    r3 = r3 & r16;
                    r2 = r2 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62a4c;
                        run_62a00(); return;
                    }
                    r2 = readPages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62964;
                        continue;
                    }
                    r2 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62a4c;
                        run_62a00(); return;
                    }
                case 0x62964:
                    r5 = r20 + r0;
                    r4 = r18 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x62978;
                    pc=0x5da00;
                    run_5da00(); return;
                case 0x62978:
                    r4 = r2 + r0;
                    r5 = r19 + r0;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6298c;
                    pc=0x5dc00;
                    run_5dc00(); return;
                case 0x6298c:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x62a4c;
                        run_62a00(); return;
                    }
                    r2 = r16 + r0;
                case 0x62998:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x630b8;
                        run_63000(); return;
                    }
                    r3 = 32752 << 16;
                    r4 = 1712 << 16;
                    r3 = r2 & r3;
                    r4 = r4 + 1;
                    r4 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x630b8;
                        run_63000(); return;
                    }
                    r2 = 880 << 16;
                    r2 = r2 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62a54;
                        run_62a00(); return;
                    }
                case 0x629d0:
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x6248c;
                    run_62400(); return;
                case 0x629e8:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62d3c;
                        run_62c00(); return;
                    }
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r3 = r2 & r4;
                case 0x62a00:
                    pc=0x62a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_62a00() throws ExecutionException { /* 0x62a00 - 0x62c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x62a00:
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x62fa0;
                        run_62e00(); return;
                    }
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                case 0x62a10:
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62a4c;
                        continue;
                    }
                    f12 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x62a30;
                    pc=0x5e000;
                    run_5e000(); return;
                case 0x62a30:
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                case 0x62a4c:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6248c;
                        run_62400(); return;
                    }
                case 0x62a54:
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r0;
                    f0 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r4 = 14672 << 16;
                    f2 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r4;
                    f1 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6248c;
                        run_62400(); return;
                    }
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6248c;
                        run_62400(); return;
                    }
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x6248c;
                    run_62400(); return;
                case 0x62ab4:
                    r4 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x622f0;
                        run_62200(); return;
                    }
                    r2 = r0 + 34;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = 32752 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x6248c;
                    run_62400(); return;
                case 0x62af4:
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                case 0x62afc:
                    r2 = 32752 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x61cc4;
                    run_61c00(); return;
                case 0x62b10:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61db4;
                        run_61c00(); return;
                    }
                    r2 = r0 - r2;
                    r3 = r2 & 15;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62b58;
                        continue;
                    }
                    r4 = 7 << 16;
                    r3 = r3 << 3;
                    r4 = r4 + 27112;
                    r3 = r3 + r4;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                case 0x62b58:
                    r2 = r2 >> 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61db4;
                        run_61c00(); return;
                    }
                    r3 = r2 < 32 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62c54;
                        run_62c00(); return;
                    }
                    r3 = r2 & 16;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6311c;
                        run_63000(); return;
                    }
                    r22 = r0 + r0;
                case 0x62b80:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x62bd0;
                        continue;
                    }
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r3 = 7 << 16;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r3 + 27544;
                case 0x62b98:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62bb8;
                        continue;
                    }
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x62bb8:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62b98;
                        continue;
                    }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                case 0x62bd0:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62c18;
                        run_62c00(); return;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r4 = r0 + 107;
                    r2 = r3 << 1;
                    r2 = r2 >>> 21;
                    r2 = r4 - r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x62c18;
                        run_62c00(); return;
                    }
                    r4 = r2 < 32 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6316c;
                        run_63000(); return;
                    }
                case 0x62c00:
                    pc=0x62c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_62c00() throws ExecutionException { /* 0x62c00 - 0x62e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x62c00:
                    r4 = r2 < 53 ? 1 : 0;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6318c;
                        run_63000(); return;
                    }
                    r2 = 880 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                case 0x62c18:
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f0 = r0;
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x61dcc;
                        run_61c00(); return;
                    }
                case 0x62c54:
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x616d8;
                    run_61600(); return;
                case 0x62c6c:
                    f2 = readPages[(r28+-32500)>>>12][((r28+-32500)>>>2)&0x3ff];
                    f4 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32504)>>>12][((r28+-32504)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = f2;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = f3;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f4;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f5;
                    /* Next insn is delay slot */ 
                    pc=0x623a8;
                    run_62200(); return;
                case 0x62c94:
                    r17 = r16 + r0;
                    r30 = r0 + r0;
                    r23 = r0 + r0;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x61864;
                    run_61800(); return;
                case 0x62cac:
                    f4 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x61960;
                    run_61800(); return;
                case 0x62cc8:
                    r3 = r0 + 37;
                    r4 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r3 = r3 - r7;
                    r3 = r3 < r4 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61d54;
                        run_61c00(); return;
                    }
                    r2 = r0 + 15;
                    r7 = r2 - r7;
                    r2 = 7 << 16;
                    r2 = r2 + 27112;
                    r3 = r7 << 3;
                    r3 = r3 + r2;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r4 - r7;
                    r3 = r3 << 3;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = r3 + r2;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f4;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f5;
                    /* Next insn is delay slot */ 
                    pc=0x616d8;
                    run_61600(); return;
                case 0x62d3c:
                    r2 = 15 << 16;
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r2 | 65535;
                    r2 = r2 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62ea8;
                        run_62e00(); return;
                    }
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62ea8;
                        run_62e00(); return;
                    }
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x62998;
                    run_62800(); return;
                case 0x62d70:
                    r4 = r0 + 1;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x62668;
                    run_62600(); return;
                case 0x62d80:
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62db8;
                        continue;
                    }
                    r5 = readPages[(r19+31572)>>>12][((r19+31572)>>>2)&0x3ff];
                    r4 = r29 + 24;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x62da4;
                    pc=0x5ea00;
                    run_5ea00(); return;
                case 0x62da4:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x62db4;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x62db4:
                    r2 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                case 0x62db8:
                    r3 = (r17&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r4 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61ca8;
                        run_61c00(); return;
                    }
                    r3 = 7 << 16;
                    r17 = r17 << 2;
                    r3 = r3 + 27512;
                    r3 = r3 + r17;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x62de8:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r4;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x61ca8;
                    run_61c00(); return;
                case 0x62e00:
                    pc=0x62e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_62e00() throws ExecutionException { /* 0x62e00 - 0x63000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x62e00:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    r3 = 65519 << 16;
                    r4 = r4 + 1075;
                    r3 = r3 | 65535;
                    r4 = r4 << 20;
                    r3 = r5 & r3;
                    r3 = r4 | r3;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x61ca8;
                    run_61c00(); return;
                case 0x62e30:
                    r3 = 32767 << 16;
                    r3 = r3 | 65535;
                    r5 = r0 + -1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x61ca8;
                    run_61c00(); return;
                case 0x62e4c:
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x61ca8;
                    run_61c00(); return;
                case 0x62e5c:
                    r4 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r3 = r4 < -22 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61d54;
                        run_61c00(); return;
                    }
                    r3 = 7 << 16;
                    r2 = r4 << 3;
                    r3 = r3 + 27112;
                    r2 = r3 - r2;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x616d8;
                    run_61600(); return;
                case 0x62ea8:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62a4c;
                        run_62a00(); return;
                    }
                    f12 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x62ed0;
                    pc=0x5e000;
                    run_5e000(); return;
                case 0x62ed0:
                    f4 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f0 = r0;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f4;
                    f1 = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f5;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x629d0;
                        run_62800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x62a4c;
                    run_62a00(); return;
                case 0x62f0c:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x62824;
                    run_62800(); return;
                case 0x62f18:
                    r2 = r0 + 73;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x616c8;
                        run_61600(); return;
                    }
                case 0x62f24:
                    r4 = 7 << 16;
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r4 + 27312;
                case 0x62f30:
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63018;
                        run_63000(); return;
                    }
                    r2 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r6 = r3 + -65;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62f68;
                        continue;
                    }
                    r3 = r3 + 32;
                case 0x62f68:
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x62f30;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x616c8;
                    run_61600(); return;
                case 0x62f78:
                    r2 = 848 << 16;
                    r2 = r5 + r2;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x61dcc;
                    run_61c00(); return;
                case 0x62fa0:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x630fc;
                        run_63000(); return;
                    }
                    r3 = 32752 << 16;
                    r5 = 1696 << 16;
                    r3 = r4 & r3;
                    r5 = r5 + 1;
                    r5 = ((r3 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x630fc;
                        run_63000(); return;
                    }
                    r5 = r0 + 107;
                    r3 = r3 >>> 20;
                    r3 = r5 - r3;
                    r5 = r0 + -1;
                    r3 = r5 << (r3&0x1f);
                case 0x62fdc:
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x62a10;
                        run_62a00(); return;
                    }
                    r2 = 32752 << 16;
                    r4 = r4 & r2;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    r2 = 16 << 16;
                    r2 = r4 + r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                case 0x63000:
                    pc=0x63000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_63000() throws ExecutionException { /* 0x63000 - 0x63200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x63000:
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x62a4c;
                    run_62a00(); return;
                case 0x63018:
                    r4 = 7 << 16;
                    r7 = r2 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r4 = r4 + 27316;
                case 0x63028:
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r2 = r2 + 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63068;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r6 = r3 + -65;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6305c;
                        continue;
                    }
                    r3 = r3 + 32;
                case 0x6305c:
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x63028;
                        continue;
                    }
                    r2 = r7 + 1;
                case 0x63068:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x62afc;
                    run_62a00(); return;
                case 0x63074:
                    r2 = r30 << 1;
                    r30 = r30 << 3;
                    r30 = r2 + r30;
                    r30 = r30 + r21;
                    /* Next insn is delay slot */ 
                    pc=0x62688;
                    run_62600(); return;
                case 0x6308c:
                    r2 = r4 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 40;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x63128;
                        continue;
                    }
                case 0x630a4:
                    r4 = 32760 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r4;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x61cc4;
                    run_61c00(); return;
                case 0x630b8:
                    r3 = 32752 << 16;
                    r2 = r2 & r3;
                    r3 = 65520 << 16;
                    r3 = r2 + r3;
                    r5 = r0 + -1;
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    r2 = r3 | r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x62a4c;
                    run_62a00(); return;
                case 0x630fc:
                    r3 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x62fdc;
                    run_62e00(); return;
                case 0x63108:
                    r6 = 7 << 16;
                    r4 = r0 + r0;
                    r6 = r6 + 27072;
                    /* Next insn is delay slot */ 
                    pc=0x62770;
                    run_62600(); return;
                case 0x6311c:
                    r22 = r0 + 106;
                    /* Next insn is delay slot */ 
                    pc=0x62b80;
                    run_62a00(); return;
                case 0x63128:
                    r5 = 7 << 16;
                    r4 = r29 + 40;
                    r5 = r5 + 31552;
                    r6 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r31=0x63140;
                    pc=0x6b400;
                    run_6b400(); return;
                case 0x63140:
                    r3 = r0 + 5;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x630a4;
                        continue;
                    }
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = 32752 << 16;
                    r2 = r3 | r2;
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x61cc4;
                    run_61c00(); return;
                case 0x6316c:
                    r3 = r0 + -1;
                    r2 = r3 << (r2&0x1f);
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 & r3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x62c18;
                    run_62c00(); return;
                case 0x6318c:
                    r4 = r0 + -1;
                    r2 = r4 << (r2&0x1f);
                    r2 = r2 & r3;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x62c18;
                    run_62c00(); return;
                case 0x63200:
                    pc=0x63200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_63200() throws ExecutionException { /* 0x63200 - 0x63400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x63200:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x61600;
                    run_61600(); return;
                case 0x63400:
                    pc=0x63400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_63400() throws ExecutionException { /* 0x63400 - 0x63600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x63400:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = f21;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = f20;
                    /* Next insn is delay slot */ 
                    r31=0x63428;
                    pc=0x61600;
                    run_61600(); return;
                case 0x63428:
                    f12 = f0;
                    f13 = f1;
                    f20 = f0;
                    f21 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x63438;
                    pc=0x5ee00;
                    run_5ee00(); return;
                case 0x63438:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63460;
                        continue;
                    }
                    f0=Float.floatToRawIntBits((float)(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL))));
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    f20 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    f21 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x63460:
                    f20 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    f21 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x5f200;
                    run_5f200(); return;
                case 0x63600:
                    pc=0x63600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_63600() throws ExecutionException { /* 0x63600 - 0x63800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x63600:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r29 = r29 + -56;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r23 = r6 + r0;
                    r18 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x637fc;
                        continue;
                    }
                    r20 = r4 + r0;
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r4 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r17 = r5 + r0;
                    r30 = r0 + r0;
                    r16 = r0 + r0;
                case 0x63658:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x636c4;
                        continue;
                    }
                    r2 = ((r16 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    r19 = r3 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x636d8;
                        continue;
                    }
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r2 & 1152;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x636e8;
                        continue;
                    }
                    r22 = r19 + r0;
                case 0x63688:
                    r5 = r30 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x63698;
                    pc=0x5c400;
                    run_5c400(); return;
                case 0x63698:
                    r3 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r2 = readPages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff];
                    r3 = r3 - r19;
                    r4 = r4 + r22;
                    r2 = r2 - r16;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x637fc;
                        continue;
                    }
                case 0x636c4:
                    r30 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r18 = r18 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x63658;
                    continue;
                case 0x636d8:
                    r19 = r16 + r0;
                    r22 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63688;
                    continue;
                case 0x636e8:
                    r5 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r6 = r16 + 1;
                    r21 = r4 - r5;
                    r4 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r6 = r6 + r21;
                    r22 = r4 << 1;
                    r4 = r22 + r4;
                    r22 = r4 >>> 31;
                    r22 = r22 + r4;
                    r22 = r22 >> 1;
                    r4 = ((r22 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63798;
                        continue;
                    }
                    r2 = r2 & 1024;
                    r22 = r6 + r0;
                    r4 = r20 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x637ac;
                        continue;
                    }
                case 0x63730:
                    r5 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6373c;
                    pc=0x39600;
                    run_39600(); return;
                case 0x6373c:
                    r19 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x637d0;
                        continue;
                    }
                    r5 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6375c;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x6375c:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + -1153;
                    r2 = r2 & r3;
                    r2 = r2 | 128;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x63770:
                    r4 = r19 + r21;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r22;
                    r22 = r22 - r21;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r19;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r22;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    r19 = r16 + r0;
                    r22 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63688;
                    continue;
                case 0x63798:
                    r2 = r2 & 1024;
                    r6 = r22 + r0;
                    r4 = r20 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63730;
                        continue;
                    }
                case 0x637ac:
                    /* Next insn is delay slot */ 
                    r31=0x637b4;
                    pc=0x3be00;
                    run_3be00(); return;
                case 0x637b4:
                    r19 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63770;
                        continue;
                    }
                    r5 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x637d0;
                    pc=0x37400;
                    run_37400(); return;
                case 0x637d0:
                    r2 = r0 + 12;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r0;
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r0;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x63800;
                    run_63800(); return;
                case 0x637fc:
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r0;
                case 0x63800:
                    pc=0x63800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_63800() throws ExecutionException { /* 0x63800 - 0x63a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x63800:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x63a00:
                    pc=0x63a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_63a00() throws ExecutionException { /* 0x63a00 - 0x63c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x63a00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r29 = r29 + -224;
                    r2 = r2 & 128;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r17;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r16;
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r31;
                    writePages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff] = r30;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r23;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r22;
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = r21;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r20;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r19;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r18;
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r4;
                    r16 = r5 + r0;
                    r17 = r6 + r0;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63a5c;
                        continue;
                    }
                    r2 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x649e4;
                        run_64800(); return;
                    }
                case 0x63a5c:
                    r5 = r29 + 119;
                    r21 = r29 + 120;
                    r4 = r29 + 16;
                    r2 = 7 << 16;
                    r6 = r21 - r5;
                    r18 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r4;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r0;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r0;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r0;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r0;
                    r3 = r4 + r0;
                    r22 = r2 + 27956;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r5;
                    writePages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff] = r6;
                case 0x63a98:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64498;
                        run_64400(); return;
                    }
                case 0x63aa8:
                    r4 = r0 + 37;
                    r19 = r17 + r0;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x63ac8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x63b28;
                    continue;
                case 0x63ac0:
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x63adc;
                        continue;
                    }
                case 0x63ac8:
                    r19 = r19 + 1;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63ac0;
                        continue;
                    }
                case 0x63adc:
                    r20 = r19 - r17;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63b28;
                        continue;
                    }
                    r2 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    r2 = r2 + r20;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    r2 = r2 + 1;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x646dc;
                        run_64600(); return;
                    }
                    r3 = r3 + 8;
                case 0x63b18:
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r2;
                case 0x63b28:
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64960;
                        run_64800(); return;
                    }
                    r2 = r19 + 1;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r0 + r0;
                    r23 = r0 + -1;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r0;
                    r19 = r0 + r0;
                    r7 = r0 + 42;
                    r8 = r0 + r0;
                case 0x63b58:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r17 = r2 + 1;
                case 0x63b60:
                    r2 = r4 + -32;
                    r5 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x640dc;
                        run_64000(); return;
                    }
                case 0x63b70:
                    r5 = 7 << 16;
                    r2 = r2 << 2;
                    r5 = r5 + 27584;
                    r2 = r5 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x63b90:
                    r19 = r19 | 16;
                case 0x63b94:
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63b58;
                    continue;
                case 0x63ba0:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r8 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x6483c;
                        run_64800(); return;
                    }
                    r8 = r0 - r8;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r2;
                case 0x63bc0:
                    r19 = r19 | 4;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63b58;
                    continue;
                case 0x63bd0:
                    r6 = r0 + 43;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63b58;
                    continue;
                case 0x63be0:
                    r2 = r19 & 16;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x648ac;
                        run_64800(); return;
                    }
                    r19 = r19 & 64;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6498c;
                        run_64800(); return;
                    }
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                case 0x63c00:
                    pc=0x63c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_63c00() throws ExecutionException { /* 0x63c00 - 0x63e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x63c00:
                    r4 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r4&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x63a98;
                    run_63a00(); return;
                case 0x63c1c:
                    r2 = 7 << 16;
                    r2 = r2 + 19716;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r2;
                case 0x63c30:
                    r2 = r19 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63c48;
                        continue;
                    }
                    r2 = r19 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64890;
                        run_64800(); return;
                    }
                case 0x63c48:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                case 0x63c5c:
                    r5 = r19 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x641c8;
                        run_64000(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x641c8;
                        run_64000(); return;
                    }
                    r5 = r0 + 48;
                    addr=r29+132;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+133;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r19 | 2;
                    r4 = r0 + 2;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r5 = r0 + r0;
                case 0x63c90:
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x63ca0;
                        continue;
                    }
                    r6 = r0 + -129;
                    r19 = r19 & r6;
                case 0x63ca0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6450c;
                        run_64400(); return;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6450c;
                        run_64400(); return;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63cc4;
                        continue;
                    }
                    r2 = r19 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64874;
                        run_64800(); return;
                    }
                case 0x63cc4:
                    r30 = r21 + r0;
                case 0x63cc8:
                    r6 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r2 = r6 < r23 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63ce4;
                        continue;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r23;
                case 0x63ce4:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63d8c;
                        continue;
                    }
                    r2 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x63d8c;
                    continue;
                case 0x63d04:
                    r19 = r19 | 64;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63b58;
                    run_63a00(); return;
                case 0x63d14:
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64054;
                        run_64000(); return;
                    }
                case 0x63d28:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                case 0x63d3c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x6407c;
                        run_64000(); return;
                    }
                case 0x63d44:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x63c90;
                    continue;
                case 0x63d58:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r6;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    r30 = r29 + 80;
                case 0x63d88:
                    r23 = r0 + r0;
                case 0x63d8c:
                    r4 = r19 & 2;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63dac;
                        continue;
                    }
                    r5 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r5;
                case 0x63dac:
                    r6 = r19 & 132;
                    writePages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff] = r6;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x641d4;
                        run_64000(); return;
                    }
                    r2 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r2 - r4;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x641d4;
                        run_64000(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64a48;
                        run_64a00(); return;
                    }
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    r9 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x63e0c;
                    run_63e00(); return;
                case 0x63df8:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                case 0x63e00:
                    pc=0x63e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_63e00() throws ExecutionException { /* 0x63e00 - 0x64000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x63e00:
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63e70;
                        continue;
                    }
                case 0x63e0c:
                    r2 = r2 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63df8;
                        run_63c00(); return;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x63e48;
                    pc=0x63600;
                    run_63600(); return;
                case 0x63e48:
                    r9 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x644c0;
                        run_64400(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63e0c;
                        continue;
                    }
                case 0x63e70:
                    r2 = r2 + 1;
                    r6 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    r5 = r20 + r5;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r6;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x647e0;
                        run_64600(); return;
                    }
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x641dc;
                    run_64000(); return;
                case 0x63ea4:
                    r19 = r19 | 16;
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63fa0;
                        continue;
                    }
                case 0x63eb8:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                case 0x63ed0:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63c90;
                    run_63c00(); return;
                case 0x63ee4:
                    r2 = 7 << 16;
                    r2 = r2 + 19696;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x63c30;
                    run_63c00(); return;
                case 0x63f00:
                    r19 = r19 | 16;
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x641a0;
                        run_64000(); return;
                    }
                case 0x63f14:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63ed0;
                    continue;
                case 0x63f34:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    addr=r29+132;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r0 + 120;
                    addr=r29+133;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = 7 << 16;
                    r4 = r4 + 19716;
                    r5 = r5 + 4;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r4;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    r19 = r19 | 2;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x63ed0;
                    continue;
                case 0x63f78:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63b94;
                        run_63a00(); return;
                    }
                    r6 = r0 + 32;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63b58;
                    run_63a00(); return;
                case 0x63f90:
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63eb8;
                        continue;
                    }
                case 0x63fa0:
                    r2 = r19 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x648e8;
                        run_64800(); return;
                    }
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x63ed0;
                    continue;
                case 0x63fc8:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    r30 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r6 + 4;
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64a10;
                        run_64a00(); return;
                    }
                    r4 = r30 + r0;
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x649ac;
                        run_64800(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r23 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x64004;
                    pc=0x3a000;
                    run_3a000(); return;
                case 0x64000:
                    pc=0x64000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_64000() throws ExecutionException { /* 0x64000 - 0x64200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x64000:
                case 0x64004:
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64a78;
                        run_64a00(); return;
                    }
                    r2 = r2 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    r2 = r23 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64028;
                        continue;
                    }
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                case 0x64028:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r23 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63cc8;
                    run_63c00(); return;
                case 0x6403c:
                    r19 = r19 | 16;
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63d28;
                        run_63c00(); return;
                    }
                case 0x64054:
                    r2 = r19 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x648cc;
                        run_64800(); return;
                    }
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x63d44;
                        run_63c00(); return;
                    }
                case 0x6407c:
                    r4 = r0 + 45;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r5 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x63c90;
                    run_63c00(); return;
                case 0x6409c:
                    r8 = r0 + r0;
                    r2 = r4 + -48;
                case 0x640a4:
                    r4 = r8 << 1;
                    r17 = r17 + 1;
                    r8 = r8 << 3;
                    r8 = r4 + r8;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r8 = r8 + r2;
                    r2 = r4 + -48;
                    r5 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x640a4;
                        continue;
                    }
                    r2 = r4 + -32;
                    r5 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63b70;
                        run_63a00(); return;
                    }
                case 0x640dc:
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64960;
                        run_64800(); return;
                    }
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    r4 = r0 + 1;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r4;
                    r30 = r29 + 80;
                    /* Next insn is delay slot */ 
                    pc=0x63d88;
                    run_63c00(); return;
                case 0x64110:
                    r19 = r19 | 128;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63b58;
                    run_63a00(); return;
                case 0x64120:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r5 = r17 + 1;
                    if(r4 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x64a9c;
                        run_64a00(); return;
                    }
                    r2 = r4 + -48;
                    r9 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r23 = r0 + r0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64174;
                        continue;
                    }
                case 0x64144:
                    r4 = r23 << 1;
                    r5 = r5 + 1;
                    r23 = r23 << 3;
                    r23 = r4 + r23;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r23 = r2 + r23;
                    r2 = r4 + -48;
                    r9 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64144;
                        continue;
                    }
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x649d4;
                        run_64800(); return;
                    }
                case 0x64174:
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63b60;
                    run_63a00(); return;
                case 0x64180:
                    r19 = r19 | 1;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63b58;
                    run_63a00(); return;
                case 0x64190:
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63f14;
                        run_63e00(); return;
                    }
                case 0x641a0:
                    r2 = r19 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64904;
                        run_64800(); return;
                    }
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x63ed0;
                    run_63e00(); return;
                case 0x641c8:
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x63ed0;
                    run_63e00(); return;
                case 0x641d4:
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                case 0x641dc:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6421c;
                        run_64200(); return;
                    }
                    r4 = r29 + 134;
                    r2 = r2 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                case 0x64200:
                    pc=0x64200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_64200() throws ExecutionException { /* 0x64200 - 0x64400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x64200:
                    r5 = r5 + 1;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64780;
                        run_64600(); return;
                    }
                    r3 = r3 + 8;
                case 0x6421c:
                    r4 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6425c;
                        continue;
                    }
                    r4 = r29 + 132;
                    r2 = r2 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    r5 = r5 + 2;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x647b0;
                        run_64600(); return;
                    }
                    r3 = r3 + 8;
                case 0x6425c:
                    r6 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r4 = r0 + 128;
                    if(r6 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x645ac;
                        run_64400(); return;
                    }
                case 0x6426c:
                    r4 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r23 = r23 - r4;
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x64340;
                        continue;
                    }
                    r4 = r23 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64950;
                        run_64800(); return;
                    }
                    r4 = 7 << 16;
                    r20 = r4 + 27940;
                    r9 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x642b4;
                    continue;
                case 0x642a0:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64318;
                        continue;
                    }
                case 0x642b4:
                    r2 = r2 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r20;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x642a0;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x642f0;
                    pc=0x63600;
                    run_63600(); return;
                case 0x642f0:
                    r9 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x644c0;
                        run_64400(); return;
                    }
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x642b4;
                        continue;
                    }
                case 0x64318:
                    r2 = r2 + 1;
                    r5 = r5 + r23;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r20;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r23;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64704;
                        run_64600(); return;
                    }
                    r3 = r3 + 8;
                case 0x64340:
                    r6 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r5 = r6 + r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r30;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r6;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x646a4;
                        run_64600(); return;
                    }
                    r3 = r3 + 8;
                case 0x6436c:
                    r19 = r19 & 4;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64450;
                        run_64400(); return;
                    }
                    r2 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r19 = r2 - r4;
                    if(r19 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x64450;
                        run_64400(); return;
                    }
                    r2 = r19 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64a58;
                        run_64a00(); return;
                    }
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    r23 = r0 + 16;
                    r6 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x643c8;
                    continue;
                case 0x643b4:
                    r19 = r19 + -16;
                    r4 = r19 < 17 ? 1 : 0;
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64424;
                        run_64400(); return;
                    }
                case 0x643c8:
                    r2 = r2 + 1;
                    r6 = r6 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r23;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r6;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x643b4;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x64400;
                    pc=0x63600;
                    run_63600(); return;
                case 0x64400:
                    pc=0x64400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_64400() throws ExecutionException { /* 0x64400 - 0x64600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x64400:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x644c0;
                        continue;
                    }
                    r19 = r19 + -16;
                    r4 = r19 < 17 ? 1 : 0;
                    r6 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x643c8;
                        run_64200(); return;
                    }
                case 0x64424:
                    r5 = r6 + r0;
                case 0x64428:
                    r2 = r2 + 1;
                    r6 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    r5 = r5 + r19;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r6;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6484c;
                        run_64800(); return;
                    }
                case 0x64450:
                    r2 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r4 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r3 = r2 < r4 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6446c;
                        continue;
                    }
                    r2 = r4 + r0;
                case 0x6446c:
                    r3 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r3;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x644a4;
                        continue;
                    }
                case 0x64484:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r0;
                    r3 = r29 + 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63aa8;
                        run_63a00(); return;
                    }
                case 0x64498:
                    r19 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63b28;
                    run_63a00(); return;
                case 0x644a4:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x644b8;
                    pc=0x63600;
                    run_63600(); return;
                case 0x644b8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64484;
                        continue;
                    }
                case 0x644c0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x646d0;
                        run_64600(); return;
                    }
                    r2 = r0 + -1;
                case 0x644d8:
                    r31 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r30 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r23 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r22 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r21 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r20 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r19 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r18 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r17 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r16 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r29 = r29 + 224;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6450c:
                    r6 = r0 + 1;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x64734;
                        run_64600(); return;
                    }
                    r6 = r0 + 2;
                    r30 = r21 + r0;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x6455c;
                        continue;
                    }
                    r6 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                case 0x6452c:
                    r4 = r2 & 15;
                    r4 = r6 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r30 = r30 + -1;
                    r2 = r2 >>> 4;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6452c;
                        continue;
                    }
                    r4 = r21 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x63cc8;
                    run_63c00(); return;
                case 0x6455c:
                    r4 = r2 & 7;
                    r30 = r30 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6455c;
                        continue;
                    }
                    r2 = r19 & 1;
                    r6 = r30 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6482c;
                        run_64800(); return;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x64770;
                        run_64600(); return;
                    }
                    r30 = r30 + -1;
                    r4 = r21 - r30;
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x63cc8;
                    run_63c00(); return;
                case 0x645ac:
                    r4 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r6 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r9 = r4 - r6;
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x6426c;
                        run_64200(); return;
                    }
                    r4 = r9 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64a68;
                        run_64a00(); return;
                    }
                    r6 = 7 << 16;
                    r20 = r6 + 27940;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r17;
                    r10 = r0 + 16;
                    r17 = r20 + r0;
                    r20 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x64604;
                    run_64600(); return;
                case 0x645f0:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64668;
                        run_64600(); return;
                    }
                case 0x64600:
                    pc=0x64600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_64600() throws ExecutionException { /* 0x64600 - 0x64800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x64600:
                case 0x64604:
                    r2 = r2 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r10;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x645f0;
                        run_64400(); return;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x64640;
                    pc=0x63600;
                    run_63600(); return;
                case 0x64640:
                    r10 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x644c0;
                        run_64400(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64604;
                        continue;
                    }
                case 0x64668:
                    r9 = r20 + r0;
                    r20 = r17 + r0;
                    r17 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                case 0x64674:
                    r2 = r2 + 1;
                    r5 = r5 + r9;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r20;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64920;
                        run_64800(); return;
                    }
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x6426c;
                    run_64200(); return;
                case 0x646a4:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x646b8;
                    pc=0x63600;
                    run_63600(); return;
                case 0x646b8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x644c0;
                        run_64400(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x6436c;
                    run_64200(); return;
                case 0x646d0:
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x644d8;
                    run_64400(); return;
                case 0x646dc:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x646f0;
                    pc=0x63600;
                    run_63600(); return;
                case 0x646f0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x644c0;
                        run_64400(); return;
                    }
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x63b18;
                    run_63a00(); return;
                case 0x64704:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x64718;
                    pc=0x63600;
                    run_63600(); return;
                case 0x64718:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x644c0;
                        run_64400(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x64340;
                    run_64200(); return;
                case 0x64734:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64810;
                        run_64800(); return;
                    }
                    r30 = r21 + r0;
                    r4 = r0 + 10;
                case 0x64748:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x64754;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x64754:
                    r30 = r30 + -1;
                    r6 = hi;
                    r6 = r6 + 48;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64748;
                        continue;
                    }
                case 0x64770:
                    r2 = r21 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x63cc8;
                    run_63c00(); return;
                case 0x64780:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x64794;
                    pc=0x63600;
                    run_63600(); return;
                case 0x64794:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x644c0;
                        run_64400(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x6421c;
                    run_64200(); return;
                case 0x647b0:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x647c4;
                    pc=0x63600;
                    run_63600(); return;
                case 0x647c4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x644c0;
                        run_64400(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x6425c;
                    run_64200(); return;
                case 0x647e0:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x647f4;
                    pc=0x63600;
                    run_63600(); return;
                case 0x647f4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x644c0;
                        run_64400(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                case 0x64800:
                    pc=0x64800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_64800() throws ExecutionException { /* 0x64800 - 0x64a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x64800:
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x641dc;
                    run_64000(); return;
                case 0x64810:
                    r6 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r2 = r2 + 48;
                    addr=r29+119;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r6;
                    r30 = r29 + 119;
                    /* Next insn is delay slot */ 
                    pc=0x63cc8;
                    run_63c00(); return;
                case 0x6482c:
                    r6 = r21 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x63cc8;
                    run_63c00(); return;
                case 0x6483c:
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r2;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63b58;
                    run_63a00(); return;
                case 0x6484c:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x64860;
                    pc=0x63600;
                    run_63600(); return;
                case 0x64860:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x644c0;
                        run_64400(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x64450;
                    run_64400(); return;
                case 0x64874:
                    r6 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r2 = r0 + 48;
                    addr=r29+119;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r6;
                    r30 = r29 + 119;
                    /* Next insn is delay slot */ 
                    pc=0x63cc8;
                    run_63c00(); return;
                case 0x64890:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    addr=r6+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x63c5c;
                    run_63c00(); return;
                case 0x648ac:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r5 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x63a98;
                    run_63a00(); return;
                case 0x648cc:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x63d3c;
                    run_63c00(); return;
                case 0x648e8:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x63ed0;
                    run_63e00(); return;
                case 0x64904:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x63ed0;
                    run_63e00(); return;
                case 0x64920:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x64934;
                    pc=0x63600;
                    run_63600(); return;
                case 0x64934:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x644c0;
                        run_64400(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x6426c;
                    run_64200(); return;
                case 0x64950:
                    r6 = 7 << 16;
                    r20 = r6 + 27940;
                    /* Next insn is delay slot */ 
                    pc=0x64318;
                    run_64200(); return;
                case 0x64960:
                    r2 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x644c0;
                        run_64400(); return;
                    }
                    r4 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r6 = r29 + 120;
                    /* Next insn is delay slot */ 
                    r31=0x64984;
                    pc=0x63600;
                    run_63600(); return;
                case 0x64984:
                    /* Next insn is delay slot */ 
                    pc=0x644c0;
                    run_64400(); return;
                case 0x6498c:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r6 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r6;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x63a98;
                    run_63a00(); return;
                case 0x649ac:
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x649b8;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x649b8:
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r23 = r0 + r0;
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x63cc8;
                    run_63c00(); return;
                case 0x649d4:
                    r23 = r0 + -1;
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63b60;
                    run_63a00(); return;
                case 0x649e4:
                    r5 = r0 + 64;
                    /* Next insn is delay slot */ 
                    r31=0x649f0;
                    pc=0x39600;
                    run_39600(); return;
                case 0x649f0:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64ac8;
                        run_64a00(); return;
                    }
                case 0x64a00:
                    pc=0x64a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_64a00() throws ExecutionException { /* 0x64a00 - 0x64c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x64a00:
                    r2 = r0 + 64;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x63a5c;
                    run_63a00(); return;
                case 0x64a10:
                    r2 = (r23&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64a20;
                        continue;
                    }
                    r23 = r0 + 6;
                case 0x64a20:
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r2 = r23 + r0;
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x64a90;
                        continue;
                    }
                case 0x64a30:
                    r8 = 7 << 16;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r30 = r8 + 24084;
                    /* Next insn is delay slot */ 
                    pc=0x63d88;
                    run_63c00(); return;
                case 0x64a48:
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    /* Next insn is delay slot */ 
                    pc=0x63e70;
                    run_63e00(); return;
                case 0x64a58:
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    /* Next insn is delay slot */ 
                    pc=0x64428;
                    run_64400(); return;
                case 0x64a68:
                    r4 = 7 << 16;
                    r20 = r4 + 27940;
                    /* Next insn is delay slot */ 
                    pc=0x64674;
                    run_64600(); return;
                case 0x64a78:
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r23 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63cc8;
                    run_63c00(); return;
                case 0x64a90:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x64a30;
                    continue;
                case 0x64a9c:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r17 = r5 + r0;
                    r23 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r23 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x6483c;
                        run_64800(); return;
                    }
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r2;
                    r23 = r0 + -1;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63b58;
                    run_63a00(); return;
                case 0x64ac8:
                    r3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x644d8;
                    run_64400(); return;
                case 0x64c00:
                    pc=0x64c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_64c00() throws ExecutionException { /* 0x64c00 - 0x64e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x64c00:
                    r2 = r0 + -1;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x64d24;
                        continue;
                    }
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r29 = r29 + -32;
                    r2 = r2 & 65503;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+48)>>>12][((r6+48)>>>2)&0x3ff];
                    r16 = r5 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64cb0;
                        continue;
                    }
                    r3 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r2 = readPages[(r6+52)>>>12][((r6+52)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64c88;
                        continue;
                    }
                case 0x64c4c:
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r3;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r2;
                    r2 = r16 + r0;
                case 0x64c74:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x64c88:
                    r5 = r6 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x64c98;
                    pc=0x66c00;
                    run_66c00(); return;
                case 0x64c98:
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64c4c;
                        continue;
                    }
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x64c74;
                    continue;
                case 0x64cb0:
                    r2 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r3 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64cdc;
                        continue;
                    }
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64cdc;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x64d30;
                        continue;
                    }
                case 0x64cdc:
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    addr=r6+66;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r6+60)>>>12][((r6+60)>>>2)&0x3ff] = r2;
                    r2 = r6 + 64;
                    writePages[(r6+48)>>>12][((r6+48)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    writePages[(r6+52)>>>12][((r6+52)>>>2)&0x3ff] = r2;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r6 + 66;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r2;
                    writePages[(r6+56)>>>12][((r6+56)>>>2)&0x3ff] = r3;
                    r2 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x64d24:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x64d30:
                    r3 = r3 + -1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x64c74;
                    continue;
                case 0x64e00:
                    pc=0x64e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_64e00() throws ExecutionException { /* 0x64e00 - 0x65000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x64e00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = readPages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64e68;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x64e30;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x64e30;
                    pc=0x37400;
                    run_37400(); return;
                case 0x64e30:
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64e68;
                        continue;
                    }
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                case 0x64e54:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x64e68:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 32;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x64e54;
                    continue;
                case 0x65000:
                    pc=0x65000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_65000() throws ExecutionException { /* 0x65000 - 0x65200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x65000:
                    { long hilo = (long)(r7) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -56;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r22 = r6 + r0;
                    r21 = lo;
                    r23 = r7 + r0;
                    r16 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6510c;
                        continue;
                    }
                    r20 = r4 + r0;
                    r19 = r5 + r0;
                    r18 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x65094;
                    continue;
                case 0x65058:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x65064;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x65064:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    r2 = r2 + r17;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    r19 = r19 + r17;
                    r18 = r18 - r17;
                    /* Next insn is delay slot */ 
                    r31=0x6508c;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x6508c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65118;
                        continue;
                    }
                case 0x65094:
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r3 = ((r17 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65058;
                        continue;
                    }
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x650b8;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x650b8:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 - r18;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r18 = r2 + r18;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r18;
                    r2 = r23 + r0;
                case 0x650dc:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6510c:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x650dc;
                    continue;
                case 0x65118:
                    r2 = r21 - r18;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        if(r22!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                        }
                        pc=0x65128;
                        continue;
                    }
                    if(r22!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x65128:
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x650dc;
                    continue;
                case 0x65200:
                    pc=0x65200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_65200() throws ExecutionException { /* 0x65200 - 0x65400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x65200:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -416;
                    writePages[(r29+380)>>>12][((r29+380)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r2 & 8192;
                    writePages[(r29+408)>>>12][((r29+408)>>>2)&0x3ff] = r30;
                    writePages[(r29+376)>>>12][((r29+376)>>>2)&0x3ff] = r16;
                    writePages[(r29+412)>>>12][((r29+412)>>>2)&0x3ff] = r31;
                    writePages[(r29+404)>>>12][((r29+404)>>>2)&0x3ff] = r23;
                    writePages[(r29+400)>>>12][((r29+400)>>>2)&0x3ff] = r22;
                    writePages[(r29+396)>>>12][((r29+396)>>>2)&0x3ff] = r21;
                    writePages[(r29+392)>>>12][((r29+392)>>>2)&0x3ff] = r20;
                    writePages[(r29+388)>>>12][((r29+388)>>>2)&0x3ff] = r19;
                    writePages[(r29+384)>>>12][((r29+384)>>>2)&0x3ff] = r18;
                    r30 = r5 + r0;
                    r16 = r6 + r0;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r7;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65264;
                        continue;
                    }
                    r2 = r2 | 8192;
                    r4 = readPages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff];
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r4 & r2;
                    writePages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff] = r2;
                case 0x65264:
                    r19 = 7 << 16;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r0;
                    r18 = r0 + r0;
                    r23 = r0 + r0;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r0;
                    r19 = r19 + 27972;
                case 0x6527c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 1;
                    writePages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65484;
                        run_65400(); return;
                    }
                case 0x65290:
                    r5 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r4 = r5 + r2;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6532c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x65308;
                        continue;
                    }
                case 0x652c0:
                    r4 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r5 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6527c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r2 = r2 + -1;
                    r23 = r23 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x652c0;
                        continue;
                    }
                case 0x65308:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x65318;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x65318:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6527c;
                        continue;
                    }
                    r5 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x652c0;
                    continue;
                case 0x6532c:
                    r4 = r0 + 37;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x65500;
                        run_65400(); return;
                    }
                    r21 = r0 + r0;
                    r22 = r0 + r0;
                case 0x65340:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r2 = r4 & 255;
                    r6 = (r2&0xffffffffL) < (121&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65374;
                        continue;
                    }
                    r2 = r2 << 2;
                    r2 = r19 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x65374:
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 1;
                    r4 = r4 & 3;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x65390;
                        continue;
                    }
                case 0x6538c:
                    r21 = r21 | 1;
                case 0x65390:
                    r3 = 4 << 16;
                    r3 = r3 + 1536;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 10;
                    r20 = r0 + 3;
                case 0x653a4:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x6556c;
                        run_65400(); return;
                    }
                case 0x653b4:
                    r2 = r21 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x654a8;
                        run_65400(); return;
                    }
                case 0x653c0:
                    r2 = r0 + 2;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x65714;
                        run_65600(); return;
                    }
                    r2 = r0 + 3;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x656a0;
                        run_65600(); return;
                    }
                    r2 = r0 + 1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x655e0;
                        run_65400(); return;
                    }
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x653f0;
                        continue;
                    }
                    r22 = r0 + 1;
                case 0x653f0:
                    r2 = r21 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65cd8;
                        run_65c00(); return;
                    }
                    r21 = r21 & 16;
                case 0x65400:
                    pc=0x65400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_65400() throws ExecutionException { /* 0x65400 - 0x65600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x65400:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65e78;
                        run_65e00(); return;
                    }
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x65440;
                    continue;
                case 0x65414:
                    r4 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r21 + r2;
                    r22 = r22 - r2;
                    r2 = r4 + r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x65438;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x65438:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65fa4;
                        run_65e00(); return;
                    }
                case 0x65440:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = r2 < r22 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65414;
                        continue;
                    }
                    r2 = r2 - r22;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r21 + r22;
                    r9 = r2 + r22;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r9;
                case 0x6546c:
                    r23 = r23 + r21;
                case 0x65470:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 1;
                    writePages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65290;
                        run_65200(); return;
                    }
                case 0x65484:
                    r2 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x655ac;
                    continue;
                case 0x65490:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x654a0;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x654a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65584;
                        continue;
                    }
                case 0x654a8:
                    r5 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x654c0;
                    continue;
                case 0x654b8:
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                case 0x654c0:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x653c0;
                        run_65200(); return;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r23 = r23 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    if(r4 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x654b8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x65490;
                    continue;
                case 0x65500:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x65fb8;
                        run_65e00(); return;
                    }
                case 0x65510:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x65484;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r23 = r23 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x6527c;
                    run_65200(); return;
                case 0x65548:
                    r21 = r21 | 1;
                case 0x6554c:
                    r3 = 4 << 16;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r3 + 3072;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 8;
                    r20 = r0 + 3;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x653b4;
                        run_65200(); return;
                    }
                case 0x6556c:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6557c;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x6557c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x653b4;
                        run_65200(); return;
                    }
                case 0x65584:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x655a8;
                        continue;
                    }
                    addr=r30+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65484;
                        continue;
                    }
                case 0x655a8:
                    r2 = r0 + -1;
                case 0x655ac:
                    r31 = readPages[(r29+412)>>>12][((r29+412)>>>2)&0x3ff];
                    r30 = readPages[(r29+408)>>>12][((r29+408)>>>2)&0x3ff];
                    r23 = readPages[(r29+404)>>>12][((r29+404)>>>2)&0x3ff];
                    r22 = readPages[(r29+400)>>>12][((r29+400)>>>2)&0x3ff];
                    r21 = readPages[(r29+396)>>>12][((r29+396)>>>2)&0x3ff];
                    r20 = readPages[(r29+392)>>>12][((r29+392)>>>2)&0x3ff];
                    r19 = readPages[(r29+388)>>>12][((r29+388)>>>2)&0x3ff];
                    r18 = readPages[(r29+384)>>>12][((r29+384)>>>2)&0x3ff];
                    r17 = readPages[(r29+380)>>>12][((r29+380)>>>2)&0x3ff];
                    r16 = readPages[(r29+376)>>>12][((r29+376)>>>2)&0x3ff];
                    r29 = r29 + 416;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x655e0:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x655ec;
                        continue;
                    }
                    r22 = r0 + -1;
                case 0x655ec:
                    r21 = r21 & 16;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65a10;
                        run_65a00(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r0 + r0;
                case 0x65600:
                    pc=0x65600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_65600() throws ExecutionException { /* 0x65600 - 0x65800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x65600:
                    r10 = r29 + 24;
                case 0x65604:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r10 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6568c;
                        continue;
                    }
                case 0x65620:
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r22 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x6546c;
                        run_65400(); return;
                    }
                    if(r4 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x65604;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x6565c;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x6565c:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6546c;
                        run_65400(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r10 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65620;
                        continue;
                    }
                case 0x6568c:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65484;
                        run_65400(); return;
                    }
                    r23 = r23 + r21;
                    /* Next insn is delay slot */ 
                    pc=0x65470;
                    run_65400(); return;
                case 0x656a0:
                    r2 = r22 + -1;
                    r2 = (r2&0xffffffffL) < (39&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65a00;
                        run_65a00(); return;
                    }
                    r13 = r0 + r0;
                case 0x656b4:
                    r11 = r29 + 280;
                    r2 = 7 << 16;
                    r10 = r21 | 3456;
                    r12 = r0 + r0;
                    r21 = r11 + r0;
                    r14 = r0 + 512;
                    r7 = r2 + 28768;
                case 0x656d0:
                    r6 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r4 + -43;
                    r2 = r2 & 255;
                    r5 = (r2&0xffffffffL) < (78&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65898;
                        run_65800(); return;
                    }
                    r3 = 7 << 16;
                    r2 = r2 << 2;
                    r3 = r3 + 28456;
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x65714:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x657b0;
                        continue;
                    }
                    r2 = r21 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x657c0;
                        continue;
                    }
                case 0x65728:
                    r21 = r21 & 16;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65c10;
                        run_65c00(); return;
                    }
                    r5 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r0 + r0;
                case 0x65740:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6546c;
                        run_65400(); return;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r22 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x6546c;
                        run_65400(); return;
                    }
                    if(r4 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x65740;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x65798;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x65798:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6546c;
                        run_65400(); return;
                    }
                    r5 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x65740;
                    continue;
                case 0x657b0:
                    r2 = r21 & 1;
                    r22 = r0 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65728;
                        continue;
                    }
                case 0x657c0:
                    r4 = r29 + 320;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r20 = r21 & 16;
                    /* Next insn is delay slot */ 
                    r31=0x657d8;
                    pc=0x48bec;
                    run_48a00(); return;
                case 0x657d8:
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65ed0;
                        run_65e00(); return;
                    }
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r21 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                case 0x657f4:
                    r6 = r0 + r0;
                case 0x657f8:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                case 0x65800:
                    pc=0x65800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_65800() throws ExecutionException { /* 0x65800 - 0x65a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x65800:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r4 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65828;
                        continue;
                    }
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65ff0;
                        run_65e00(); return;
                    }
                case 0x65828:
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6527c;
                        run_65200(); return;
                    }
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r0;
                case 0x65834:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x6527c;
                    run_65200(); return;
                case 0x6584c:
                    r2 = r10 & 1536;
                    if(r2 != r14) {
                        /* Next insn is delay slot */ 
                        pc=0x65898;
                        continue;
                    }
                    r2 = r0 + -513;
                    r10 = r10 & r2;
                    r10 = r10 | 1280;
                    r18 = r0 + 16;
                case 0x65868:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x65994;
                        continue;
                    }
                case 0x65884:
                    r6 = r6 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r6;
                case 0x6588c:
                    r22 = r22 + -1;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x656d0;
                        run_65600(); return;
                    }
                case 0x65898:
                    r2 = r10 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x658b8;
                        continue;
                    }
                    r2 = ((r11 & 0xffffffffL) < (r21 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65f3c;
                        run_65e00(); return;
                    }
                case 0x658b0:
                    if(r21 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x65484;
                        run_65400(); return;
                    }
                case 0x658b8:
                    r2 = r10 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65e04;
                        run_65e00(); return;
                    }
                case 0x658c4:
                    r11 = r21 - r11;
                    r12 = r11 + r12;
                    r23 = r23 + r12;
                    /* Next insn is delay slot */ 
                    pc=0x6527c;
                    run_65200(); return;
                case 0x658d8:
                    r2 = r18 < 11 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65898;
                        continue;
                    }
                    r2 = r0 + -2945;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x65868;
                    continue;
                case 0x658f4:
                    r2 = r18 << 1;
                    r2 = r2 + r7;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r18 = tmp;
                    r2 = r18 < 9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65898;
                        continue;
                    }
                    r2 = r0 + -2945;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x65868;
                    continue;
                case 0x65920:
                    r2 = r18 << 1;
                    r2 = r2 + r7;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r18 = tmp;
                    r2 = r0 + -2945;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x65868;
                    continue;
                case 0x6593c:
                    r2 = r10 & 2048;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65868;
                        continue;
                    }
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65958;
                        continue;
                    }
                    r10 = r10 | 512;
                    r18 = r0 + 8;
                case 0x65958:
                    r2 = r10 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65ec0;
                        run_65e00(); return;
                    }
                    r2 = r0 + -897;
                    r10 = r10 & r2;
                    if(r13 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6597c;
                        continue;
                    }
                    r13 = r13 + -1;
                    r22 = r22 + 1;
                case 0x6597c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r12 = r12 + 1;
                    r2 = r2 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x65884;
                        continue;
                    }
                case 0x65994:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff] = r7;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    writePages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff] = r11;
                    writePages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff] = r12;
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r13;
                    writePages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff] = r14;
                    /* Next insn is delay slot */ 
                    r31=0x659bc;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x659bc:
                    r7 = readPages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff];
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    r11 = readPages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff];
                    r12 = readPages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff];
                    r13 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                    r14 = readPages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6588c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x65898;
                    continue;
                case 0x659e4:
                    r2 = r10 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65898;
                        continue;
                    }
                    r2 = r0 + -129;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x65868;
                    continue;
                case 0x65a00:
                    pc=0x65a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_65a00() throws ExecutionException { /* 0x65a00 - 0x65c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x65a00:
                    r13 = r22 + -39;
                    r22 = r0 + 39;
                    /* Next insn is delay slot */ 
                    pc=0x656b4;
                    run_65600(); return;
                case 0x65a10:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r10 = r29 + 24;
                    r3 = r3 + 4;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r21 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r20 = r21 + r0;
                case 0x65a34:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r10 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65abc;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r20 = r20 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r4 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r22 + -1;
                    addr=r20+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65abc;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x65a34;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x65aa8;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x65aa8:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65a34;
                        continue;
                    }
                    if(r21 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x65584;
                        run_65400(); return;
                    }
                case 0x65abc:
                    r21 = r20 - r21;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65484;
                        run_65400(); return;
                    }
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    r23 = r23 + r21;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x65470;
                    run_65400(); return;
                case 0x65aec:
                    r3 = 4 << 16;
                    r3 = r3 + 3072;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 10;
                    r20 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x653a4;
                    run_65200(); return;
                case 0x65b08:
                    r20 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x653a4;
                    run_65200(); return;
                case 0x65b14:
                    r21 = r21 | 544;
                case 0x65b18:
                    r3 = 4 << 16;
                    r3 = r3 + 3072;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 16;
                    r20 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x653a4;
                    run_65200(); return;
                case 0x65b34:
                    r2 = r21 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6527c;
                        run_65200(); return;
                    }
                    r2 = r21 & 4;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65fd8;
                        run_65e00(); return;
                    }
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r23&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x6527c;
                    run_65200(); return;
                case 0x65b68:
                    r21 = r21 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x65340;
                    run_65200(); return;
                case 0x65b74:
                    r3 = 4 << 16;
                    r3 = r3 + 1536;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + r0;
                    r20 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x653a4;
                    run_65200(); return;
                case 0x65b90:
                    r21 = r21 | 4;
                    /* Next insn is delay slot */ 
                    pc=0x65340;
                    run_65200(); return;
                case 0x65b9c:
                    r21 = r21 | 64;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x653a4;
                    run_65200(); return;
                case 0x65bac:
                    r5 = r16 + r0;
                    r4 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r31=0x65bbc;
                    pc=0x5f000;
                    run_5f000(); return;
                case 0x65bbc:
                    r16 = r2 + r0;
                    r21 = r21 | 64;
                    r20 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x653a4;
                    run_65200(); return;
                case 0x65bd0:
                    r21 = r21 | 512;
                    /* Next insn is delay slot */ 
                    pc=0x65b18;
                    continue;
                case 0x65bdc:
                    r21 = r21 | 2;
                    /* Next insn is delay slot */ 
                    pc=0x65340;
                    run_65200(); return;
                case 0x65be8:
                    r21 = r21 | 16;
                    /* Next insn is delay slot */ 
                    pc=0x65340;
                    run_65200(); return;
                case 0x65bf4:
                    r2 = r22 << 1;
                    r9 = r22 << 3;
                    r2 = r2 + r9;
                case 0x65c00:
                    pc=0x65c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_65c00() throws ExecutionException { /* 0x65c00 - 0x65e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x65c00:
                    r4 = r4 + -48;
                    r22 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x65340;
                    run_65200(); return;
                case 0x65c10:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r20 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r21 = r20 + r0;
                case 0x65c34:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65cb0;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r4 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r22 + -1;
                    addr=r21+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65cb0;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x65c34;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x65ca8;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x65ca8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65c34;
                        continue;
                    }
                case 0x65cb0:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r6 = r21 - r20;
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 + r6;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x6527c;
                    run_65200(); return;
                case 0x65cd8:
                    r4 = r29 + 320;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r21 = r21 & 16;
                    /* Next insn is delay slot */ 
                    r31=0x65cf0;
                    pc=0x48bec;
                    run_48a00(); return;
                case 0x65cf0:
                    writePages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff] = r21;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65f08;
                        run_65e00(); return;
                    }
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                case 0x65d20:
                    r21 = r0 + r0;
                case 0x65d24:
                    /* Next insn is delay slot */ 
                    r31=0x65d2c;
                    pc=0x5b000;
                    run_5b000(); return;
                case 0x65d2c:
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x65584;
                        run_65400(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = r29 + 24;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r6 = r3 + r21;
                    addr=r6+256;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r4 + -1;
                    r2 = r29 + 320;
                    r20 = r21 + 1;
                    r5 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r6 = r29 + 280;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x65d80;
                    pc=0x5bc00;
                    run_5bc00(); return;
                case 0x65d80:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x65584;
                        run_65400(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65f80;
                        run_65e00(); return;
                    }
                    r3 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65db0;
                        continue;
                    }
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                case 0x65db0:
                    r3 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    r23 = r23 + r20;
                    r22 = r22 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65f98;
                        run_65e00(); return;
                    }
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    r21 = r0 + r0;
                    r3 = r3 + 4;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                case 0x65dd4:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x65f14;
                        run_65e00(); return;
                    }
                case 0x65de4:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65d24;
                        continue;
                    }
                case 0x65dec:
                    r3 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65834;
                        run_65800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x6527c;
                    run_65200(); return;
                case 0x65e00:
                    pc=0x65e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_65e00() throws ExecutionException { /* 0x65e00 - 0x66000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x65e00:
                case 0x65e04:
                    r3 = readPages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff];
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r17 + r0;
                    r5 = r11 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    writePages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff] = r11;
                    writePages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff] = r12;
                    r6 = r0 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x65e30;
                    return;
                case 0x65e30:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    r11 = readPages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff];
                    r4 = r10 & 32;
                    r12 = readPages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65edc;
                        continue;
                    }
                case 0x65e48:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                case 0x65e60:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x658c4;
                    run_65800(); return;
                case 0x65e78:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r7 = r22 + r0;
                    r21 = r3 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x65e9c;
                    pc=0x65000;
                    run_65000(); return;
                case 0x65e9c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65584;
                        run_65400(); return;
                    }
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r23 = r2 + r23;
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r21;
                    /* Next insn is delay slot */ 
                    pc=0x6527c;
                    run_65200(); return;
                case 0x65ec0:
                    r2 = r0 + -1409;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x65868;
                    run_65800(); return;
                case 0x65ed0:
                    r21 = r29 + 328;
                    /* Next insn is delay slot */ 
                    pc=0x657f4;
                    run_65600(); return;
                case 0x65edc:
                    r4 = r10 & 4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65e48;
                        continue;
                    }
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x65e60;
                    continue;
                case 0x65f08:
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x65d20;
                    run_65c00(); return;
                case 0x65f14:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x65f24;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x65f24:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65de4;
                        run_65c00(); return;
                    }
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65dec;
                        run_65c00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x65584;
                    run_65400(); return;
                case 0x65f3c:
                    addr=r21+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r7 = r21 + -1;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff] = r7;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    writePages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff] = r11;
                    writePages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff] = r12;
                    /* Next insn is delay slot */ 
                    r31=0x65f64;
                    pc=0x64c00;
                    run_64c00(); return;
                case 0x65f64:
                    r7 = readPages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff];
                    r12 = readPages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff];
                    r21 = r7 + r0;
                    r11 = readPages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff];
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x658b0;
                    run_65800(); return;
                case 0x65f80:
                    r3 = r0 + -2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x65db0;
                        run_65c00(); return;
                    }
                    r21 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x65dd4;
                    run_65c00(); return;
                case 0x65f98:
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x65dd4;
                    run_65c00(); return;
                case 0x65fa4:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65584;
                        run_65400(); return;
                    }
                    r23 = r23 + r21;
                    /* Next insn is delay slot */ 
                    pc=0x65470;
                    run_65400(); return;
                case 0x65fb8:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x65fc8;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x65fc8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65510;
                        run_65400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x65584;
                    run_65400(); return;
                case 0x65fd8:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r23;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x6527c;
                    run_65200(); return;
                case 0x65ff0:
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x65ffc;
                    pc=0x5b000;
                    run_5b000(); return;
                case 0x65ffc:
                    r6 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                case 0x66000:
                    pc=0x66000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_66000() throws ExecutionException { /* 0x66000 - 0x66200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x66000:
                    if(r2 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x65584;
                        run_65400(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = r29 + 24;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r10 = r6 + 1;
                    r6 = r3 + r6;
                    addr=r6+256;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r4 + -1;
                    r2 = r29 + 320;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r7 = r10 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r21 + r0;
                    r6 = r29 + 280;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x6605c;
                    pc=0x5bc00;
                    run_5bc00(); return;
                case 0x6605c:
                    r3 = r0 + -1;
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x65584;
                        run_65400(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x660c4;
                        continue;
                    }
                    r3 = r0 + -2;
                    r6 = r10 + r0;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x66154;
                        continue;
                    }
                case 0x66084:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x657f8;
                        run_65600(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x660a8;
                    pc=0x64e00;
                    run_64e00(); return;
                case 0x660a8:
                    r6 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x657f8;
                        run_65600(); return;
                    }
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65584;
                        run_65400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x65828;
                    run_65800(); return;
                case 0x660c4:
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r0;
                    r4 = r0 + r0;
                case 0x660cc:
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x660d8;
                    pc=0x5a400;
                    run_5a400(); return;
                case 0x660d8:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x66128;
                        continue;
                    }
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x65828;
                        run_65800(); return;
                    }
                case 0x660ec:
                    r10 = r10 + -1;
                    r3 = r29 + 280;
                    r2 = r3 + r10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x66110;
                    pc=0x64c00;
                    run_64c00(); return;
                case 0x66110:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x660ec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x65828;
                    run_65800(); return;
                case 0x66128:
                    r23 = r23 + r10;
                    r22 = r22 + -1;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x66148;
                        continue;
                    }
                    r21 = r21 + 4;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x66084;
                    continue;
                case 0x66148:
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x66084;
                    continue;
                case 0x66154:
                    r4 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x660cc;
                    continue;
                case 0x66200:
                    pc=0x66200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_66200() throws ExecutionException { /* 0x66200 - 0x66400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x66200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x48460;
                    run_48400(); return;
                case 0x66400:
                    pc=0x66400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_66400() throws ExecutionException { /* 0x66400 - 0x66600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x66400:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x488d0;
                    run_48800(); return;
                case 0x66600:
                    pc=0x66600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_66600() throws ExecutionException { /* 0x66600 - 0x66800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x66600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48560;
                    run_48400(); return;
                case 0x66800:
                    pc=0x66800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_66800() throws ExecutionException { /* 0x66800 - 0x66a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x66800:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = r29 + 40;
                    r3 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r5 = r2 + r0;
                    r7 = r6 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x66838;
                    pc=0x48420;
                    run_48400(); return;
                case 0x66838:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x66a00:
                    pc=0x66a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_66a00() throws ExecutionException { /* 0x66a00 - 0x66c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x66a00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x484a0;
                    run_48400(); return;
                case 0x66c00:
                    pc=0x66c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_66c00() throws ExecutionException { /* 0x66c00 - 0x66e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x66c00:
                    r29 = r29 + -40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = readPages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff];
                    r2 = r16 + 64;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x66ca0;
                        continue;
                    }
                    r18 = readPages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff];
                    r19 = r18 << 1;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x66c48;
                    pc=0x3be00;
                    run_3be00(); return;
                case 0x66c48:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x66d0c;
                        continue;
                    }
                    r20 = r2 + r18;
                    r4 = r20 + r0;
                    r5 = r2 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x66c6c;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x66c6c:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r20;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r17;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r19;
                    r2 = r0 + r0;
                case 0x66c7c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x66ca0:
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x66cac;
                    pc=0x39600;
                    run_39600(); return;
                case 0x66cac:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x66d0c;
                        continue;
                    }
                    r3 = r0 + 1024;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r3;
                    addr=r16+66;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r2;
                    addr=r2+1023;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r16+65;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 + 1021;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r16+64;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x66d0c:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x66c7c;
                    continue;
                case 0x66e00:
                    pc=0x66e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_66e00() throws ExecutionException { /* 0x66e00 - 0x67000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x66e00:
                    r29 = r29 + -32;
                    r2 = r0 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r5 + r0;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x66f2c;
                        continue;
                    }
                    r17 = r4 + r0;
                    r16 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x66e44;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x66f38;
                        continue;
                    }
                case 0x66e44:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 8192;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x66e6c;
                        continue;
                    }
                    r4 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r3 = r0 + -8193;
                    r3 = r4 & r3;
                    r2 = r2 | 8192;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r3;
                case 0x66e6c:
                    r3 = r0 + -33;
                    r2 = r2 & r3;
                    r3 = r2 & 65535;
                    r4 = r3 & 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x66ea8;
                        continue;
                    }
                    r4 = r3 & 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x66f2c;
                        continue;
                    }
                    r3 = r3 & 8;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x66f48;
                        continue;
                    }
                    r2 = r2 | 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x66ea8:
                    r2 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r18 = r18 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x66f88;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x66f14;
                        continue;
                    }
                case 0x66ed0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = r18 + r0;
                case 0x66ef8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x66f14:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x66f24;
                    pc=0x66c00;
                    run_66c00(); return;
                case 0x66f24:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x66ed0;
                        continue;
                    }
                case 0x66f2c:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x66ef8;
                    continue;
                case 0x66f38:
                    /* Next insn is delay slot */ 
                    r31=0x66f40;
                    pc=0x35000;
                    run_35000(); return;
                case 0x66f40:
                    /* Next insn is delay slot */ 
                    pc=0x66e44;
                    continue;
                case 0x66f48:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x66f58;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x66f58:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x66f2c;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r2 = r2 & 65527;
                    r2 = r2 << 16;
                    r2 = r2 >> 16;
                    r2 = r2 | 4;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x66ea8;
                    continue;
                case 0x66f88:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x66fb4;
                        continue;
                    }
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x66fb4;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x67004;
                        run_67000(); return;
                    }
                case 0x66fb4:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    addr=r16+66;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff] = r2;
                    r2 = r16 + 64;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r2;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + 66;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff] = r3;
                    r2 = r18 + r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x67000:
                    pc=0x67000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_67000() throws ExecutionException { /* 0x67000 - 0x67200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x67000:
                case 0x67004:
                    r3 = r3 + -1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x66ef8;
                    run_66e00(); return;
                case 0x67200:
                    pc=0x67200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_67200() throws ExecutionException { /* 0x67200 - 0x67400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x67200:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x66e00;
                    run_66e00(); return;
                case 0x67400:
                    pc=0x67400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_67400() throws ExecutionException { /* 0x67400 - 0x67600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x67400:
                    r2 = readPages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff];
                    r29 = r29 + -56;
                    r2 = r2 & 8192;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r5 + r0;
                    r22 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67508;
                        continue;
                    }
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r23 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r21 = r0 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x674fc;
                        continue;
                    }
                case 0x67458:
                    r18 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r16 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    r18 = r18 >>> 2;
                    r17 = r0 + r0;
                    if(r18 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x67488;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x674e4;
                    continue;
                case 0x67478:
                    r17 = r17 + 1;
                    r16 = r16 + 4;
                    if(r18 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x674e0;
                        continue;
                    }
                case 0x67488:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6749c;
                    pc=0x69e00;
                    run_69e00(); return;
                case 0x6749c:
                    if(r2 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x67478;
                        continue;
                    }
                    r2 = r0 + -1;
                case 0x674a8:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r0;
                    writePages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff] = r0;
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x674e0:
                    r2 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                case 0x674e4:
                    r18 = r18 << 2;
                    r2 = r2 - r18;
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r23 = r23 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67458;
                        continue;
                    }
                case 0x674fc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x674a8;
                    continue;
                case 0x67508:
                    /* Next insn is delay slot */ 
                    r31=0x67510;
                    pc=0x59200;
                    run_59200(); return;
                case 0x67510:
                    /* Next insn is delay slot */ 
                    pc=0x674a8;
                    continue;
                case 0x67600:
                    pc=0x67600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_67600() throws ExecutionException { /* 0x67600 - 0x67800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x67600:
                    r3 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67618;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x67400;
                    run_67400(); return;
                case 0x67618:
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x67800:
                    pc=0x67800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_67800() throws ExecutionException { /* 0x67800 - 0x67a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x67800:
                    r29 = r29 + -1248;
                    writePages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff] = r23;
                    writePages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff] = r20;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r18;
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r31;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r30;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r22;
                    writePages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff] = r21;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r19;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r17;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r23 = r5 + r0;
                    r20 = r6 + r0;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r7;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67854;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6834c;
                        run_68200(); return;
                    }
                case 0x67854:
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67888;
                        continue;
                    }
                    r4 = readPages[(r23+100)>>>12][((r23+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r23+100)>>>12][((r23+100)>>>2)&0x3ff] = r2;
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x67888:
                    r4 = r2 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x681d4;
                        run_68000(); return;
                    }
                    r4 = readPages[(r23+16)>>>12][((r23+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x681d4;
                        run_68000(); return;
                    }
                    r2 = r2 & 26;
                    r4 = r0 + 10;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x68204;
                        run_68200(); return;
                    }
                case 0x678b4:
                    r3 = r29 + 1080;
                    writePages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff] = r3;
                    r4 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r3 = r29 + 1079;
                    r21 = r29 + 16;
                    r10 = 7 << 16;
                    writePages[(r29+1164)>>>12][((r29+1164)>>>2)&0x3ff] = r3;
                    r3 = r4 - r3;
                    writePages[(r29+1192)>>>12][((r29+1192)>>>2)&0x3ff] = r3;
                    writePages[(r29+1144)>>>12][((r29+1144)>>>2)&0x3ff] = r21;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r0;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r0;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r0;
                    r22 = r10 + 29176;
                    r3 = r21 + r0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r18;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r23;
                    r16 = r20 + r0;
                case 0x67900:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68928;
                        run_68800(); return;
                    }
                    r4 = r0 + 37;
                    r17 = r16 + r0;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x67930;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x67998;
                    continue;
                case 0x67928:
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x67944;
                        continue;
                    }
                case 0x67930:
                    r17 = r17 + 1;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67928;
                        continue;
                    }
                case 0x67944:
                    r19 = r17 - r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67998;
                        continue;
                    }
                    r2 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r4 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r19 + r4;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x679fc;
                        continue;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68840;
                        run_68800(); return;
                    }
                    r5 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r5 = r5 + r19;
                    r3 = r21 + r0;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r5;
                case 0x67998:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x689a0;
                        run_68800(); return;
                    }
                    r2 = r17 + 1;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r0 + r0;
                    r30 = r0 + -1;
                    r17 = r0 + r0;
                    r23 = r0 + r0;
                    r7 = r0 + 42;
                case 0x679c4:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r16 = r2 + 1;
                case 0x679cc:
                    r2 = r4 + -32;
                    r5 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6877c;
                        run_68600(); return;
                    }
                    r5 = 7 << 16;
                    r2 = r2 << 2;
                    r5 = r5 + 28804;
                    r2 = r5 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x679fc:
                    r3 = r3 + 8;
                case 0x67a00:
                    pc=0x67a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_67a00() throws ExecutionException { /* 0x67a00 - 0x67c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x67a00:
                    r5 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r5 = r5 + r19;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x67998;
                    run_67800(); return;
                case 0x67a18:
                    r23 = r23 | 16;
                case 0x67a1c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x679c4;
                    run_67800(); return;
                case 0x67a28:
                    r23 = r23 | 16;
                case 0x67a2c:
                    r2 = r23 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67e68;
                        run_67e00(); return;
                    }
                    r2 = r23 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67e68;
                        run_67e00(); return;
                    }
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x67a84;
                    continue;
                case 0x67a60:
                    r23 = r23 | 16;
                case 0x67a64:
                    r2 = r23 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x684e8;
                        run_68400(); return;
                    }
                case 0x67a70:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x67a84:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r30 + r0;
                    r5 = r0 + r0;
                case 0x67a90:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x67aa0;
                        continue;
                    }
                    r6 = r0 + -129;
                    r23 = r23 & r6;
                case 0x67aa0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67f50;
                        run_67e00(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67f50;
                        run_67e00(); return;
                    }
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68378;
                        run_68200(); return;
                    }
                case 0x67ab8:
                    r18 = r29 + 1080;
                case 0x67abc:
                    r2 = r19 < r30 ? 1 : 0;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r19;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ad0;
                        continue;
                    }
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r30;
                case 0x67ad0:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ae8;
                        continue;
                    }
                    r2 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r2;
                case 0x67ae8:
                    r15 = r23 & 2;
                    if(r15 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67b04;
                        continue;
                    }
                    r4 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r4 = r4 + 2;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r4;
                case 0x67b04:
                    r20 = r23 & 132;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ec4;
                        run_67e00(); return;
                    }
                    r5 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r9 = r17 - r5;
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ec4;
                        run_67e00(); return;
                    }
                    r2 = r9 < 17 ? 1 : 0;
                    r8 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68a54;
                        run_68a00(); return;
                    }
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r16;
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r25 = r0 + 16;
                    writePages[(r29+1196)>>>12][((r29+1196)>>>2)&0x3ff] = r15;
                    r16 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67b70;
                    continue;
                case 0x67b54:
                    r7 = r4 + 2;
                    r3 = r3 + 8;
                    r4 = r2 + r0;
                case 0x67b60:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67bb8;
                        continue;
                    }
                case 0x67b70:
                    r2 = r4 + 1;
                    r8 = r8 + 16;
                    r5 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r25;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r8;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67b54;
                        continue;
                    }
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67e88;
                        run_67e00(); return;
                    }
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    r4 = r0 + r0;
                    r7 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67b70;
                        continue;
                    }
                case 0x67bb8:
                    r9 = r16 + r0;
                    r15 = readPages[(r29+1196)>>>12][((r29+1196)>>>2)&0x3ff];
                    r16 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                case 0x67bc4:
                    r2 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                    r5 = r9 + r8;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r7 < 8 ? 1 : 0;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6835c;
                        run_68200(); return;
                    }
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r3 + 8;
                    r4 = r7 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ee0;
                        run_67e00(); return;
                    }
                case 0x67bfc:
                    if(r15 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67c38;
                        run_67c00(); return;
                    }
                case 0x67c00:
                    pc=0x67c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_67c00() throws ExecutionException { /* 0x67c00 - 0x67e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x67c00:
                    r2 = r29 + 1156;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r5 = r5 + 2;
                    r2 = r4 < 8 ? 1 : 0;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x682e0;
                        run_68200(); return;
                    }
                    r7 = r4 + r0;
                    r3 = r3 + 8;
                    r4 = r4 + 1;
                case 0x67c38:
                    r2 = r0 + 128;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x680bc;
                        run_68000(); return;
                    }
                case 0x67c44:
                    r20 = r30 - r19;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x67d0c;
                        continue;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68990;
                        run_68800(); return;
                    }
                    r4 = 7 << 16;
                    r8 = r4 + 29160;
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r16;
                    r30 = r0 + 16;
                    r16 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67c94;
                    continue;
                case 0x67c78:
                    r4 = r7 + 2;
                    r3 = r3 + 8;
                    r7 = r2 + r0;
                case 0x67c84:
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67cdc;
                        continue;
                    }
                case 0x67c94:
                    r2 = r7 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67c78;
                        continue;
                    }
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67f1c;
                        run_67e00(); return;
                    }
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67c94;
                        continue;
                    }
                case 0x67cdc:
                    r8 = r16 + r0;
                    r16 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                case 0x67ce4:
                    r5 = r5 + r20;
                    r2 = r4 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r8;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68080;
                        run_68000(); return;
                    }
                    r3 = r3 + 8;
                    r4 = r4 + 1;
                case 0x67d0c:
                    r14 = r19 + r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r14;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x680a4;
                        run_68000(); return;
                    }
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68814;
                        run_68800(); return;
                    }
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r3 = r21 + r0;
                case 0x67d3c:
                    r12 = r23 & 4;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67e0c;
                        run_67e00(); return;
                    }
                    r5 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r18 = r17 - r5;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x67e0c;
                        run_67e00(); return;
                    }
                    r2 = r18 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68aa8;
                        run_68a00(); return;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r19 = r0 + 16;
                    r20 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r23 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x67da0;
                    continue;
                case 0x67d84:
                    r5 = r4 + 2;
                    r3 = r3 + 8;
                    r4 = r2 + r0;
                case 0x67d90:
                    r18 = r18 + -16;
                    r2 = r18 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67de8;
                        continue;
                    }
                case 0x67da0:
                    r2 = r4 + 1;
                    r14 = r14 + 16;
                    r5 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r14;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67d84;
                        continue;
                    }
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6804c;
                        run_68000(); return;
                    }
                    r18 = r18 + -16;
                    r2 = r18 < 17 ? 1 : 0;
                    r4 = r0 + r0;
                    r5 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67da0;
                        continue;
                    }
                case 0x67de8:
                    r2 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                    r14 = r14 + r18;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r5;
                    r5 = r5 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r18;
                case 0x67e00:
                    pc=0x67e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_67e00() throws ExecutionException { /* 0x67e00 - 0x68000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x67e00:
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r14;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6871c;
                        run_68600(); return;
                    }
                case 0x67e0c:
                    r19 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r2 = r19 < r17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67e24;
                        continue;
                    }
                    r19 = r17 + r0;
                case 0x67e24:
                    r3 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = r3 + r19;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r3;
                    if(r14 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67e58;
                        continue;
                    }
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x67e50;
                    pc=0x67400;
                    run_67400(); return;
                case 0x67e50:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ff8;
                        continue;
                    }
                case 0x67e58:
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67900;
                    run_67800(); return;
                case 0x67e68:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x67a84;
                    run_67a00(); return;
                case 0x67e88:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r25;
                    /* Next insn is delay slot */ 
                    r31=0x67ea0;
                    pc=0x67400;
                    run_67400(); return;
                case 0x67ea0:
                    r25 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ff8;
                        continue;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r8 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r7 = r4 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67b60;
                    run_67a00(); return;
                case 0x67ec4:
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                case 0x67ed0:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67bfc;
                        run_67a00(); return;
                    }
                case 0x67ee0:
                    r2 = r29 + 1158;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r5 = r5 + 1;
                    r2 = r4 < 8 ? 1 : 0;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x682c4;
                        run_68200(); return;
                    }
                    r7 = r4 + r0;
                    r3 = r3 + 8;
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x67bfc;
                    run_67a00(); return;
                case 0x67f1c:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x67f30;
                    pc=0x67400;
                    run_67400(); return;
                case 0x67f30:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ff8;
                        continue;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67c84;
                    run_67c00(); return;
                case 0x67f50:
                    r6 = r0 + 1;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x682fc;
                        run_68200(); return;
                    }
                    r6 = r0 + 2;
                    r18 = r29 + 1080;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x67fa4;
                        continue;
                    }
                    r6 = readPages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff];
                case 0x67f70:
                    r4 = r2 & 15;
                    r4 = r6 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r18 = r18 + -1;
                    r2 = r2 >>> 4;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67f70;
                        continue;
                    }
                case 0x67f90:
                    r4 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r19 = r4 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x67abc;
                    run_67a00(); return;
                case 0x67fa4:
                    r4 = r2 & 7;
                    r18 = r18 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67fa4;
                        continue;
                    }
                    r2 = r23 & 1;
                    r6 = r18 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67fe4;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x67f90;
                        continue;
                    }
                    r18 = r18 + -1;
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x67fe4:
                    r2 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r19 = r2 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x67abc;
                    run_67a00(); return;
                case 0x67ff8:
                    r23 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                case 0x68000:
                    pc=0x68000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_68000() throws ExecutionException { /* 0x68000 - 0x68200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x68000:
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x680b0;
                        continue;
                    }
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                case 0x68018:
                    r31 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r30 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r23 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r22 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r21 = readPages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff];
                    r20 = readPages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff];
                    r19 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r18 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r17 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r16 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r29 = r29 + 1248;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6804c:
                    r4 = r20 + r0;
                    r5 = r23 + r0;
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x68060;
                    pc=0x67400;
                    run_67400(); return;
                case 0x68060:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68000;
                        continue;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r14 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67d90;
                    run_67c00(); return;
                case 0x68080:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x688f4;
                        run_68800(); return;
                    }
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r19;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    r14 = r19 + r0;
                    r3 = r21 + r0;
                case 0x680a4:
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x67d3c;
                    run_67c00(); return;
                case 0x680b0:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x68018;
                    continue;
                case 0x680bc:
                    r2 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r20 = r17 - r2;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x67c44;
                        run_67c00(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68ad4;
                        run_68a00(); return;
                    }
                    r4 = 7 << 16;
                    r8 = r4 + 29160;
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r16;
                    r9 = r0 + 16;
                    r16 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x68114;
                    continue;
                case 0x680f8:
                    r6 = r7 + 2;
                    r3 = r3 + 8;
                    r7 = r2 + r0;
                case 0x68104:
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6815c;
                        continue;
                    }
                case 0x68114:
                    r2 = r7 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x680f8;
                        continue;
                    }
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68198;
                        continue;
                    }
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    r7 = r0 + r0;
                    r6 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68114;
                        continue;
                    }
                case 0x6815c:
                    r8 = r16 + r0;
                    r16 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                case 0x68164:
                    r5 = r5 + r20;
                    r2 = r6 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r8;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x688d8;
                        run_68800(); return;
                    }
                    r3 = r3 + 8;
                    r4 = r6 + 1;
                    r7 = r6 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67c44;
                    run_67c00(); return;
                case 0x68198:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x681b0;
                    pc=0x67400;
                    run_67400(); return;
                case 0x681b0:
                    r9 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ff8;
                        run_67e00(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r6 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x68104;
                    continue;
                case 0x681d4:
                    r4 = r18 + r0;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x681e4;
                    pc=0x48200;
                    run_48200(); return;
                case 0x681e4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x680b0;
                        continue;
                    }
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 10;
                    r2 = r3 & 65535;
                    r2 = r2 & 26;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x678b4;
                        run_67800(); return;
                    }
                case 0x68200:
                    pc=0x68200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_68200() throws ExecutionException { /* 0x68200 - 0x68400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x68200:
                case 0x68204:
                    addr=r23+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x678b4;
                        run_67800(); return;
                    }
                    addr=r29+1054;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r23+28)>>>12][((r23+28)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r23+36)>>>12][((r23+36)>>>2)&0x3ff];
                    r3 = r3 & r4;
                    addr=r29+1052;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r23+100)>>>12][((r23+100)>>>2)&0x3ff];
                    r2 = r29 + 16;
                    r7 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    writePages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff] = r2;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r2;
                    r4 = r18 + r0;
                    r2 = r0 + 1024;
                    r5 = r29 + 1040;
                    r6 = r20 + r0;
                    writePages[(r29+1140)>>>12][((r29+1140)>>>2)&0x3ff] = r3;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r2;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r2;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x68270;
                    pc=0x67800;
                    run_67800(); return;
                case 0x68270:
                    r21 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x68294;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r29 + 1040;
                    /* Next insn is delay slot */ 
                    r31=0x6828c;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x6828c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68b20;
                        run_68a00(); return;
                    }
                case 0x68294:
                    addr=r29+1052;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x682b8;
                        continue;
                    }
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x682b8:
                    r2 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x68018;
                    run_68000(); return;
                case 0x682c4:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68868;
                        run_68800(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67bfc;
                    run_67a00(); return;
                case 0x682e0:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x688a4;
                        run_68800(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67c38;
                    run_67c00(); return;
                case 0x682fc:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68754;
                        run_68600(); return;
                    }
                    r18 = r29 + 1080;
                    r4 = r0 + 10;
                case 0x68310:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x6831c;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x6831c:
                    r18 = r18 + -1;
                    r6 = hi;
                    r6 = r6 + 48;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68310;
                        continue;
                    }
                    r2 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r19 = r2 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x67abc;
                    run_67a00(); return;
                case 0x6834c:
                    /* Next insn is delay slot */ 
                    r31=0x68354;
                    pc=0x35000;
                    run_35000(); return;
                case 0x68354:
                    /* Next insn is delay slot */ 
                    pc=0x67854;
                    run_67800(); return;
                case 0x6835c:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x687ac;
                        run_68600(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67ed0;
                    run_67e00(); return;
                case 0x68378:
                    r2 = r23 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ab8;
                        run_67a00(); return;
                    }
                    r2 = r0 + 48;
                    addr=r29+1079;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+1192)>>>12][((r29+1192)>>>2)&0x3ff];
                    r18 = r29 + 1079;
                    /* Next insn is delay slot */ 
                    pc=0x67abc;
                    run_67a00(); return;
                case 0x6839c:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x6876c;
                        run_68600(); return;
                    }
                    r17 = r0 - r17;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r2;
                case 0x683bc:
                    r23 = r23 | 4;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x679c4;
                    run_67800(); return;
                case 0x683cc:
                    r6 = r0 + 43;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x679c4;
                    run_67800(); return;
                case 0x683dc:
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x687e8;
                        run_68600(); return;
                    }
                    r12 = r23 & 64;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x687e8;
                        run_68600(); return;
                    }
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                case 0x68400:
                    pc=0x68400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_68400() throws ExecutionException { /* 0x68400 - 0x68600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x68400:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r4&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x67900;
                    run_67800(); return;
                case 0x68418:
                    r2 = 7 << 16;
                    r2 = r2 + 19716;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r2;
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x685c8;
                        continue;
                    }
                case 0x68434:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x68448:
                    r5 = r23 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68808;
                        run_68800(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68808;
                        run_68800(); return;
                    }
                    r5 = r0 + 48;
                    addr=r29+1157;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1156;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 | 2;
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x67a84;
                    run_67a00(); return;
                case 0x68478:
                    r23 = r23 | 64;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x679c4;
                    run_67800(); return;
                case 0x68488:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r5 = r16 + 1;
                    if(r4 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x68af4;
                        run_68a00(); return;
                    }
                    r2 = r4 + -48;
                    r8 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r30 = r0 + r0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x684dc;
                        continue;
                    }
                case 0x684ac:
                    r4 = r30 << 1;
                    r5 = r5 + 1;
                    r30 = r30 << 3;
                    r30 = r4 + r30;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r30 = r2 + r30;
                    r2 = r4 + -48;
                    r8 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x684ac;
                        continue;
                    }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x68980;
                        run_68800(); return;
                    }
                case 0x684dc:
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x679cc;
                    run_67800(); return;
                case 0x684e8:
                    r2 = r23 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67a70;
                        run_67a00(); return;
                    }
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r4 = r4 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67a84;
                    run_67a00(); return;
                case 0x68514:
                    r23 = r23 | 128;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x679c4;
                    run_67800(); return;
                case 0x68524:
                    r17 = r0 + r0;
                    r2 = r4 + -48;
                case 0x6852c:
                    r4 = r17 << 1;
                    r16 = r16 + 1;
                    r17 = r17 << 3;
                    r17 = r4 + r17;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r17 = r17 + r2;
                    r2 = r4 + -48;
                    r5 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6852c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x679cc;
                    run_67800(); return;
                case 0x6855c:
                    r23 = r23 | 16;
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68630;
                        run_68600(); return;
                    }
                case 0x68570:
                    r2 = r23 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68630;
                        run_68600(); return;
                    }
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x68590:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x68934;
                        run_68800(); return;
                    }
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r19 = r30 + r0;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x67a90;
                    run_67a00(); return;
                case 0x685ac:
                    r2 = 7 << 16;
                    r2 = r2 + 19696;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r2;
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68434;
                        continue;
                    }
                case 0x685c8:
                    r2 = r23 & 64;
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68954;
                        run_68800(); return;
                    }
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x68448;
                    continue;
                case 0x685ec:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    addr=r29+1040;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x68600:
                    pc=0x68600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_68600() throws ExecutionException { /* 0x68600 - 0x68800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x68600:
                    r2 = r0 + 1;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r2;
                    r19 = r0 + 1;
                    r18 = r29 + 1040;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67ae8;
                    run_67a00(); return;
                case 0x68620:
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68570;
                        run_68400(); return;
                    }
                case 0x68630:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x68590;
                    run_68400(); return;
                case 0x6864c:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67a1c;
                        run_67a00(); return;
                    }
                    r6 = r0 + 32;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x679c4;
                    run_67800(); return;
                case 0x68664:
                    r23 = r23 | 1;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x679c4;
                    run_67800(); return;
                case 0x68674:
                    r2 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r18 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r20 = r2 + 4;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68a68;
                        run_68a00(); return;
                    }
                    r4 = r18 + r0;
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x689f8;
                        run_68800(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x686ac;
                    pc=0x3a000;
                    run_3a000(); return;
                case 0x686ac:
                    r3 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68abc;
                        run_68a00(); return;
                    }
                    r19 = r2 - r18;
                    r2 = r30 < r19 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68974;
                        run_68800(); return;
                    }
                case 0x686c8:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67abc;
                    run_67a00(); return;
                case 0x686dc:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    addr=r29+1156;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r0 + 120;
                    addr=r29+1157;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = 7 << 16;
                    r4 = r4 + 19716;
                    r5 = r5 + 4;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r4;
                    r23 = r23 | 2;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x67a84;
                    run_67a00(); return;
                case 0x6871c:
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x689d0;
                        run_68800(); return;
                    }
                    r19 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r2 = r19 < r17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68968;
                        run_68800(); return;
                    }
                case 0x68738:
                    r3 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r3 = r3 + r19;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r3;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67900;
                    run_67800(); return;
                case 0x68754:
                    r2 = r2 + 48;
                    addr=r29+1079;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+1192)>>>12][((r29+1192)>>>2)&0x3ff];
                    r18 = r29 + 1079;
                    /* Next insn is delay slot */ 
                    pc=0x67abc;
                    run_67a00(); return;
                case 0x6876c:
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r2;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x679c4;
                    run_67800(); return;
                case 0x6877c:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x689a0;
                        run_68800(); return;
                    }
                    r5 = r0 + 1;
                    addr=r29+1040;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r5;
                    r19 = r0 + 1;
                    r18 = r29 + 1040;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67ae8;
                    run_67a00(); return;
                case 0x687ac:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r15;
                    /* Next insn is delay slot */ 
                    r31=0x687c4;
                    pc=0x67400;
                    run_67400(); return;
                case 0x687c4:
                    r15 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ff8;
                        run_67e00(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67ed0;
                    run_67e00(); return;
                case 0x687e8:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x68800:
                    pc=0x68800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_68800() throws ExecutionException { /* 0x68800 - 0x68a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x68800:
                    /* Next insn is delay slot */ 
                    pc=0x67900;
                    run_67800(); return;
                case 0x68808:
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x67a84;
                    run_67a00(); return;
                case 0x68814:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x68828;
                    pc=0x67400;
                    run_67400(); return;
                case 0x68828:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ff8;
                        run_67e00(); return;
                    }
                    r14 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67d3c;
                    run_67c00(); return;
                case 0x68840:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x68854;
                    pc=0x67400;
                    run_67400(); return;
                case 0x68854:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ff8;
                        run_67e00(); return;
                    }
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67a00;
                    run_67a00(); return;
                case 0x68868:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r15;
                    /* Next insn is delay slot */ 
                    r31=0x68880;
                    pc=0x67400;
                    run_67400(); return;
                case 0x68880:
                    r15 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ff8;
                        run_67e00(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67bfc;
                    run_67a00(); return;
                case 0x688a4:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x688b8;
                    pc=0x67400;
                    run_67400(); return;
                case 0x688b8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ff8;
                        run_67e00(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67c38;
                    run_67c00(); return;
                case 0x688d8:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68a20;
                        run_68a00(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67c44;
                    run_67c00(); return;
                case 0x688f4:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x68908;
                    pc=0x67400;
                    run_67400(); return;
                case 0x68908:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ff8;
                        run_67e00(); return;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67d0c;
                    run_67c00(); return;
                case 0x68928:
                    r17 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67998;
                    run_67800(); return;
                case 0x68934:
                    r4 = r0 + 45;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    r19 = r30 + r0;
                    r5 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x67a90;
                    run_67a00(); return;
                case 0x68954:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x68448;
                    run_68400(); return;
                case 0x68968:
                    r19 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x68738;
                    run_68600(); return;
                case 0x68974:
                    r19 = r30 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x686c8;
                    run_68600(); return;
                case 0x68980:
                    r30 = r0 + -1;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x679cc;
                    run_67800(); return;
                case 0x68990:
                    r2 = 7 << 16;
                    r8 = r2 + 29160;
                    /* Next insn is delay slot */ 
                    pc=0x67ce4;
                    run_67c00(); return;
                case 0x689a0:
                    r2 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r18 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r23 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68000;
                        run_68000(); return;
                    }
                    r4 = r18 + r0;
                    r5 = r23 + r0;
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x689c8;
                    pc=0x67400;
                    run_67400(); return;
                case 0x689c8:
                    /* Next insn is delay slot */ 
                    pc=0x68000;
                    run_68000(); return;
                case 0x689d0:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x689e4;
                    pc=0x67400;
                    run_67400(); return;
                case 0x689e4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ff8;
                        run_67e00(); return;
                    }
                    r14 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x67e0c;
                    run_67e00(); return;
                case 0x689f8:
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x68a04;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x68a00:
                    pc=0x68a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_68a00() throws ExecutionException { /* 0x68a00 - 0x68c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x68a00:
                case 0x68a04:
                    r19 = r2 + r0;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    r3 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x67abc;
                    run_67a00(); return;
                case 0x68a20:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x68a34;
                    pc=0x67400;
                    run_67400(); return;
                case 0x68a34:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x67ff8;
                        run_67e00(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67c44;
                    run_67c00(); return;
                case 0x68a54:
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r7 = r7 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x67bc4;
                    run_67a00(); return;
                case 0x68a68:
                    r2 = (r30&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r13 = r30 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68a7c;
                        continue;
                    }
                    r13 = r0 + 6;
                case 0x68a7c:
                    r19 = r13 + r0;
                    r2 = r13 + r0;
                    if(r13 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x68ae8;
                        continue;
                    }
                case 0x68a8c:
                    r10 = 7 << 16;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r2;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r18 = r10 + 24084;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67ae8;
                    run_67a00(); return;
                case 0x68aa8:
                    r5 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r5 = r5 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x67de8;
                    run_67c00(); return;
                case 0x68abc:
                    r19 = r30 + r0;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67abc;
                    run_67a00(); return;
                case 0x68ad4:
                    r2 = 7 << 16;
                    r6 = r4 + r0;
                    r8 = r2 + 29160;
                    /* Next insn is delay slot */ 
                    pc=0x68164;
                    run_68000(); return;
                case 0x68ae8:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x68a8c;
                    continue;
                case 0x68af4:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r16 = r5 + r0;
                    r30 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x6876c;
                        run_68600(); return;
                    }
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r2;
                    r30 = r0 + -1;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x679c4;
                    run_67800(); return;
                case 0x68b20:
                    r21 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x68294;
                    run_68200(); return;
                case 0x68c00:
                    pc=0x68c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_68c00() throws ExecutionException { /* 0x68c00 - 0x68e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x68c00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x67800;
                    run_67800(); return;
                case 0x68e00:
                    pc=0x68e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_68e00() throws ExecutionException { /* 0x68e00 - 0x69000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x68e00:
                    r29 = r29 + -136;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r17;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r6 + r0;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x68ee4;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68e9c;
                        continue;
                    }
                    r2 = r0 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x68e64;
                    pc=0x41200;
                    run_41200(); return;
                case 0x68e64:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68ed4;
                        continue;
                    }
                case 0x68e70:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68e84;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x68e84:
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r17 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r16 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x68e9c:
                    r2 = r6 + -1;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x68ec8;
                    pc=0x41200;
                    run_41200(); return;
                case 0x68ec8:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x68e70;
                        continue;
                    }
                case 0x68ed4:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x68e70;
                    continue;
                case 0x68ee4:
                    r2 = r0 + 139;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x68e84;
                    continue;
                case 0x69000:
                    pc=0x69000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_69000() throws ExecutionException { /* 0x69000 - 0x69200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x69000:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x69030;
                    pc=0x68e00;
                    run_68e00(); return;
                case 0x69030:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x69200:
                    pc=0x69200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_69200() throws ExecutionException { /* 0x69200 - 0x69400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x69200:
                    r29 = r29 + -128;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r5 = r29 + 16;
                    r2 = r0 + -1;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r31;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x6923c;
                    pc=0x41200;
                    run_41200(); return;
                case 0x6923c:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r29 = r29 + 128;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x69400:
                    pc=0x69400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_69400() throws ExecutionException { /* 0x69400 - 0x69600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x69400:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x69200;
                    run_69200(); return;
                case 0x69600:
                    pc=0x69600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_69600() throws ExecutionException { /* 0x69600 - 0x69800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x69600:
                    r29 = r29 + -88;
                    r5 = r29 + 16;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x69614;
                    pc=0x66600;
                    run_66600(); return;
                case 0x69614:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x69668;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 8192;
                    r3 = r3 & 61440;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x69654;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x69638;
                    pc=0x33200;
                    run_33200(); return;
                case 0x69638:
                    r3 = r0 + 25;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                case 0x69644:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x69654:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x69668:
                    /* Next insn is delay slot */ 
                    r31=0x69670;
                    pc=0x33200;
                    run_33200(); return;
                case 0x69670:
                    r3 = r0 + 9;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x69644;
                    continue;
                case 0x69800:
                    pc=0x69800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_69800() throws ExecutionException { /* 0x69800 - 0x69a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x69800:
                    { long hilo = (long)(r5) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    r5 = lo;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x69834;
                    pc=0x3b000;
                    run_3b000(); return;
                case 0x69834:
                    r2 = 7 << 16;
                    r18 = readPages[(r2+30344)>>>12][((r2+30344)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r20 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x69850;
                    pc=0x39600;
                    run_39600(); return;
                case 0x69850:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6997c;
                        continue;
                    }
                    r19 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r16 + -8;
                    r2 = r0 + -4;
                    r19 = r19 & r2;
                    if(r18 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x6994c;
                        continue;
                    }
                case 0x69874:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x69880;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x69880:
                    r6 = r19 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x69908;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x698d4;
                        continue;
                    }
                    r2 = r16 + r0;
                case 0x698a0:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x698b0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x698d4:
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x69940;
                        continue;
                    }
                    r2 = r0 + 36;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r0;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x69968;
                        continue;
                    }
                    r2 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x698a0;
                    continue;
                case 0x69908:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x69918;
                    pc=0x48bec;
                    run_48a00(); return;
                case 0x69918:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x69940:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x698a0;
                    continue;
                case 0x6994c:
                    r2 = r20 & r2;
                    r3 = ((r2 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x69874;
                        continue;
                    }
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x69874;
                    continue;
                case 0x69968:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    r2 = r16 + 24;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x698a0;
                    continue;
                case 0x6997c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x69988;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x69988:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x698b0;
                    continue;
                case 0x69a00:
                    pc=0x69a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_69a00() throws ExecutionException { /* 0x69a00 - 0x69c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x69a00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x69c00:
                    pc=0x69c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_69c00() throws ExecutionException { /* 0x69c00 - 0x69e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x69c00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x69e00:
                    pc=0x69e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_69e00() throws ExecutionException { /* 0x69e00 - 0x6a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x69e00:
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -56;
                    r3 = r2 & 8192;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x69e54;
                        continue;
                    }
                    r2 = r2 | 8192;
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+100)>>>12][((r6+100)>>>2)&0x3ff];
                    r2 = r2 | 8192;
                    writePages[(r6+100)>>>12][((r6+100)>>>2)&0x3ff] = r2;
                case 0x69e54:
                    /* Next insn is delay slot */ 
                    r31=0x69e5c;
                    pc=0x5b000;
                    run_5b000(); return;
                case 0x69e5c:
                    r3 = r0 + 1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x69fc4;
                        continue;
                    }
                case 0x69e68:
                    r4 = r19 + r0;
                    r5 = r29 + 16;
                    r6 = r18 + r0;
                    r7 = r16 + 92;
                    /* Next insn is delay slot */ 
                    r31=0x69e80;
                    pc=0x6b800;
                    run_6b800(); return;
                case 0x69e80:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x69f58;
                        continue;
                    }
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x69f4c;
                        continue;
                    }
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x69e9c:
                    r17 = r0 + r0;
                    r21 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x69ee4;
                    continue;
                case 0x69eac:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                case 0x69ec8:
                    r17 = r17 + 1;
                    r3 = ((r17 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x69f4c;
                        continue;
                    }
                case 0x69ed8:
                    r2 = r29 + 16;
                    r3 = r2 + r17;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x69ee4:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x69eac;
                        continue;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r3 = r3 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x69f94;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x69fec;
                        continue;
                    }
                    r17 = r17 + 1;
                    r2 = r2 + 1;
                    r3 = ((r17 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x69ed8;
                        continue;
                    }
                case 0x69f4c:
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x69f6c;
                    continue;
                case 0x69f58:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                case 0x69f6c:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x69f94:
                    r4 = r19 + r0;
                    r5 = r5 & 255;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x69fa8;
                    pc=0x47e00;
                    run_47e00(); return;
                case 0x69fa8:
                    r2 = r2 + 1;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                case 0x69fb0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x69ec8;
                        continue;
                    }
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x69f6c;
                    continue;
                case 0x69fc4:
                    r2 = r18 + -1;
                    r2 = (r2&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x69e68;
                        continue;
                    }
                    r5 = r18 << 24;
                    r5 = r5 >> 24;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x69e9c;
                    continue;
                case 0x69fec:
                    r4 = r19 + r0;
                    r5 = r0 + 10;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6a000;
                    pc=0x47e00;
                    run_47e00(); return;
                case 0x6a000:
                    pc=0x6a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_6a000() throws ExecutionException { /* 0x6a000 - 0x6a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x6a000:
                    r2 = r2 + 1;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=0x69fb0;
                    run_69e00(); return;
                case 0x6a200:
                    pc=0x6a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_6a200() throws ExecutionException { /* 0x6a200 - 0x6a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x6a200:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r6 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a25c;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a244;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x6a23c;
                    pc=0x35000;
                    run_35000(); return;
                case 0x6a23c:
                    r4 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x6a244:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x69e00;
                    run_69e00(); return;
                case 0x6a25c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x69e00;
                    run_69e00(); return;
                case 0x6a400:
                    pc=0x6a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_6a400() throws ExecutionException { /* 0x6a400 - 0x6a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x6a400:
                    r7 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r5 >> 5;
                    r6 = r2 < r7 ? 1 : 0;
                    r3 = r4 + 20;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a4bc;
                        continue;
                    }
                    r7 = r7 << 2;
                    r2 = r2 << 2;
                    r5 = r5 & 31;
                    r7 = r3 + r7;
                    r11 = r3 + r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a4cc;
                        continue;
                    }
                    r2 = r11 + 4;
                    r8 = readPages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff];
                    r10 = r0 + 32;
                    r6 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r10 = r10 - r5;
                    r8 = r8 >>> (r5&0x1f);
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a524;
                        continue;
                    }
                    r6 = r3 + r0;
                case 0x6a458:
                    r9 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    r9 = r9 << (r10&0x1f);
                    r8 = r8 | r9;
                    r2 = r2 + 4;
                    writePages[(r6+-4)>>>12][((r6+-4)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r9 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r8 = r8 >>> (r5&0x1f);
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a458;
                        continue;
                    }
                    r2 = r7 - r11;
                    r2 = r2 + -5;
                    r2 = r2 >>> 2;
                    r2 = r2 + 1;
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                case 0x6a49c:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r8;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a4ac;
                        continue;
                    }
                    r2 = r2 + 4;
                case 0x6a4ac:
                    r3 = r2 - r3;
                    r3 = r3 >> 2;
                    /* Next insn is delay slot */ 
                    pc=0x6a510;
                    continue;
                case 0x6a4bc:
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r0;
                case 0x6a4c0:
                    writePages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6a4cc:
                    r2 = ((r11 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a4bc;
                        continue;
                    }
                    r2 = r11 + r0;
                case 0x6a4dc:
                    r2 = r2 + 4;
                    r5 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r5;
                    r5 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a4dc;
                        continue;
                    }
                    r3 = ~(r0 | r11);
                    r3 = r3 + r7;
                    r3 = r3 >>> 2;
                    r3 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r3 >> 2;
                case 0x6a510:
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a4c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6a524:
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x6a49c;
                    continue;
                case 0x6a600:
                    pc=0x6a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_6a600() throws ExecutionException { /* 0x6a600 - 0x6a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x6a600:
                    r5 = 7 << 16;
                    r2 = 19 << 16;
                    r5 = r5 + 29209;
                    r4 = r0 + 16;
                    r3 = r0 + 48;
                    r2 = r2 + -19712;
                case 0x6a618:
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r4 + 1;
                    r4 = r4 & 255;
                    r5 = r5 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a618;
                        continue;
                    }
                    r5 = 7 << 16;
                    r5 = r5 + 29201;
                    r4 = r0 + 26;
                    r3 = r0 + 97;
                case 0x6a648:
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r4 + 1;
                    r4 = r4 & 255;
                    r5 = r5 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a648;
                        continue;
                    }
                    r5 = 7 << 16;
                    r5 = r5 + 29193;
                    r4 = r0 + 26;
                    r3 = r0 + 65;
                case 0x6a678:
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r4 + 1;
                    r4 = r4 & 255;
                    r5 = r5 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a678;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6a800:
                    pc=0x6a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_6a800() throws ExecutionException { /* 0x6a800 - 0x6aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x6a800:
                    r29 = r29 + -88;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r21;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r4;
                    r19 = r5 + r0;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r6;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r7;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r30;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r23;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r22;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x6a844;
                    pc=0x5b600;
                    run_5b600(); return;
                case 0x6a844:
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6a858;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x6a858:
                    r9 = 19 << 16;
                    r18 = r2 + r0;
                    r20 = r9 + -19712;
                    r2 = r17 + r2;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r21 = tmp;
                    addr=r20+48;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6ad30;
                        run_6ac00(); return;
                    }
                case 0x6a87c:
                    r3 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r2 = r0 + 48;
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r23 = r3 + 2;
                    if(r8 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x6b030;
                        run_6b000(); return;
                    }
                    r3 = r3 + 3;
                    r22 = r0 + r0;
                case 0x6a89c:
                    r23 = r3 + r0;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r22 = r22 + 1;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x6a89c;
                        continue;
                    }
                case 0x6a8b4:
                    r8 = r20 + r8;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6acac;
                        run_6ac00(); return;
                    }
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r0 + r0;
                    r2 = r2 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r30 = r0 + r0;
                case 0x6a8dc:
                    r16 = r23 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a908;
                        continue;
                    }
                case 0x6a8e8:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a8e8;
                        continue;
                    }
                case 0x6a908:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x6a920;
                    pc=0x61000;
                    run_61000(); return;
                case 0x6a920:
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a9a8;
                        continue;
                    }
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b06c;
                        run_6b000(); return;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x6a938:
                    r30 = r30 - r16;
                    r30 = r30 << 2;
                case 0x6a940:
                    r3 = r0 + 80;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x6a9c0;
                        continue;
                    }
                case 0x6a94c:
                    r3 = r0 + 112;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x6a9c0;
                        continue;
                    }
                case 0x6a958:
                    r2 = r16 + r0;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6aa68;
                        run_6aa00(); return;
                    }
                case 0x6a968:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6af74;
                        run_6ae00(); return;
                    }
                    r2 = r0 + 6;
                case 0x6a974:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r30 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r23 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r22 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6a9a8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a938;
                        continue;
                    }
                    r3 = r0 + 80;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x6a94c;
                        continue;
                    }
                case 0x6a9c0:
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r0 + 43;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x6af80;
                        run_6ae00(); return;
                    }
                    r3 = r0 + 45;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x6aefc;
                        run_6ae00(); return;
                    }
                    r4 = r16 + 1;
                    r6 = r0 + r0;
                case 0x6a9e4:
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r3 + -1;
                    r2 = (r2&0xffffffffL) < (25&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a958;
                        continue;
                    }
                case 0x6aa00:
                    pc=0x6aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_6aa00() throws ExecutionException { /* 0x6aa00 - 0x6ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x6aa00:
                    r2 = r4 + 1;
                    r3 = r3 + -16;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x6aa30;
                    continue;
                case 0x6aa14:
                    r5 = r3 << 1;
                    r3 = r3 << 3;
                    r3 = r5 + r3;
                    r2 = r2 + 1;
                    r3 = r3 + r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r3 + -16;
                case 0x6aa30:
                    r4 = r4 + r20;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r5 = r4 + -1;
                    r5 = (r5&0xffffffffL) < (25&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6aa14;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6aa58;
                        continue;
                    }
                    r3 = r0 - r3;
                case 0x6aa58:
                    r30 = r30 + r3;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a968;
                        run_6a800(); return;
                    }
                case 0x6aa68:
                    r2 = r16 - r23;
                    r2 = r2 + -1;
                    r3 = r2 < 8 ? 1 : 0;
                    r5 = r0 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6aa94;
                        continue;
                    }
                case 0x6aa80:
                    r2 = r2 >> 1;
                    r3 = r2 < 8 ? 1 : 0;
                    r5 = r5 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6aa80;
                        continue;
                    }
                case 0x6aa94:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x6aaa0;
                    pc=0x5c600;
                    run_5c600(); return;
                case 0x6aaa0:
                    r19 = r2 + 20;
                    r22 = r2 + r0;
                    r2 = ((r23 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    r11 = r19 + r0;
                    r8 = r0 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6aba0;
                        continue;
                    }
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r14 = r0 + 1;
                    r3 = r0 + r0;
                    r14 = r14 - r18;
                    r12 = r0 + 32;
                    r7 = r16 + -1;
                    if(r6 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x6ab2c;
                        continue;
                    }
                case 0x6aadc:
                    if(r3 == r12) {
                        /* Next insn is delay slot */ 
                        pc=0x6ac90;
                        run_6ac00(); return;
                    }
                    r2 = r3 + r0;
                    r3 = r3 + 4;
                case 0x6aaec:
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r20 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r6 = r6 & 15;
                    r6 = r6 << (r2&0x1f);
                    r8 = r8 | r6;
                    r6 = ((r23 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6aba0;
                        continue;
                    }
                case 0x6ab18:
                    r16 = r7 + r0;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r7 = r16 + -1;
                    if(r6 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x6aadc;
                        continue;
                    }
                case 0x6ab2c:
                    r15 = r7 + r14;
                    r2 = ((r15 & 0xffffffffL) < (r23 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6aadc;
                        continue;
                    }
                    r4 = r15 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r8;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r11;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r12;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r14;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r15;
                    /* Next insn is delay slot */ 
                    r31=0x6ab6c;
                    pc=0x61000;
                    run_61000(); return;
                case 0x6ab6c:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r8 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r11 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r12 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r14 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r15 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6aadc;
                        continue;
                    }
                    r7 = r15 + r0;
                    r6 = ((r23 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6ab18;
                        continue;
                    }
                case 0x6aba0:
                    r2 = r11 + 4;
                    r2 = r2 - r19;
                    r2 = r2 >> 2;
                    writePages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff] = r8;
                    r4 = r8 + r0;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r16 = r2 << 5;
                    /* Next insn is delay slot */ 
                    r31=0x6abc4;
                    pc=0x5ce00;
                    run_5ce00(); return;
                case 0x6abc4:
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = r16 - r2;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r16 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6af8c;
                        run_6ae00(); return;
                    }
                    r3 = r2 < r16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b000;
                        run_6b000(); return;
                    }
                    r17 = r0 + r0;
                case 0x6abf0:
                    r4 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                case 0x6ac00:
                    pc=0x6ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_6ac00() throws ExecutionException { /* 0x6ac00 - 0x6ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x6ac00:
                    r3 = r3 < r30 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6aed4;
                        run_6ae00(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r3 = r30 < r2 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6af28;
                        run_6ae00(); return;
                    }
                    r30 = r2 - r30;
                    r3 = r30 < r16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6ad40;
                        continue;
                    }
                    r4 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r4 = r0 + 2;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x6b11c;
                        run_6b000(); return;
                    }
                    r4 = r0 + 3;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x6b0cc;
                        run_6b000(); return;
                    }
                    r4 = r0 + 1;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x6b134;
                        run_6b000(); return;
                    }
                case 0x6ac68:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6ac78;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x6ac78:
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r2 = r0 + 80;
                    /* Next insn is delay slot */ 
                    pc=0x6a974;
                    run_6a800(); return;
                case 0x6ac90:
                    writePages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff] = r8;
                    r3 = r0 + 4;
                    r11 = r11 + 4;
                    r8 = r0 + r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x6aaec;
                    run_6aa00(); return;
                case 0x6acac:
                    r4 = r23 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6acc0;
                    pc=0x61000;
                    run_61000(); return;
                case 0x6acc0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6af10;
                        run_6ae00(); return;
                    }
                    r16 = r23 + r18;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r2 + r20;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b03c;
                        run_6b000(); return;
                    }
                    r4 = r0 + 48;
                    r23 = r16 + r0;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x6ad1c;
                        continue;
                    }
                    r3 = r0 + 48;
                case 0x6acfc:
                    r23 = r23 + 1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x6acfc;
                        continue;
                    }
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                case 0x6ad1c:
                    r7 = (r3&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r30 = r16 + r0;
                    r22 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x6a8dc;
                    run_6a800(); return;
                case 0x6ad30:
                    /* Next insn is delay slot */ 
                    r31=0x6ad38;
                    pc=0x6a600;
                    run_6a600(); return;
                case 0x6ad38:
                    /* Next insn is delay slot */ 
                    pc=0x6a87c;
                    run_6a800(); return;
                case 0x6ad40:
                    r18 = r30 + -1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b0c0;
                        run_6b000(); return;
                    }
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x6ad68;
                        continue;
                    }
                    r4 = r22 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6ad64;
                    pc=0x5ec00;
                    run_5ec00(); return;
                case 0x6ad64:
                    r17 = r2 + r0;
                case 0x6ad68:
                    r2 = r18 >> 5;
                    r2 = r2 << 2;
                    r2 = r19 + r2;
                    r3 = r0 + 1;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r18 = r3 << (r18&0x1f);
                    r2 = r18 & r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6ad90;
                        continue;
                    }
                    r17 = r17 | 2;
                case 0x6ad90:
                    r5 = r30 + r0;
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6ada0;
                    pc=0x6a400;
                    run_6a400(); return;
                case 0x6ada0:
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r16 = r16 - r30;
                    r30 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r18 = r0 + 2;
                case 0x6adb0:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6af58;
                        run_6ae00(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r3 = r0 + 2;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x6af34;
                        run_6ae00(); return;
                    }
                    r3 = r0 + 3;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x6af44;
                        run_6ae00(); return;
                    }
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x6af54;
                        run_6ae00(); return;
                    }
                    r2 = r17 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6af54;
                        run_6ae00(); return;
                    }
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r2 = r17 | r2;
                case 0x6ae00:
                    pc=0x6ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_6ae00() throws ExecutionException { /* 0x6ae00 - 0x6b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x6ae00:
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6af54;
                        continue;
                    }
                case 0x6ae0c:
                    r17 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r3 = r19 + r0;
                    r23 = r17 << 2;
                    r5 = r19 + r23;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x6ae3c;
                    continue;
                case 0x6ae28:
                    r3 = r3 + 4;
                    r4 = ((r3 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b174;
                        run_6b000(); return;
                    }
                case 0x6ae3c:
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x6ae28;
                        continue;
                    }
                    r4 = r4 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    r2 = r19 + r0;
                case 0x6ae58:
                    r3 = r0 + 2;
                    if(r18 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x6b1b4;
                        run_6b000(); return;
                    }
                    r3 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r17 = r17 < r3 ? 1 : 0;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6aea8;
                        continue;
                    }
                    r16 = r16 & 31;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b104;
                        run_6b000(); return;
                    }
                    r2 = r2 + r23;
                    r4 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x6ae94;
                    pc=0x5ce00;
                    run_5ce00(); return;
                case 0x6ae94:
                    r3 = r0 + 32;
                    r16 = r3 - r16;
                    r2 = r2 < r16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b104;
                        run_6b000(); return;
                    }
                case 0x6aea8:
                    r4 = r22 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x6aeb8;
                    pc=0x6a400;
                    run_6a400(); return;
                case 0x6aeb8:
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r30 = r30 + 1;
                    r2 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    r2 = r2 < r30 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b104;
                        run_6b000(); return;
                    }
                case 0x6aed4:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6aee4;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x6aee4:
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r2 = r0 + 163;
                    /* Next insn is delay slot */ 
                    pc=0x6a974;
                    run_6a800(); return;
                case 0x6aefc:
                    r6 = r0 + 1;
                case 0x6af00:
                    r4 = r16 + 2;
                    addr=r16+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x6a9e4;
                    run_6a800(); return;
                case 0x6af10:
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = r23 + r0;
                    r30 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x6a940;
                    run_6a800(); return;
                case 0x6af28:
                    r18 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x6adb0;
                    run_6ac00(); return;
                case 0x6af34:
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r4 = r2 - r4;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r4;
                case 0x6af44:
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6ae0c;
                        continue;
                    }
                case 0x6af54:
                    r18 = r18 | 16;
                case 0x6af58:
                    r4 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r3 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r22;
                    r2 = r18 + r0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r30;
                    /* Next insn is delay slot */ 
                    pc=0x6a974;
                    run_6a800(); return;
                case 0x6af74:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x6a974;
                    run_6a800(); return;
                case 0x6af80:
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x6af00;
                    continue;
                case 0x6af8c:
                    r18 = r2 - r16;
                    r4 = r22 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6afa0;
                    pc=0x5ec00;
                    run_5ec00(); return;
                case 0x6afa0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b04c;
                        run_6b000(); return;
                    }
                    r2 = r18 + -1;
                    r3 = r2 >> 5;
                    r3 = r3 << 2;
                    r3 = r19 + r3;
                    r4 = r0 + 1;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r4 << (r2&0x1f);
                    r3 = r4 & r3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b0b4;
                        run_6b000(); return;
                    }
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b110;
                        run_6b000(); return;
                    }
                    r4 = r22 + r0;
                    r5 = r18 + -2;
                    /* Next insn is delay slot */ 
                    r31=0x6afec;
                    pc=0x5ec00;
                    run_5ec00(); return;
                case 0x6afec:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b110;
                        run_6b000(); return;
                    }
                    r17 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x6b050;
                    run_6b000(); return;
                case 0x6b000:
                    pc=0x6b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_6b000() throws ExecutionException { /* 0x6b000 - 0x6b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x6b000:
                    r17 = r16 - r2;
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6b018;
                    pc=0x5da00;
                    run_5da00(); return;
                case 0x6b018:
                    r30 = r30 - r17;
                    r22 = r2 + r0;
                    r19 = r2 + 20;
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x6abf0;
                    run_6aa00(); return;
                case 0x6b030:
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x6a8b4;
                    run_6a800(); return;
                case 0x6b03c:
                    r30 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x6a940;
                    run_6a800(); return;
                case 0x6b04c:
                    r17 = r0 + r0;
                case 0x6b050:
                    r4 = r22 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6b060;
                    pc=0x6a400;
                    run_6a400(); return;
                case 0x6b060:
                    r30 = r30 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x6abf0;
                    run_6aa00(); return;
                case 0x6b06c:
                    r30 = r16 + r18;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = r30 + r0;
                    r3 = r20 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6a938;
                        run_6a800(); return;
                    }
                case 0x6b08c:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r20 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b08c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x6a938;
                    run_6a800(); return;
                case 0x6b0b4:
                    r17 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x6b050;
                    continue;
                case 0x6b0c0:
                    r17 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x6ad68;
                    run_6ac00(); return;
                case 0x6b0cc:
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6ac68;
                        run_6ac00(); return;
                    }
                case 0x6b0dc:
                    r3 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r4 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r22;
                    r2 = r0 + 98;
                    /* Next insn is delay slot */ 
                    pc=0x6a974;
                    run_6a800(); return;
                case 0x6b104:
                    r18 = r0 + 33;
                    /* Next insn is delay slot */ 
                    pc=0x6af58;
                    run_6ae00(); return;
                case 0x6b110:
                    r17 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x6b050;
                    continue;
                case 0x6b11c:
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b0dc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x6ac68;
                    run_6ac00(); return;
                case 0x6b134:
                    if(r30 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x6ac68;
                        run_6ac00(); return;
                    }
                    r3 = r16 < 2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b0dc;
                        continue;
                    }
                    r4 = r22 + r0;
                    r5 = r16 + -1;
                    /* Next insn is delay slot */ 
                    r31=0x6b158;
                    pc=0x5ec00;
                    run_5ec00(); return;
                case 0x6b158:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6ac68;
                        run_6ac00(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x6b0dc;
                    continue;
                case 0x6b174:
                    r2 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r2 = r17 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b1dc;
                        continue;
                    }
                    r2 = r19 + r0;
                    r3 = r17 + r0;
                case 0x6b190:
                    r4 = r3 + 1;
                    r3 = r3 + 4;
                    r3 = r3 << 2;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r4;
                    r3 = r22 + r3;
                    r4 = r0 + 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x6ae58;
                    run_6ae00(); return;
                case 0x6b1b4:
                    r4 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    if(r3 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x6b234;
                        run_6b200(); return;
                    }
                    r18 = r0 + 34;
                    /* Next insn is delay slot */ 
                    pc=0x6af58;
                    run_6ae00(); return;
                case 0x6b1dc:
                    r5 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r5 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x6b1f0;
                    pc=0x5c600;
                    run_5c600(); return;
                case 0x6b1f0:
                    r6 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r5 = r22 + 12;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                case 0x6b200:
                    pc=0x6b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_6b200() throws ExecutionException { /* 0x6b200 - 0x6b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x6b200:
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6b210;
                    pc=0x48bdc;
                    run_48a00(); return;
                case 0x6b210:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6b220;
                    pc=0x5c800;
                    run_5c800(); return;
                case 0x6b220:
                    r22 = r19 + r0;
                    r3 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r2 = r19 + 20;
                    /* Next insn is delay slot */ 
                    pc=0x6b190;
                    run_6b000(); return;
                case 0x6b234:
                    r3 = r16 >> 5;
                    r3 = r3 << 2;
                    r2 = r2 + r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    r16 = r3 << (r16&0x1f);
                    r18 = r16 & r2;
                    r18 = ((r0 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r2 = r0 + 34;
                    r18 = r2 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x6af58;
                    run_6ae00(); return;
                case 0x6b400:
                    pc=0x6b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_6b400() throws ExecutionException { /* 0x6b400 - 0x6b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x6b400:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r16 = 19 << 16;
                    r16 = r16 + -19712;
                    addr=r16+48;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b6d8;
                        run_6b600(); return;
                    }
                case 0x6b428:
                    r24 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r15 = r24 >> 5;
                    r15 = r15 << 2;
                    r24 = r24 & 31;
                    r15 = r6 + r15;
                    if(r24 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b44c;
                        continue;
                    }
                    r15 = r15 + 4;
                case 0x6b44c:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff] = r0;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r10 = r15 + -4;
                    r12 = r10 + r0;
                    r5 = r10 + r0;
                    r8 = r0 + r0;
                    r14 = r0 + r0;
                    r11 = r0 + r0;
                    r17 = r0 + 8;
                    r25 = r0 + 32;
                    r9 = r3 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b534;
                        continue;
                    }
                case 0x6b484:
                    r7 = r16 + r2;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b630;
                        run_6b600(); return;
                    }
                    r7 = (r2&0xffffffffL) < (33&0xffffffffL) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b6ac;
                        run_6b600(); return;
                    }
                    r2 = r14 < r11 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b520;
                        continue;
                    }
                    r2 = ((r5 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b510;
                        continue;
                    }
                    r2 = r8 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b510;
                        continue;
                    }
                    r8 = r17 - r8;
                    r8 = r8 << 2;
                    r18 = r25 - r8;
                    r7 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x6b4e8;
                    continue;
                case 0x6b4e4:
                    r7 = r3 + r0;
                case 0x6b4e8:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r13 = r3 << (r18&0x1f);
                    r7 = r7 | r13;
                    r3 = r3 >>> (r8&0x1f);
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r7;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r7 = ((r2 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b4e4;
                        continue;
                    }
                case 0x6b510:
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b68c;
                        run_6b600(); return;
                    }
                    r8 = r0 + 8;
                case 0x6b520:
                    r3 = r9 + r0;
                case 0x6b524:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r9 = r3 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b484;
                        continue;
                    }
                case 0x6b534:
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b6b8;
                        run_6b600(); return;
                    }
                case 0x6b53c:
                    r2 = ((r5 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b5a4;
                        continue;
                    }
                    r2 = r8 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b5a4;
                        continue;
                    }
                    r2 = r0 + 8;
                    r8 = r2 - r8;
                    r8 = r8 << 2;
                    r9 = r0 + 32;
                    r9 = r9 - r8;
                    r7 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x6b57c;
                    continue;
                case 0x6b578:
                    r7 = r3 + r0;
                case 0x6b57c:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r4 = r3 << (r9&0x1f);
                    r4 = r7 | r4;
                    r3 = r3 >>> (r8&0x1f);
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r4 = ((r2 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b578;
                        continue;
                    }
                case 0x6b5a4:
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b700;
                        run_6b600(); return;
                    }
                    r2 = r6 + r0;
                case 0x6b5b4:
                    r5 = r5 + 4;
                    r3 = readPages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r3;
                    r3 = ((r10 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b5b4;
                        continue;
                    }
                case 0x6b5d0:
                    r2 = r2 + 4;
                    r3 = ((r10 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b5d0;
                        continue;
                    }
                case 0x6b5e4:
                    r2 = readPages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff];
                case 0x6b5ec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b610;
                        run_6b600(); return;
                    }
                case 0x6b5f4:
                    if(r6 == r10) {
                        /* Next insn is delay slot */ 
                        pc=0x6b728;
                        run_6b600(); return;
                    }
                    r10 = r10 + -4;
                case 0x6b600:
                    pc=0x6b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_6b600() throws ExecutionException { /* 0x6b600 - 0x6b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x6b600:
                    r2 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b5f4;
                        run_6b400(); return;
                    }
                case 0x6b610:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6b630:
                    r8 = r8 + 1;
                    r2 = r8 < 9 ? 1 : 0;
                    r11 = r11 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b668;
                        continue;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r2 << 4;
                case 0x6b650:
                    r7 = r7 & 15;
                    r7 = r2 | r7;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r7;
                    r3 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x6b524;
                    run_6b400(); return;
                case 0x6b668:
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b520;
                        run_6b400(); return;
                    }
                    writePages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    r5 = r5 + -4;
                    r8 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x6b650;
                    continue;
                case 0x6b68c:
                    r12 = r5 + -4;
                    writePages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff] = r0;
                    r14 = r11 + r0;
                    r5 = r12 + r0;
                    r8 = r0 + r0;
                    r3 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x6b524;
                    run_6b400(); return;
                case 0x6b6ac:
                    r7 = r0 + 41;
                    if(r2 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x6b750;
                        continue;
                    }
                case 0x6b6b8:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6b6d8:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x6b6ec;
                    pc=0x6a600;
                    run_6a600(); return;
                case 0x6b6ec:
                    r6 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x6b428;
                    run_6b400(); return;
                case 0x6b700:
                    if(r24 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b5e4;
                        run_6b400(); return;
                    }
                    r2 = readPages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff];
                    r24 = r0 - r24;
                    r3 = r0 + -1;
                    r3 = r3 >>> (r24&0x1f);
                    r2 = r3 & r2;
                    writePages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x6b5ec;
                    run_6b400(); return;
                case 0x6b728:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff] = r2;
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6b750:
                    r3 = r3 + 2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b53c;
                        run_6b400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x6b6b8;
                    continue;
                case 0x6b800:
                    pc=0x6b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_6b800() throws ExecutionException { /* 0x6b800 - 0x6ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x6b800:
                    r29 = r29 + -64;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r17 = r7 + r0;
                    r18 = readPages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6b88c;
                        continue;
                    }
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x6b838;
                    pc=0x5ae00;
                    run_5ae00(); return;
                case 0x6b838:
                    r5 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r6 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x6b854;
                    return;
                case 0x6b854:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x6b870;
                        continue;
                    }
                    r2 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                case 0x6b870:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6b88c:
                    /* Next insn is delay slot */ 
                    r31=0x6b894;
                    pc=0x5ae00;
                    run_5ae00(); return;
                case 0x6b894:
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r5 = r29 + 24;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x6b8b0;
                    return;
                case 0x6b8b0:
                    /* Next insn is delay slot */ 
                    pc=0x6b854;
                    continue;
                case 0x6ba00:
                    pc=0x6ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_6ba00() throws ExecutionException { /* 0x6ba00 - 0x6bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x6ba00:
                    r29 = r29 + -64;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    r17 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6baa0;
                        continue;
                    }
                    r20 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r18 = r5 + r0;
                    r19 = readPages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x6ba40;
                    pc=0x5ae00;
                    run_5ae00(); return;
                case 0x6ba40:
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x6ba5c;
                    return;
                case 0x6ba5c:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x6ba7c;
                        continue;
                    }
                    r2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r3 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + -1;
                case 0x6ba7c:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6baa0:
                    r18 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x6bab0;
                    pc=0x5ae00;
                    run_5ae00(); return;
                case 0x6bab0:
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r18 + r0;
                    r5 = r29 + 24;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x6bacc;
                    return;
                case 0x6bacc:
                    /* Next insn is delay slot */ 
                    pc=0x6ba5c;
                    continue;
                case 0x6bc00:
                    pc=0x6bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_6bc00() throws ExecutionException { /* 0x6bc00 - 0x6be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x6bc00:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6bc24;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6bc30;
                        continue;
                    }
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6bc24:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6bc30:
                    r2 = r0 + 138;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6be00:
                    pc=0x6be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_6be00() throws ExecutionException { /* 0x6be00 - 0x6c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x6be00:
                    r29 = r29 + -56;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r16;
                    r17 = r7 + r0;
                    r16 = readPages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x6be2c;
                    pc=0x5ae00;
                    run_5ae00(); return;
                case 0x6be2c:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r6 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x6be48;
                    return;
                case 0x6be48:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r16 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6bffc:
                case 0x6c000:
                    pc=0x6c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }

    private static final int[] _data1 = decodeData("\177\177\177\177x\000\000\000\000\000 \020\010\004\002\001",0x2);
    private static final int[] _data2 = decodeData("\177\177\177\177x\000\000\000\000\000 \020\010\004\002\001",0x2);
    private static final int[] _data3 = decodeData("!X-fs=h 7\\\014Vq\001Bs6H\r\026s\rXu2\031$\0063%Xe\020\010DW\031\010t \022\\`\000\000\000Js\024\011.RIh@S<[NF\013`@e9\034Mw\020\000\000\000\000\011.2A\025j)\035\010\011VKMfi7\031d\006\001tN\000\022\\e\002+TR:\020\021.'\023=d 4[D\006sUZb2\\D\0063=dm0]\000\000\001\025f(\022]%\023Q\001(r0Z-FK9N 3X.&\023\005Ne\000\000\000\000\002\005Hd9\031.7\031\001^u:\010\rv1\001da7\031lSQ\000J0\034\026\000\000\002\035Jt#\\L\027+1Br4]\017\022\003\rBl6\031,B\003\031^r\020\034nGK1J \036H\004V \001\010u8\033\r\026\033\005he\020\034nGK1J 3\033n\"\003\005Hd9\031.7\031\000J0\032\026\000\000\000\000\000\000\000I\011\000\000\004HH\000\000$D@\000\002$$\000\000\022!@\000\001\022\014\000\000\011\020x\000\000I\006\000\000\004H0\000\000$DB\005Hd9\010\007Ci\001\006o2\031(Vs\020\000d0MFR{\r^d2KL0\002Mha9\035\010\026#\021d \036\010\006\007AD`0\030\014\000\007\023\010\000\000!X-fs=h 7\\\014Vq\001@%9Ig\"\001\025f\000\000\000\000\004\033\005\\n7]\004\007\033\025Jk\020\033mb\003\031Rl2H\014\002+LN:\020\011.0\000\000\000\000$[N\007+P@o3\031N6+P@i9H\014w\023\025Bt2\\D\007#!Bn\020\031M\026c\024@s4^LP\000\001\022n8\035.B\003MRz2H\r\027\031\001Nr2X.F+H@t4\030-b\003]Pa:\010\r\027\031\001Bv0Z-F\013\011Xe\000\000\000\000\0029^t4\032-f9\001ho\020\034LV\013\020@f9\033mR\003%\\p:]\004\0063%Xe\020\030\004W\031\034\000\000\000\000\010fK1J 0\011.29\001Rs\020\035\rvy\001Xa9\031lRa\001Rg7\033n&K9N \022[\014B\003\011rt2\\`\000\002\025dr7\\D\007\023\025Bd4[Lr\003\031do6H\014\002+LN:\020\011.0\002\021jp6\032,6\013QJ 1[mVk\025\\t\020\031Mw\021\001Bd2\034LW\033L@$\022L\006E@\001\036O(\024d\002i\001\030a1\031-B\003\031^r\020\030,F#IJs9H\006\007A\024`6,\010\014FKMBp8\031,\027\023\020B\000\027\030,F#H\000\000\000\013Nv{IH\000\000\000\004W\0314b\000\000\000\000\002s\011rt2@\000\000\001\010\000\000\000\011,0\000\001.a9\033M\026s\034t \000\000\000\004+Ido9\016D\000\002%\\t2\\Mf\0130@e9\034Mw\021h@\000\000\000\000\006\010\000\000\000\021I\004S\001Q0\000\000\011\004S\001I0\000\000\000\004W\0311p\000\000\000\000\002+LXy\000\000\000\000\003\004t\000\000\011.2+L\000\000\000\000\004W\031\025f,<\000\000\002+LJs\026\036 \000\0029^t\020\032-W\0031Jm2[NF+\020\000(\022\\e\020\000\000\000\000\024\011.2I1r\000\000\n\004W\031$Xz\000\000\005\002+LXx\024@\000\002+LX%9@\000\000\001\014H%\030\014K\002a\025f\000\000\000\0042!\024`2,\013\004W\0311p\000\021I\004S\001I0,\022\\dW\030\000F$\022L\006%A0Js\022\\eG@\000\000\000\024\011\004S\001I0,9J%GH\000P$\022L\006%A1fp\024K\017\020\000\000\000\000\022\\dW\0310Js\022\\eB!\024`4,\000\004W\0310@#\022\011&\003\022`\000\000\022L\006\025A0Js\000\011&\003\n`Xa\000\000\004S\001E0,0K\004W\030\000\000\000![mf3%N 2\032.&+\rhi;\031 \000\000\000\000A9[-\026s\014@d4\\LV\033QRv2@\000\000\000\001\006o6[,VsQft0\\NB\003\005Xr2X,GI\001Ni;\031-`\000\001\014i6\031$\006s\005Ze\020\030-G\023\025Bd<H\014vKYJn\000\021M\026c\024@n0[,R\0035By\020\033Mw!\001De\020\031-W\003Qr\000\000\022,vs=de:[M6s=nn\020\030-G\023\025Bd<H\0167\003\025Fi3\032,V \001*n2^\016\006+\rhe2\010\016F{-Jn\035\010\004W(\000\000\000\000\021M\026c\024@n0[,R\003%f 6Z.7\033%\\g\000\000\000\000\002\035Xo1\030-B\003\021Rr2XnFKYJ\000\000\000\000\004\032A* 0[\016&+\005Hy\020\034n\006+\rRf4Y,@\000\000\000I7\034\016W!\001Li6\031$\006s\005Ze\020\030-G\023\025Bd<H\014vKYJn\000\000\000\004r1\002f:\031.$R5  0[\016&+\005Hy\020\034n\006+\rRf4Y,@\000\000\000\000'\023\010\0263QJr)\025\n2\003\005Xr2X,GI\001fp2Xm\0263%Jd\000\000\000\000\002=jt8\035.B\003\031Rl2H\rf\0135J 0[\016&+\005Hy\020\031m\0273\025\\\000\000\023\014\026\023\025X 0]\016G\023%Du:\031 \0053\005Xu2H\014\026cIJa2\036$\006;%le7\000\0106{5Ze7\035\004\006\0131de0Y\017\022\003\035Rv2[@\000\000\001\006o6[,VsP@m0^$\006s=h 1\031$\006+5`t<@\000\000\000\001\034a6Y$\006\0131de0Y\017\022\003\035Rv2[@\000\002MRz2H\014\026cIJa2\036$\006;%le7\000\000\004c\005De6\010\rf\0135J 4\\d\006k%fs4[Lp\000\000\000U7\033L\026k\025H 6\030,&+1f 6].7!\001\\o:\010\r\006\013YJ 0H\0166KiJ \037\010\006\020\0021Bb2[\004\0073\005Xu2H\r\027\031\001Zi9\\m\026s\034\000\000$[Nf\0131Rd\020\034m\027S\024@(0Y\014G\023\025fs\020\033nW!\001^f\020\034L\026s\035J)\000\023\014\026\023\025X 3\033n\"\003\005Hd9\031.7\031\000H%\030\r\rEA\001Bl9\031,\026#d@d2YM\026s\025H\000\000\000\000\005\023\005\\g2H\014\027#Qdi1\035.F(\000Js\020\031m\0273\025\\ :\035m\026\033\024\000\000!SiTj\025\034T\000\021)d \001\034A&Q \000\000\000\000N0[,R\0035By\020\033Mw!\001De\020\031-W\003Qr\000\000\000\n5\"\005$T\000\000\000\005\"e E\000\000\000\000\002IJq:Z.&+\020@v0[\016V+L@m4\\n6K9N 3\034Mvi\001hh4\\d\007\033\025Ft4[m`\000\000\000S:\030.'!\001la6\035,R\0035js:\010\rf{P@b2H\014w\023\025Bt2\\D\007#!Bn\020\031-f!\001la6\035,P\000\001(y8\031$\006{\030@r0[Lv)\001\\e2Y\0162\003\004@g9\030-g+1Br4]\017\022\003=L \022] \005\033\025Nm2[NB\003\005ht9\032,'+QJ\000\000\000\n6+\035Ze7\035\004\006s\005Ze\020\032.2\0035Rs9Z-f8\001\nn2\010\014\026#\021de9\\d\006KL@m4\\n6K9N\000\000\024nF\013Ih 0Y\014G\023\025fs\020\032.2\0035Rs9Z-f8\000\000\000\000\024nF\013Ih 0Y\014G\023\025fs\020\033lb\003MJg6Y-g!\001Rs\020\031n&+\005he9\010\016FC\005\\ 2[LB\003\005Hd9\031.7\030\000\000\000\000\024lV;5Jn:\034d\006kUft\020\033Mw!\001^v2\\MF\013@\000\000\000\020(D\"I(A!\023\010P\000\000\000B,U\010U\"\005\004L\"@\000\000\002\r\036D\"@\000\000\000\001\010B,U\010U\"\005\004L\"@\000\004\"]\036R\"\025\010\024\0221\n\000\000\024JE\032Q\002B&\021 \000\000\000\000S%R*\000\000\000\000\000*\021+\005\"Q\002B&\021 \000\000\001.O)\021\nD\n\011\030E\000\000\000\004\n\021\010R\000\000\000\000\002M\022Z\"@\000\000\000\001\002R#U)T*9(C'S\000\004\nI\016U&Q)e\"\r\036L*S)`\000\001\006O&S(TrQ\006O&\000\000\004\032=\032M\"SJD\032=\030U&S@\000\000\001\006O&S(TrQ&\000\000\000\000\004B\0250O#\021J0\002%\034P*U\011d\n5\n\000\000\000\011\024rA*T'QHe\030\000\000\000$SJ\005*Q&I-\021 \000\000\001\030A!\021)D\022I\nA%@\000\004j9\nM'SI\024\032\r\036L\000\023)d*5\036N$Ph4z1*M'\000\000\004r\025.L$SHT\n\031(E)\022IU\000\001\034E+S\011\024r\025\002F*\021*%\022Q&\000'U*E\002U(N S(P\000\001 A#Q)D*9\016T$\000\000\005\032Q\002R*\020(D\"H\000\000\000\025\010UBQ\006O&\000\nD*a(C'S\nTj8\000\000!SiTj\025\034T)U\010\025\022P\000\000\000\000\010dJ1\n\000\000\000\000\004J\035\034O)\021*Tr-\034O+S@\000\000\001\002S&R)d\030\000\000G&\023h$\n0\000\000&\020($*0\000\000\000\024H\024r\035\n\000\000\000\n4*\035\032E'\025\000\000\000\007\nd\000\0008M \000\003BT\000\000\034\013@\000\001`;\000\000\016\036 \000\000qD@\000\007\017X\000\0008\026\000\000\003A0\000\000\034\013\000\000\001`X\000\000\016\005@\000\000p,\000\000\007\002`\000\0008\026\000\000\003A0\000\000\034.`\000\001cQ\000\000\0165\020\000\000s!@\000\007\031P\000\0009G \000\003L\032\000\000\034_\020\000\001eh\000\000\016=P\000\000se@\000\007\037$\000\0009c \000\003Nl\000\000\034t \000\001f\177\000\000\0167\000\000\000s0@\000\007#$\000\000:\026 \000\003Q\"\000\000\035\011\020\000\001hA\000\000\016CH\000\000t<\000\000\007#@\000\000:\030 \000\rVZ\000\000\000\001\014\000\006k.\000\000\000\000\\\000\0035[\000\000\000\000\"\000\001[\002\000\000\000\000\025\000\000mA0\000\000\000\011@\0006`p\000\000\000\004P\000\0330@\000\000\000\0028\000\rX&\000\000\000\001$\000\006l\026\000\000\000\000V\000\0036\014@\000\000\000-\000\001[\006`\000\000\000\026\000\000mC`\000\000\000\n\000\0006ZX\000\000\000\005p\000\033-4\000\000\000\002\030\000\rV\\\000\000\000\0018\000\006k6\000\000\000\000D\000\0035\\\000\000\000\000$\000\001Zj`\000\000\000\027@\000mD\020\000\000\000\014\000\0006Zp\000\000\000\005`\000\0331\014\000\000\000\003\010\000\rXJ\000\000\000\000H\000\006l(\000\000\000\000$\000\0036\026\000\000\000\000\023\000\001[\013`\000\000\000\011@\000mF0\000\000\000\005\000\000:\0320\000\000\000\002P\000\0331X\000\000\000\0010\000\rXp\000\000\000\000\\\000\006l;\000\000\000\0000\000\0036\037\000\000\000\000\031\000\001[\020 \000\000\000\r\000\000mH@\000\000\000\006`\0006d8\000\000\000\0030\000\0332,\000\000\000\001`\000\rY\036\000\000\000\000t\000\006lS\000\000\000\000<\000\0036+\000\000\000\000\037\000\001[\026 \000\000\000\020\000\000mK@\000\000\000\010 \0006ep\000\000\000\004\020\000\0333\004\000\000\000\003\030\000\rYJ\000\000\000\001H\000\006lg\000\000\000\000h\000\00365@\000\000\000\020\000\001[\033 \000\000\000\006@\000mMp\000\000\000\003`\0006g\010\000\000\000\001`\000\0333L\000\000\000\001\n\021jp6\032,6\013QJ 6\030,&+0@f7\\D\006\013\021Hr2\\n2\001\020J0\032\026\007\"\001\025f/\022\\`\000\000\000\000L\022L\006E@\000\000\000\022\\e2!\024`2,\000\000\000\000\000Js\025I.P\000\000\000%:@\000\005#=^ 6X-gI\001jn7\030-V+\020@l0XLVcL@b2]\016v+\025\\ 6\030,&+0@a:\010\004B)@hX\020\030-f!\001de3\031.&+9Fe\020\030.B\001\020J0\032\026\000\000\000\001\006a7\033Mw!\001He3\032-f)\001jn7\030-V+\020@l0XLVa\001Bt\020\030,F#IJs9H\004B)@hl,\000\000\000\001hV\000\000\016E2X\000t+\025J`\000\000\000\000:\025Je2X\000\000\000\035\ne2Y,V\000\000\016E2Y,V+\025@\007\"Y,V+\025Je0\000\000\000\000\035\ne2Y,V+\025J`\000\000\000t+\025Je2Y,V+\025@\000\003Q,V+\025Je2Y,V+\000\016EP\000\000t-\026@\007\"i4Z\000\000\000\000\003Q4Z-\026@\000\000\001hZ-\026K%P\000\000t-\026K%Ri4\000:\026K%Ri4Z-\000\000\000\000\001hZ-\026K%Ri4Z\000\000\000\007\"i4Z-\026K%Ri4\000\000\035\013%Ri4Z-\026K%Rh\000\000\006n4\000\0006s(\000\0037\033\000\000\0339`\000\001[N@\000\r\\x\000\000mg`\000\006nA\000\0006t \000\0037#@\000\033:(\000\001[R`\000\r]\030\000\000mi`\000\006nP\000\0006u\020\000\0037*\000\000\033:\\\000\001[V@\000\r]:\025.6\013\035J:\020\011.2\002m^p:\032-vsM: -Z-g\003Uhf4[\014Uh)&h7\\NB\003=`t4[mg\031h\024 \020\013,pH$\022A2\031\004\006#\025Du3H\r\026s\031^ :\033d\006{\011Te1]\004\0063%Xe\005\010\004\002k \022\011\004R\014Vc@@(:\032\r\027\031\001he<\035\005\020Q\000@-4H\rf\0135J\011\004Tn\006+\rRf<H\014\026q\001Rn3\033d\0063%Xe\005\010\004\002k<@n0[,PH%\034a6Y$\007#!J 7].G\003Uh 3\032-F((@ \026]A\020H%\022n1\\LV\013MJ ;\031.&\023=fi:\036!\"\001\000ZF\004B!\024\013\021H 3\033n&k\031Je2\034d\007#<@t4\031$\006{Uhp:]\001\"\001\000ZS\020\030,F#H\022\011)Y.B\003QPe\020\034nF\013Ih/6\033l\026!\001Bd2\034LW\033L\024 \020\013*`H$\022P9\032-g!\001hh2H\014FKMBs9Y-V\0231Jr\020\035LW\023MRo7\002A$c=\\g\020\033n\007#%^n9NA\"\001\000Z-0\\Lw+5Jn:\013,6{1jm7\010\r`JM`e1Z,gI\001Br3]-V+9h 9]\014\027\023P@c7[\016Vk8\024 \020\013%V\033=Zm2[NBk\r^l:[-b\0038\022S8\031,6K\031r 1[mVk\025\\t\020\034nF\013Ih 1[mG+5\\\n\020\010\005Rk\r^m6Y-g#L@n\004B*6+P@t4\031$\006\033=Zm2[NB\0031Jv2[\004\0063=d :\032\014R\003=jt8\035.@Q\000@-\026Xn\007)\001hy8\031!\020JMJt\020\030n\007)\001hy8\031!\"\001\000Z-2\031,'+\034Zi7\031MpH%\002d2\010\014F+\011jg\020\032-f3<@t7H\rv\023)Jc:\010\014fK1J\n\020\010\005Rk\031^r6YLV+\021f\011\004P,F!\001Lo9\033,f+\025Hs\020\035\rr\003QPe\020\033nW#Ajt\005\010\004\002i5Pe6\034\001\020J!Jl8\010\005\007#!Rs\020\035\014WCPR\n\020\010\005Rk!Jx7YLg\030$\022U9Y$\006C\025pa2\031,6K5Bl\020\033\014\026\023\025X 7YLg\033\025hs\005\010\004\002i5Rn3\033d\006s\005Ze\004B*7\003\025Fi3\036$\006\0138@i7\031Mr\003\031Rl2BD\002\0014Zl0XLVa5Dr2X-2\0038\022A2\031\004\006s\025nl4[LR\003%L 6\030,&+0@e<\030lV+\021f 6\031-f;QP 7\002D\002\0014Zm7\031-V{9Rc\026XmvcUZn\020\033A\025\033AJc4YO\022\0035\\e6[mfK\014@s:\030.'!\001Fo6\035-Vp(@ \026K.\006\013\035Jl2[Lw# @n\004TlW!\001hh2H\016\006\013\035J 6\031-f;QP 3\033n\"\003QPe\020\033\r\027\033QRn3BD\002\0014Zs:\030.'!5Bd2\034D\006\013\021Hr\004TlW!\001hh2H\0167#\005dt\027[\rv\013\020@a2\031\016&+Mf\n\020\010\005RkQJx:\013,6{1jm7\010\r`JM`e1Z,gI\001he<\035\004\007\033QBr:\010\0146{1jm7\002D\002\0014Zv2\\L&{MJ\011\004R-f\033IJa9Y$\0073\025db7\\m\027#d\024 \020\013%W3\025ds4[m`H% r4[NB\003QPe\020\031\r\027\033\005fs2[,&c\025d ;\031.'\033%^n\005\000\000\000\001\025f +\011.0P\001\002r3]-V+9h 3\033n\"\001\025f 7].G\033%He\020\035L\026c%H 9\030-f;\024@(\022[\014Bi\025Xd\024@\000\000\001\025Xx\022X`\000\000\000Jl4I,0\000\000\000I7\035L\026c%H 7\035-V\023\025d 3Z.f+8@i7\010\014\027\023\035jm2[NCQ\000Js\005\000\000\000\003\021B6\032@\000\000\000\000Js\035\010\010F{8Nt\020\032mf{\\@w4\030.B\003Q^ 2\033d\007;%hh\020\030\004W\031\034\024\000\000\000\000\004s<@i7\034\016W!\001Li6\031 \000\000\001Zn2[-vs%F-1[mG+5\\ ;\030-G+\024@m:\\nB\003\011J 9[,\026c1Jr\020\035\r\006\0138@a9\031nVk\025\\t\026XmvcUZn\020\035L\026cUJ\000\000\000\000\006\013INu6Y-g!5Fo6\035-Vq\001la6\035,R\0035js:\010\014&)\001fm0[\rF+H@t4\030-b\003\r^m6Y-g!5Fo6\035-Vq\001la6\035,P\003\r^m6Y-g!5Fo6\035-Vq\001la6\035,R\0035js:\010\014&)\001fm0[\rF+H@t4\030-b\003QJx:\013,6{1jm7\010\016f\0131je\000\011+\022i\025Z-\022Y\004\002* t%&NDU\030\000\000\000\026K%Ri4Z-\026K%Ri4Z-\026K%Ri4Z-\026K%Ri4Z\000\026K,\027\023\035jm2[NBk\r^l:[-`\000\000\000-\026XO\027#\025f-8\031.\"k1Rn2@\000\000\000\000Z-1[mVk\025\\t\026XmvcUZn\000\000\000\000\0014Zc7[-V+9hs\000\000\005Rk\r`u\000\000\000\002i5He1\035,rk%\\f7@\000\000\000\000Z-3\033n&k\031Je2\034`\002i5Pe6\034\000\000\0014Zh2^\rv3\031f\000\000\000\005Rk%\\f7@\000\002i5Xa1\031-Bk\011de0Z`\000\000\000Z-6[LVk=\\i1K,6{1jm7\000\000\000\0014Zp0YlVc\025\\g:\032\000\000\000\000\000-\026\\nF\013Ih-0Y\014G\020\000\000\000\000\013%W#\025pt\026XmvcUZn\000\000\000\002i5le9\030Mw\033\024\000\000\000\013%W3\025ds4[m`\000\000\000\000\001\001d@\000\010\rL\000\000@_ \000\004\006p\000\000 =P\000\002\003h\000\000\020\036\030\000\001\001o\000\000\010\016d\000\000@u\000\000\004\004F\000\000!o \000\002\017\002\000\000\020x\020\000\001\007A\000\000\010<\010\000\000C`@\000\004\036\004\000\000!p \000\002\017\002\000\000\020x\020\000\001\007A\000\000\010<\010\000\000C`@\000\004\036\004\000\000!p \000\002\017\002\000\000\020x\020\000\001\007A\000\000\010<\010\000\000C`@\000\004\036\004\000\000!p \000\002\017\002\000\000\020x\020\000\001\007A\000\000\010<\010\000\000C`@\000\004\036\004\000\000!p \000\002\017\002\000\000\020x\020\000\001\007A\000\000\010<\010\000\000C`@\000\004\036\004\000\000!p \000\002\017\002\000\000\020x\020\000\001\0072\000\000\010<\010\000\000C`@\000\004\035@\000\000!p \000\002\017\002\000\000\020x\020\000\001\007A\000\000\010<\010\000\000C`@\000\004\036\004\000\000!p \000\002\017\002\000\000\020x\020\000\001\007A\000\000\010<\010\000\000C`@\000\004\036\004\000\000!p \000\002\017\002\000\000\020u`\000\001\007,\000\000\010:8\000\000C`@\000\004\036\004\000\000!p \000\002\017\002\000\000\020x\020\000\001\007#\000\000\010<\010\000\000C`@\000\004\036\004\000\000!p \000\002\017\002\000\000\020x\020\000\001\007 \000\000\033Fx\000\000\000\000\010\000\004\026\000\000\000n\0340\000\000\000\000 \000\020h\000\000\0038t\000\000\000\000\001\000\000C\000\000\000\rcZ\000\000\000\000\004\000\002\007\000\000\0007\017\000\000\000\000\000\020\000\010\020\000\000\001\\<@\000\000\000\000\000\000\0370\000\000\006qv\000\000\000\000\000\000\000~\000\000\000\033Gd\000\000\000\000\000\000\003~\000\000\000n\0370\000\000\000\000\000\000\017h\000\000\0038\177\000\000\000\000\001\000\000@\000\000\000\rd\000\000\000\000\000\004\000\002\010\000\000\0007\020 \000\000\000\000\020\000\010(\000\000\001\\B \000\000\000\000@\000 P\000\000\006r\r\000\000\000\000\002\000\001\003\000\000\000\033HD\000\000\000\000\010\000\004\022\000\000\000n\"P\000\000\000\000\000\000\017p\000\000\0039\014\000\000\000\000\000\000\000@ \003\011dk\000\000\000\000\010\000\000\0014\000\rw\023\004\000\000\000\000@ \000\006\024\0001[\014P\000\000\000\001\000\000\000\026@\001fe2@\000\000\000\004\000\000\000Z\000\007#MD\000\000\000\000 \020\000\002n\000\033n&\010\000\000\000\001\000@\000\0138\000a9[\000\000\000\000\004\002\000\000-`\003IZb\030\000\000\000\020\010\000\0017\000\016\006C@\000\000\000\000 \000\000\005P\0007\\L\020\000\000\000\002\000\000\000\026P\001Bs6\000\000\000\000\004\000\000\000Y@\007#Mr\000\000\000\000\020\000\000\002h\000\035\0166\020\000\000\000\001H@\000\013P\000o9\030 \000\000\000\006\"\000\000.@\003\005fl\000\000\000\000\031\010\000\001:\000\014&\023H`\000\000\000` \000\006\034\0001\034\r@\000\000\000\002\001@\000\027p\001^r0@\000\000\000\010\004\000\000a@\006{IB\000\000\000\000 \020\000\003\010\000\033\014'\0030\000\000\001@`\000\014\010\000t9\030@\000\000\000\004\002\000\000-`\003=da\000\000\000\000\020\010\000\0018\000\014\027\0330\000\000\000\000@ \000\005`\0009\033,#\010\000\000\002\001\000\000\026p\001Fl1@\000\000\000\004\000\000\000Z\000\006{IB\000\000\000\0000\020\000\002x\000\032-f\030\000\000\000\000@\000\000\013\030\000i7\036@\000\000\000\002\000\000\000-\000\003Qdb\000\000\000\000\031\010\000\001:\000\rw\023\004\000\000\000\000d \000\005l\0000\\m@\000\000\000\003\021\000\000\0270\001Db9\014 \000\000\014\004\000\000c@\006SMd\000\000\000\0000\030\000\002t\000\030-f \000\000\000\001\000@\000\014(\000j9\\@\000\000\000\006\003\000\0007@\003)fr\000\000\000\000\030\014\000\001_\000\014&KP\000\000\000\000@ \000\005\\\0000[L@\000\000\000\002\001\000\000\026p\001do6\000\000\000\000\010\004\000\000[@\007\0235D2\000\000\000 \020\000\002n\000\034\rG\000\000\000\000\000@\000\000\013 \000a7\031\000\000\000\000\004\000\000\000- \003I^l\000\000\000\000\010\000\000\0013\000\016GKL\000\000\000\000 \000\000\005P\0001\032.@\000\000\000\003\021\000\000\027 \001Bn2\000\000\000\000\014D\000\000]\000\007\023=X\000\000\000\0002\020\000\002t\000\030L'\021H\000\000\001@@\000\0148\000b6Z \000\000\000\004\003\000\000/`\003\005\\d\000\000\000\000\020\010\000\001C\000\014\026s\020\000\000\000\000@ \000\006\020\0006\030MVH\000\000\003\001@\000\030\020\001Di:\000\000\000\000\010\004\000\000\\\000\006\0139H\000\000\000\000 \020\000\002p\000\034Mv`\000\000\000\001\000@\000\013@\000r6XF0\000\000\004\002\000\000-`\003MJc\000\000\000\000\010\000\000\0014\000\014\026s\020\000\000\000\000` \000\005p\0002\031,0\000\000\000\001\000\000\000\0260\001He=\000\000\000\000\004\000\000\000Z\000\006\023%h\000\000\000\0000\020\000\002v\000\030-f \000\000\000\001H@\000\013X\000r7[\000\000\000\000\006\"\000\000.`\003\011Dr\031@\000\000\030\010\000\001G\000\016'#$\000\000\000\000 \000\000\006p\0002[n \000\000\000\002\001\000\000\030P\001\\e3@\000\000\000\004\000\000\000Z\000\006\013Md\000\000\000\000\020\000\000\002f\000\030.7\020\000\000\000\001\000@\000\0138\000e7\\@\000\000\000\004\002\000\000-`\0031fr\000\000\000\000\020\010\000\0017\000\016&k\010h\000\000\000@ \000\005\\\0008\032\014\020\000\000\000\001\000\000\000\026@\001Jo9\000\000\000\000\010\000\000\000Z@\006cMd\000\000\000\000\020\000\000\002f\000\035\014\027P\000\000\000\000@\000\000\013 \000j6\\\000\000\000\000\006\003\000\0007 \003\025^r\000\000\000\000\031\010\000\001:\000\rG\033H\000\000\000\000d \000\005h\0001\030N# \000\000\003\001\000\000\030p\001Dv1@\000\000\000\010\006\000\000_@\006+=d\000\000\000\000 \020\000\003\006\000\031-w\020\000\000\000\001\000@\000\014 \000l1\035L0\000\000\006\003\000\0000 \003\005fr\000\000\000\000\020\010\000\0018\000\014V{H\000\000\000\000@ \000\005`\0006\034n \000\000\000\002\001\000\000\027\000\001dm1\r \000\000\010\004\000\000[@\006\0331R\000\000\000\000\020\000\000\002h\000\031-w\020\000\000\000\001@@\000\013`\000p4\036 \000\000\000\002\000\000\000-\000\003QBb\000\000\000\000\010\000\000\0014\000\rV\013@\000\000\000\000 \000\000\005P\0002[n \000\000\000\003\021\000\000\0270\001Xs9\000\000\000\000\014D\000\000]@\006\023\011d5\000\000\0000\020\000\003\016\000\034NG\030\000\000\000\000@\000\000\r`\000a2\030`\000\000\000\004\002\000\0001 \003Ihn\000\000\000\000\020\000\000\0015\000\014'\033H\000\000\000\000`0\000\006\004\0009]\017 \000\000\000\002\001\000\000\026p\001Bd1@\000\000\000\010\004\000\000[@\007\023=d\000\000\000\000 \020\000\002n\000\034MV\021X\000\000\001\000@\000\0138\000p6\030 \000\000\000\002\000\000\000-\000\003\005Hc\000\000\000\000\020\000\000\0015\000\016&{H\000\000\000\000 \000\000\005L\000:\036L\020\000\000\000\001\000\000\000\026@\001Tm8\000\000\000\000\014\006\000\000o\000\006\013\021F\000\000\000\0002\020\000\002t\000\034Mw\020\000\000\000\001@@\000\013P\000b1\034F`\000\000\006\002\000\0001`\003\011ls\000\000\000\000\020\014\000\001?\000\014\026#\014\000\000\000\000@ \000\006\014\0000Y\0140\000\000\000\002\001\000\000\030@\001Xb;\034`\000\000\014\006\000\000`@\007\033Qt\000\000\000\000 \020\000\002p\000\030,F\030\000\000\000\001\000@\000\013@\000r7\\@\000\000\000\004\002\000\000.\000\003IZb\033@\000\000\020\010\000\0017\000\0166+$\000\000\000\000 \000\000\005P\0000Y\0140\000\000\000\003\001\000\000\027@\001`l<@\000\000\000\004\000\000\000Z\000\007#\011B\000\000\000\000\020\000\000\002h\000\032MW\000\000\000\000\001@`\000\r(\000a2\030`\000\000\000\006\"\000\000.`\003I^r\000\000\000\000\031\010\000\001;\000\014&\023Hn\000\000\000` \000\006\034\0001\034L\020\000\000\000\002\001@\000\027p\001ft0@\000\000\000\010\004\000\000b@\007\033QB\000\000\000\000 \000\000\003 \000\033\014'\023\004\000\000\001@`\000\014\010\000s:\036 \000\000\000\004\002\000\000-`\003Mha\000\000\000\000\020\010\000\0017\000\0167#`\000\000\000\000@ \000\005\\\0009[,#\000\000\000\002\001\000\000\026p\001He<@\000\000\000\004\000\000\000Z\000\006\023%h\000\000\000\000 \000\000\002j\000\035\017\006\010\000\000\000\000@\000\000\013 \000s:\036 \000\000\000\006\"\000\000.`\003Mhy\000\000\000\000\031\010\000\001:\000\0167#\004\000\000\000\000d \000\005h\0009]\017\000\000\000\000\003\021\000\000\027 \001Db9L\000\000\000\014\004\000\000c@\006\023\rF\000\000\000\000 \030\000\002~\000\034nF\010\000\000\000\001\000@\000\014\030\000s:\030 \000\000\000\004\002\000\0001\000\0031Dc1@\000\000\030\014\000\001A\000\0167#d\000\000\000\000@ \000\005`\0009]\014\020\000\000\000\002\001\000\000\027\000\001ft<\000\000\000\000\010\004\000\000\\@\007\0335D1\000\000\000 \020\000\002n\000\035\017\026\010\000\000\000\000@\000\000\013 \000s:\030 \000\000\000\006\002\000\000/\000\003Qps\000\000\000\000\010\000\000\0014\000\0167#`\000\000\000\000d \000\005p\0009]\017 \000\000\000\003\021\000\000\027 \001ft0@\000\000\000\014D\000\000]@\007\033Qt\000\000\000\0002\020\000\002v\000\030L'\031D\000\000\001@@\000\0148\000l2\036 \000\000\000\004\000\000\000- \0031Ha\000\000\000\000\020\010\000\001E\000\rF#`\000\000\000\000@\000\000\005T\0006\031\017 \000\000\000\002\000\000\000\026P\001Xd<@\000\000\000\010\004\000\000[@\006c\021B\000\000\000\000 \020\000\002n\000\033\014G@\000\000\000\001\000@\000\0138\000s6XF \000\000\004\002\000\000-`\003QBy\000\000\000\000\010\000\000\0014\000\rF#\004\000\000\000\000@\000\000\005T\000:\030/\000\000\000\000\001\000\000\000\026@\001Xd=\000\000\000\000\014D\000\000]\000\006c\021r\000\000\000\0002\020\000\002t\000\033\014F\010\000\000\000\001H@\000\013P\000l2\036\000\000\000\000\006\"\000\000.@\003\011Ds\031\000\000\000\030\010\000\001G\000\014&\033L\000\000\000\000@0\000\005|\0006\031\014\020\000\000\000\002\001\000\000\0300\001Xd0@\000\000\000\010\004\000\000b\000\006c\011Fs\000\000\0000\030\000\003\002\000\033\014GH\000\000\000\001\000@\000\013@\000l2\030 \000\000\000\004\002\000\000.\000\0031Hx\000\000\000\000\020\010\000\0019\000\0166k\010f\000\000\000@ \000\005\\\0001[\016`\000\000\000\001\000\000\000\026@\001Xd0@\000\000\000\014\004\000\000^\000\007#Mp\000\000\000\000\020\000\000\002h\000\033\014GP\000\000\000\001H@\000\013X\000l2\036 \000\000\000\006\"\000\000.`\0031Ha\000\000\000\000\031\010\000\001;\000\rF#`\000\000\000\000d \000\005p\0001\030N3\030\000\000\003\001\000\000\030p\001Fp<@\000\000\000\010\000\000\000Z@\006\0335`\000\000\000\000 \020\000\003\n\000\030n\007P\000\000\000\001\000\000\000\013(\000d2]`\000\000\000\004\002\000\000-`\003\r`y\000\000\000\000\020\010\000\0017\000\0146k@\000\000\000\000@ \000\005\\\0002\031,0\000\000\000\002\001\000\000\026p\001fm1\r\000\000\000\010\004\000\000[@\006K9r\000\000\000\000\020\000\000\002h\000\030mW\000\000\000\000\001\000\000\000\013(\000d2^\000\000\000\000\002\000\000\000-\000\003\005fw\000\000\000\000\031\010\000\001:\000\0147\003d\000\000\000\000d \000\005h\0001[.\000\000\000\000\003\021\000\000\027 \001He1@\000\000\000\014D\000\000]\000\006\023\011f4\000\000\0000\020\000\003\016\000\030Mf(\000\000\000\001\000`\000\013x\000c6\\\000\000\000\000\004\002\000\0000`\003\rZp\000\000\000\000\020\010\000\001D\000\rF\0239J\000\000\000`0\000\006\004\0001\\\017 \000\000\000\002\001\000\000\026p\001Fm8\000\000\000\000\010\004\000\000\\\000\006#\025F\000\000\000\000 \020\000\002p\000\034mV\021T\000\000\001\000@\000\0138\000c6\031\000\000\000\000\002\000\000\000-\000\003\rZp\000\000\000\000\030\010\000\001<\000\016\006C`\000\000\000\000 \000\000\005P\0008\032\017 \000\000\000\001\000\000\000\026@\001Fp=\000\000\000\000\014D\000\000]\000\006\0335`\000\000\000\0002\020\000\002v\000\031\014V\030\000\000\000\001H@\000\013X\000b1\034fP\000\000\006\002\000\0001`\003\r`x\000\000\000\000\020\000\000\0015\000\0166\023\014\000\000\000\000@ \000\006\024\0006\031\014\020\000\000\000\002\000\000\000\032\000\001Rn;@\000\000\000\010\004\000\000[@\006\033Ap\000\000\000\000 \020\000\002n\000\034l&\030\000\000\000\001\000@\000\0138\000i7\030`\000\000\000\004\002\000\000-`\003MZb\033\000\000\000\020\010\000\0017\000\r\026s`\000\000\000\000 \000\000\005P\0009XL0\000\000\000\002\000\000\000\026P\001Jo6@\000\000\000\004\000\000\000Z\000\007\023=n\000\000\000\0002\020\000\002t\000\030n\007@\000\000\000\001H@\000\013P\000s1\030`\000\000\000\006\"\000\000.@\003%\\c\000\000\000\000\031\010\000\001:\000\014&\023Ll\000\000\000` \000\006\034\0001\031.\020\000\000\000\002\001@\000\027p\001fb1@\000\000\000\010\004\000\000a@\007\033\011F\000\000\000\000 \020\000\003\010\000\033\014&+D\000\000\001@`\000\014\010\000p4\035`\000\000\000\006\000\000\000-@\003MDc\000\000\000\000\020\010\000\0018\000\r\026s\014\000\000\000\000@ \000\005`\0009[,#8\000\000\002\001\000\000\026p\001fe2\000\000\000\000\004\000\000\000Z\000\007\033\011F\000\000\000\0000\020\000\002x\000\034\rG@\000\000\000\000@\000\000\013 \000p6\036@\000\000\000\002\000\000\000-\000\003APw\000\000\000\000\031\010\000\001:\000\0166\023\014\000\000\000\000d \000\005l\0004[L0\000\000\000\003\021\000\000\0270\001Db9M`\000\000\014\004\000\000c@\006\023IV\000\000\000\000\020\000\000\002h\000\033n&\010\000\000\000\001\000@\000\014(\000\000\000\000\000\000\000\000\002\020\000\000,@\000\000\000\000\000\000\000\000\010@\000\0012\000\000\000\000\000\000\000\000\000\"\000\000\005H\0007\\L\020\000\000\000\002\001\000\000\026p\001Bs6\000\000\000\000\010\004\000\000[@\000\000\000\000\000\000\000\000\021\000\000\002d\000\034\r\007\000\000\000\000\000@\000\000\013 \000o9\030 \000\000\000\004\000\000\000- \003\005fl\000\000\000\000\010\000\000\0013\000\000\000\000\000\000\000\000\000\"\000\000\005H\000\000\000\000\000\000\000\000\001\010\000\000\026 \001^r0@\000\000\000\014D\000\000]\000\006\013MX\000\000\000\0002\020\000\002t\000\000\000\000\000\000\000\000\000D\000\000\013\020\000b8\033\000\000\000\000\004\003\000\000/`\003=da\000\000\000\000\020\010\000\001C\000\000\000\000\000\000\000\000\000\"\000\000\005H\000\000\000\000\000\000\000\000\001\010\000\000\026 \000\000\000\000\000\000\000\000\004 \000\000Y\000\006{IB\000\000\000\000 \020\000\002p\000\030.6`\000\000\000\001\000@\000\013@\000\000\000\000\000\000\000\000\002\020\000\000,@\003\rXc\000\000\000\000\010\000\000\0014\000\rw\023\004\000\000\000\000` \000\005p\000\000\000\000\000\000\000\000\001\010\000\000\026 \000\000\000\000\000\000\000\000\004 \000\000Y\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\033n&\010\000\000\000\001H@\000\013X\000a9[\000\000\000\000\006\"\000\000.`\000\000\000\000\000\000\000\000\010@\000\0012\000\r'\033H\000\000\000\000`0\000\005h\0000[L@\000\000\000\002\001\000\000\030P\000\000\000\000\000\000\000\000\004 \000\000Y\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\030M\027 \000\000\000\001\000@\000\0138\000a7\031\000\000\000\000\004\002\000\000-`\003I^l\000\000\000\000\020\010\000\0017\000\000\000\000\000\000\000\000\000\"\000\000\005H\0008\033\016\000\000\000\000\001\000\000\000\026@\001Bn2\000\000\000\000\010\000\000\000Z@\007\023=X\000\000\000\000\020\000\000\002f\000\000\000\000\000\000\000\000\000D\000\000\013\020\000b4]\000\000\000\000\006\"\000\000.@\003\005\\d\000\000\000\000\031\010\000\001:\000\016&{0\000\000\000\000d \000\005h\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Dm4@\000\000\000\010\006\000\000_@\006\0139H\000\000\000\000 \020\000\003\006\000\000\000\000\000\000\000\000\000D\000\000\013\020\000\000\000\000\000\000\000\000\002\020\000\000,@\000\000\000\000\000\000\000\000\010@\000\0012\000\014\026s\020\000\000\000\000@ \000\005`\0009\033m@\000\000\000\002\001\000\000\027\000\000\000\000\000\000\000\000\000\004 \000\000Y\000\007\033\025F\000\000\000\000\020\000\000\002h\000\030-f \000\000\000\001@@\000\013`\000\000\000\000\000\000\000\000\002\020\000\000,@\000\000\000\000\000\000\000\000\010@\000\0012\000\000\000\000\000\000\000\000\000\"\000\000\005H\0000[L@\000\000\000\003\021\000\000\0270\001do6\000\000\000\000\014D\000\000]@\000\000\000\000\000\000\000\000\021\000\000\002d\000\034NFH\000\000\000\000@\000\000\r`\000e7\\@\000\000\000\004\002\000\0001 \000\000\000\000\000\000\000\000\010@\000\0012\000\000\000\000\000\000\000\000\000\"\000\000\005H\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Jo9\000\000\000\000\010\004\000\000[@\006cMd\000\000\000\000 \020\000\002n\000\000\000\000\000\000\000\000\000D\000\000\013\020\000p4\030 \000\000\000\002\000\000\000-\000\003\025^r\000\000\000\000\020\000\000\0015\000\rG\033H\000\000\000\000 \000\000\005L\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Tm8\000\000\000\000\014\006\000\000n@\006+=d\000\000\000\0002\020\000\002t\000\033\0167\020\000\000\000\001H@\000\013P\000\000\000\000\000\000\000\000\002\020\000\000,@\003\011lc\000\000\000\000\020\014\000\001?\000\014V{H\000\000\000\000@ \000\006\014\000\000\000\000\000\000\000\000\001\010\000\000\026 \000\000\000\000\000\000\000\000\004 \000\000Y\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\031-w\020\000\000\000\001\000@\000\013@\000l9\\@\000\000\000\004\002\000\000.\000\000\000\000\000\000\000\000\000\010@\000\0012\000\0146c$\000\000\000\000 \000\000\005P\0002[n \000\000\000\003\001\000\000\027@\000\000\000\000\000\000\000\000\004 \000\000Y\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\000\000\000\000\000\000\000\000D\000\000\013\020\000e7\\@\000\000\000\006\"\000\000.`\0031fr\000\000\000\000\031\010\000\001;\000\000\000\000\000\000\000\000\000\"\000\000\005H\0009\035\0160\000\000\000\001\000\000\000\033@\001Bd1@\000\000\000\010\004\000\000b@\000\000\000\000\000\000\000\000\021\000\000\002d\000\000\000\000\000\000\000\000\000D\000\000\013\020\000\000\000\000\000\000\000\000\002\020\000\000,@\003\005Hc\000\000\000\000\020\010\000\0017\000\016&{H\000\000\000\000@ \000\005\\\000\000\000\000\000\000\000\000\001\010\000\000\026 \001`l0@\000\000\000\004\000\000\000Z\000\006\013\021F\000\000\000\000 \000\000\002j\000\034Mw\020\000\000\000\000@\000\000\013\030\000\000\000\000\000\000\000\000\002\020\000\000,@\003)Zp\000\000\000\000\030\014\000\001^\000\014\026#\014\000\000\000\000d \000\005h\0009\033n \000\000\000\003\021\000\000\027 \000\000\000\000\000\000\000\000\004 \000\000Y\000\006\023Yf\000\000\000\000 \030\000\002~\000\030,F\030\000\000\000\001\000@\000\014\030\000\000\000\000\000\000\000\000\002\020\000\000,@\000\000\000\000\000\000\000\000\010@\000\0012\000\000\000\000\000\000\000\000\000\"\000\000\005H\0000Y\0140\000\000\000\002\001\000\000\027\000\001do9\000\000\000\000\010\004\000\000\\\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\034lVH\000\000\000\000@\000\000\013 \000a2\030`\000\000\000\006\002\000\000/\000\000\000\000\000\000\000\000\000\010@\000\0012\000\000\000\000\000\000\000\000\000\"\000\000\005H\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Bd1@\000\000\000\014D\000\000]@\007\023=d\000\000\000\0002\020\000\002v\000\000\000\000\000\000\000\000\000D\000\000\013\020\000\000\000\000\000\000\000\000\002\020\000\000,@\003Mha\000\000\000\000\020\010\000\001E\000\000\000\000\000\000\000\000\000\"\000\000\005H\000\000\000\000\000\000\000\000\001\010\000\000\026 \001ft<@\000\000\000\010\004\000\000[@\007\033QB\000\000\000\000 \020\000\002n\000\034nG@\000\000\000\001\000@\000\0138\000\000\000\000\000\000\000\000\002\020\000\000,@\003\021Jy\000\000\000\000\010\000\000\0014\000\000\000\000\000\000\000\000\000\"\000\000\005H\000:\036\014\020\000\000\000\001\000\000\000\026@\000\000\000\000\000\000\000\000\004 \000\000Y\000\007\033Qr\000\000\000\0002\020\000\002t\000\034nF\010\000\000\000\001H@\000\013P\000s:\036\000\000\000\000\006\"\000\000.@\000\000\000\000\000\000\000\000\010@\000\0012\000\014&\033\014\000\000\000\000@0\000\005|\0009]\014\020\000\000\000\002\001\000\000\0300\000\000\000\000\000\000\000\000\004 \000\000Y\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\034nGH\000\000\000\001\000@\000\013@\000s:\030 \000\000\000\004\002\000\000.\000\003Mhx\000\000\000\000\020\010\000\0019\000\000\000\000\000\000\000\000\000\"\000\000\005H\000:\036,\020\000\000\000\001\000\000\000\026@\001ft0@\000\000\000\014\004\000\000^\000\007#af\000\000\000\000\020\000\000\002h\000\000\000\000\000\000\000\000\000D\000\000\013\020\000\000\000\000\000\000\000\000\002\020\000\000,@\003Mha\000\000\000\000\031\010\000\001;\000\000\000\000\000\000\000\000\000\"\000\000\005H\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Xd<@\000\000\000\010\000\000\000Z@\006c\021B\000\000\000\000 \020\000\003\n\000\033\014G@\000\000\000\001\000\000\000\013(\000\000\000\000\000\000\000\000\002\020\000\000,@\0031Hy\000\000\000\000\020\010\000\0017\000\rF#\004\000\000\000\000@ \000\005\\\0006\031\017\000\000\000\000\002\001\000\000\026p\000\000\000\000\000\000\000\000\004 \000\000Y\000\007#\005r\000\000\000\000\020\000\000\002h\000\033\014F\010\000\000\000\001\000\000\000\013(\000t0^\000\000\000\000\002\000\000\000-\000\000\000\000\000\000\000\000\000\010@\000\0012\000\rF#d\000\000\000\000d \000\005h\0006\031\014\020\000\000\000\003\021\000\000\027 \001Xd<\000\000\000\000\014D\000\000]\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\030L7\030\000\000\000\001\000`\000\013x\000l2\030 \000\000\000\004\002\000\0000`\000\000\000\000\000\000\000\000\010@\000\0012\000\000\000\000\000\000\000\000\000\"\000\000\005H\0006\031\017\020\000\000\000\002\001\000\000\027\000\001Xd0@\000\000\000\010\004\000\000\\\000\006c\021p\000\000\000\000 \020\000\002r\000\000\000\000\000\000\000\000\000D\000\000\013\020\000c6\035@\000\000\000\002\000\000\000-\000\0031Ha\000\000\000\000\030\010\000\001<\000\016G\033`\000\000\000\000 \000\000\005P\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Xd<@\000\000\000\014D\000\000]@\006c\021B\000\000\000\0002\020\000\002v\000\033\014G@\000\000\000\001H@\000\013`\000\000\000\000\000\000\000\000\002\020\000\000,@\003\r`y\000\000\000\000\020\000\000\0015\000\0146k@\000\000\000\000@ \000\006\024\000\000\000\000\000\000\000\000\001\010\000\000\026 \000\000\000\000\000\000\000\000\004 \000\000Y\000\006\033Ar\000\000\000\000 \020\000\002n\000\030mW\000\000\000\000\001\000@\000\0138\000d2X`\000\000\000\004\002\000\000-`\000\000\000\000\000\000\000\000\010@\000\0012\000\r\026sd\000\000\000\000 \000\000\005P\0001[.\000\000\000\000\002\000\000\000\026P\001He<\000\000\000\000\004\000\000\000Z\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\030n\007H\000\000\000\001H@\000\013P\000c6\\\000\000\000\000\006\"\000\000.@\003\021Jc\000\000\000\000\031\010\000\001:\000\000\000\000\000\000\000\000\000\"\000\000\005H\0001\033LP\000\000\000\002\001@\000\027p\001Fm8\000\000\000\000\010\004\000\000a@\000\000\000\000\000\000\000\000\021\000\000\002d\000\000\000\000\000\000\000\000\000D\000\000\013\020\000\000\000\000\000\000\000\000\002\020\000\000,@\003\rZp\000\000\000\000\020\010\000\0018\000\014F+\014\000\000\000\000@ \000\005`\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Fl2\000\000\000\000\004\000\000\000Z\000\006\0335`\000\000\000\0000\020\000\002x\000\000\000\000\000\000\000\000\000D\000\000\013\020\000\000\000\000\000\000\000\000\002\020\000\000,@\000\000\000\000\000\000\000\000\010@\000\0012\000\0146k@\000\000\000\000d \000\005l\0002\031,0\000\000\000\003\021\000\000\0270\000\000\000\000\000\000\000\000\004 \000\000Y\000\006\033Ap\000\000\000\000 \000\000\002j\000\034l&\030\000\000\000\001\000@\000\014(\000\000\000\000\000\000\000\000\002\020\000\000,@\000\000\000\000\000\000\000\000\010@\000\0012\000\0147\003`\000\000\000\000@ \000\005\\\0009XL0\000\000\000\002\001\000\000\026p\001Rn1@\000\000\000\010\004\000\000[@\000\000\000\000\000\000\000\000\021\000\000\002d\000\032-g@\000\000\000\000@\000\000\013 \000s1\030`\000\000\000\004\000\000\000- \0039^p\000\000\000\000\010\000\000\0014\000\000\000\000\000\000\000\000\000\"\000\000\005H\0001\\\017\000\000\000\000\003\021\000\000\027 \001fb1@\000\000\000\014D\000\000]\000\006K9F\000\000\000\0002\020\000\002t\000\000\000\000\000\000\000\000\000D\000\000\013\020\000b2\\ \000\000\000\004\003\000\000/`\003MDc\000\000\000\000\020\010\000\001C\000\000\000\000\000\000\000\000\000\"\000\000\005H\000\000\000\000\000\000\000\000\001\010\000\000\026 \000\000\000\000\000\000\000\000\004 \000\000Y\000\007\033\011F\000\000\000\000 \020\000\002p\000\032-f\030\000\000\000\001\000@\000\013@\000\000\000\000\000\000\000\000\002\020\000\000,@\003MJd\000\000\000\000\010\000\000\0014\000\0166\023\014\000\000\000\000` \000\005p\000\000\000\000\000\000\000\000\001\010\000\000\026 \000\000\000\000\000\000\000\000\004 \000\000Y\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\034l&\030\000\000\000\001H@\000\013X\000i7\030`\000\000\000\006\"\000\000.`\000\000\000\000\000\000\000\000\010@\000\0012\000\014'\023,\000\000\000\000 \000\000\005P\0007\\L\020\000\000\000\002\001\000\000\030P\001Ta6@\000\000\000\004\000\000\000Z\000\007\0331^\000\000\000\000 \020\000\003\n\000\033Mw\000\000\000\000\001\000@\000\0138\000o9\030 \000\000\000\004\002\000\000-`\003\005fl\000\000\000\000\020\010\000\0017\000\0166c<\000\000\000\000@ \000\005\\\0008\032\016\000\000\000\000\001\000\000\000\026@\001^r0@\000\000\000\010\000\000\000Z@\006\013MX\000\000\000\000\020\000\000\002f\000\030-f\030\000\000\000\001\000\000\000\013(\000n7\\\000\000\000\000\006\"\000\000.@\003=da\000\000\000\000\031\010\000\001:\000\014\027\0330\000\000\000\000d \000\005h\0009[\rp\000\000\000\003\021\000\000\027 \001Dp6\000\000\000\000\010\006\000\000_@\006{IB\000\000\000\000 \020\000\003\006\000\032L\026h\000\000\000\000@\000\000\013 \000s6\033`\000\000\000\004\002\000\0000`\0039^p\000\000\000\000\020\010\000\0018\000\rw\023\004\000\000\000\000@ \000\005`\0000\\m@\000\000\000\002\001\000\000\027\000\001fl7@\000\000\000\010\004\000\000\\\000\006\0331F\000\000\000\000\020\000\000\002h\000\033n&\010\000\000\000\001@@\000\013`\000n7\\\000\000\000\000\002\000\000\000-\000\003MXo\000\000\000\000\030\010\000\001<\000\rf{@\000\000\000\000d \000\005l\0007\\L\020\000\000\000\003\021\000\000\0270\001Bs6\000\000\000\000\014D\000\000]@\007\0331^\000\000\000\0002\020\000\002v\000\032N7\020\000\000\000\001@`\000\013P\000a7\031\000\000\000\000\004\002\000\0001 \003)Bm\000\000\000\000\010\000\000\0014\000\016&c\004\000\000\000\000@ \000\006\024\0001\032.@\000\000\000\002\001\000\000\026p\001Bn2\000\000\000\000\010\004\000\000[@\007\023=X\000\000\000\000 \020\000\002n\000\034MF\010\000\000\000\001\000@\000\0138\000p6\034\000\000\000\000\002\000\000\000-\000\003\005\\d\000\000\000\000\020\000\000\0015\000\016&{0\000\000\000\000 \000\000\005L\0000[L0\000\000\000\002\000\000\000\026P\001Di:\000\000\000\000\014D\000\000]\000\006\0139H\000\000\000\0002\020\000\002t\000\034Mv`\000\000\000\001H@\000\013P\000r6\030 \000\000\000\006\"\000\000.@\003\011Zi\000\000\000\000\020\014\000\001?\000\014\026s\020\000\000\000\000@ \000\006\014\0005\030-P\000\000\000\001\000\000\000\026@\001dl0@\000\000\000\010\004\000\000a@\006s=`\000\000\000\000 \020\000\002p\000\030-f \000\000\000\001\000@\000\013@\000r7[\000\000\000\000\004\002\000\000.\000\003IXa\000\000\000\000\020\010\000\0018\000\0166+\014\000\000\000\000 \000\000\005P\0000[L@\000\000\000\003\001\000\000\027@\001\\o8\000\000\000\000\004\000\000\000Z\000\007\0231B\000\000\000\0000\020\000\002x\000\033Mw\000\000\000\000\001H@\000\013X\000a7\031\000\000\000\000\006\"\000\000.`\003I^l\000\000\000\000\031\010\000\001;\000\016&c\004\000\000\000\000d \000\005l\0009\035\r\020\000\000\000\001\000\000\000\033@\001Jo9\000\000\000\000\010\004\000\000b@\006S\005Z\000\000\000\000\020\000\000\002h\000\034n&(\000\000\000\001\000@\000\014(\000n7\\\000\000\000\000\004\002\000\000-`\003\025^r\000\000\000\000\020\010\000\0017\000\rG\033H\000\000\000\000@ \000\005\\\0009\\LP\000\000\000\002\001\000\000\026p\001`h0@\000\000\000\004\000\000\000Z\000\006+=d\000\000\000\000 \000\000\002j\000\033\0167\020\000\000\000\000@\000\000\013\030\000a6\034@\000\000\000\004\000\000\000- \003)Zp\000\000\000\000\030\014\000\001]\000\014V{H\000\000\000\000d \000\005h\0006\034n \000\000\000\003\021\000\000\027 \001fr2@\000\000\000\014D\000\000]\000\006\023YF\000\000\000\000 \030\000\002~\000\031-w\020\000\000\000\001\000@\000\014\030\000j0[ \000\000\000\002\000\000\000-\000\003Mde\000\000\000\000\020\010\000\001C\000\rf{@\000\000\000\000@ \000\005`\0002[n \000\000\000\002\001\000\000\027\000\001Xs9\000\000\000\000\010\004\000\000\\\000\007\033IJ\000\000\000\000 \020\000\002p\000\030mFH\000\000\000\000@\000\000\013 \000e7\\@\000\000\000\006\002\000\000/\000\0039^p\000\000\000\000\010\000\000\0014\000\0167\023\024\000\000\000\000` \000\005p\0007\033n\000\000\000\000\003\021\000\000\0270\001Jo9\000\000\000\000\014D\000\000]@\006cMd\000\000\000\0002\020\000\002v\000\034n&(\000\000\000\001H@\000\013X\000r:\034`\000\000\000\002\000\000\0007\000\003\005Hc\000\000\000\000\020\010\000\001E\000\r&\0134\000\000\000\000 \000\000\005P\0009\034L\020\000\000\000\002\001\000\000\030P\001\\o8\000\000\000\000\010\004\000\000[@\006\013\021F\000\000\000\000 \020\000\002n\000\034Mw\020\000\000\000\001\000@\000\0138\000r9\030 \000\000\000\004\002\000\000-`\003AXa\000\000\000\000\010\000\000\0014\000\014\026#\014\000\000\000\000@\000\000\005T\0009\033n \000\000\000\001\000\000\000\0260\001Br9\000\000\000\000\010\000\000\000Z@\006S5`\000\000\000\0000\030\000\003<\000\030,F\030\000\000\000\001H@\000\013P\000r7\\@\000\000\000\006\"\000\000.@\003Ida\000\000\000\000\031\010\000\001:\000\014'3L\000\000\000\000@0\000\005|\0000Y\0140\000\000\000\002\001\000\000\0300\001Ta6@\000\000\000\004\000\000\000Z\000\007\023IB\000\000\000\000 \020\000\003\006\000\033Mw\000\000\000\000\001\000@\000\013@\000a2\030`\000\000\000\004\002\000\000.\000\003I^r\000\000\000\000\020\010\000\0018\000\016'\023\004\000\000\000\000@ \000\005`\0009Y-\020\000\000\000\001\000\000\000\026@\001Bd1@\000\000\000\014\004\000\000^\000\006s=`\000\000\000\000\020\000\000\002h\000\034N&\010\000\000\000\001@@\000\013`\000n7\\\000\000\000\000\006\"\000\000.`\003\005Hc\000\000\000\000\031\010\000\001;\000\016&{H\000\000\000\000d \000\005l\0009\034L\020\000\000\000\003\021\000\000\0270\001\\o8\000\000\000\000\010\000\000\000Z@\007\033QB\000\000\000\000 \020\000\003\n\000\033Mw\000\000\000\000\001\000\000\000\013(\000s0^\000\000\000\000\004\002\000\0001 \003Mhy\000\000\000\000\020\010\000\0017\000\0167#\004\000\000\000\000@ \000\005\\\0009]\017\000\000\000\000\002\001\000\000\026p\001fa<\000\000\000\000\010\004\000\000[@\006#\025r\000\000\000\000\020\000\000\002h\000\033Mw\000\000\000\000\001\000\000\000\013(\000t<\030 \000\000\000\002\000\000\000-\000\003aBa\000\000\000\000\020\000\000\0015\000\0167#d\000\000\000\000d \000\005h\0009]\014\020\000\000\000\003\021\000\000\027 \001ft<\000\000\000\000\014D\000\000]\000\007\033\005p\000\000\000\0002\020\000\002t\000\030L6\030\000\000\000\001\000`\000\013x\000s:\030 \000\000\000\004\002\000\0000`\003)Bm\000\000\000\000\010\000\000\0014\000\014\026C`\000\000\000\000@ \000\006\014\0009]\017\020\000\000\000\002\001\000\000\027\000\001ft0@\000\000\000\010\004\000\000\\\000\007\033Qp\000\000\000\000 \020\000\002r\000\034l\027@\000\000\000\001\000@\000\013H\000t<X \000\000\000\002\000\000\000-\000\003Mha\000\000\000\000\030\010\000\001<\000\016GCL\000\000\000\000 \000\000\005P\000:\030.0\000\000\000\003\001\000\000\027@\001fh<@\000\000\000\014D\000\000]@\007\033QB\000\000\000\0002\020\000\002v\000\034m\007@\000\000\000\001@@\000\013`\000a4\036\000\000\000\000\006\002\000\000/\000\0031Hy\000\000\000\000\020\000\000\0015\000\rF#\004\000\000\000\000@ \000\006\024\0006\031\017\000\000\000\000\002\000\000\000\026P\001Xa<\000\000\000\000\010\004\000\000b@\006c\021r\000\000\000\000 \020\000\002n\000\033\014F\010\000\000\000\001\000@\000\0138\000l2\036\000\000\000\000\004\002\000\000-`\0031Bx\000\000\000\000\020\010\000\0017\000\016F\013d\000\000\000\000 \000\000\005P\0006\031\014\020\000\000\000\002\000\000\000\026P\001ha<\000\000\000\000\004\000\000\000Z\000\006c\005p\000\000\000\000 \000\000\002j\000\033\014GH\000\000\000\001H@\000\013P\000l2\030 \000\000\000\006\"\000\000.@\0031Hx\000\000\000\000\031\010\000\001:\000\rF\013`\000\000\000\000d \000\005h\0001\030n0\000\000\000\002\001@\000\027p\001Xd0@\000\000\000\010\004\000\000a@\006S\005Z\000\000\000\000\020\000\000\002h\000\033\014\027@\000\000\000\001\000@\000\014\030\000l2\036 \000\000\000\004\002\000\000.\000\0031Ha\000\000\000\000\020\010\000\0018\000\rF#`\000\000\000\000@ \000\005d\0006\030/\000\000\000\000\002\001\000\000\027\020\001Fl;\000\000\000\000\004\000\000\000Z\000\006c\021B\000\000\000\0000\020\000\002x\000\035\0167@\000\000\000\000@\000\000\013 \000l0\\`\000\000\000\006\002\000\000/\000\0031Hy\000\000\000\000\031\010\000\001;\000\rF#\004\000\000\000\000d \000\005l\0006\031\017\000\000\000\000\003\021\000\000\027@\001Xa<\000\000\000\000\014D\000\000^\000\006\033Ar\000\000\000\000 \000\000\002j\000\030mW\000\000\000\000\001\000@\000\014(\000n7\\\000\000\000\000\004\000\000\000- \003\021Fp\000\000\000\000\020\010\000\001E\000\0147\003d\000\000\000\000@ \000\005\\\0001[.\000\000\000\000\002\001\000\000\026p\001He1@\000\000\000\010\004\000\000[@\006#\r`\000\000\000\000 \020\000\002n\000\032-gH\000\000\000\000@\000\000\013 \000c6\\\000\000\000\000\004\000\000\000- \003\021Jx\000\000\000\000\010\000\000\0014\000\014\027CL\000\000\000\000@\000\000\005T\0001\\\017\020\000\000\000\003\021\000\000\027 \001Fm8\000\000\000\000\014D\000\000]\000\006#\025F\000\000\000\0002\020\000\002t\000\031\0147\000\000\000\000\001H@\000\013P\000b7\031 \000\000\000\004\003\000\000/`\003\rZp\000\000\000\000\020\010\000\001C\000\r&\0134\000\000\000\000 \000\000\005P\0002\030n\000\000\000\000\002\001\000\000\0300\001\\o8\000\000\000\000\010\004\000\000\\\000\006\0335`\000\000\000\000 \020\000\002p\000\031\014V\030\000\000\000\001\000@\000\013@\000d1\\\000\000\000\000\004\002\000\000.\000\003\rXd\000\000\000\000\010\000\000\0014\000\0146k@\000\000\000\000` \000\005p\0007\033n\000\000\000\000\001\000\000\000\026@\001Hc8\000\000\000\000\014\004\000\000^\000\006s=`\000\000\000\0002\020\000\002v\000\030mW\000\000\000\000\001H@\000\013X\000d2X`\000\000\000\006\"\000\000.`\003\021Fp\000\000\000\000\031\010\000\001;\000\0147\003`\000\000\000\000@\000\000\005T\0009XL0\000\000\000\002\001\000\000\030P\001\\o8\000\000\000\000\010\000\000\000Z@\006KMF\000\000\000\000 \020\000\003\n\000\030n\007@\000\000\000\001\000@\000\0138\000s1\030`\000\000\000\004\002\000\000-`\003%\\c\000\000\000\000\020\010\000\0017\000\r\027\033\014\000\000\000\000@ \000\005\\\0004[O\000\000\000\000\001\000\000\000\026@\001fb1@\000\000\000\010\000\000\000Z@\006s=`\000\000\000\000\020\000\000\002h\000\034l&\030\000\000\000\001\000\000\000\013(\000c8\036\000\000\000\000\006\"\000\000.@\003MDc\000\000\000\000\031\010\000\001:\000\r\026s\014\000\000\000\000d \000\005h\0004\\l0\000\000\000\003\021\000\000\027 \001De8@\000\000\000\010\006\000\000_@\007\033\011F\000\000\000\000 \020\000\003\006\000\032L\026h\000\000\000\000@\000\000\013 \000i9X`\000\000\000\004\002\000\0000`\0039^p\000\000\000\000\020\010\000\0018\000\0166\023\014\000\000\000\000@ \000\005`\0004[L0\000\000\000\002\001\000\000\027\000\001Rs1@\000\000\000\010\004\000\000\\\000\007\033\025H\000\000\000\000\020\000\000\002h\000\034l&\030\000\000\000\001@@\000\013`\000n7\\\000\000\000\000\002\000\000\000-\000\003%fc\000\000\000\000\030\010\000\001<\000\rf{@\000\000\000\000d \000\005l\0009XL0\000\000\000\003\021\000\000\0270\001Rn1@\000\000\000\014D\000\000]@\006KMF\000\000\000\0002\020\000\002v\000\030N&X\000\000\000\000@\000\000\013 \000o9\030 \000\000\000\004\002\000\0001 \003\r^p\000\000\000\000\020\000\000\0014\000\rw\023\004\000\000\000\000@\000\000\0064\000:\034l \000\000\000\002\001\000\000\026p\001^r0@\000\000\000\010\004\000\000[@\006\013MX\000\000\000\000 \020\000\002n\000\033n&\010\000\000\000\001\000@\000\r\010\000p4\034\000\000\000\000\002\000\000\000-\000\003=da\000\000\000\000\020\000\000\0015\000\014\027\0330\000\000\000\000 \000\000\005L\0008\032\014@\000\000\000\001\000\000\000\026@\001hs1\000\000\000\000\014D\000\000]\000\006{IB\000\000\000\0002\020\000\002t\000\030.6`\000\000\000\001H@\000\013P\000o9\030 \000\000\000\010\002\000\000/ \003\011`l\000\000\000\000\020\014\000\001?\000\rw\023\004\000\000\000\000@ \000\006\014\0007\\L\020\000\000\000\002\001\000\000\030 \001^r0@\000\000\000\010\000\000\000g@\007#ID\000\000\000\000 \020\000\002n\000\033n&\010\000\000\000\001\000@\000\013@\000a9[\000\000\000\000\004\002\000\000.\000\003=da\000\000\000\000\020\010\000\001R\000\0146c\014\000\000\000\000 \000\000\005P\0007\\L\020\000\000\000\003\001\000\000\027@\001Rn1@\000\000\000\004\000\000\000Y@\007#\rf\000\000\000\000\020\000\000\002h\000\035\016&\020\000\000\000\001H@\000\013P\000o9\030 \000\000\000\006\"\000\000.`\003\005fl\000\000\000\000\031\010\000\001;\000\rw\023\004\000\000\000\001\000 \000\005x\0005\034n \000\000\000\003\001@\000\027 \001Bn2\000\000\000\000\010\004\000\000b@\006SMX\000\000\000\0000\030\000\002z\000\030-f \000\000\000\001\000\000\000\014h\000b4]\000\000\000\000\004\002\000\000-`\003\005\\d\000\000\000\000\020\010\000\0017\000\016&{0\000\000\000\000@ \000\005\\\0000[L@\000\000\000\002\001\000\000\032\020\001`l8\000\000\000\000\004\000\000\000Z\000\006\0139H\000\000\000\000 \000\000\002j\000\034Mv`\000\000\000\000@\000\000\013\030\000p6\031\000\000\000\000\002\000\000\000-\000\003\011Rt\000\000\000\000\031\010\000\001:\000\014\026s\020\000\000\000\000d \000\005h\0009\033m@\000\000\000\003\021\000\000\027 \001Bn2\000\000\000\000\020\004\000\000^@\006\0235R\000\000\000\000 \030\000\002~\000\030-f \000\000\000\001\000@\000\014\030\000a7\031\000\000\000\000\004\002\000\0000@\003\005\\d\000\000\000\000\020\000\000\001O\000\014&KP\000\000\000\000@ \000\005`\0000[L@\000\000\000\002\001\000\000\027\000\001do6\000\000\000\000\010\004\000\000\\\000\006\0139H\000\000\000\000 \020\000\003$\000\034lV\030\000\000\000\000@\000\000\013 \000a7\031\000\000\000\000\006\002\000\000/\000\003\021Jc\000\000\000\000\010\000\000\0013\000\016G\033\014\000\000\000\000 \000\000\005P\0001\032.@\000\000\000\003\001\000\000\0270\001Bn2\000\000\000\000\014D\000\000]@\007\023=X\000\000\000\0002\020\000\002v\000\030-f \000\000\000\002\000@\000\013p\000r:\032 \000\000\000\002\000\000\0007\000\003\025^r\000\000\000\000\020\010\000\001E\000\016v#4\000\000\000\000@\000\000\005P\0002[n \000\000\000\002\000\000\000\031P\001Zv8\000\000\000\000\014\000\000\000i@\006+=d\000\000\000\000 \020\000\002n\000\033\0167\020\000\000\000\001\000@\000\0138\000e7\\@\000\000\000\004\002\000\0004 \003APa\000\000\000\000\010\000\000\0014\000\014V{H\000\000\000\000@\000\000\005T\0006\034n \000\000\000\001\000\000\000\0260\001`h5@\000\000\000\004\000\000\000Z\000\006S5`\000\000\000\0000\030\000\003:\000\031-w\020\000\000\000\001H@\000\013P\000l9\\@\000\000\000\006\"\000\000.@\003\025^r\000\000\000\000 \010\000\001=\000\014'3\014\000\000\000\000@0\000\005|\0002[n \000\000\000\002\001\000\000\0300\001Jo9\000\000\000\000\010\004\000\000a\000\006+=d\000\000\000\000 \000\000\003\036\000\033.fp\000\000\000\001@\000\000\r\030\000e7\\@\000\000\000\004\002\000\000.\000\0031fr\000\000\000\000\020\010\000\0018\000\014V{H\000\000\000\000@ \000\006H\0001[\r\020\000\000\000\001\000\000\000\026@\001Jo9\000\000\000\000\014\004\000\000^\000\007\003!r\000\000\000\000\020\000\000\002h\000\035\0146 \000\000\000\000@\000\000\013 \000j6[\000\000\000\000\010\003\000\000/ \003\025^r\000\000\000\000\031\010\000\001;\000\rG\033H\000\000\000\000d \000\005l\0002[n \000\000\000\004\001\000\000\027`\001dt9@\000\000\000\004\000\000\000n\000\006\013\021F\000\000\000\000 \020\000\003\n\000\034\014W\020\000\000\000\001@`\000\014\000\000a2\030`\000\000\000\004\000\000\0003 \003Mhz\000\000\000\000\020\010\000\0017\000\014\026#\014\000\000\000\000@ \000\005\\\0009\033n \000\000\000\002\001\000\000\026p\001Bd1@\000\000\000\010\004\000\000h@\007\0031B\000\000\000\000\020\000\000\002h\000\030,F\030\000\000\000\001\000\000\000\013(\000r7\\@\000\000\000\002\000\000\000,`\003Ihl\000\000\000\000\010\000\000\0014\000\r&k@\000\000\000\000`0\000\006x\0000Y\0140\000\000\000\003\021\000\000\027 \001do9\000\000\000\000\014D\000\000]\000\006\013\021F\000\000\000\000@\020\000\002z\000\030Ng\030\000\000\000\001\000`\000\013x\000a2\030`\000\000\000\004\002\000\0000`\003\005Hc\000\000\000\000\020\010\000\001B\000\014\026#\014\000\000\000\000@\000\000\006<\0009]\017 \000\000\000\002\001\000\000\027\000\001Bd1@\000\000\000\010\004\000\000\\\000\007\023=d\000\000\000\000 \020\000\002p\000\030,F\030\000\000\000\001\000@\000\r\020\000s2Z \000\000\000\002\000\000\000-\000\003\005Hc\000\000\000\000\030\010\000\001<\000\016\006cd\000\000\000\000 \000\000\005P\000:\031\0140\000\000\000\001\000\000\000\026@\001Tm8\000\000\000\000\014\006\000\000j@\006\013\021F\000\000\000\0002\020\000\002v\000\034Mw\020\000\000\000\001H@\000\013X\000a2\030`\000\000\000\010\002\000\000/@\003\011da\000\000\000\000\020\014\000\001?\000\0167#\004\000\000\000\000@ \000\006\024\0001\034M@\000\000\000\003\001@\000\030\000\001ft0@\000\000\000\010\000\000\000f@\007\033Qr\000\000\000\000 \020\000\002n\000\034nF\010\000\000\000\001\000@\000\0138\000s:\036\000\000\000\000\004\002\000\000-`\003Mha\000\000\000\000\020\010\000\001Q\000\014F+d\000\000\000\000 \000\000\005P\0001\032.@\000\000\000\002\000\000\000\026P\001hx0@\000\000\000\004\000\000\000Z\000\007\003!D\000\000\000\000\020\000\000\002h\000\034nGH\000\000\000\001H@\000\013P\000s:\030 \000\000\000\006\"\000\000.@\003Mhx\000\000\000\000\031\010\000\001:\000\0167#\004\000\000\000\001\000 \000\005t\0001\030l0\000\000\000\002\001@\000\027p\001ft0@\000\000\000\010\004\000\000a@\007\033QB\000\000\000\000 \020\000\003\004\000\034nF\010\000\000\000\001\000\000\000\014x\000s:\036 \000\000\000\004\002\000\000.\000\003Mha\000\000\000\000\020\010\000\0018\000\0167#`\000\000\000\000@ \000\005d\0009]\014\020\000\000\000\002\001\000\000\032 \001hy0@\000\000\000\004\000\000\000Z\000\007\033QB\000\000\000\0000\020\000\002x\000\035\017\007\030\000\000\000\000@\000\000\013 \000t<\036 \000\000\000\002\000\000\000-\000\003Mhz\000\000\000\000\031\010\000\001:\000\0167#\004\000\000\000\000d \000\005l\0009]\017 \000\000\000\003\021\000\000\0270\001ft0@\000\000\000\020\004\000\000_\000\006c\021r\000\000\000\000 \000\000\002j\000\033\014F\010\000\000\000\001\000@\000\014(\000l2\036\000\000\000\000\004\000\000\000- \0031Ha\000\000\000\000\020\000\000\001M\000\rF#d\000\000\000\000@ \000\005\\\0006\031\014\020\000\000\000\002\001\000\000\026p\001Xd<\000\000\000\000\010\004\000\000[@\006c\021B\000\000\000\000 \020\000\003\"\000\035\014\027H\000\000\000\000@\000\000\013 \000l2\030 \000\000\000\004\000\000\000- \003QBx\000\000\000\000\010\000\000\0014\000\016\006c\010\000\000\000\000 \000\000\005P\0006\031\017\020\000\000\000\003\021\000\000\027 \001Xd0@\000\000\000\014D\000\000]\000\006c\021p\000\000\000\0002\020\000\002t\000\033\014F\010\000\000\000\002\000@\000\013h\000b1\\`\000\000\000\004\003\000\000/`\0031Ha\000\000\000\000\020\010\000\001C\000\rF#\004\000\000\000\000@ \000\006\010\0006\031\014\020\000\000\000\002\000\000\000\031p\001Xd<@\000\000\000\010\004\000\000\\\000\006c\021B\000\000\000\000 \020\000\002p\000\033\014G@\000\000\000\001\000@\000\013H\000l2\030 \000\000\000\004\002\000\0004@\003\rXv\000\000\000\000\010\000\000\0014\000\rF#\004\000\000\000\000` \000\005p\000:\034o\000\000\000\000\001\000\000\000\026@\001hy<\000\000\000\000\004\000\000\000Z\000\006c\021r\000\000\000\0002\020\000\002v\000\033\014F\010\000\000\000\001H@\000\013X\000l2\036\000\000\000\000\006\"\000\000/\000\0031Ha\000\000\000\000 \010\000\001>\000\0147\003d\000\000\000\000@\000\000\005T\0001[.\000\000\000\000\002\001\000\000\030P\001de8\000\000\000\000\010\000\000\000Z@\006\0335`\000\000\000\000 \000\000\003\032\000\030n\007H\000\000\000\001\000@\000\0138\000c6\\\000\000\000\000\004\002\000\000-`\003\021Jc\000\000\000\000\020\010\000\0017\000\0146k@\000\000\000\000@ \000\006D\0004[O\020\000\000\000\001\000\000\000\026@\001Fm8\000\000\000\000\010\000\000\000Z@\006#\025p\000\000\000\000\020\000\000\002h\000\035l\026H\000\000\000\000@\000\000\013 \000c8\036 \000\000\000\006\"\000\000.@\003\rZp\000\000\000\000\031\010\000\001:\000\014F+\014\000\000\000\000d \000\005h\0001[.\000\000\000\000\004\001\000\000\027P\001Dn2@\000\000\000\010\006\000\000_@\006\0335`\000\000\000\000 \020\000\003\006\000\030mW\000\000\000\000\001\000@\000\014\020\000c6\\\000\000\000\000\004\000\000\0003`\003AJi\000\000\000\000\020\010\000\0017\000\0146k@\000\000\000\000@ \000\005`\0002\031,0\000\000\000\002\001\000\000\027\000\001Fm8\000\000\000\000\010\004\000\000i\000\006\0331H\000\000\000\000\020\000\000\002h\000\030mW\000\000\000\000\001@@\000\013`\000p4\036\000\000\000\000\002\000\000\000-\000\003Mhp\000\000\000\000\010\000\000\0014\000\r&k0\000\000\000\000`0\000\006\030\0001[.\000\000\000\000\003\021\000\000\0270\001He1@\000\000\000\014D\000\000]@\006\0335`\000\000\000\000@\020\000\002|\000\030n\007@\000\000\000\001\000\000\000\013(\000s1\030`\000\000\000\004\002\000\0001 \003MJp\000\000\000\000\020\000\000\0015\000\0166\023\014\000\000\000\000@\000\000\0064\0001\\\017\000\000\000\000\002\001\000\000\026p\001fb1@\000\000\000\010\004\000\000[@\006K9F\000\000\000\000 \020\000\002n\000\034l&\030\000\000\000\001\000@\000\r\010\000i7\036\000\000\000\000\002\000\000\000-\000\003MDc\000\000\000\000\020\000\000\0015\000\rf{@\000\000\000\000 \000\000\005P\000<\030L\020\000\000\000\001\000\000\000\026@\001Fp<\000\000\000\000\014D\000\000]\000\007\033\011F\000\000\000\0002\020\000\002t\000\032-f\030\000\000\000\001H@\000\013P\000s1\030`\000\000\000\010\002\000\000/ \003\011Jq\000\000\000\000\020\014\000\001?\000\0166\023\014\000\000\000\000@ \000\006\014\0009XL0\000\000\000\002\001\000\000\030 \001fb1@\000\000\000\010\000\000\000g@\007\003\025B\000\000\000\0000\020\000\002t\000\034l&\030\000\000\000\001\000@\000\013@\000i7\030`\000\000\000\004\002\000\000.\000\003MDc\000\000\000\000\020\010\000\001R\000\0166+\020\000\000\000\000 \000\000\005P\0009XL0\000\000\000\003\001\000\000\027@\001`l<\000\000\000\000\004\000\000\000Z\000\007C\rJ\000\000\000\000\020\000\000\002h\000\032N7\020\000\000\000\001@`\000\r(\000s1\030`\000\000\000\006\"\000\000.`\003%\\c\000\000\000\000\031\010\000\001;\000\0166\023\014\000\000\000\001\000 \000\005x\0001\034M0\000\000\000\001\000\000\000\026@\001^r0@\000\000\000\010\004\000\000b@\000\000\000\000\000\000\000\000\021\000\000\002d\000\000\000\000\000\000\000\000\000D\000\000\013\020\000t9X@\000\000\000\004\002\000\000-`\003=da\000\000\000\000\020\010\000\0017\000\014\027\0330\000\000\000\000@ \000\005\\\0009\033,#\000\000\000\002\001\000\000\026p\001`h8\000\000\000\000\004\000\000\000Z\000\006{IB\000\000\000\000 \000\000\002j\000\030.6`\000\000\000\000@\000\000\013\030\000\000\000\000\000\000\000\000\002\020\000\000,@\003Qfb\000\000\000\000\031\010\000\001:\000\rw\023\004\000\000\000\000d \000\005h\0000\\m@\000\000\000\003\021\000\000\027 \001Db9\014\000\000\000\014\004\000\000c@\006\023AX\000\000\000\000 \030\000\002~\000\033n&\010\000\000\000\001\000@\000\014\030\000o9\030 \000\000\000\004\002\000\0000@\000\000\000\000\000\000\000\000\010@\000\0012\000\016G\023\010\000\000\000\000@ \000\005\\\0007\\L\020\000\000\000\002\001\000\000\027\000\001Bs6\000\000\000\000\010\004\000\000\\\000\007\0235D1\000\000\000 \020\000\002n\000\030mF\030\000\000\000\000@\000\000\013 \000o9\030 \000\000\000\006\002\000\000/\000\003%\\c\000\000\000\000\010\000\000\0013\000\000\000\000\000\000\000\000\000\"\000\000\005H\000:\034L \000\000\000\003\021\000\000\027 \001^r0@\000\000\000\014D\000\000]@\006\013MX\000\000\000\0002\020\000\002v\000\030L'\021D\000\000\001@@\000\0148\000j9\\@\000\000\000\006\003\000\000.@\003\005\\d\000\000\000\000\020\010\000\001E\000\000\000\000\000\000\000\000\000\"\000\000\005H\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Di:\000\000\000\000\010\004\000\000[@\006\0139H\000\000\000\000 \020\000\002n\000\034Mv`\000\000\000\001\000@\000\0138\000r6XF \000\000\004\002\000\000-`\003AXp\000\000\000\000\010\000\000\0014\000\014\026s\020\000\000\000\000@\000\000\005T\0009\033m@\000\000\000\001\000\000\000\0260\000\000\000\000\000\000\000\000\004 \000\000Y\000\006\023%h\000\000\000\0002\020\000\002t\000\030-f \000\000\000\001H@\000\013P\000r7[\000\000\000\000\006\"\000\000.@\003\011Dr\031\000\000\000\030\010\000\001G\000\014&k$\000\000\000\000@0\000\005|\0000[L@\000\000\000\002\001\000\000\0300\001Bn2\000\000\000\000\010\004\000\000a\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\030M\027 \000\000\000\001\000@\000\013@\000a7\031\000\000\000\000\004\002\000\000.\000\003I^l\000\000\000\000\020\010\000\0018\000\016&k\010f\000\000\000@ \000\005\\\0009Y,0\000\000\000\001\000\000\000\026@\001Bn2\000\000\000\000\014\004\000\000^\000\006#\025F\000\000\000\000\020\000\000\002f\000\000\000\000\000\000\000\000\000D\000\000\013\020\000b4]\000\000\000\000\006\002\000\000.`\003\005\\d\000\000\000\000\031\010\000\001;\000\016&{0\000\000\000\000d \000\005l\0001\030N#\030\000\000\003\001\000\000\030p\001dt4@\000\000\000\004\000\000\000n\000\006+=d\000\000\000\000 \020\000\003\n\000\000\000\000\000\000\000\000\000D\000\000\013\020\000\000\000\000\000\000\000\000\002\020\000\000,@\000\000\000\000\000\000\000\000\010@\000\0012\000\014V{H\000\000\000\000@ \000\005\\\0006\034n \000\000\000\002\001\000\000\026p\001dm1\r\000\000\000\010\004\000\000[@\007\003!B\000\000\000\000\020\000\000\002h\000\031-w\020\000\000\000\001\000\000\000\013(\000l9\\@\000\000\000\002\000\000\000,`\000\000\000\000\000\000\000\000\010@\000\0012\000\r&k@\000\000\000\000`0\000\006t\0002[n \000\000\000\003\021\000\000\027 \001Xs9\000\000\000\000\014D\000\000]\000\006\023\011d4\000\000\0000\020\000\003\016\000\030Nf\030\000\000\000\001\000`\000\013x\000e7\\@\000\000\000\004\002\000\0000`\003\025^r\000\000\000\000\020\010\000\001B\000\000\000\000\000\000\000\000\000\"\000\000\005H\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Jo9\000\000\000\000\010\004\000\000\\\000\006cMd\000\000\000\000 \020\000\002p\000\034MV\021T\000\000\001\000@\000\0138\000c6\032 \000\000\000\002\000\000\000-\000\003\025^r\000\000\000\000\030\010\000\001<\000\016\006Cd\000\000\000\000 \000\000\005P\000\000\000\000\000\000\000\000\001\010\000\000\026 \000\000\000\000\000\000\000\000\004 \000\000Y\000\006+=d\000\000\000\0002\020\000\002v\000\033\0167\020\000\000\000\001H@\000\013X\000b1\034FP\000\000\006\002\000\0001`\003Ihs\000\000\000\000\010\000\000\001\\\000\014\026#\014\000\000\000\000@ \000\006\024\000\000\000\000\000\000\000\000\001\010\000\000\026 \000\000\000\000\000\000\000\000\004 \000\000Y\000\007\033Qt\000\000\000\000 \020\000\002n\000\030,F\030\000\000\000\001\000@\000\0138\000r7\\@\000\000\000\004\002\000\000-`\003IZb\033\000\000\000\020\010\000\0017\000\016\006c\004\000\000\000\000 \000\000\005P\0000Y\0140\000\000\000\002\000\000\000\026P\001do9\000\000\000\000\004\000\000\000Y@\000\000\000\000\000\000\000\000\021\000\000\002d\000\032MW\000\000\000\000\001@`\000\rp\000a2\030`\000\000\000\006\"\000\000.@\003I^r\000\000\000\000\030\010\000\001:\000\014&\023Hl\000\000\000` \000\006\034\0001\035N0\000\000\000\002\001@\000\027p\001Bd1@\000\000\000\010\004\000\000a@\006\013\021F\000\000\000\000 \020\000\003\004\000\000\000\000\000\000\000\000\000D\000\000\013\020\000s:\036@\000\000\000\004\002\000\000.\000\003\005Hc\000\000\000\000\020\010\000\0018\000\016&{H\000\000\000\000@ \000\005`\0009\033,#8\000\000\002\001\000\000\026p\001fe4@\000\000\000\004\000\000\000Z\000\006\013\021F\000\000\000\0000\020\000\002x\000\034\rGH\000\000\000\000@\000\000\013 \000\000\000\000\000\000\000\000\002\020\000\000,@\003)Zp\000\000\000\000\030\014\000\001U\000\014\026#\014\000\000\000\000d \000\005l\0009\033n \000\000\000\003\021\000\000\0270\001Db9\r`\000\000\014\004\000\000c@\006\023IB\000\000\000\000 \030\000\002~\000\034nF\010\000\000\000\001\000@\000\014(\000\000\000\000\000\000\000\000\002\020\000\000,@\000\000\000\000\000\000\000\000\010@\000\0012\000\0167#d\000\000\000\000@ \000\005\\\0009]\014\020\000\000\000\002\001\000\000\026p\001ft<\000\000\000\000\010\004\000\000[@\007\0335D0\000\000\000 \020\000\002n\000\031\014WH\000\000\000\000@\000\000\013 \000b4]\000\000\000\000\004\000\000\000- \003Qpa\000\000\000\000\010\000\000\0014\000\000\000\000\000\000\000\000\000\"\000\000\005H\0009]\017\020\000\000\000\003\021\000\000\027 \001ft0@\000\000\000\014D\000\000]\000\007\033Qp\000\000\000\0002\020\000\002t\000\030L'\031@\000\000\001@@\000\0148\000b1X`\000\000\000\004\003\000\000/`\003Mha\000\000\000\000\020\010\000\001C\000\0167#\004\000\000\000\000@ \000\006\010\000\000\000\000\000\000\000\000\001\010\000\000\026 \001ft<@\000\000\000\010\004\000\000\\\000\007\033QB\000\000\000\000 \020\000\002p\000\034nG@\000\000\000\001\000@\000\013H\000s6XF\020\000\000\004\002\000\000-`\003Qra\000\000\000\000\010\000\000\0014\000\0167#\004\000\000\000\000` \000\005p\000:\036\0160\000\000\000\001\000\000\000\026@\000\000\000\000\000\000\000\000\004 \000\000Y\000\007\033Qt\000\000\000\0002\020\000\002t\000\034nF\010\000\000\000\001H@\000\013X\000s:\036@\000\000\000\006\"\000\000.`\003\011Ds\030@\000\000\030\010\000\001G\000\rF#d\000\000\000\000@\000\000\005T\0006\031\014\020\000\000\000\002\001\000\000\030P\001Xd<\000\000\000\000\010\000\000\000Z@\000\000\000\000\000\000\000\000\021\000\000\002d\000\033\014GH\000\000\000\001\000@\000\0138\000l2\030 \000\000\000\004\002\000\000-`\0031Hx\000\000\000\000\020\010\000\0017\000\0166k\010d\000\000\000@ \000\005\\\000:\030/\020\000\000\000\001\000\000\000\026@\001Xd0@\000\000\000\010\000\000\000Z@\007#\005p\000\000\000\000\020\000\000\002h\000\000\000\000\000\000\000\000\000D\000\000\013\020\000l2\036 \000\000\000\006\"\000\000.@\0031Ha\000\000\000\000\031\010\000\001:\000\rF#`\000\000\000\000d \000\005h\0001\030N3\020\000\000\003\001\000\000\030p\001Dc9@\000\000\000\010\006\000\000_@\006c\021B\000\000\000\000 \020\000\003\006\000\033\014F\010\000\000\000\001\000@\000\014\020\000\000\000\000\000\000\000\000\002\020\000\000,@\0031Hy\000\000\000\000\020\010\000\0018\000\rF#\004\000\000\000\000@ \000\005`\0006\031\017\000\000\000\000\002\001\000\000\027\020\001fm1\014`\000\000\010\004\000\000[@\006\0331l\000\000\000\000\020\000\000\002h\000\033\014F\010\000\000\000\001@@\000\013`\000t9^\000\000\000\000\002\000\000\000-\000\000\000\000\000\000\000\000\000\010@\000\0012\000\rF#d\000\000\000\000d \000\005l\0006\031\014\020\000\000\000\003\021\000\000\0270\001Xd<\000\000\000\000\014D\000\000^\000\006\023\011f3\000\000\0000\020\000\003\016\000\030n\007H\000\000\000\001\000\000\000\013(\000c6\\\000\000\000\000\004\002\000\0001 \000\000\000\000\000\000\000\000\010@\000\0012\000\000\000\000\000\000\000\000\000\"\000\000\005H\0001\\\017\020\000\000\000\002\001\000\000\026p\001Fm8\000\000\000\000\010\004\000\000[@\006#\025F\000\000\000\000 \020\000\002n\000\034mV\021P\000\000\001\000@\000\0138\000i7\036 \000\000\000\002\000\000\000-\000\003\rZp\000\000\000\000\020\000\000\0015\000\014F+`\000\000\000\000 \000\000\005P\000;X-\020\000\000\000\001\000\000\000\026@\001Fp<@\000\000\000\014D\000\000]\000\006\0335`\000\000\000\0002\020\000\002t\000\031\014V\030\000\000\000\001H@\000\013P\000b1\034f@\000\000\006\002\000\0001`\003\011\\e\000\000\000\000\020\014\000\001?\000\0146k@\000\000\000\000@ \000\006\014\0001[.\000\000\000\000\002\001\000\000\030 \000\000\000\000\000\000\000\000\004 \000\000Y\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\030mW\000\000\000\000\001\000@\000\013@\000d2X`\000\000\000\004\002\000\000.\000\003MZb\032@\000\000\020\010\000\0017\000\0146c\020\000\000\000\000 \000\000\005P\0001[.\000\000\000\000\003\001\000\000\027@\001`h<\000\000\000\000\004\000\000\000Z\000\007\033Q`\000\000\000\000\020\000\000\002h\000\000\000\000\000\000\000\000\000D\000\000\013\020\000c6\\\000\000\000\000\006\"\000\000.`\003\021Jc\000\000\000\000\031\010\000\001;\000\014&\023Lj\000\000\000` \000\006\034\0001\\\017\000\000\000\000\002\000\000\000\026P\001fb1@\000\000\000\010\004\000\000b@\000\000\000\000\000\000\000\000\021\000\000\002d\000\000\000\000\000\000\000\000\000D\000\000\013\020\000c8\036\000\000\000\000\004\002\000\000-`\003MDc\000\000\000\000\020\010\000\0017\000\r\026s\014\000\000\000\000@ \000\005\\\0009[,#0\000\000\002\001\000\000\026p\001Rn<\000\000\000\000\004\000\000\000Z\000\007\033\011F\000\000\000\000 \000\000\002j\000\033Mw\000\000\000\000\000@\000\000\013 \000\000\000\000\000\000\000\000\002\020\000\000,@\003\r`x\000\000\000\000\031\010\000\001:\000\0166\023\014\000\000\000\000d \000\005h\0004[L0\000\000\000\003\021\000\000\027 \001Db9M@\000\000\014\004\000\000c@\006\023\025b\000\000\000\000 \030\000\002~\000\034l&\030\000\000\000\001\000@\000\014\030\000s1\030`\000\000\000\004\002\000\0000@\000\000\000\000\000\000\000\000\010@\000\0012\000\000\000\000\000\000\000\000\000\"\000\000\005H\0009XL0\000\000\000\002\001\000\000\027\000\001Rn1@\000\000\000\010\004\000\000\\\000\007\0335D7\000\000\000 \020\000\002n\000\034lV \000\000\000\000@\000\000\013 \000s1\030`\000\000\000\006\002\000\000/\000\003AXx\000\000\000\000\010\000\000\0014\000\000\000\000\000\000\000\000\000\"\000\000\005H\000\000\000\000\000\000\000\000\001\010\000\000\026 \001fb1@\000\000\000\014D\000\000]@\006K9F\000\000\000\0002\020\000\002v\000\030L'\031\\\000\000\001@@\000\0148\000b9\032`\000\000\000\002\000\000\000-\000\003=da\000\000\000\000\020\010\000\001E\000\000\000\000\000\000\000\000\000\"\000\000\005H\000\000\000\000\000\000\000\000\001\010\000\000\026 \001hs1\000\000\000\000\010\004\000\000[@\006{IB\000\000\000\000 \020\000\002n\000\030.6`\000\000\000\001\000@\000\0138\000\000\000\000\000\000\000\000\002\020\000\000,@\003APp\000\000\000\000\010\000\000\0014\000\rw\023\004\000\000\000\000@\000\000\005T\0000\\m@\000\000\000\001\000\000\000\0260\000\000\000\000\000\000\000\000\004 \000\000Y\000\007#MD\000\000\000\0002\020\000\002t\000\033n&\010\000\000\000\001H@\000\013P\000a9[\000\000\000\000\006\"\000\000.@\000\000\000\000\000\000\000\000\010@\000\0012\000\014'\0030\000\000\000\000@0\000\005|\0007\\L\020\000\000\000\002\001\000\000\0300\001^r0@\000\000\000\010\004\000\000a\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\035\016&\020\000\000\000\001\000@\000\0138\000o9\030 \000\000\000\004\002\000\000.\000\003\005fl\000\000\000\000\020\010\000\0018\000\000\000\000\000\000\000\000\000\"\000\000\005H\0001[\0140\000\000\000\001\000\000\000\026@\001^r0@\000\000\000\014\004\000\000^\000\006K9F\000\000\000\000\020\000\000\002f\000\000\000\000\000\000\000\000\000D\000\000\013\020\000t9\030@\000\000\000\006\"\000\000.@\003=da\000\000\000\000\031\010\000\001;\000\014\027\0330\000\000\000\000d \000\005l\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Ts9\000\000\000\000\014\006\000\000]\000\006\0139H\000\000\000\000 \020\000\003\n\000\000\000\000\000\000\000\000\000D\000\000\013\020\000\000\000\000\000\000\000\000\002\020\000\000,@\003\011Rt\000\000\000\000\020\010\000\0017\000\014\026s\020\000\000\000\000@ \000\005\\\0009\033m@\000\000\000\002\001\000\000\026p\000\000\000\000\000\000\000\000\004 \000\000Y\000\007\0031`\000\000\000\000\020\000\000\002h\000\030-f \000\000\000\001\000\000\000\013(\000r7[\000\000\000\000\002\000\000\000,`\000\000\000\000\000\000\000\000\010@\000\0012\000\014&KP\000\000\000\000d \000\005h\0000[L@\000\000\000\003\021\000\000\027 \001do6\000\000\000\000\014D\000\000]\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\030MVH\000\000\000\001\000`\000\013x\000a7\031\000\000\000\000\004\002\000\0000`\003\005\\d\000\000\000\000\020\010\000\001B\000\000\000\000\000\000\000\000\000\"\000\000\005H\0001\032.@\000\000\000\002\001\000\000\027\000\001Bn2\000\000\000\000\010\004\000\000\\\000\007\023=X\000\000\000\000 \020\000\002p\000\000\000\000\000\000\000\000\000D\000\000\013\020\000s2X`\000\000\000\002\000\000\000-\000\003\005\\d\000\000\000\000\030\010\000\001<\000\014F+\014\000\000\000\000 \000\000\005L\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Di:\000\000\000\000\014\004\000\000]@\006\0139H\000\000\000\0002\020\000\002v\000\034Mv`\000\000\000\001H@\000\013X\000\000\000\000\000\000\000\000\002\020\000\000,@\003Ihi\000\000\000\000\010\000\000\001\\\000\014V{H\000\000\000\000@ \000\006\024\000\000\000\000\000\000\000\000\001\010\000\000\026 \000\000\000\000\000\000\000\000\004 \000\000Y\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\031-w\020\000\000\000\001\000@\000\0138\000l9\\@\000\000\000\004\002\000\000-`\000\000\000\000\000\000\000\000\010@\000\0012\000\016\006C\004\000\000\000\000 \000\000\005P\0002[n \000\000\000\002\000\000\000\026P\001Xs9\000\000\000\000\004\000\000\000Y@\000\000\000\000\000\000\000\000\021\000\000\002d\000\032MW\000\000\000\000\001@`\000\rh\000e7\\@\000\000\000\006\"\000\000.@\0031fr\000\000\000\000\031\010\000\001:\000\000\000\000\000\000\000\000\000\"\000\000\005H\0001\035L0\000\000\000\002\001@\000\027p\001Jo9\000\000\000\000\010\004\000\000a@\006+=d\000\000\000\000 \020\000\003\004\000\000\000\000\000\000\000\000\000D\000\000\013\020\000\000\000\000\000\000\000\000\002\020\000\000,@\003\025^r\000\000\000\000\020\010\000\0018\000\rG\033H\000\000\000\000@ \000\005`\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Fl4@\000\000\000\004\000\000\000Z\000\006+=d\000\000\000\0000\020\000\002x\000\034\r\007H\000\000\000\000@\000\000\013 \000\000\000\000\000\000\000\000\002\020\000\000,@\000\000\000\000\000\000\000\000\010@\000\0012\000\014V{H\000\000\000\000d \000\005l\0006\034n \000\000\000\003\021\000\000\0270\000\000\000\000\000\000\000\000\004 \000\000Y\000\007\023Qf\000\000\000\000\020\000\000\0038\000\030,F\030\000\000\000\001\000@\000\014(\000\000\000\000\000\000\000\000\002\020\000\000,@\000\000\000\000\000\000\000\000\010@\000\0012\000\0167#h\000\000\000\000@ \000\005\\\0000Y\0140\000\000\000\002\001\000\000\026p\001do9\000\000\000\000\010\004\000\000[@\000\000\000\000\000\000\000\000\021\000\000\002d\000\034\rF\010\000\000\000\000@\000\000\013 \000a2\030`\000\000\000\004\000\000\000- \003I^r\000\000\000\000\010\000\000\0013\000\000\000\000\000\000\000\000\000\"\000\000\005H\0005\033.\000\000\000\000\003\001@\000\033`\001Bd1@\000\000\000\014D\000\000]\000\007\023=d\000\000\000\0002\020\000\002t\000\000\000\000\000\000\000\000\000D\000\000\013\020\000b;\034`\000\000\000\004\003\000\000/`\003\005Hc\000\000\000\000\020\010\000\001C\000\014\026#\014\000\000\000\000@ \000\006\010\000\000\000\000\000\000\000\000\001\010\000\000\026 \001ft=\000\000\000\000\010\004\000\000\\\000\006\013\021F\000\000\000\000 \020\000\002p\000\034Mw\020\000\000\000\001\000@\000\013@\000\000\000\000\000\000\000\000\002\020\000\000,@\003MJi\000\000\000\000\010\000\000\0014\000\014\026#\014\000\000\000\000` \000\005p\0008\033\017\020\000\000\000\001\000\000\000\026@\000\000\000\000\000\000\000\000\004 \000\000Y\000\006S5`\000\000\000\0000\030\000\003*\000\030,F\030\000\000\000\001H@\000\013X\000r7\\@\000\000\000\006\"\000\000.`\000\000\000\000\000\000\000\000\010@\000\0012\000\014'\023\004\000\000\000\000@0\000\005|\0009]\014\020\000\000\000\002\001\000\000\030P\000\000\000\000\000\000\000\000\004 \000\000Y\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\034nGH\000\000\000\001\000@\000\0138\000s:\030 \000\000\000\004\002\000\000-`\003Mhx\000\000\000\000\020\010\000\0017\000\000\000\000\000\000\000\000\000\"\000\000\005H\0002\031/\020\000\000\000\001\000\000\000\026@\001Di:\000\000\000\000\010\000\000\000Z@\007#aB\000\000\000\000\020\000\000\002h\000\000\000\000\000\000\000\000\000D\000\000\013\020\000s:\036 \000\000\000\006\"\000\000.@\003Mha\000\000\000\000\031\010\000\001:\000\0167#`\000\000\000\000d \000\005h\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Dc1@\000\000\000\010\006\000\000_@\007\033QB\000\000\000\000 \020\000\003\006\000\034nF\010\000\000\000\001\000@\000\014\020\000\000\000\000\000\000\000\000\002\020\000\000,@\003Mhy\000\000\000\000\020\010\000\0018\000\0167#\004\000\000\000\000@ \000\005`\0009]\017\000\000\000\000\002\001\000\000\027\020\000\000\000\000\000\000\000\000\004 \000\000Y\000\007#eB\000\000\000\000\020\000\000\002h\000\034nF\010\000\000\000\001@@\000\013`\000t<\034`\000\000\000\002\000\000\000-\000\000\000\000\000\000\000\000\000\010@\000\0012\000\0167#h\000\000\000\000d \000\005h\0009]\014\020\000\000\000\003\021\000\000\0270\001ft=\000\000\000\000\014D\000\000]@\000\000\000\000\000\000\000\000\021\000\000\002d\000\033\014GH\000\000\000\001\000\000\000\013(\000l2\030 \000\000\000\004\002\000\0001 \0031Hx\000\000\000\000\020\000\000\0015\000\000\000\000\000\000\000\000\000\"\000\000\005H\0006\031\017\020\000\000\000\002\001\000\000\026p\001Xd0@\000\000\000\010\004\000\000[@\006c\021p\000\000\000\000 \020\000\002n\000\000\000\000\000\000\000\000\000D\000\000\013\020\000t0^ \000\000\000\002\000\000\000-\000\0031Ha\000\000\000\000\020\000\000\0015\000\016F\013`\000\000\000\000 \000\000\005P\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Xd<@\000\000\000\014D\000\000]\000\006c\021B\000\000\000\0002\020\000\002t\000\033\014G@\000\000\000\001H@\000\013P\000\000\000\000\000\000\000\000\002\020\000\000,@\003\011Fs\000\000\000\000\020\014\000\001?\000\rF#\004\000\000\000\000@ \000\006\014\0006\031\014\020\000\000\000\002\001\000\000\030 \000\000\000\000\000\000\000\000\004 \000\000Y\000\006c\021r\000\000\000\000 \020\000\002p\000\033\014F\010\000\000\000\001\000@\000\013@\000l2\036\000\000\000\000\004\002\000\000. \000\000\000\000\000\000\000\000\010@\000\0012\000\0146cX\000\000\000\000 \000\000\005P\0006\031\014\020\000\000\000\003\001\000\000\027@\001hs<\000\000\000\000\004\000\000\000Z\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\033\014GH\000\000\000\001H@\000\013X\000l2\030 \000\000\000\006\"\000\000.`\0031Hx\000\000\000\000\031\010\000\001<\000\000\000\000\000\000\000\000\000\"\000\000\005H\0001\\\017\020\000\000\000\002\000\000\000\026P\001Fm8\000\000\000\000\010\004\000\000b@\000\000\000\000\000\000\000\000\021\000\000\002d\000\000\000\000\000\000\000\000\000D\000\000\013\020\000c8\036 \000\000\000\004\002\000\000-`\003\rZp\000\000\000\000\020\010\000\0017\000\014F+\014\000\000\000\000@ \000\005\\\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Rn<@\000\000\000\004\000\000\000Z\000\006\0335`\000\000\000\000 \000\000\002j\000\031\014W@\000\000\000\000@\000\000\013 \000\000\000\000\000\000\000\000\002\020\000\000,@\003\r`y\000\000\000\000\031\010\000\001:\000\0146k@\000\000\000\000d \000\005h\0002\031,0\000\000\000\003\021\000\000\027 \000\000\000\000\000\000\000\000\004 \000\000Y\000\006\0239J\000\000\000\000 \030\000\002~\000\030mW\000\000\000\000\001\000@\000\014\030\000c6\\\000\000\000\000\004\002\000\0000@\000\000\000\000\000\000\000\000\010@\000\0012\000\000\000\000\000\000\000\000\000\"\000\000\005H\0001[.\000\000\000\000\002\001\000\000\027\000\001He1@\000\000\000\010\004\000\000\\\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\030mF \000\000\000\000@\000\000\013 \000c6\\\000\000\000\000\006\002\000\000/\000\003APx\000\000\000\000\010\000\000\0014\000\000\000\000\000\000\000\000\000\"\000\000\005H\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Fm8\000\000\000\000\014D\000\000]@\006#\025F\000\000\000\0002\020\000\002v\000\000\000\000\000\000\000\000\000D\000\000\013\020\000c8\036\000\000\000\000\004\000\000\000- \003MDc\000\000\000\000\020\010\000\001E\000\000\000\000\000\000\000\000\000\"\000\000\005H\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Fp<\000\000\000\000\010\004\000\000[@\007\033\011F\000\000\000\000 \020\000\002n\000\032-f\030\000\000\000\001\000@\000\0138\000\000\000\000\000\000\000\000\002\020\000\000,@\003%\\x\000\000\000\000\010\000\000\0014\000\0166\023\014\000\000\000\000@\000\000\005T\0007\033n\000\000\000\000\001\000\000\000\026@\000\000\000\000\000\000\000\000\004 \000\000Y\000\006\033Ap\000\000\000\0002\020\000\002t\000\034l&\030\000\000\000\001H@\000\013P\000i7\030`\000\000\000\006\"\000\000.@\000\000\000\000\000\000\000\000\010@\000\0012\000\014&+D\000\000\000\000@0\000\005|\0009XL0\000\000\000\002\001\000\000\0300\001fb1@\000\000\000\010\004\000\000a\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\000\000\000\000\000\000\000\000D\000\000\013\020\000s1\030`\000\000\000\004\002\000\000.\000\003%\\c\000\000\000\000\020\010\000\0018\000\000\000\000\000\000\000\000\000\"\000\000\005H\0009Y,@\000\000\000\001\000\000\000\026@\001fb1@\000\000\000\014\004\000\000^\000\007\0031p\000\000\000\000\020\000\000\002h\000\000\000\000\000\000\000\000\000D\000\000\013\020\000\000\000\000\000\000\000\000\002\020\000\000,@\003MDc\000\000\000\000\031\010\000\001;\000\r\026s\014\000\000\000\000d \000\005l\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Dr5@\000\000\000\004\000\000\000Z\000\006{IB\000\000\000\000 \020\000\003\n\000\034o\007H\000\000\000\000@\000\000\013 \000s:\014\000\000\000\000\004\000\000\000- \003Qfb\000\000\000\000\020\010\000\0017\000\rw\023\004\000\000\000\000@ \000\005\\\0000\\m@\000\000\000\002\001\000\000\026p\001dm1\014\000\000\000\010\004\000\000[@\007\003!`\000\000\000\000\020\000\000\002h\000\033n&\010\000\000\000\001\000\000\000\013(\000a9[\000\000\000\000\002\000\000\000,`\000\000\000\000\000\000\000\000\010@\000\0012\000\016G\033\010\000\000\000\000d \000\005h\0007\\L\020\000\000\000\003\021\000\000\027 \001Bs6\000\000\000\000\014D\000\000]\000\006\023\011d0\000\000\0000\020\000\003\016\000\030N\006`\000\000\000\001\000`\000\013x\000o9\030 \000\000\000\004\002\000\0000`\003=da\000\000\000\000\020\010\000\001B\000\0167!D\000\000\000\000@\000\000\005T\000:\034L \000\000\000\002\001\000\000\026p\001^r0@\000\000\000\010\004\000\000\\\000\006\013MX\000\000\000\000 \020\000\002p\000\034MV\021D\000\000\001\000@\000\0138\000c6\030`\000\000\000\002\000\000\000-\000\003=da\000\000\000\000\030\010\000\001<\000\r\026s\014\000\000\000\000 \000\000\005L\000\000\000\000\000\000\000\000\001\010\000\000\026 \001hr1\000\000\000\000\014D\000\000]\000\006{IB\000\000\000\0002\020\000\002v\000\030.6`\000\000\000\001H@\000\013X\000b1\034F\020\000\000\006\002\000\0001`\003)fr\000\000\000\000\030\014\000\001:\000\014\026s\020\000\000\000\000@ \000\006\024\0009X/\000\000\000\000\001\000\000\000\026@\001ft\031\000\000\000\000\010\000\000\000Z@\006\023%h\000\000\000\000 \020\000\002n\000\030-f \000\000\000\001\000@\000\0138\000r7[\000\000\000\000\004\002\000\000-`\003IZb\031\000\000\000\020\010\000\0017\000\016\006c@\000\000\000\000 \000\000\005P\0000[L@\000\000\000\002\000\000\000\026P\001do6\000\000\000\000\004\000\000\000Y@\000\000\000\000\000\000\000\000\021\000\000\002d\000\030M\027 \000\000\000\001H@\000\013P\000a7\031\000\000\000\000\006\"\000\000.@\003I^l\000\000\000\000\031\010\000\001:\000\014&\023Hd\000\000\000` \000\006\034\0001\033-\020\000\000\000\002\001@\000\027p\001Bn2\000\000\000\000\010\004\000\000a@\006\0139H\000\000\000\000 \020\000\003\004\000\000\000\000\000\000\000\000\000D\000\000\013\020\000b4]\000\000\000\000\004\002\000\000.\000\003\005\\d\000\000\000\000\020\010\000\0018\000\016&{0\000\000\000\000@ \000\005`\0009\033,#\030\000\000\002\001\000\000\026p\001fe1@\000\000\000\004\000\000\000Z\000\006\0139H\000\000\000\0000\020\000\002x\000\031\014V\030\000\000\000\000@\000\000\013\030\000\000\000\000\000\000\000\000\002\020\000\000,@\003\011Rt\000\000\000\000\030\010\000\001;\000\014\026s\020\000\000\000\000d \000\005l\0009\033m@\000\000\000\003\021\000\000\0270\001Db9\014`\000\000\014\004\000\000c@\007\023QR\000\000\000\000\020\000\000\0038\000\031-w\020\000\000\000\001\000@\000\014(\000s0^ \000\000\000\002\000\000\000-\000\003QZa\000\000\000\000\020\000\000\0015\000\014'\033H\000\000\000\000@0\000\005|\0002[n \000\000\000\002\001\000\000\026p\001Xs9\000\000\000\000\010\004\000\000[@\007\0235D4\000\000\000 \020\000\002n\000\034\r\006\010\000\000\000\000@\000\000\013 \000e7\\@\000\000\000\004\000\000\000- \0031fr\000\000\000\000\010\000\000\0013\000\000\000\000\000\000\000\000\000\"\000\000\005H\0005\033.\000\000\000\000\003\001@\000\033P\001Jo9\000\000\000\000\014D\000\000]\000\006cMd\000\000\000\0002\020\000\002t\000\030L'\021P\000\000\001@@\000\0148\000b;\030`\000\000\000\004\003\000\000/`\003\025^r\000\000\000\000\020\010\000\001C\000\014V{H\000\000\000\000@ \000\006\010\000:\030-P\000\000\000\002\000\000\000\026P\001Fs6\000\000\000\000\004\000\000\000Z\000\006+=d\000\000\000\000 \020\000\002p\000\033\0167\020\000\000\000\001\000@\000\013@\000r6XFP\000\000\004\002\000\000-`\003\rXi\000\000\000\000\010\000\000\0014\000\014V{H\000\000\000\000` \000\005p\0008\032\017\020\000\000\000\001\000\000\000\026@\000\000\000\000\000\000\000\000\004 \000\000Y\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\031-w\020\000\000\000\001H@\000\013X\000l9\\@\000\000\000\006\"\000\000.`\003\011Dr\032@\000\000\030\010\000\001G\000\016'#L\000\000\000\000 \000\000\006p\0000Y\0140\000\000\000\002\001\000\000\030P\001Fl0@\000\000\000\004\000\000\000Z\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\034nGP\000\000\000\001\000@\000\0138\000a2\030`\000\000\000\004\002\000\000-`\003I^r\000\000\000\000\020\010\000\0017\000\016&k\010l\000\000\000@ \000\005\\\0008\033\014\020\000\000\000\001\000\000\000\026@\001Bd1@\000\000\000\010\000\000\000Z@\007\023=d\000\000\000\000\020\000\000\002f\000\000\000\000\000\000\000\000\000D\000\000\013\020\000j6\\\000\000\000\000\006\003\000\0007@\003\005Hc\000\000\000\000\031\010\000\001:\000\016&{H\000\000\000\000` \000\005h\0001\030N#0\000\000\003\001\000\000\030p\001Dv9@\000\000\000\010\006\000\000_@\006\013\021F\000\000\000\000 \020\000\003\006\000\030,F\030\000\000\000\001\000@\000\014\020\000t4Z \000\000\000\016\000\000\0004`\003Mhz\000\000\000\000\020\010\000\0018\000\014\026#\014\000\000\000\000@ \000\005`\0009\033n \000\000\000\002\001\000\000\027\000\001dm1\r`\000\000\010\004\000\000[@\007\033\025R\000\000\000\000\020\000\000\002h\000\030,F\030\000\000\000\001@@\000\013`\000p6\036 \000\000\000\002\000\000\000-\000\000\000\000\000\000\000\000\000\010@\000\0012\000\r&k@\000\000\000\000`0\000\006|\0000Y\0140\000\000\000\003\021\000\000\0270\001do9\000\000\000\000\014D\000\000]@\006\023\011d7\000\000\0000\020\000\003\016\000\030N&\010\000\000\000\001\000`\000\013x\000s:\030 \000\000\000\004\002\000\0001 \003\rXx\000\000\000\000\010\000\000\0014\000\016G\033P\000\000\000\000`\000\000\006$\0009]\017\020\000\000\000\002\001\000\000\026p\001ft0@\000\000\000\010\004\000\000[@\007\033Qp\000\000\000\000 \020\000\002n\000\034mV\021@\000\000\001\000@\000\0138\000d2^ \000\000\000\002\000\000\000-\000\003\011Rt\000\000\000\000\020\000\000\0015\000\016GC\004\000\000\000\000 \000\000\005P\000\000\000\000\000\000\000\000\001\010\000\000\026 \001ft<@\000\000\000\014D\000\000]\000\007\033QB\000\000\000\0002\020\000\002t\000\034nG@\000\000\000\001H@\000\013P\000b1\034f\000\000\000\006\002\000\0001`\003\011Fc\000\000\000\000\020\014\000\001?\000\0167#\004\000\000\000\000@ \000\006\014\0009]\014\020\000\000\000\002\001\000\000\030 \001hs:\000\000\000\000\020\000\000\000e@\007\033Qr\000\000\000\000 \020\000\002p\000\034nF\010\000\000\000\001\000@\000\013@\000s:\036\000\000\000\000\004\002\000\000. \003MZb\030@\000\000\020\010\000\0017\000\016GK\004\000\000\000\000 \000\000\005P\0009]\014\020\000\000\000\003\001\000\000\027@\001hx9@\000\000\000\004\000\000\000Z\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\034nGP\000\000\000\001H@\000\013P\000s:\030 \000\000\000\006\"\000\000.`\003Mhz\000\000\000\000\031\010\000\001;\000\014&\023Lb\000\000\000` \000\006\034\0006\031\017\020\000\000\000\002\000\000\000\026P\001Xd0@\000\000\000\010\004\000\000b@\006c\021p\000\000\000\000 \000\000\002j\000\035\0167 \000\000\000\001@\000\000\014P\000l2\036 \000\000\000\004\002\000\000-`\0031Ha\000\000\000\000\020\010\000\0017\000\rF#`\000\000\000\000@ \000\005\\\0009[,#\020\000\000\002\001\000\000\026p\001ha<@\000\000\000\004\000\000\000Z\000\006c\021B\000\000\000\000 \000\000\002j\000\035\014\027@\000\000\000\000@\000\000\013 \000\000\000\000\000\000\000\000\002\020\000\000,@\0031Hy\000\000\000\000\031\010\000\001:\000\rF#\004\000\000\000\000d \000\005h\0006\031\017\000\000\000\000\003\021\000\000\027 \001Db9L@\000\000\014\004\000\000c@\006\023\rf\000\000\000\000 \030\000\002~\000\033\014F\010\000\000\000\001\000@\000\014\030\000l2\030 \000\000\000\004\002\000\0000@\003Qft\000\000\000\000 \000\000\001L\000\rF#d\000\000\000\000@ \000\005`\0006\031\014\020\000\000\000\002\001\000\000\027\000\001Xd<\000\000\000\000\010\004\000\000\\@\007\0335D3\000\000\000 \020\000\002n\000\030mG0\000\000\000\000@\000\000\013 \000l2\030 \000\000\000\006\002\000\000/\000\003Qfx\000\000\000\000\010\000\000\0014\000\000\000\000\000\000\000\000\000\"\000\000\005H\0006\031\017\020\000\000\000\003\021\000\000\0270\001Xd0@\000\000\000\014D\000\000]@\006c\021p\000\000\000\0002\020\000\002x\000\030L'\031L\000\000\001@@\000\0148\000c8\036 \000\000\000\004\000\000\000- \003\rZp\000\000\000\000\020\010\000\001E\000\0146cd\000\000\000\000 \000\000\005P\000:\031\014@\000\000\000\007\000\000\000\0320\001Fp<@\000\000\000\010\004\000\000[@\006\0335`\000\000\000\000 \020\000\002n\000\031\014V\030\000\000\000\001\000@\000\0138\000s6XF@\000\000\004\002\000\000-`\003%\\y\000\000\000\000\010\000\000\0014\000\0146k@\000\000\000\000@\000\000\005T\0002\031/\000\000\000\000\001\000\000\000\026@\000\000\000\000\000\000\000\000\004 \000\000Y\000\006\033Ar\000\000\000\0002\020\000\002t\000\030mW\000\000\000\000\001H@\000\013P\000d2X`\000\000\000\006\"\000\000.@\003\011Ds\032\000\000\000\030\010\000\001G\000\014&s\024\000\000\000\000@0\000\005|\0001[.\000\000\000\000\002\001\000\000\0300\001Fm8\000\000\000\000\010\004\000\000a\000\007#%\\\000\000\000\000p\000\000\003&\000\030n6@\000\000\000\000@\000\000\013 \000c6\\\000\000\000\000\004\002\000\000.\000\003\021Jc\000\000\000\000\020\010\000\0018\000\0166k\010j\000\000\000@ \000\005\\\0001[\014@\000\000\000\001\000\000\000\026@\001Fm8\000\000\000\000\014\004\000\000^\000\007\003!p\000\000\000\000\020\000\000\002h\000\000\000\000\000\000\000\000\000D\000\000\013\020\000\000\000\000\000\000\000\000\002\020\000\000,@\003\rZp\000\000\000\000\031\010\000\001;\000\014F+\014\000\000\000\000d \000\005l\0001\030N3(\000\000\003\001\000\000\030p\001Fp<\000\000\000\000\010\000\000\000Z@\007\033\011F\000\000\000\000 \020\000\003\n\000\000\000\000\000\000\000\000\000D\000\000\013\020\000t4X \000\000\000\016\000\000\0004`\003\r`x\000\000\000\000\020\010\000\0017\000\0166\023\014\000\000\000\000@ \000\005\\\0004[L0\000\000\000\002\001\000\000\026p\001fm1\r@\000\000\010\004\000\000[@\006K9p\000\000\000\000\020\000\000\002h\000\034l&\030\000\000\000\001\000\000\000\013(\000n7\\\000\000\000\000\002\000\000\000-\000\000\000\000\000\000\000\000\000\010@\000\0012\000\0147\003`\000\000\000\000d \000\005h\0009XL0\000\000\000\003\021\000\000\027 \001Rn1@\000\000\000\014D\000\000]\000\006\023\011f6\000\000\0000\020\000\003\016\000\030LW\010\000\000\000\001\000`\000\013x\000s1\030`\000\000\000\004\002\000\0000`\003MDc\000\000\000\000\020\010\000\001B\000\016F\013$\000\000\000\001`\000\000\006L\0009Y.@\000\000\000\001\000\000\000\026@\001fb1@\000\000\000\010\004\000\000\\\000\006K9F\000\000\000\000 \020\000\002p\000\034mV\021\\\000\000\001\000@\000\0138\000s2Y\000\000\000\000\002\000\000\000-\000\003MDc\000\000\000\000\030\010\000\001<\000\016\006c`\000\000\000\000 \000\000\005P\000\000\000\000\000\000\000\000\001\010\000\000\026 \000\000\000\000\000\000\000\000\004 \000\000Y\000\007\033\011F\000\000\000\0002\020\000\002v\000\032-f\030\000\000\000\001H@\000\013X\000b1\034fp\000\000\006\002\000\0001`\003\011dk\000\000\000\000\010\000\000\0014\000\rw\023\004\000\000\000\000@ \000\006\024\0005\034n \000\000\000\002\001@\000\033 \001Db9@\000\000\000\010\004\000\000l@\000\000\000\000\000\000\000\000\021\000\000\002d\000\033n&\010\000\000\000\001\000@\000\0138\000a9[\000\000\000\000\004\002\000\000-`\003\011Ds\000\000\000\000\030\010\000\001W\000\016\006C@\000\000\000\000 \000\000\005P\0007\\L\020\000\000\000\002\000\000\000\026P\001Bs6\000\000\000\000\004\000\000\000Y@\007\033\025D\000\000\000\000\020\000\000\0030\000\000\000\000\000\000\000\000\000D\000\000\013\020\000o9\030 \000\000\000\006\"\000\000.@\003\005fl\000\000\000\000\031\010\000\001:\000\0166+\010\000\000\000\000@ \000\006\\\0001\034\r@\000\000\000\002\001@\000\027p\001^r0@\000\000\000\010\004\000\000a@\006\0331h\000\000\000\000\020\000\000\002h\000\030L&\030\000\000\000\001\000@\000\rH\000\000\000\000\000\000\000\000\002\020\000\000,@\003=da\000\000\000\000\020\010\000\0018\000\014\027\0330\000\000\000\000@ \000\005`\0001\030L0\000\000\000\003\001\000\000\032p\001Fl1@\000\000\000\004\000\000\000Z\000\006{IB\000\000\000\0000\020\000\002x\000\031\014V\030\000\000\000\000@\000\000\013\030\000c6\030@\000\000\000\002\000\000\0006\000\000\000\000\000\000\000\000\000\010@\000\0012\000\rw\023\004\000\000\000\000d \000\005l\0000\\m@\000\000\000\003\021\000\000\0270\001Fl1\000\000\000\000\010\004\000\000k@\006SMd\000\000\000\0000\030\000\002t\000\030-f \000\000\000\001\000@\000\014(\000j9\\@\000\000\000\004\003\000\0006`\003\011Ds\000\000\000\000\020\010\000\001Y\000\014&KP\000\000\000\000@ \000\005\\\0000[L@\000\000\000\002\001\000\000\026p\001do6\000\000\000\000\010\004\000\000[@\006\023\011f\000\000\000\0000\020\000\003.\000\034\rG\000\000\000\000\000@\000\000\013 \000a7\031\000\000\000\000\004\000\000\000- \003I^l\000\000\000\000\010\000\000\0013\000\0166+\010\000\000\000\000 \000\000\006`\0001\032.@\000\000\000\003\021\000\000\027 \001Bn2\000\000\000\000\014D\000\000]\000\007\023=X\000\000\000\0002\020\000\002t\000\034lV\020\000\000\000\001\000@\000\r8\000b6Z \000\000\000\004\003\000\000/`\003\005\\d\000\000\000\000\020\010\000\001C\000\0166+P\000\000\000\000 \000\000\005P\0001\030L0\000\000\000\002\001\000\000\033\020\000\000\000\000\000\000\000\000\004 \000\000Y\000\006\0139H\000\000\000\000 \020\000\002p\000\034Mv`\000\000\000\001\000@\000\013@\000b1\030`\000\000\000\006\002\000\0005`\003MJc\000\000\000\000\010\000\000\0014\000\014\026s\020\000\000\000\000` \000\005p\0004[L0\000\000\000\001\000\000\000\0260\001Fl1\000\000\000\000\004\000\000\000l\000\006c\021Z\000",0x1b58);
    private static final int[] _data4 = decodeData("\000\000\0000\030\000\003,\000\030-f \000\000\000\001H@\000\013X\000r7[\000\000\000\000\006\"\000\000.`\003\rXb\000\000\000\000\020\010\000\001W\000\016'#$\000\000\000\000 \000\000\006p\0002[n \000\000\000\002\001\000\000\030P\001ft8\000\000\000\000\004\000\000\000Z\000\006\023\011f\000\000\000\000 \020\000\0032\000\030mvh\000\000\000\001\000@\000\0138\000e7\\@\000\000\000\004\002\000\000-`\0031fr\000\000\000\000\020\010\000\0017\000\014&\023L\000\000\000\000` \000\006\\\0008\032\014\020\000\000\000\001\000\000\000\026@\001Jo9\000\000\000\000\010\000\000\000Z@\006cMd\000\000\000\000\020\000\000\002f\000\034lV\020\000\000\000\000@\000\000\r@\000j6\\\000\000\000\000\006\003\000\0007 \003\025^r\000\000\000\000\031\010\000\001:\000\rG\033H\000\000\000\000d \000\005h\0009Y, \000\000\000\002\001\000\000\032p\001Dv1@\000\000\000\010\006\000\000_@\006+=d\000\000\000\000 \020\000\003\006\000\000\000\000\000\000\000\000\000D\000\000\013\020\000b1\030`\000\000\000\004\002\000\0006 \000\000\000\000\000\000\000\000\010@\000\0012\000\014V{H\000\000\000\000@ \000\005`\0006\034n \000\000\000\002\001\000\000\027\000\001Db1@\000\000\000\014\004\000\000k@\006\0331R\000\000\000\000\020\000\000\002h\000\031-w\020\000\000\000\001@@\000\013`\000\000\000\000\000\000\000\000\002\020\000\000,@\003\rXb\000\000\000\000\010\000\000\001X\000\000\000\000\000\000\000\000\000\"\000\000\005H\0002[n \000\000\000\003\021\000\000\0270\001Xs9\000\000\000\000\014D\000\000]@\006\0331D\000\000\000\000 \020\000\003.\000\034NG\030\000\000\000\000@\000\000\r`\000a2\030`\000\000\000\004\002\000\0001 \0035jl\000\000\000\000\020\010\000\0018\000\014&\023L\000\000\000\000@ \000\006d\000:\034n@\000\000\000\002\001\000\000\026p\001Bd1@\000\000\000\010\004\000\000[@\007\023=d\000\000\000\000 \020\000\002n\000\030L'\030\000\000\000\001@@\000\r8\000p6\030 \000\000\000\002\000\000\000-\000\003\005Hc\000\000\000\000\020\000\000\0015\000\016&{H\000\000\000\000 \000\000\005L\0009Y, \000\000\000\001\000\000\000\033\000\001Tm8\000\000\000\000\014\006\000\000o\000\006\013\021F\000\000\000\0002\020\000\002t\000\034Mw\020\000\000\000\001H@\000\013P\000s2X@\000\000\000\004\002\000\0005`\003\011ls\000\000\000\000\020\014\000\001?\000\014\026#\014\000\000\000\000@ \000\006\014\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Db1@\000\000\000\010\004\000\000l@\000\000\000\000\000\000\000\000\021\000\000\002d\000\030,F\030\000\000\000\001\000@\000\013@\000r7\\@\000\000\000\004\002\000\000.\000\003\011Dc\000\000\000\000\030\010\000\001W\000\0166+$\000\000\000\000 \000\000\005P\0000Y\0140\000\000\000\003\001\000\000\027@\000\000\000\000\000\000\000\000\004 \000\000Y\000\006\0331D\000\000\000\000\020\000\000\0030\000\000\000\000\000\000\000\000\000D\000\000\013\020\000a2\030`\000\000\000\006\"\000\000.`\003I^r\000\000\000\000\031\010\000\001;\000\0146c\010\000\000\000\000@ \000\006\\\0001\034L\020\000\000\000\002\001@\000\027p\001ft0@\000\000\000\010\004\000\000b@\007\023IL\000\000\000\000 \030\000\002n\000\030L'\030\000\000\000\001\000@\000\rH\000s:\036 \000\000\000\004\002\000\000-`\003Mha\000\000\000\000\020\010\000\0017\000\0167#`\000\000\000\000@ \000\005\\\0001\030N0\000\000\000\003\001\000\000\032p\001He<@\000\000\000\004\000\000\000Z\000\000\000\000\000\000\000\000\000\021\000\000\002d\000\035\017\006\010\000\000\000\000@\000\000\013 \000s2X@\000\000\000\002\000\000\0006\000\003Mhy\000\000\000\000\031\010\000\001:\000\0167#\004\000\000\000\000d \000\005h\0009]\017\000\000\000\000\003\021\000\000\027 \001fe1\000\000\000\000\010\004\000\000k@\006\023\rF\000\000\000\000 \030\000\002~\000\034nF\010\000\000\000\001\000@\000\014\030\000\000\000\000\000\000\000\000\002\020\000\000,@\003\011Dc\000\000\000\000\020\010\000\001Y\000\0167#d\000\000\000\000@ \000\005`\0009]\014\020\000\000\000\002\001\000\000\027\000\001ft<\000\000\000\000\010\004\000\000\\@\006\023\011F\000\000\000\0000\020\000\003.\000\035\017\026\010\000\000\000\000@\000\000\013 \000s:\030 \000\000\000\006\002\000\000/\000\003Qps\000\000\000\000\010\000\000\0014\000\0146c\010\000\000\000\000 \000\000\006`\000\000\000\000\000\000\000\000\001\010\000\000\026 \001ft0@\000\000\000\014D\000\000]@\000\000\000\000\000\000\000\000\021\000\000\002d\000\030mF\020\000\000\000\001\000@\000\r8\000l2\036 \000\000\000\004\000\000\000- \0031Ha\000\000\000\000\020\010\000\001E\000\rF#`\000\000\000\000@\000\000\005T\0001\030N0\000\000\000\002\001\000\000\033\020\001Xd<@\000\000\000\010\004\000\000[@\006c\021B\000\000\000\000 \020\000\002n\000\033\014G@\000\000\000\001\000@\000\0138\000b1\034`\000\000\000\006\002\000\0005`\003QBy\000\000\000\000\010\000\000\0014\000\rF#\004\000\000\000\000@\000\000\005T\000:\030/\000\000\000\000\001\000\000\000\026@\001fe1\000\000\000\000\004\000\000\000l\000\006c\021r\000\000\000\0002\020\000\002t\000\033\014F\010\000\000\000\001H@\000\013P\000l2\036\000\000\000\000\006\"\000\000.@\003MJb\000\000\000\000\020\010\000\001W\000\014&\033L\000\000\000\000@0\000\005|\0006\031\014\020\000\000\000\002\001\000\000\0300\001Tm8\000\000\000\000\010\006\000\000m\000\006\023\011F\000\000\000\000 \020\000\0032\000\033\014GH\000\000\000\001\000@\000\013@\000l2\030 \000\000\000\004\002\000\000.\000\0031Hx\000\000\000\000\020\010\000\0019\000\014&\023\014\000\000\000\000` \000\006\\\0001[\016`\000\000\000\001\000\000\000\026@\001Xd0@\000\000\000\014\004\000\000^\000\007#Mp\000\000\000\000\020\000\000\002h\000\030mF\020\000\000\000\000@\000\000\r@\000l2\036 \000\000\000\006\"\000\000.`\0031Ha\000\000\000\000\031\010\000\001;\000\rF#`\000\000\000\000d \000\005p\0001[\014 \000\000\000\002\001\000\000\032p\001Fp<@\000\000\000\010\000\000\000Z@\006\0335`\000\000\000\000 \020\000\003\n\000\035m\027 \000\000\000\000@\000\000\013 \000b1\034`\000\000\000\004\002\000\0006 \003\r`y\000\000\000\000\020\010\000\0017\000\0146k@\000\000\000\000@ \000\005\\\0002\031,0\000\000\000\002\001\000\000\026p\001Db9@\000\000\000\014\004\000\000k@\006K9r\000\000\000\000\020\000\000\002h\000\030mW\000\000\000\000\001\000\000\000\013(\000d2^\000\000\000\000\002\000\000\000-\000\003MJb\000\000\000\000\010\000\000\001X\000\0147\003d\000\000\000\000d \000\005h\0001[.\000\000\000\000\003\021\000\000\027 \001He1@\000\000\000\014D\000\000]\000\007\033\025D\000\000\000\000 \020\000\003.\000\030Mf(\000\000\000\001\000`\000\013x\000c6\\\000\000\000\000\004\002\000\0000`\000\000\000\000\000\000\000\000\010@\000\0012\000\014&\023\014\000\000\000\000@ \000\006d\000\000\000\000\000\000\000\000\001\010\000\000\026 \001Fm8\000\000\000\000\010\004\000\000\\\000\006#\025F\000\000\000\000 \020\000\002p\000\030L&\030\000\000\000\001@@\000\r8\000c6\031\000\000\000\000\002\000\000\000-\000\003\rZp\000\000\000\000\030\010\000\001<\000\000\000\000\000\000\000\000\000\"\000\000\005H\0001[\014 \000\000\000\001\000\000\000\033\000\000\000\000\000\000\000\000\000\004 \000\000Y\000\006\0335`\000\000\000\0002\020\000\002v\000\031\014V\030\000\000\000\001H@\000\013X\000c6\030@\000\000\000\004\002\000\0005`\003\r`x\000\000\000\000\020\000\000\0015\000\0166\023\014\000\000\000\000@ \000\006\024\0002\032.`\000\000\000\002\001\000\000\027\000\001Db9@\000\000\000\010\004\000\000l@\006\033Ap\000\000\000\000 \020\000\002n\000\034l&\030\000\000\000\001\000@\000\0138\000i7\030`\000\000\000\004\002\000\000-`\003\011Ds\000\000\000\000\030\010\000\001W\000\r\026s`\000\000\000\000 \000\000\005P\0009XL0\000\000\000\002\000\000\000\026P\001\\o8\000\000\000\000\004\000\000\000Z\000\007\033\025D\000\000\000\000\020\000\000\0030\000\030n\007@\000\000\000\001H@\000\013P\000s1\030`\000\000\000\006\"\000\000.@\003%\\c\000\000\000\000\031\010\000\001:\000\0166+\010\000\000\000\000@ \000\006\\\0001\031.\020\000\000\000\002\001@\000\027p\001fb1@\000\000\000\010\004\000\000a@\000\000\000\000\000\000\000\000\021\000\000\002d\000\030L&\030\000\000\000\001\000@\000\rH\000\000\000\000\000\000\000\000\002\020\000\000,@\003MDc\000\000\000\000\020\010\000\0018\000\r\026s\014\000\000\000\000@ \000\005`\0001\030L0\000\000\000\003\001\000\000\032p\001fe2\000\000\000\000\004\000\000\000Z\000\007\033\011F\000\000\000\0000\020\000\002x\000\000\000\000\000\000\000\000\000D\000\000\013\020\000c6\030@\000\000\000\002\000\000\0006\000\000\000\000\000\000\000\000\000\010@\000\0012\000\0166\023\014\000\000\000\000d \000\005l\0004[L0\000\000\000\003\021\000\000\0270\001Fl1\000\000\000\000\010\004\000\000k@\005+9fu8\034\rw\023QJd\020\020j\005(\000\000\002\020>\000\000\021\001 \000\001\010\r@\000\010A\010\000\000D\n \000\004 |\000\000\"\007`\000\002\0200\000\000\021\0038\000\001\010\006G8\000\000\000\035H\014F\011Xj +\011.0Ql@C9\031,\027#\025H:\020\010\004\002\001\025f\n\035H\011\026sAjt\020\031M\026c\024t \022\\a#Y\001 a3Y'\"\001\000@ \020\010\004\002+T\024\n\000\021.'\023=d 1[\rw\033%\\g\020\033nW#Ajt\020\031M\026c\024t \022\\`\000\000\000Js\035\000\007#i\000T \025H\004B)@hX\000\000\000\000\001hz \025\010\0052\001\025j\000\000\000\0072\001\025f\000\000\000\000\003Qt@$\022L\006E@\000\000\000\000\016d\002i4Z-\026K%Ri4Z-\026K%Ri4Z-\026K%Ri4Z-\026K%Ri4Z-\026K%Ri4Z-\026K%Ri4Z-\026K%Ri4Z-\026K%Ri4Z-\026K%Ri4Z-\026K%Ri4Z-\026K \000\0019fe3[,VsP\000\000\000\000\004\"+LD\000\000\000\000\003Y\001\nn2\010\rv1\000D%9HD\007\033\025Nm2[N@\000\000\000.1[lF(\000\000\000\035H\004S\001Q0\000\000\010\004S\001I0\000\000\000\005B!\024`2,\000\000\002s\021Dy:\000\000\000\0010H%\030\r\013\000\000\000\\d;[n& \000\000,\022\011&\003C10\000\022\011&\003C10\000\000\013N6+QFp:@\004W\031 Ju\024ND\002+L\000\000$\031/\002\003\021Rg4]\004\006+a`e1]\014V \000\000U7\035\014W\0235Rn0]\014V!\001ft9\032-f8\001\022n;\030-FK\020@e9Xl\027\003\024@c4\030.#Q\000Jc\000\022-g3\005Xi2\010\0146C\005da1]\014W\021\001Fo7\034nF\0139h\000\000\025-g#\025dm4[L\027#\025H 1Z\014\027\023\005Ft2\\D\006\033=\\s:\030-g \001\022n;\030-FK\020@c4\030.&\013\rhe9\010\014\002+\014N\000\000\030\01729\001Jx8\031,7#\025H\000\000\000\000\006\003tN 2^\016\006+\rhe2\000\000\000\000\001@;\023H\014WCAJc:\031,@\000\000\000\0000\016Dr\003\025pp2XnF+\020\000\000\000\000\011\026sQJg2\\D\006\033=\\s:\030-g!\001Jx8\031,7#\025H\000\000\000\n7#IRn3H\0146{9ft0[NB\003\025pp2XnF+\020\000\000\000\000\0106C\005da1]\014W\021\001Fo7\034nF\0139h 2^\016\006+\rhe2\000\011\026#\025\\t4YM\026+H@e<\034\014V\033QJd\000\024L\026s\035J 2\\N&{H\000%9H\014WCAJc:\031,@\002\011^o6\031,\026p\001\004o7[\014V\0138@v0[\016V)\001Jx8\031,7#\025H\000\000\026(U\030\001\034O\000\000\nE\022U\n\000\000\000\000\0042\005\030S\"@\000\000\002=\034\000\000\023hd0\000\000\007$j\000\000\000\000j\000\003R5@\000\000\0006\000\001i\033\000\000\000\000\032@\000tM`\000\000\000\r@\000:'\000\000\000\000\006P\000\035\023D\000\000\000\0031\025f:\020\000\000\000\000\001jn5[Mw;8\000d2YL\027+1h\000=\031.&{ABg2@\000\000\000\001Bb9[mG+QJ\000\000\000\000\0063\005d\0000XN0\003\021Rr2Xn@\000\001Hw7\\L@\000\000\000n2X. \000\000\000\000=\034\000\000\000\000\016J\004\000\000tP@\000\007%\007\000\000:(P\000\003V<@\000\035\024,\001\000\000\000\000\000\016J\016\000@\000\000\000\000\007%\002\000\000\000\000\000\000\003RF\000\010\000\000\000\000\001i#@\020\000\000\000\000\000tQ \006\000\000\000\000\000:gH\004\000\000\000\000\000\035\024@\001\000\000\000\000\000\016J\010\000 \000\000\000\000\007%\022\000\020\000\000\000%9I.2a\001Li6\031$\006\001\025f'\026\010\rFK9J \022] \000\000\000\000P9\033lw\023\005Z 0XMw\023QJd\035\010\000\000\000\001\006h2Xm2\003\031Bi6\031,CQ\000\000\000(\034LV\033=\\d4]\r\026{8@v4[mF\013QJd\035\010\000\004\033\005\\n7]\004\006{AJn\020\010DW\031\010t \022\\`\000\000\000\000U7\032mf{]\\ 7\\\016FK=\\:\020\011.0\000\001\036p:\032-vq\001de8]-\027\023\025f 0[D\006\013INu6Y-g!h@%9@\011\026sYBl4Y\004\006\013INu6Y-g!\001Lo9\010\004W\031h@`\022\\dp\000\000\000I7\035L\026c%H 2\031,fK9Rt4[mcQ\001@%9I`\000\000\000\000I7\035L\026c%H 0Y\014G\023\025fs\020\034m\027S\024\000\000\000\000\0146{5Zo7\013l7\003T\\c\000\000\000\000\0039^n2@\000\000\000\000l5\030\014@\000\000\000\0006\032L\006%@\000\000\000\033\r*4\031@d\000\000\rFT\031@d\000\000\000\006c)`b6\000\000\000\007\033]Je:\014&`\003!jc\033\014G\003\000\001Z7\032\014\000\000\000\000\0004\032L&\000\000\000\000\000\000\000Yf@\000\005N>\000\000,tp\000\002g\023\000\000\0268p\000\000\000\000\020\000\000\000\002\000\000\000\0000\000\000\000\005\000\000\000\000h\000\000\000\016@\000\000\001\000\000\000\000\023 \000\000\002\002\000\000\000!R\r^u7\035\004\003at@B\026OIF+8\000c7[-V{8^s:\034L'+\030\\c\000\024m\027S\025\034e2Y\014V!\000|=\020\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Ju\027\011.P\000\000\000O:]\004\006{\030@m2[-w\023d@-\020\034LW\013UJs:\031,B\003\011Xo1Zd\007\033%te\020\017$\002+1j\000\000\023nW!\001^f\020\033,Vk=dy\020\032-b\003IJa6\033\rv\031\000Z 9\031.\027+\025ft2Y\004\006\0231^c5H\0166KiJ \036H\004VcT\000\000\000\014\006\023\021Lh5\033\rg\003J\005\004C\"\021(`\000\000\000\000\030\014&#\031Pj6\033N\007\026\013\011Fd2Y@\000\000\000\000I7\035L\026c%H :\036.\006)\001fi=\031$\006K8@N2^\016E*YBl\000\000\000\006\033=Zm7[EwCM`r4[NF19F\000\000\000\011\026sYBl4Y\004\007#e`e\020\034m\027S\024@i7\010\011f+ahI+\030-@\000\000\000S(\035\016\"\001\004z \030\000\000\000\002L@!\036H\006\000\000\001\022n;\030-FK\020@s4^LR\0035^d4YM\026+H@f7\\D\002+8@f7\\MV\013P@s8\031,2\003%\\ <\035N6sAdi7\035\014`\000\001\022n;\030-FK\020@f7\\MV\013P@s8\031,6K\031Re9\010\r\026q\001pv9[N\007\023%\\t3\000\000\005\023\025f \037\017$\003\001\000L&\020\n\016VsMRg7\031,BI\000PR2\\e3\011$@<\020\020NV2MRz2@\000\000\000\000\000\003\014.\000\000\030a\030\000\001F\005@\000\0140,\000\000c\006`\000\006\030\026\000\0001DP\000\003\0164\000\000\030sH\000\001G\034@\000\0149<\000\000cN \000\006\034r\000\0001g\020\000\003\0169\000\000\030sH\000\001G\034@\000\0149d\000\000cJ@\000\006\034r\000\0001dP\000\003\0169\000\000\030sH\000\001Fm@\000\014<l\000\000cE\000\000\006\034(\000\0001b@\000\003\016\024\000\000\030q \000\001G\n\000\000\0148P\000\000cE\000\000\006\034(\000\0001b@\000\003\016\024\000\000\030q \000\001G\n\000\000\0148P\000\000cE\000\000\006\034(\000\0001b@\000\003\016\024\000\000\030q \000\001G\n\000\000\0148P\000\000cE\000\000\006\034(\000\0001b@\000\003\016\024\000\000\030q \000\001G\n\000\000\014<D\000\000cE\000\000\006\036\024\000\0001b@\000\003\017\000\000\000\030q \000\001G\n\000\000\0148P\000\000cE\000\000\006\034(\000\0001b@\000\003\016\024\000\000\030wH\000\001G\n\000\000\0148P\000\000cE\000\000\006\034(\000\0001b@\000\003\016[\000\000\030z\020\000\001H\036@\000\014At\000\000d\017 \000\006 z\000\0002\007P\000\003\020=\000\000\031\003h\000\001H\036@\000\014At\000\000d\017 \000\006 P\000\0001}\000\000\003\020=\000\000\031\003h\000\001H\036@\000\014At\000\000cz\000\000\006 z\000\0002\007P\000\003\020=\000\000\030}H\000\001Gn@\000\014A\014\000\000d\001`\000\006 z\000\0002\007P\000\003\017y\000\000\031\003h\000\001Gz\000\000\014At\000\000d\017 \000\006\036H\000\0002\030p\000\003\021=\000\000\031\013\030\000\001HT@\000\014Dp\000\000d\026\000\000\006\"L\000\0002\035\020\000\003\021a\000\000\031\007X\000\001H=@\000\014F@\000\000d6@\000\006!v\000\000\020\020\010\006\003\001@`@ \020\010\004\002\001\000@(\024\n\005\002A P(\024\n\005\002A P(\024\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`pn\005\002A P \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\010@@ \020\010\004\002\001\000@ \020\010\004\002\001\000@\010\004\002\001\000@ \020\010\004\002\004\002\001\000@ \020\010\020(\024\nnp\000\000\000\017@\000\000\000x\000\000\000\007`\000\000\000>\000\000\000\003`\000\000\000\037\000\000\000\001p\000\000\000\017@\000\000\000|\000\000\000\007 \000\000\000>\000\000\000\003`\000\000\000\037\000\000\000\001p\000\000\000\017@\000\000\000|\000\000\000\007@\000\000\000>\000\000\000\003`\000\000\000\037)],6\033\025fs\000\023Mw!\001^w7\031. \000\000\000N7H\0167+\rP 3\032-F)\001^r\020\031\r\027\023\025Ft7\\O\020\000\000\000N7H\0167+\rP 8\034Mv\033\025fs\000\022-g#\025dr:\\\016F+\020@s<\\nF+4@c0[\r@\002$^O\020\031.'\023=d\000\000\000\011fy\001fu1Z\004\006#\025li1Y$\006{H@a2\031\016&+Mf\000\000\000\010\027\023\034@l4\\nB\003Q^o\020\033\rvs\034\000\000\000\021/\006+\014@f7\\MV\013P@e9\034Mw\020\000\000\000)[l6[\025h 0[\016&+\005Hy\020\030mvs9Jc:\031,@\000\000\000\000!\030,B\003\031Rl2H\rg+5De9\000\011fy\001Fh4[\014G\023\025\\\000\"\031.7#%\\a:\032-vq\001Bd2\034LW\033L@r2\\.VKIJd\000\000\000\000\0029^ 6[n&)\001`r7XlW\033MJs\000\000\000\004s=h 2[Mw+\035P 9\\\014\026\033\024\000\000\000\000\n\006+IZi9\\m\026{8@d2[M\026+\020\000\000\000\020L\026!\001Bd2\034LW\033L\000D2]M\026\033\024@o9\010\016&+M^u9\030lR\003\011js<@\010fK1J 2^\r\027\033Qf\000!\\Mw\033LZd2]M\026\033\024@l4[M0\000\000\000N7H\0167+\rP 2\031.fK\rJ\000\000\023Mw!\001B 2\032.&+\rho9\036 \004C=ft\020\032.2\003\021^w7\000\000\000\000\001\006o7\033LV\033QRo7\010\014\026cIJa2\036$\006K8@p9\033lw\023\025fs\000\000\011\027\031\001B 2\032.&+\rho9\036 \000\002%\\v0[\r\026!\001Br3]-V+9h\000\000\000\000\004s\025hw7\\M2\003%\\t2\\Lf\013\rJ 4\\d\006s=h 1[mf3%Nu9\031,@\002Q^o\020\033,\026sd@o8\031-b\003\031Rl2\\d\006K8@s<\\nF+4\000\000\000\025\rvy\001Za7\036$\006{AJn\020\031M\026c\025f\000'\033nB\003\004@c4\030.&\013\rhe9\010\014F+YRc2@\000\005#\025pt\020\031M\026c\024@b:\\o\020\000\001\014i6\031$\007#=^ 6\030.&;\024\000\000$\033n7!\001Rs\020\035-g\023\025Bc4\030,&c\024\000N7H\0167\003\005Fe\020\033\014V3P@o7\010\014F+YRc2@\011f{P@s:\\\016\006{Ihe2\000\000\000\002%Xl2Yl\026a\001fe2Z`\000\000\000\000R2X,Bk=\\l<H\014fK1J 9^.7#\025Z\000\000\000\nF{<@m0[O\022\0031Rn5\\`\000\002\011do5Y-b\003ARp2@\011V\013QP 0\\Lw+5Jn:\000\000\000\002IJs:[\016B\003Q^o\020\033\014\027\023\035J\000\000\000\000\004s<@m2\\n6\013\035J 7YD\006#\025fi9\031,B\003Qrp2@\000\004K\021Jn:\032,fK\025d 9\031-V{YJd\000\000\010F+\005Hl7Xm0\000\000\000\000'\031.G;=dk\020\032.2\003U\\r2X,6C\005Dl2@\000\004s<@l7Xm0\0029^t\020\030$\007\033Qde0[ \000\000\000\000S:\034LV\0134@i7XnFa\001hi6Y-w+P\000\000\000\000\011fy\001ft9\031,\026i\001de9[nW\023\rJs\000\025M\027\023Qja6\010\0146KIFu4]\004\006KL@g7[LP\002Ado:\033l6{0@e9\034Mw\020\000\000U7\032mf{]\\ 8\034Mw#=Fo6\000\000\000\000\001\032u6\035\r\026C=` 0]\016F+5`t2Y\000\000\002\011Bd\020\033,W\033MBg2@\010g+9Ft4[mb\0039^t\020\032-W\0031Jm2[NF+\020\000\000\000\000\010FKIJc:\033n'I\001\\o:\010\014VkAhy\000\021M\026c\024@o9\010\016\006\013QP 7\030-V)\001ho7H\rF{9N\000\000\025\rvy\001Za7\036$\007\033eZb7[\r\026\031\001Xi7\032n0\0029^ 1\035,f3\025d 9\\\014\026\033\024@a;\030-\026c\005Dl2@\000\000\002\005Hd9\031.7\031\001La6Z-GI\001\\o:\010\0167+A`o9\035\014V!\001Dy\020\034\016&{Q^c7[\004\0063\005Zi6\036 \005\003I^t7Xmva\001nr7[Lr\003Qrp2H\014f{H@s7Xm6+P\000\000)[l6[\025h 7\\\014W\023\005hi7[D\006{8@n7[EW\033=Fk2]\000\000\002Ado:\033l6{0@n7]\004\006\013YBi6\030,&c\024\000\000![mfs\025Ft4[mb\003IJf:\\lV \000\000A2\031\016&+Mf 0[\016&+\005Hy\020\032-b\003Ufe\000\000\n6{\031hw0\\LR\003\rBu9Y,B\003\r^n7\031,7#%^n\020\030,&{Ih\000\000\000\000\005\033=Fk2]\004\006KL@n7]\004\006\033=\\n2XnF+\020\000S7Xm6+P@i9H\014\026cIJa2\036$\006\033=\\n2XnF+\020\000O8\031.&\013QRo7\010\0146\0139Fe6\031,@\000\001&t0]\014R\0039^t\020\034LV\033=le9\030,&c\024\000\000\000\024\016&+YRo:\\d\006{]\\e9\010\014FK\025H\000'\\\014W\023\005hi7[D\006s=h 9].\007\003=dt2Y\004\006{8@s7Xm6+P\000\000\000\023,W\033MBg2H\016F{<@l7[Lp\000\000\000\000![mfs\025Ft4[mb\003QRm2Y\004\006{Uh\000\000\000\000\000\000\017PL\000\000}\003 \000\007lf\000\000>ep\000\003v+\000\000\03728\000\001{\021@\000\017X|\000\000}F`\000\007l.\000\000>b0\000\003v\017\000\000\0370X\000\001{\003@\000\017X\014\000\000}M`\000\007k~\000\000>_0\000\003uw\000\000\037/\030\000\001zw@\000\017W,\000\000}9`\000\007kF\000\000>[p\000\003u[\000\000\037-8\000\001zi@\000\017V<\000\000}2`\000\007k\016\000\000>X0\000\003u?\000\000\037+X\000\001z[@\000\017UL\000\000}+`\000\007ln\000\000>fp\000\003v7\000\000\03738\000\001{\033@\000\017Y\\\000\000}M`\000\007ln\000\000>U0\000\003u'\000\000\03738\000\001{\033@\000\017Y\\\000\000}M`\000\007ln\000\000>fp\000\003v7\000\000\03738\000\001{\033@\000\017Y\\\000\000}M`\000\007ln\000\000>fp\000\003u#\000\000\03738\000\001zO@\000\017Tl\000\000}M`\000\007ln\000\000>fp\000\003u\027\000\000\03738\000\001{\033@\000\017Y\\\000\000}$`\000\007ln\000\000>fp\000\003u\017\000\000\03738\000\001{\033@\000\017T,\000\000}M`\000\007ln\000\000>fp\000\003v7\000\000\03738\000\001{\033@\000\017Y\\\000\000}M`\000\007ln\000\000>fp\000\003u\007\000\000\03738\000\001zA@\000\017S|\000\000}\036`\000\007ln\000\000>fp\000\003tw\000\000\03738\000\001{\033@\000\017Y\\\000\000}M`\000\007ln\000\000>fp\000\003v7\000\000\03738\000\001{\033@\000\017SL\000\000}\033`\000\007iV\000\000>Lp\000\003tc\000\000\03738\000\001z/@\000\017Rl\000\000}\025`\000\007i&\000\000>Ip\000\003tK\000\000\037$8\000\001z!@\000\017Q|\000\000}\016`\000\007hn\000\000>F0\000\003t/\000\000\03738\000\001{\033@\000\017Y\\\000\000}\n`\000\007hN\000\000>fp\000\003v7\000\000\03738\000\001{\033@\000\017Y\\\000\000}\010`\000\007ln\000\000>fp\000\003v7\000\000\03738\000\001{\033@\000\017P|\000\000}\006`\000\007h.\011.2)8Td\000\000\004W\031\024`.\025\031\000\002)8dd\000\000\000\000\001\024dd\000\011%c\023\020^%\027\014LBy\024\\22\000\000\002+1j\000,K$Vi4Jd\000\013E'(\000J.\031Y\000\000\000\000\000%\027\014LCQ\024\\22\000\000\000\001\024\\22\016DRqIH:\022KF& \000\000%\025L\0066c\020J.\031\033\014@\000\000\007tT\000\000?\036p\000\003yw\000\000\037O8\000\001|{@\000\017g\\\000\000~=`\000\007sn\000\000?\036p\000\003yw\000\000\037O8\000\001|{@\000\017g\\\000\000~=`\000\007sn\000\000?\036p\000\003yw\000\000\037O8\000\001|{@\000\017g\\\000\000~=`\000\007sn\000\000?\036p\000\003yw\000\000\037O8\000\001|{@\000\017g\\\000\000~=`\000\007tr\000\000?+p\000\003yR\000\000\037ix\000\001|{@\000\017vt\000\000\177\032`\000\007{ \000\000?Vp\000\003yw\000\000\037O8\000\001|{@\000\017v(\000\000~=`\000\007sn\000\000?9\000\000\003yw\000\000\037_x\000\001~\010\000\000\017ph\000\000\177\n \000\007y6\000\000?F`\000\003|G\000\000\037X(\000\001}J@\000\017g\\\000\000~=`\000\007sn\000\000?\036p\000\003yw\000\000\037O8\000\001\177>@\000\017}\014\000\000\177N@\000\007}\002\000\000?h\020\000\003yw\000\000\037tx\000\001\177Q@\000\017g\\\000\000\177] \000\007{ \000\000?Vp\000\003~/\000\000\037~X\000\001|{@\000\017n \000\000~=`\000\007\177j\000\000?\036p\000\003\177H\000\000\037}\020\000\001|{@\000\017\177\000\000\000\177\177\000\000\007t8\000\000?^a\022N#\000\r\026s\030\000N S@\006s\005\\\000\024\033NVc0R\000\000\000\000AM@\000\004\017K\000\000 |X\000\002\007\013@\000\020>,\000\001\003r`\000\010\037\026\000\000Ay0\000\004\017K\000\000 |X\000\002\004z@\000\020)(\000\001\003r`\000\010\023z\000\000AN \000\004\017K\000\000 hP\000\002\006G\000\000\02048\000\001\003#@\000\010\032\034\000\000AQ`\000\004\r\016\000\000 hp\000\002\006G\000\000\02048\000\001\003r`\000\010\037\026\000\000Ay0\000\004\017K\000\000 |X\000\002\007e@\000\020>,\000\001\003r`\000\010\037\026\000\000Ay0\000\004\016D\000\000 vh\000\002\007e@\000\020;4\000\001\003r`\000\010\037\026\000\000Ay0\000\004\017K\000\000 z\010\000\002\007e@\000\020>,\000\001\003'\000\000\010\037\026\000\000Ay0\000\004\017K\000\000 |X\000\002\007e@\000\0206\024\000\001\003r`\000\010\037\026\000\000AZ@\000\004\017K\000\000 |X\000\002\007e@\000\020>,\000\001\003r`\000\010\037\026\000\000Ay0\000\004\017K\000\000 |X\000\002\007e@\000\0208\024\000\001\003<\000\000\010\035Z\000\000AmP\000\004\016m\000\000 p\010\000\002\006x\000\000\020>,\000\001\003r`\000\010\023b\000\000Ay0\000\004\016\033\000\000 {0\000\002\007\027@\000\020'D\000\001\003r`\000\010\024\\\000\000Ay0\000\004\017%\000\000 |X\000\002\007e@\000\020:l\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\003\024Jl2\000\000\000\000\000\000\004\034l\000\000!]x\000\002\ro@\000\020n|\000\001\006w`\000\0107>\000\000C;p\000\004\033_\000\000!]x\000\002\ro@\000\020n|\000\001\006w`\000\0107>\000\000C;p\000\004\033_\000\000!]x\000\002\ro@\000\020n|\000\001\006w`\000\0107>\000\000C;p\000\004\033_\000\000!]x\000\002\ro@\000\020n|\000\001\006w`\000\0107>\000\000C;p\000\004\033_\000\000!]x\000\002\ro@\000\020n|\000\001\006w`\000\0107>\000\000C;p\000\004\033_\000\000!]x\000\002\016\035@\000\020n|\000\001\006w`\000\0107>\000\000C;p\000\004!w\000\000!]x\000\002\ro@\000\020n|\000\001\006w`\000\0107>\000\000D\036\000\000\004!p\000\000\"\017\000\000\002\020x\000\000\021\007@\000\001\010<\000\000\010C`\000\000D\036\000\000\004!p\000\000\"\017\000\000\002\ro@\000\020n|\000\001\006w`\000\0107>\000\000C;p\000\004\033_\000\000!]x\000\002\ro@\000\020n|\000\001\006w`\000\0107J\000\000D\035P\000\004\033_\000\000\"\016h\000\002\ro@\000\020n|\000\001\006w`\000\0107>\000\000D\035 \000\004\033_\000\000!]x\000\002\016)@\000\020n|\000\001\006w`\000\0107>\000\000C;p\000\004\033_\000\000!]x\000\002\ro@\000\020n|\000\001\0108 \000\0107>\000\000C;p\000\004!X\000\000!]x\000\002\ro@\000\020n|\000\001\006w`\000\0107>\000\000C;p\000\004\033_\000\000\"\r \000\002\rs\000\000\021\0074\000\001\010; \000\010CZ\000\000D\032\020\000\004!G\000\000!]x\000\002\ro@\000\021\0068\000\001\006w`\000\010D\020\000\000CJ@\000\004\"\005\000\000!]x\000\002\ro@\000\021\010\010\000\001\006w`\000\010Ct\000\000C;p\000\004\033_\000\000\"\016\010\000\002\017e\000\000\020y4\000\001\007r@\000\010?\002\000\000CeP\000\004\037\030\000\000!qX\000\002\017\r@\000\020xl\000\001\007F`\000\010<6\000\000Cc0\000\004\036\033\000\000!qX\000\002\017\r@\000\020y4\000\001\007K \000\010<Z\000\000CeP\000\004\036-\000\000!rh\000\002\017\026@\000\021\000h\000\001\007K \000\010<Z\000\000CeP\000\004 \002\000\000!\177`\000\002\017\026@\000\020y4\000\001\007{@\000\010<Z\000\000CeP\000\004\036-\000\000!rh\000\002\017n@\000\020y4\000\001\007K \000\010<Z\000\000CeP\000\004\036-\000\000!}8\000\002\017\026@\000\020y4\000\001\007K \000\010<Z\000\000Cz\020\000\004\036-\000\000!rh\000\002\017\026@\000\020y4\000\001\007K \000\010<Z\000\000CeP\000\004 \032\000\000!rh\000\002\017\026@\000\020y4\000\001\010\000@\000\010?x\000\000CeP\000\004\036-\000\000!~p\000\002\017\026@\000\020y4\000\001\007K \000\010<Z\000\000C{P\000\004\036-\000\000!rh\000\002\017\026@\000\020y4\000\001\007K \000\010?.\000\000CeP\000\004\036-\000\000!rh\000\002\017\026@\000\020~D\000\001\010\023 \000\010@f\000\000D\011P\000\004 3\000\000\"\003\030\000\002\020-@\000\021\002P\000\001\010\025\000\000\010A(\000\000D\n@\000\004 T\000\000\"\005 \000\002\020*\000\000\021\004\014\000\001\010 `\000\010@f\000\000D\0060\000\004 3\000\000\"\003\030\000\002\020\031@\000\021\001L\000\001\010\014`\000\010A\014\000\000D\010`\000\004 F\000\000\"\0040\000\002\020#\000\000\021\002\030\000\001\010\014`\000\010@f\000\000D\0060\000\004 3\000\000\"\003\030\000\002\020\031@\000\021\001L\000\001\010\014`\000\010@f\000\000D\0060\000\004 3\000\000\"\003\030\000\002\020\031@\000\021\001L\000\001\010\014`\000\010@f\000\000D\0060\000\004  \000\000\"\003\030\000\002\020\031@\000\021\001L\000\001\010\014`\000\010@f\000\000D\0060\000\004 3\000\000\"\003\030\000\002\020#\000\000\021\002\030\000\001\010\021@\000\010A\014\000\000D\010`\000\004 F\000\000\"\003\030\000\002\020\031@\000\021\001L\000\001\010\014`\000\010@f\000\000D\0060\000\004 3\000\000\"\003\030\000\002\020\031@\000\021\001L\000\001\010\014`\000\010@f\000\000D\0060\000\004 3\000\000\"\003\030\000\002\020\031@\000\021\001L\000\001\010\010\000\000\024\000\000@\000 \000\014\000\004\000\001 \0000\000\016\000\004\000\001\020\000(\000\013\000\003\000\000h\000\034\000\007@\002\000\000\001\030C/U\011\024j\024\000J0[@\0043\025D\000&X. \002\005`r\000\023,\027H\001\024u7\000\011'+0\000A:Y`\005\033\025`\000'Xn@\0029^v\000\021\014V\030\001\024a7\035,\027\023d\000F2XN'+\005dy\000\000\000\000\0025Br1Z\000\000\000\001\002p9\032-@\000\000\000J:[LP\000\000\000\000%\035-GH\000\000\000\000\020.V;Uft\000\000\n6+Ahe6XLW\020\000\000\000'XnF{\011Jr\000\023Mw3\025Zb2\\@\000\000\000\000D2XlVk\011Jr\000\000\000\000\002Mjn\000\023-vp\001(u2@\nv+\020\000T4\035 \0043IR\000)X.@\002Mjn2\030/\020\000\001\032o7\031\014\027H\000\000T:Y.6#\005r\000+Y,Fs\025fd0^ \000\000\001(h:\\N6#\005r\000\000\000\000\0043IRd0^ \000\002MBt:\\LF\013d\000\000\000\000\004TAhJM\035\011*0\000\000\000\000\022[%r+\020^%<@\000\000\000\000Ja\020\011,\"\001\025J \022R\007\"*4t%)H\004UH\000\000\000\000\020)P\000\001 M\000\000\004V\011\000Jb\020\011,R\001\025\020:\022S'\"*L@%-\010\004UH\001Zd\000\000\004TIhJM\035\011*2\001\025`\000\000\001lB`\000\016d\030\000\000v!P\000\0072\016\000\000;\020x\000\003Y\010\000\000\035HD\000\001lD@\000\016d&\000\000v\"@\000\0072\025\000\000;\0210\000\003Y\013@\000\035Hd\000\001lG\000\000\016d<\000\000v!p\000\0072 \000\000;\022\020\000\003Y\022\000\000\035I\030\000\001lJ \000\016dV\000\000v%`\000\00721\000\000;\023\020\000\003Y\031@\000\035IP\000\001lM \000\016dl\000\000v&p\000\00728\000\000;\023P\000\003Y\036\000\000\035Ix\000\001lP \000\016e\010\000\000v(`\000\0072I\000\000;\024`\000\003Y'@\000\035JT\000\001lU@\000\016e.\000\000v\"p\000\0072\031\000\000;\021`\000\003Y\017\000\000\035H<\000\001lH\000\000\016dD\000\000v$@\000\0072&\000\000;\022H\000\003Y\025@\000\035I8\000\001lW \000\016e<\000\000n\023P\000\006q\035\000\0007\011h\000\0038N@\000\033Dt#S*@\000\000\010`X\000\000F0@\000\0043\004\000\000#\003\020\000\002\031B\000\000\021L\020\000\001\014a\000\000\010f\010\000\000F0@\000\0043\004\000\000\"hP\000\002\027\000\000\000\021L\020\000\001\013$@\000\010`l\000\000F0@\000\0041)\000\000#\0100\000\002\030C\000\000\021D\030\000\001\014!@\000\010b\014\000\000F\020`\000\0041\006\000\000#\0100\000\002\030C\000\000\021L\020\000\001\014a\000\000\010f\010\000\000F0@\000\0043\004\000\000#\030 \000\002\031B\000\000\021L\020\000\001\014a\000\000\010f\010\000\000F%\000\000\0041B\000\000#\030 \000\002\030a\000\000\021L\020\000\001\014a\000\000\010f\010\000\000F0@\000\0041v\000\000#\030 \000\002\031B\000\000\021B8\000\001\014a\000\000\010f\010\000\000F0@\000\0043\004\000\000#\030 \000\002\030;@\000\021L\020\000\001\014a\000\000\010ct\000\000F0@\000\0043\004\000\000#\030 \000\002\031B\000\000\021L\020\000\001\014a\000\000\010f\010\000\000F0@\000\0043\004\000\000#\030 \000\002\031\013\000\000\021DP\000\001\0140@\000\010c\004\000\000F\030 \000\0041%\000\000#\011 \000\002\031B\000\000\021L\020\000\001\013!@\000\010f\010\000\000F) \000\0042^\000\000#\nh\000\002\026C\000\000\021L\020\000\001\013A\000\000\010f\010\000\000F-p\000\0043\004\000\000#\030 \000\002\031\034\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ +P*$r%\034G\035\010\016\006\013QPc7[LcQ\001*n5[Mw;8@\"7\030-V)\010t \022Y\001 \000\001.A)\023I\024r\034t 9^.6\033QX:\020\025-f[9^w7\010\rf\0135J:\020\011,@P\000\000/2\031.b{\r^n9[mF(\000\000\000\000\011.Rq\025j.\022]%b+T\000U7\032mf{]\\ \"\\N&{H\000\000\000\011.3Q\000Js\005\000\005v+QF/3\\Mw+@\000\000\022VkcRtt%-WG%ihJh:@\005v+QF/8\030.7\033]H\000\022VkcRtt%-WG%ihJd\035\011,CQ\0256^\035\027'\"*m<:.NDW\030(\000\000\000\025*4*H\000\000\000\000\005p\000\000\000.\000\000\000\002{\021Jv\027[NVc0\000\000\000\023Mr\002\025dr7\\@\000\000\000\000U7\032mf{]\\ 4\033n7 \000\000\000\000\022\rw\033P@n0[,R\0031^o5].\002\003\031Bi6\035.&(\000\000\000\000\025-f[9^w7\010\0166+Ile9\010\014W\023I^r\000\000\000\000\0029^ 0Y\014G\023\025fs\020\030.7\033=Fi0]\014V!\001ni:\032\004\006s\005Ze\000\000\000vG@\000\0074?\000\000;$\030\000\003Z%\000\000\035R@$[LfK9Rt<@\000\000\000\001\034a'\000\n\004zM\022X\000\000\000\000\000\000\000\005\000\000\000\001H\000\000\000>O\023M\025J/XDo\007\024OXGUT)f3\025\024\037}\"=\024si\0257:\0043qI<t\025H\003\n\014Jc=\006C po\023?\002\000\000#$w\013-T\nn\013S'\004x\017R?|}+(\023]\021y\030\007&'(U\037]?\\wsa\177`\000\000\000\000\000\000\001\000$\000\000\000\000\000\000\000@,@\000\000\000\000\000\000 #h\000\000\000\000\000\000\020\0308@\000\000\000\000\000\010\017C(\000\000\000\000\000\004\011:\011\000\000\000\000\000\002\005F\022h\000\000\000\000\001\003\027ka\000\000\000\000\000Afs,P\000\000\000\000!\000T\005y\000\000\000\000\020FtC[P\000\000\000\010&hj)\"\000\000\000\004\025\010a\034rP\000\000\002\013-<b\007R\000\000\001\006\0145}$c \000\000C po\023?\002\000\000!]FE<\0271 \000\020u<\0135NNd\000\010>\ncH`HO \004 V^\035<-1D\002\021\026\032r5\\.zA\011\000x3`dnV$DZK ,?\005\025v\":O\004\033g3\035Z\033L`\000\001Rn4]\017\020\000\000\000a7\000\000\000\000\030-H\000\001C \000\000\014\032\000\000\000aP\000\000\006\r\000\000\0000h\000\000\003\006@\000\000\0304\000\000\001C \000\000\014\031p\000\000aO\000\000\006\014x\000\0000g@\000\003\006<\000\000\0304\000\000\001C \000\000\014\032\000\000\000aP\000\000\006\r\000\000\0000h\000\000\003\006@\000\000\0304\000\000\001C \000\000\014\032\000\000\000aP\000\000\006\r\000\000\0000h\000\000\003\006@\000\000\0304\000\000\001C \000\000\014\032\000\000\000aP\000\000\006\014x\000\0000h\000\000\003\006@\000\000\0304\000\000\001C \000\000\014\032\000\000\000aP\000\000\006\r\000\000\0000h\000\000\003\006@\000\000\0304\000\000\001Bw@\000\014\032\000\000\000aS\020\000\006\027\023\000\00018\000\000\003\013=\000\000\0309\034\000\001Ec\000\000\014.\000\000\000br0\000\000\000\000\007IfJe\027l\"7CJ'l#jj\024s\031JJ\017~Q\036J9tJ[]\002\031xd^:\016\014\001E\006%1^C\000\001Gw@\000\014@n\000\000d\006p\000\006 `\000\0002\0038\000\003\020\033@\000\031\001\\\000\001H\r`\000\014@n\000\000d\006p\000\006\035h\000\0001o \000\003\020\033@\000\030w@\000\001H\022\000\000\014@n\000\000d\010@\000\006 '\000\0002\0028\000\003\020\023@\000\031\001\034\000\001H\011`\000\014@N\000\000d\004p\000\006 '\000\0002\0028\000\003\020\033@\000\031\001\\\000\001H\r`\000\014@n\000\000d\006p\000\006 7\000\0002\0038\000\003\020\033@\000\031\001\\\000\001H\r`\000\014@\036\000\000d\006p\000\006 7\000\0002\0038\000\003\020\033@\000\031\001\\\000\001H\r`\000\014@n\000\000d\006p\000\006 7\000\0002\0038\000\003\017`\000\000\031\001\\\000\001H\r`\000\014@n\000\000d\006p\000\006 7\000\0001zH\000\003\020\033@\000\031\001\\\000\001Gn \000\014@n\000\000d\006p\000\006 7\000\0002\0038\000\003\020\033@\000\031\001\\\000\001H\r`\000\014@n\000\000d\006p\000\006 7\000\0001u0\000\003\017\"@\000\031\001\\\000\001H\r`\000\014@n\000\000ch\020\000\006\036E\000\0002\0038\000\003\020\033@\000\030w\020\000\001H\r`\000\014;p\000\000d\014@\000\006\037M\000\0001n \000\003\020\033@\000\030\177H\000\001H\r`\000\014?H\000\000d\006p\000\006 7\000\0001p80\030\014\006\003\001@`0\030\014\006\003\001@`0\030\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\000\000\031+(\000\001J7 \000\014S:\000\000e\033P\000\006)]\000\0002Mh\000\003\024n@\000\031&t\000\001J7 \000\014S:\000\000e\033P\000\006)]\000\0002Mh\000\003\024n@\000\031&t\000\001J7 \000\014S:\000\000e\033P\000\006)]\000\0002Mh\000\003\024n@\000\031&t\000\001J7 \000\014S:\000\000e\033P\000\006)]\000\0002Mh\000\003\024n@\000\031&t\000\001J7 \000\014S:\000\000e\033P\000\006)]\000\0002Mh\000\003\024n@\000\031&t\000\001J7 \000\014U\000\000\000e\033P\000\006)]\000\0002Mh\000\003\024n@\000\0317h\000\001J7 \000\014S:\000\000e\033P\000\006)]\000\0002Mh\000\003\026~@\000\0317t\000\001K? \000\014[z\000\000e_P\000\006-}\000\0002oh\000\003\026~@\000\0317t\000\001K? \000\014S:\000\000e\033P\000\006)]\000\0002Mh\000\003\024n@\000\031&t\000\001J7 \000\014S:\000\000e\033P\000\006)]\000\0002N\030\000\003\024n@\000\031&t\000\001J7 \000\014S:\000\000e\033P\000\006)]\000\0002Mh\000\003\026{@\000\031&t\000\001J7 \000\014U$\000\000e\033P\000\006)]\000\0002Mh\000\003\024n@\000\031&t\000\001J7 \000\014S:\000\000e\033P\000\006-t\000\0002Mh\000\003\024n@\000\0317,\000\001J7 \000\014S:\000\000e\033P\000\006)]\000\0002Mh\000\003\024n@\000\031&t\000\001K9`\000\014SH\000\000e\033P\000\006)]\000\0002Mh\000\003\026r\000\000\0316t\000\001J7 \000\014S:\000\000e[ \000\006)]\000\0002lh\000\003\025)@\000\0316\024\000\001J7 \000\014S:\000\000eX \000\006)]\000\0002kX\000\003\024n@\000\031&t\000\001K=\000\000\014Yr\000\000eD`\000\006,y\000\0002b0\000\003\026\023\000\000\0312<\000\001K\022\000\000\014Y\020\000\000eI\000\000\006,H\000\0002d@\000\003\026$\000\000\0312 \000\001K\017 \000\014Xz\000\000eD`\000\006,&\000\0002b0\000\003\026\023\000\000\0311\030\000\001K\011@\000\014XL\000\000eF`\000\006,6\000\0002c0\000\003\026\033\000\000\0311X\000\001K\r@\000\014XL\000\000eD`\000\006,&\000\0002b0\000\003\026\023\000\000\0311\030\000\001K\011@\000\014XL\000\000eD`\000\006,&\000\0002b0\000\003\026\023\000\000\0311\030\000\001K\011@\000\014XL\000\000eD`\000\006,&\000\0002a\030\000\003\026\023\000\000\0311\030\000\001K\011@\000\014XL\000\000eD`\000\006,&\000\0002b0\000\003\026\023\000\000\0311X\000\001K\r@\000\014Xl\000\000eF`\000\006,6\000\0002c0\000\003\026\023\000\000\0311\030\000\001K\011@\000\014XL\000\000eD`\000\006,&\000\0002b0\000\003\026\023\000\000\0311\030\000\001K\011@\000\014XL\000\000eD`\000\006,&\000\0002b0\000\003\026\023\000\000\0311\030\000\001K\011@\000\014X&\000\001 \000\004\000\002\000\000`\000 \000\n\000\003\000\000p\000 \000\011\000\002@\000X\000\030\000\006@\001`\000<\000\020\000\000\000\0004\031\030\000\003!o@\000\032\016|\000\001Pf \000\r\007>\000\000h;p\000\006C_\000\0004\035x\000\003!o@\000\032\016|\000\001P9`\000\r\003f\000\000h;p\000\006Ao\000\0004\022\020\000\003!o@\000\032\n\024\000\001PR \000\r\005\022\000\000h)\020\000\006BI\000\0004\024H\000\003!$@\000\032\n$\000\001PR \000\r\005\022\000\000h;p\000\006C_\000\0004\035x\000\003!o@\000\032\016|\000\001Pw`\000\r\007>\000\000h;p\000\006C_\000\0004\035x\000\003!+@\000\032\016|\000\001Pw`\000\r\007>\000\000h;p\000\006C_\000\0004\035x\000\003!o@\000\032\016|\000\001Pw`\000\r\007>\000\000gS\000\000\006C_\000\0004\035x\000\003!o@\000\032\016|\000\001Pw`\000\014z\024\000\000h;p\000\006C_\000\0004\026X\000\003!o@\000\032\016|\000\001Pw`\000\r\007>\000\000h;p\000\006C_\000\0004\035x\000\003!o@\000\032\016|\000\001Pw`\000\r\005v\000\000h1\000\000\006C_\000\0004\035x\000\003!o@\000\032\010x\000\001Pb\000\000\r\007>\000\000h;p\000\006=\006\000\0004\035x\000\003 {@\000\031td\000\001Pm`\000\014z\014\000\000h;p\000\006C\035\000\0004\035x\000\003\036E@\000\032\016|\000\001Pw`\000\r\004\014\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\001\002B!Q\010T0\000\000a1\030lF+\030\000\000\030\014&#\031Pj6\033N\007\020\000\000\000\000\000\000\000\000\000\000\000\001",0xd33);
    private static final int[] _data5 = decodeData("\000\001i;@\000\016K`\000\000t^ \000\007%t\000\000:/0\000\003R|\000\000\035\027h\000\001i?\000\000\016K|\000\000t`\000\000\000\000\000\000\000;U\010\000\003]5@\000\035l\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000uyQ\021SLmom\000\000\001nh@\000\016vD\000\000w4@\000\007;$\000\000;Z0\000\003]S\000\000\035m \000\001nj\000\000\016vT\000\000w5 \000\007;,\000\000;Z`\000\003]W\000\000\035m8\000\001nl\000\000\016v`\000\000w6 \000\007;2\000\000;[ \000\003]Z\000\000\035mX\000\001nm@\000\016vp\000\000w7\000\000\007;:\000\000;[P\000\003]^\000\000\035mp\000\001no@\000\016v|\000\000w8\000\000\007;@\000\000;\\\020\000\003]a\000\000\035n\020\000\001nq\000\000\016w\014\000\000w8`\000\007;H\000\000;\\@\000\003]e\000\000\035n(\000\001ns\000\000\016w\030\000\000w9`\000\007;N\000\000;]\000\000\003]h\000\000\035nH\000\001nt@\000\016w(\000\000w:@\000\007;V\000\000;]0\000\003]l\000\000\035n`\000\001nv@\000\016w4\000\000w;@\000\007;\\\000\000;]p\000\003]o\000\000\035o\000\000\001nx\000\000\016wD\000\000w< \000\007;d\000\000;^ \000\003]s\000\000\035o\030\000\001nz\000\000\016wP\000\000w= \000\007;j\000\000;^`\000\003]v\000\000\035o8\000\001n{@\000\016w`\000\000w>\000\000\007;r\000\000;_\020\000\003]z\000\000\035oP\000\001n}@\000\016wl\000\000w?\000\000\007;x\000\000;_P\000\003]}\000\000\035op\000\001n\177\000\000\016w|\000\000w?`\000\007<\000\000\000;`\000\000\003^\001\000\000\035p\010\000\001o\001\000\000\016x\010\000\000w@`\000\007<\006\000\000;`@\000\003^\004\000\000\035p(\000\001o\002@\000\016x\030\000\000wA@\000\007<\016\000\000;`p\000\003^\010\000\000\035p@\000\001o\004@\000\016x$\000\000wB@\000\007<\024\000\000;a0\000\003^\013\000\000\035p`\000\001o\006\000\000\016x4\000\000wC \000\007<\034\000\000;a`\000\003^\017\000\000\035px\000\001o\010\000\000\016x@\000\000wD \000\007<\"\000\000;b \000\003^\022\000\000\035q\030\000\001o\011@\000\016xP\000\000wE\000\000\007<*\000\000;bP\000\003^\026\000\000\035q0\000\001o\013@\000\016x\\\000\000wF\000\000\007<0\000\000;c\020\000\003^\031\000\000\035qP\000\001o\r\000\000\016xl\000\000wF`\000\007<8\000\000;c@\000\003^\035\000\000\035qh\000\001o\017\000\000\016xx\000\000wG`\000\007<>\000\000;d\000\000\003^ \000\000\035r\010\000\001o\020@\000\016y\010\000\000wH@\000\007<F\000\000;d0\000\003^$\000\000\035r \000\001o\022@\000\016y\024\000\000wI@\000\007<L\000\000;dp\000\003^'\000\000\035r@\000\001o\024\000\000\016y$\000\000wJ \000\007<T\000\000;e \000\003^+\000\000\035rX\000\001o\026\000\000\016y0\000\000wK \000\007<Z\000\000;e`\000\003^.\000\000\035rx\000\001o\027@\000\016y@\000\000wL\000\000\007<b\000\000;f\020\000\003^2\000\000\035s\020\000\001o\031@\000\016yL\000\000wM\000\000\007<h\000\000;fP\000\003^5\000\000\035s0\000\001o\033\000\000\016y\\\000\000wM`\000\007<p\000\000;g\000\000\003^9\000\000\035sH\000\001o\035\000\000\016yh\000\000wN`\000\007<v\000\000;g@\000\003^<\000\000\035sh\000\001o\036@\000\016yx\000\000wO@\000\007<~\000\000;gp\000\003^@\000\000\035t\000\000\001o @\000\016z\004\000\000wP@\000\007=\004\000\000;h0\000\003^C\000\000\035t \000\001o\"\000\000\016z\024\000\000wQ \000\007=\014\000\000;h`\000\003^G\000\000\035t8\000\001o$\000\000\016z \000\000wR \000\007=\022\000\000;i \000\003^J\000\000\035tX\000\001o%@\000\016z0\000\000wS\000\000\007=\032\000\000;iP\000\003^N\000\000\035tp\000\001o'@\000\016z<\000\000\000\000\004\000\000\000\000\011 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\025\032\r\022I\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000A)Pi\024H\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035Q`\000\001\\' \000\rb:\000\000n\023P\000\006q\035\000\0007\011h\000\0038N@\000\033Dt\000\001\\' \000\rb:\037ow{}~\177?_ow{}~\177?@\000\000\000\000\0004\177\177\177<p\000\000\003e@\000\000\000\004\000\000\000\000\000\000\000\000k\177\177~y`\000\000\007K\000\000\000\000\010\000\000\000\000\000 \020\010\004\002\001",0x24e);
    private static final int[] _data6 = decodeData("\000\000\000\000\000\000\000\000\004\000\000\000\002D\000\000\000\014 \000\000\000\"\000\000\000\001\020\000\000\000\007\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\177\001\000\005f\033\031N\000\000\000\000\002s\021Rs\000\000\000\000\000\000\rrF\000\000\000\000\004\000\000\000\000 \000\000\000\002\000\000\000\004\000\000\nx\000\000\001i,`\000\016Jp\000\000tW@\000\006i7\037\177\177\177~\000\003TLp\000\035z\020\000\001n%@\000\016r,?\177\177\177|\000\002\000\000\000\000\000\005Z\000\000\000-`\000\035M\000\000\001lh\002\007`\000\000\000\000\000\000\000\177x\000\000\000\000\000\000\000?i!tv\033=\006a\037qQ\"D-AHYOz4 M!\037<~g\177\000\000\000\000\000\000\000\004\001\020\000\000\000\000\000\000\002\0008\000\000\000\000\000\000\001\000\024\000\000\000\000\000\000\000?p\000\000\000\000\000\000\000!@\000\000\000\000\000\000\000@\000\\\000\000\000\000\000\000\007\177\000\000\000\000\000\000\000\004\001\020\000\000\000\000\000\000\003\177\000\000\000\000\000\000\000\002\177`\000\000\000\000\000\000\000?p\000\000\000\000\000\000\000\037|\000\000\000\000\000\000\000\020>\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\013\177@\000\000\000\000\000\000\002\007?\177\177\177x\000\000\001\003`\000\000\000\000\000\000\000?o\177\177y%\000k\025\037x\000\000\001V_e\032Oy\177\177~) \032e \0005p\000\001",0x59);


    private final void trampoline() throws ExecutionException {
        while(state == RUNNING) {
            switch(pc>>>9) {
                case 0x80: run_10000(); break; 
                case 0x81: run_10200(); break; 
                case 0x82: run_10400(); break; 
                case 0x83: run_10600(); break; 
                case 0x84: run_10800(); break; 
                case 0x85: run_10a00(); break; 
                case 0x86: run_10c00(); break; 
                case 0x87: run_10e00(); break; 
                case 0x88: run_11000(); break; 
                case 0x89: run_11200(); break; 
                case 0x8a: run_11400(); break; 
                case 0x8b: run_11600(); break; 
                case 0x8c: run_11800(); break; 
                case 0x8d: run_11a00(); break; 
                case 0x8e: run_11c00(); break; 
                case 0x8f: run_11e00(); break; 
                case 0x90: run_12000(); break; 
                case 0x91: run_12200(); break; 
                case 0x92: run_12400(); break; 
                case 0x93: run_12600(); break; 
                case 0x94: run_12800(); break; 
                case 0x95: run_12a00(); break; 
                case 0x96: run_12c00(); break; 
                case 0x97: run_12e00(); break; 
                case 0x98: run_13000(); break; 
                case 0x99: run_13200(); break; 
                case 0x9a: run_13400(); break; 
                case 0x9b: run_13600(); break; 
                case 0x9c: run_13800(); break; 
                case 0x9d: run_13a00(); break; 
                case 0x9e: run_13c00(); break; 
                case 0x9f: run_13e00(); break; 
                case 0xa0: run_14000(); break; 
                case 0xa1: run_14200(); break; 
                case 0xa2: run_14400(); break; 
                case 0xa3: run_14600(); break; 
                case 0xa4: run_14800(); break; 
                case 0xa5: run_14a00(); break; 
                case 0xa6: run_14c00(); break; 
                case 0xa7: run_14e00(); break; 
                case 0xa8: run_15000(); break; 
                case 0xa9: run_15200(); break; 
                case 0xaa: run_15400(); break; 
                case 0xab: run_15600(); break; 
                case 0xac: run_15800(); break; 
                case 0xad: run_15a00(); break; 
                case 0xae: run_15c00(); break; 
                case 0xaf: run_15e00(); break; 
                case 0xb0: run_16000(); break; 
                case 0xb1: run_16200(); break; 
                case 0xb2: run_16400(); break; 
                case 0xb3: run_16600(); break; 
                case 0xb4: run_16800(); break; 
                case 0xb5: run_16a00(); break; 
                case 0xb6: run_16c00(); break; 
                case 0xb7: run_16e00(); break; 
                case 0xb8: run_17000(); break; 
                case 0xb9: run_17200(); break; 
                case 0xba: run_17400(); break; 
                case 0xbb: run_17600(); break; 
                case 0xbc: run_17800(); break; 
                case 0xbd: run_17a00(); break; 
                case 0xbe: run_17c00(); break; 
                case 0xbf: run_17e00(); break; 
                case 0xc0: run_18000(); break; 
                case 0xc1: run_18200(); break; 
                case 0xc2: run_18400(); break; 
                case 0xc3: run_18600(); break; 
                case 0xc4: run_18800(); break; 
                case 0xc5: run_18a00(); break; 
                case 0xc6: run_18c00(); break; 
                case 0xc7: run_18e00(); break; 
                case 0xc8: run_19000(); break; 
                case 0xc9: run_19200(); break; 
                case 0xca: run_19400(); break; 
                case 0xcb: run_19600(); break; 
                case 0xcc: run_19800(); break; 
                case 0xcd: run_19a00(); break; 
                case 0xce: run_19c00(); break; 
                case 0xcf: run_19e00(); break; 
                case 0xd0: run_1a000(); break; 
                case 0xd1: run_1a200(); break; 
                case 0xd2: run_1a400(); break; 
                case 0xd3: run_1a600(); break; 
                case 0xd4: run_1a800(); break; 
                case 0xd5: run_1aa00(); break; 
                case 0xd6: run_1ac00(); break; 
                case 0xd7: run_1ae00(); break; 
                case 0xd8: run_1b000(); break; 
                case 0xd9: run_1b200(); break; 
                case 0xda: run_1b400(); break; 
                case 0xdb: run_1b600(); break; 
                case 0xdc: run_1b800(); break; 
                case 0xdd: run_1ba00(); break; 
                case 0xde: run_1bc00(); break; 
                case 0xdf: run_1be00(); break; 
                case 0xe0: run_1c000(); break; 
                case 0xe1: run_1c200(); break; 
                case 0xe2: run_1c400(); break; 
                case 0xe3: run_1c600(); break; 
                case 0xe4: run_1c800(); break; 
                case 0xe5: run_1ca00(); break; 
                case 0xe6: run_1cc00(); break; 
                case 0xe7: run_1ce00(); break; 
                case 0xe8: run_1d000(); break; 
                case 0xe9: run_1d200(); break; 
                case 0xea: run_1d400(); break; 
                case 0xeb: run_1d600(); break; 
                case 0xec: run_1d800(); break; 
                case 0xed: run_1da00(); break; 
                case 0xee: run_1dc00(); break; 
                case 0xef: run_1de00(); break; 
                case 0xf0: run_1e000(); break; 
                case 0xf1: run_1e200(); break; 
                case 0xf2: run_1e400(); break; 
                case 0xf3: run_1e600(); break; 
                case 0xf4: run_1e800(); break; 
                case 0xf5: run_1ea00(); break; 
                case 0xf6: run_1ec00(); break; 
                case 0xf7: run_1ee00(); break; 
                case 0xf8: run_1f000(); break; 
                case 0xf9: run_1f200(); break; 
                case 0xfa: run_1f400(); break; 
                case 0xfb: run_1f600(); break; 
                case 0xfc: run_1f800(); break; 
                case 0xfd: run_1fa00(); break; 
                case 0xfe: run_1fc00(); break; 
                case 0xff: run_1fe00(); break; 
                case 0x100: run_20000(); break; 
                case 0x101: run_20200(); break; 
                case 0x102: run_20400(); break; 
                case 0x103: run_20600(); break; 
                case 0x104: run_20800(); break; 
                case 0x105: run_20a00(); break; 
                case 0x106: run_20c00(); break; 
                case 0x107: run_20e00(); break; 
                case 0x108: run_21000(); break; 
                case 0x109: run_21200(); break; 
                case 0x10a: run_21400(); break; 
                case 0x10b: run_21600(); break; 
                case 0x10c: run_21800(); break; 
                case 0x10d: run_21a00(); break; 
                case 0x10e: run_21c00(); break; 
                case 0x10f: run_21e00(); break; 
                case 0x110: run_22000(); break; 
                case 0x111: run_22200(); break; 
                case 0x112: run_22400(); break; 
                case 0x113: run_22600(); break; 
                case 0x114: run_22800(); break; 
                case 0x115: run_22a00(); break; 
                case 0x116: run_22c00(); break; 
                case 0x117: run_22e00(); break; 
                case 0x118: run_23000(); break; 
                case 0x119: run_23200(); break; 
                case 0x11a: run_23400(); break; 
                case 0x11b: run_23600(); break; 
                case 0x11c: run_23800(); break; 
                case 0x11d: run_23a00(); break; 
                case 0x11e: run_23c00(); break; 
                case 0x11f: run_23e00(); break; 
                case 0x120: run_24000(); break; 
                case 0x121: run_24200(); break; 
                case 0x122: run_24400(); break; 
                case 0x123: run_24600(); break; 
                case 0x124: run_24800(); break; 
                case 0x125: run_24a00(); break; 
                case 0x126: run_24c00(); break; 
                case 0x127: run_24e00(); break; 
                case 0x128: run_25000(); break; 
                case 0x129: run_25200(); break; 
                case 0x12a: run_25400(); break; 
                case 0x12b: run_25600(); break; 
                case 0x12c: run_25800(); break; 
                case 0x12d: run_25a00(); break; 
                case 0x12e: run_25c00(); break; 
                case 0x12f: run_25e00(); break; 
                case 0x130: run_26000(); break; 
                case 0x131: run_26200(); break; 
                case 0x132: run_26400(); break; 
                case 0x133: run_26600(); break; 
                case 0x134: run_26800(); break; 
                case 0x135: run_26a00(); break; 
                case 0x136: run_26c00(); break; 
                case 0x137: run_26e00(); break; 
                case 0x138: run_27000(); break; 
                case 0x139: run_27200(); break; 
                case 0x13a: run_27400(); break; 
                case 0x13b: run_27600(); break; 
                case 0x13c: run_27800(); break; 
                case 0x13d: run_27a00(); break; 
                case 0x13e: run_27c00(); break; 
                case 0x13f: run_27e00(); break; 
                case 0x140: run_28000(); break; 
                case 0x141: run_28200(); break; 
                case 0x142: run_28400(); break; 
                case 0x143: run_28600(); break; 
                case 0x144: run_28800(); break; 
                case 0x145: run_28a00(); break; 
                case 0x146: run_28c00(); break; 
                case 0x147: run_28e00(); break; 
                case 0x148: run_29000(); break; 
                case 0x149: run_29200(); break; 
                case 0x14a: run_29400(); break; 
                case 0x14b: run_29600(); break; 
                case 0x14c: run_29800(); break; 
                case 0x14d: run_29a00(); break; 
                case 0x14e: run_29c00(); break; 
                case 0x14f: run_29e00(); break; 
                case 0x150: run_2a000(); break; 
                case 0x151: run_2a200(); break; 
                case 0x152: run_2a400(); break; 
                case 0x153: run_2a600(); break; 
                case 0x154: run_2a800(); break; 
                case 0x155: run_2aa00(); break; 
                case 0x156: run_2ac00(); break; 
                case 0x157: run_2ae00(); break; 
                case 0x158: run_2b000(); break; 
                case 0x159: run_2b200(); break; 
                case 0x15a: run_2b400(); break; 
                case 0x15b: run_2b600(); break; 
                case 0x15c: run_2b800(); break; 
                case 0x15d: run_2ba00(); break; 
                case 0x15e: run_2bc00(); break; 
                case 0x15f: run_2be00(); break; 
                case 0x160: run_2c000(); break; 
                case 0x161: run_2c200(); break; 
                case 0x162: run_2c400(); break; 
                case 0x163: run_2c600(); break; 
                case 0x164: run_2c800(); break; 
                case 0x165: run_2ca00(); break; 
                case 0x166: run_2cc00(); break; 
                case 0x167: run_2ce00(); break; 
                case 0x168: run_2d000(); break; 
                case 0x169: run_2d200(); break; 
                case 0x16a: run_2d400(); break; 
                case 0x16b: run_2d600(); break; 
                case 0x16c: run_2d800(); break; 
                case 0x16d: run_2da00(); break; 
                case 0x16e: run_2dc00(); break; 
                case 0x16f: run_2de00(); break; 
                case 0x170: run_2e000(); break; 
                case 0x171: run_2e200(); break; 
                case 0x172: run_2e400(); break; 
                case 0x173: run_2e600(); break; 
                case 0x174: run_2e800(); break; 
                case 0x175: run_2ea00(); break; 
                case 0x176: run_2ec00(); break; 
                case 0x177: run_2ee00(); break; 
                case 0x178: run_2f000(); break; 
                case 0x179: run_2f200(); break; 
                case 0x17a: run_2f400(); break; 
                case 0x17b: run_2f600(); break; 
                case 0x17c: run_2f800(); break; 
                case 0x17d: run_2fa00(); break; 
                case 0x17e: run_2fc00(); break; 
                case 0x17f: run_2fe00(); break; 
                case 0x180: run_30000(); break; 
                case 0x181: run_30200(); break; 
                case 0x182: run_30400(); break; 
                case 0x183: run_30600(); break; 
                case 0x184: run_30800(); break; 
                case 0x185: run_30a00(); break; 
                case 0x186: run_30c00(); break; 
                case 0x187: run_30e00(); break; 
                case 0x188: run_31000(); break; 
                case 0x189: run_31200(); break; 
                case 0x18a: run_31400(); break; 
                case 0x18b: run_31600(); break; 
                case 0x18c: run_31800(); break; 
                case 0x18d: run_31a00(); break; 
                case 0x18e: run_31c00(); break; 
                case 0x18f: run_31e00(); break; 
                case 0x190: run_32000(); break; 
                case 0x191: run_32200(); break; 
                case 0x192: run_32400(); break; 
                case 0x193: run_32600(); break; 
                case 0x194: run_32800(); break; 
                case 0x195: run_32a00(); break; 
                case 0x196: run_32c00(); break; 
                case 0x197: run_32e00(); break; 
                case 0x198: run_33000(); break; 
                case 0x199: run_33200(); break; 
                case 0x19a: run_33400(); break; 
                case 0x19b: run_33600(); break; 
                case 0x19c: run_33800(); break; 
                case 0x19d: run_33a00(); break; 
                case 0x19e: run_33c00(); break; 
                case 0x19f: run_33e00(); break; 
                case 0x1a0: run_34000(); break; 
                case 0x1a1: run_34200(); break; 
                case 0x1a2: run_34400(); break; 
                case 0x1a3: run_34600(); break; 
                case 0x1a4: run_34800(); break; 
                case 0x1a5: run_34a00(); break; 
                case 0x1a6: run_34c00(); break; 
                case 0x1a7: run_34e00(); break; 
                case 0x1a8: run_35000(); break; 
                case 0x1a9: run_35200(); break; 
                case 0x1aa: run_35400(); break; 
                case 0x1ab: run_35600(); break; 
                case 0x1ac: run_35800(); break; 
                case 0x1ad: run_35a00(); break; 
                case 0x1ae: run_35c00(); break; 
                case 0x1af: run_35e00(); break; 
                case 0x1b0: run_36000(); break; 
                case 0x1b1: run_36200(); break; 
                case 0x1b2: run_36400(); break; 
                case 0x1b3: run_36600(); break; 
                case 0x1b4: run_36800(); break; 
                case 0x1b5: run_36a00(); break; 
                case 0x1b6: run_36c00(); break; 
                case 0x1b7: run_36e00(); break; 
                case 0x1b8: run_37000(); break; 
                case 0x1b9: run_37200(); break; 
                case 0x1ba: run_37400(); break; 
                case 0x1bb: run_37600(); break; 
                case 0x1bc: run_37800(); break; 
                case 0x1bd: run_37a00(); break; 
                case 0x1be: run_37c00(); break; 
                case 0x1bf: run_37e00(); break; 
                case 0x1c0: run_38000(); break; 
                case 0x1c1: run_38200(); break; 
                case 0x1c2: run_38400(); break; 
                case 0x1c3: run_38600(); break; 
                case 0x1c4: run_38800(); break; 
                case 0x1c5: run_38a00(); break; 
                case 0x1c6: run_38c00(); break; 
                case 0x1c7: run_38e00(); break; 
                case 0x1c8: run_39000(); break; 
                case 0x1c9: run_39200(); break; 
                case 0x1ca: run_39400(); break; 
                case 0x1cb: run_39600(); break; 
                case 0x1cc: run_39800(); break; 
                case 0x1cd: run_39a00(); break; 
                case 0x1ce: run_39c00(); break; 
                case 0x1cf: run_39e00(); break; 
                case 0x1d0: run_3a000(); break; 
                case 0x1d1: run_3a200(); break; 
                case 0x1d2: run_3a400(); break; 
                case 0x1d3: run_3a600(); break; 
                case 0x1d4: run_3a800(); break; 
                case 0x1d5: run_3aa00(); break; 
                case 0x1d6: run_3ac00(); break; 
                case 0x1d7: run_3ae00(); break; 
                case 0x1d8: run_3b000(); break; 
                case 0x1d9: run_3b200(); break; 
                case 0x1da: run_3b400(); break; 
                case 0x1db: run_3b600(); break; 
                case 0x1dc: run_3b800(); break; 
                case 0x1dd: run_3ba00(); break; 
                case 0x1de: run_3bc00(); break; 
                case 0x1df: run_3be00(); break; 
                case 0x1e0: run_3c000(); break; 
                case 0x1e1: run_3c200(); break; 
                case 0x1e2: run_3c400(); break; 
                case 0x1e3: run_3c600(); break; 
                case 0x1e4: run_3c800(); break; 
                case 0x1e5: run_3ca00(); break; 
                case 0x1e6: run_3cc00(); break; 
                case 0x1e7: run_3ce00(); break; 
                case 0x1e8: run_3d000(); break; 
                case 0x1e9: run_3d200(); break; 
                case 0x1ea: run_3d400(); break; 
                case 0x1eb: run_3d600(); break; 
                case 0x1ec: run_3d800(); break; 
                case 0x1ed: run_3da00(); break; 
                case 0x1ee: run_3dc00(); break; 
                case 0x1ef: run_3de00(); break; 
                case 0x1f0: run_3e000(); break; 
                case 0x1f1: run_3e200(); break; 
                case 0x1f2: run_3e400(); break; 
                case 0x1f3: run_3e600(); break; 
                case 0x1f4: run_3e800(); break; 
                case 0x1f5: run_3ea00(); break; 
                case 0x1f6: run_3ec00(); break; 
                case 0x1f7: run_3ee00(); break; 
                case 0x1f8: run_3f000(); break; 
                case 0x1f9: run_3f200(); break; 
                case 0x1fa: run_3f400(); break; 
                case 0x1fb: run_3f600(); break; 
                case 0x1fc: run_3f800(); break; 
                case 0x1fd: run_3fa00(); break; 
                case 0x1fe: run_3fc00(); break; 
                case 0x1ff: run_3fe00(); break; 
                case 0x200: run_40000(); break; 
                case 0x201: run_40200(); break; 
                case 0x202: run_40400(); break; 
                case 0x203: run_40600(); break; 
                case 0x204: run_40800(); break; 
                case 0x205: run_40a00(); break; 
                case 0x206: run_40c00(); break; 
                case 0x207: run_40e00(); break; 
                case 0x208: run_41000(); break; 
                case 0x209: run_41200(); break; 
                case 0x20a: run_41400(); break; 
                case 0x20b: run_41600(); break; 
                case 0x20c: run_41800(); break; 
                case 0x20d: run_41a00(); break; 
                case 0x20e: run_41c00(); break; 
                case 0x20f: run_41e00(); break; 
                case 0x210: run_42000(); break; 
                case 0x211: run_42200(); break; 
                case 0x212: run_42400(); break; 
                case 0x213: run_42600(); break; 
                case 0x214: run_42800(); break; 
                case 0x215: run_42a00(); break; 
                case 0x216: run_42c00(); break; 
                case 0x217: run_42e00(); break; 
                case 0x218: run_43000(); break; 
                case 0x219: run_43200(); break; 
                case 0x21a: run_43400(); break; 
                case 0x21b: run_43600(); break; 
                case 0x21c: run_43800(); break; 
                case 0x21d: run_43a00(); break; 
                case 0x21e: run_43c00(); break; 
                case 0x21f: run_43e00(); break; 
                case 0x220: run_44000(); break; 
                case 0x221: run_44200(); break; 
                case 0x222: run_44400(); break; 
                case 0x223: run_44600(); break; 
                case 0x224: run_44800(); break; 
                case 0x225: run_44a00(); break; 
                case 0x226: run_44c00(); break; 
                case 0x227: run_44e00(); break; 
                case 0x228: run_45000(); break; 
                case 0x229: run_45200(); break; 
                case 0x22a: run_45400(); break; 
                case 0x22b: run_45600(); break; 
                case 0x22c: run_45800(); break; 
                case 0x22d: run_45a00(); break; 
                case 0x22e: run_45c00(); break; 
                case 0x22f: run_45e00(); break; 
                case 0x230: run_46000(); break; 
                case 0x231: run_46200(); break; 
                case 0x232: run_46400(); break; 
                case 0x233: run_46600(); break; 
                case 0x234: run_46800(); break; 
                case 0x235: run_46a00(); break; 
                case 0x236: run_46c00(); break; 
                case 0x237: run_46e00(); break; 
                case 0x238: run_47000(); break; 
                case 0x239: run_47200(); break; 
                case 0x23a: run_47400(); break; 
                case 0x23b: run_47600(); break; 
                case 0x23c: run_47800(); break; 
                case 0x23d: run_47a00(); break; 
                case 0x23e: run_47c00(); break; 
                case 0x23f: run_47e00(); break; 
                case 0x240: run_48000(); break; 
                case 0x241: run_48200(); break; 
                case 0x242: run_48400(); break; 
                case 0x243: run_48600(); break; 
                case 0x244: run_48800(); break; 
                case 0x245: run_48a00(); break; 
                case 0x246: run_48c00(); break; 
                case 0x247: run_48e00(); break; 
                case 0x248: run_49000(); break; 
                case 0x249: run_49200(); break; 
                case 0x24a: run_49400(); break; 
                case 0x24b: run_49600(); break; 
                case 0x24c: run_49800(); break; 
                case 0x24d: run_49a00(); break; 
                case 0x24e: run_49c00(); break; 
                case 0x24f: run_49e00(); break; 
                case 0x250: run_4a000(); break; 
                case 0x251: run_4a200(); break; 
                case 0x252: run_4a400(); break; 
                case 0x253: run_4a600(); break; 
                case 0x254: run_4a800(); break; 
                case 0x255: run_4aa00(); break; 
                case 0x256: run_4ac00(); break; 
                case 0x257: run_4ae00(); break; 
                case 0x258: run_4b000(); break; 
                case 0x259: run_4b200(); break; 
                case 0x25a: run_4b400(); break; 
                case 0x25b: run_4b600(); break; 
                case 0x25c: run_4b800(); break; 
                case 0x25d: run_4ba00(); break; 
                case 0x25e: run_4bc00(); break; 
                case 0x25f: run_4be00(); break; 
                case 0x260: run_4c000(); break; 
                case 0x261: run_4c200(); break; 
                case 0x262: run_4c400(); break; 
                case 0x263: run_4c600(); break; 
                case 0x264: run_4c800(); break; 
                case 0x265: run_4ca00(); break; 
                case 0x266: run_4cc00(); break; 
                case 0x267: run_4ce00(); break; 
                case 0x268: run_4d000(); break; 
                case 0x269: run_4d200(); break; 
                case 0x26a: run_4d400(); break; 
                case 0x26b: run_4d600(); break; 
                case 0x26c: run_4d800(); break; 
                case 0x26d: run_4da00(); break; 
                case 0x26e: run_4dc00(); break; 
                case 0x26f: run_4de00(); break; 
                case 0x270: run_4e000(); break; 
                case 0x271: run_4e200(); break; 
                case 0x272: run_4e400(); break; 
                case 0x273: run_4e600(); break; 
                case 0x274: run_4e800(); break; 
                case 0x275: run_4ea00(); break; 
                case 0x276: run_4ec00(); break; 
                case 0x277: run_4ee00(); break; 
                case 0x278: run_4f000(); break; 
                case 0x279: run_4f200(); break; 
                case 0x27a: run_4f400(); break; 
                case 0x27b: run_4f600(); break; 
                case 0x27c: run_4f800(); break; 
                case 0x27d: run_4fa00(); break; 
                case 0x27e: run_4fc00(); break; 
                case 0x27f: run_4fe00(); break; 
                case 0x280: run_50000(); break; 
                case 0x281: run_50200(); break; 
                case 0x282: run_50400(); break; 
                case 0x283: run_50600(); break; 
                case 0x284: run_50800(); break; 
                case 0x285: run_50a00(); break; 
                case 0x286: run_50c00(); break; 
                case 0x287: run_50e00(); break; 
                case 0x288: run_51000(); break; 
                case 0x289: run_51200(); break; 
                case 0x28a: run_51400(); break; 
                case 0x28b: run_51600(); break; 
                case 0x28c: run_51800(); break; 
                case 0x28d: run_51a00(); break; 
                case 0x28e: run_51c00(); break; 
                case 0x28f: run_51e00(); break; 
                case 0x290: run_52000(); break; 
                case 0x291: run_52200(); break; 
                case 0x292: run_52400(); break; 
                case 0x293: run_52600(); break; 
                case 0x294: run_52800(); break; 
                case 0x295: run_52a00(); break; 
                case 0x296: run_52c00(); break; 
                case 0x297: run_52e00(); break; 
                case 0x298: run_53000(); break; 
                case 0x299: run_53200(); break; 
                case 0x29a: run_53400(); break; 
                case 0x29b: run_53600(); break; 
                case 0x29c: run_53800(); break; 
                case 0x29d: run_53a00(); break; 
                case 0x29e: run_53c00(); break; 
                case 0x29f: run_53e00(); break; 
                case 0x2a0: run_54000(); break; 
                case 0x2a1: run_54200(); break; 
                case 0x2a2: run_54400(); break; 
                case 0x2a3: run_54600(); break; 
                case 0x2a4: run_54800(); break; 
                case 0x2a5: run_54a00(); break; 
                case 0x2a6: run_54c00(); break; 
                case 0x2a7: run_54e00(); break; 
                case 0x2a8: run_55000(); break; 
                case 0x2a9: run_55200(); break; 
                case 0x2aa: run_55400(); break; 
                case 0x2ab: run_55600(); break; 
                case 0x2ac: run_55800(); break; 
                case 0x2ad: run_55a00(); break; 
                case 0x2ae: run_55c00(); break; 
                case 0x2af: run_55e00(); break; 
                case 0x2b0: run_56000(); break; 
                case 0x2b1: run_56200(); break; 
                case 0x2b2: run_56400(); break; 
                case 0x2b3: run_56600(); break; 
                case 0x2b4: run_56800(); break; 
                case 0x2b5: run_56a00(); break; 
                case 0x2b6: run_56c00(); break; 
                case 0x2b7: run_56e00(); break; 
                case 0x2b8: run_57000(); break; 
                case 0x2b9: run_57200(); break; 
                case 0x2ba: run_57400(); break; 
                case 0x2bb: run_57600(); break; 
                case 0x2bc: run_57800(); break; 
                case 0x2bd: run_57a00(); break; 
                case 0x2be: run_57c00(); break; 
                case 0x2bf: run_57e00(); break; 
                case 0x2c0: run_58000(); break; 
                case 0x2c1: run_58200(); break; 
                case 0x2c2: run_58400(); break; 
                case 0x2c3: run_58600(); break; 
                case 0x2c4: run_58800(); break; 
                case 0x2c5: run_58a00(); break; 
                case 0x2c6: run_58c00(); break; 
                case 0x2c7: run_58e00(); break; 
                case 0x2c8: run_59000(); break; 
                case 0x2c9: run_59200(); break; 
                case 0x2ca: run_59400(); break; 
                case 0x2cb: run_59600(); break; 
                case 0x2cc: run_59800(); break; 
                case 0x2cd: run_59a00(); break; 
                case 0x2ce: run_59c00(); break; 
                case 0x2cf: run_59e00(); break; 
                case 0x2d0: run_5a000(); break; 
                case 0x2d1: run_5a200(); break; 
                case 0x2d2: run_5a400(); break; 
                case 0x2d3: run_5a600(); break; 
                case 0x2d4: run_5a800(); break; 
                case 0x2d5: run_5aa00(); break; 
                case 0x2d6: run_5ac00(); break; 
                case 0x2d7: run_5ae00(); break; 
                case 0x2d8: run_5b000(); break; 
                case 0x2d9: run_5b200(); break; 
                case 0x2da: run_5b400(); break; 
                case 0x2db: run_5b600(); break; 
                case 0x2dc: run_5b800(); break; 
                case 0x2dd: run_5ba00(); break; 
                case 0x2de: run_5bc00(); break; 
                case 0x2df: run_5be00(); break; 
                case 0x2e0: run_5c000(); break; 
                case 0x2e1: run_5c200(); break; 
                case 0x2e2: run_5c400(); break; 
                case 0x2e3: run_5c600(); break; 
                case 0x2e4: run_5c800(); break; 
                case 0x2e5: run_5ca00(); break; 
                case 0x2e6: run_5cc00(); break; 
                case 0x2e7: run_5ce00(); break; 
                case 0x2e8: run_5d000(); break; 
                case 0x2e9: run_5d200(); break; 
                case 0x2ea: run_5d400(); break; 
                case 0x2eb: run_5d600(); break; 
                case 0x2ec: run_5d800(); break; 
                case 0x2ed: run_5da00(); break; 
                case 0x2ee: run_5dc00(); break; 
                case 0x2ef: run_5de00(); break; 
                case 0x2f0: run_5e000(); break; 
                case 0x2f1: run_5e200(); break; 
                case 0x2f2: run_5e400(); break; 
                case 0x2f3: run_5e600(); break; 
                case 0x2f4: run_5e800(); break; 
                case 0x2f5: run_5ea00(); break; 
                case 0x2f6: run_5ec00(); break; 
                case 0x2f7: run_5ee00(); break; 
                case 0x2f8: run_5f000(); break; 
                case 0x2f9: run_5f200(); break; 
                case 0x2fa: run_5f400(); break; 
                case 0x2fb: run_5f600(); break; 
                case 0x2fc: run_5f800(); break; 
                case 0x2fd: run_5fa00(); break; 
                case 0x2fe: run_5fc00(); break; 
                case 0x2ff: run_5fe00(); break; 
                case 0x300: run_60000(); break; 
                case 0x301: run_60200(); break; 
                case 0x302: run_60400(); break; 
                case 0x303: run_60600(); break; 
                case 0x304: run_60800(); break; 
                case 0x305: run_60a00(); break; 
                case 0x306: run_60c00(); break; 
                case 0x307: run_60e00(); break; 
                case 0x308: run_61000(); break; 
                case 0x309: run_61200(); break; 
                case 0x30a: run_61400(); break; 
                case 0x30b: run_61600(); break; 
                case 0x30c: run_61800(); break; 
                case 0x30d: run_61a00(); break; 
                case 0x30e: run_61c00(); break; 
                case 0x30f: run_61e00(); break; 
                case 0x310: run_62000(); break; 
                case 0x311: run_62200(); break; 
                case 0x312: run_62400(); break; 
                case 0x313: run_62600(); break; 
                case 0x314: run_62800(); break; 
                case 0x315: run_62a00(); break; 
                case 0x316: run_62c00(); break; 
                case 0x317: run_62e00(); break; 
                case 0x318: run_63000(); break; 
                case 0x319: run_63200(); break; 
                case 0x31a: run_63400(); break; 
                case 0x31b: run_63600(); break; 
                case 0x31c: run_63800(); break; 
                case 0x31d: run_63a00(); break; 
                case 0x31e: run_63c00(); break; 
                case 0x31f: run_63e00(); break; 
                case 0x320: run_64000(); break; 
                case 0x321: run_64200(); break; 
                case 0x322: run_64400(); break; 
                case 0x323: run_64600(); break; 
                case 0x324: run_64800(); break; 
                case 0x325: run_64a00(); break; 
                case 0x326: run_64c00(); break; 
                case 0x327: run_64e00(); break; 
                case 0x328: run_65000(); break; 
                case 0x329: run_65200(); break; 
                case 0x32a: run_65400(); break; 
                case 0x32b: run_65600(); break; 
                case 0x32c: run_65800(); break; 
                case 0x32d: run_65a00(); break; 
                case 0x32e: run_65c00(); break; 
                case 0x32f: run_65e00(); break; 
                case 0x330: run_66000(); break; 
                case 0x331: run_66200(); break; 
                case 0x332: run_66400(); break; 
                case 0x333: run_66600(); break; 
                case 0x334: run_66800(); break; 
                case 0x335: run_66a00(); break; 
                case 0x336: run_66c00(); break; 
                case 0x337: run_66e00(); break; 
                case 0x338: run_67000(); break; 
                case 0x339: run_67200(); break; 
                case 0x33a: run_67400(); break; 
                case 0x33b: run_67600(); break; 
                case 0x33c: run_67800(); break; 
                case 0x33d: run_67a00(); break; 
                case 0x33e: run_67c00(); break; 
                case 0x33f: run_67e00(); break; 
                case 0x340: run_68000(); break; 
                case 0x341: run_68200(); break; 
                case 0x342: run_68400(); break; 
                case 0x343: run_68600(); break; 
                case 0x344: run_68800(); break; 
                case 0x345: run_68a00(); break; 
                case 0x346: run_68c00(); break; 
                case 0x347: run_68e00(); break; 
                case 0x348: run_69000(); break; 
                case 0x349: run_69200(); break; 
                case 0x34a: run_69400(); break; 
                case 0x34b: run_69600(); break; 
                case 0x34c: run_69800(); break; 
                case 0x34d: run_69a00(); break; 
                case 0x34e: run_69c00(); break; 
                case 0x34f: run_69e00(); break; 
                case 0x350: run_6a000(); break; 
                case 0x351: run_6a200(); break; 
                case 0x352: run_6a400(); break; 
                case 0x353: run_6a600(); break; 
                case 0x354: run_6a800(); break; 
                case 0x355: run_6aa00(); break; 
                case 0x356: run_6ac00(); break; 
                case 0x357: run_6ae00(); break; 
                case 0x358: run_6b000(); break; 
                case 0x359: run_6b200(); break; 
                case 0x35a: run_6b400(); break; 
                case 0x35b: run_6b600(); break; 
                case 0x35c: run_6b800(); break; 
                case 0x35d: run_6ba00(); break; 
                case 0x35e: run_6bc00(); break; 
                case 0x35f: run_6be00(); break; 
                default: throw new ExecutionException("invalid address 0x" + Long.toString(this.pc&0xffffffffL,16) + ": r2: " + r2);
            }
        }
    }

    public da65() {
        super(4096,65536);
        initPages(_data1,0x6c000,false);
        initPages(_data2,0x6c008,false);
        initPages(_data3,0x6d000,true);
        initPages(_data4,0x73d60,true);
        initPages(_data5,0x77230,false);
        initPages(_data6,0x77b70,false);
        clearPages(0x77cd4,0x2b);
        clearPages(0x77d80,0x2cda0);
    }

    protected int entryPoint() { return 0x11000; }
    protected int heapStart() { return 0x12b400; }
    protected int gp() { return 0x7fb70; }
    public static void main(String[] args) throws Exception {
        da65 me = new da65();
        int status = me.run("org.badvision.da65",args);
        System.exit(status);
    }

    protected void _execute() throws ExecutionException { trampoline(); }

    protected void setCPUState(CPUState state) {
        r1=state.r[1];
        r2=state.r[2];
        r3=state.r[3];
        r4=state.r[4];
        r5=state.r[5];
        r6=state.r[6];
        r7=state.r[7];
        r8=state.r[8];
        r9=state.r[9];
        r10=state.r[10];
        r11=state.r[11];
        r12=state.r[12];
        r13=state.r[13];
        r14=state.r[14];
        r15=state.r[15];
        r16=state.r[16];
        r17=state.r[17];
        r18=state.r[18];
        r19=state.r[19];
        r20=state.r[20];
        r21=state.r[21];
        r22=state.r[22];
        r23=state.r[23];
        r24=state.r[24];
        r25=state.r[25];
        r26=state.r[26];
        r27=state.r[27];
        r28=state.r[28];
        r29=state.r[29];
        r30=state.r[30];
        r31=state.r[31];
        f0=state.f[0];
        f1=state.f[1];
        f2=state.f[2];
        f3=state.f[3];
        f4=state.f[4];
        f5=state.f[5];
        f6=state.f[6];
        f7=state.f[7];
        f8=state.f[8];
        f9=state.f[9];
        f10=state.f[10];
        f11=state.f[11];
        f12=state.f[12];
        f13=state.f[13];
        f14=state.f[14];
        f15=state.f[15];
        f16=state.f[16];
        f17=state.f[17];
        f18=state.f[18];
        f19=state.f[19];
        f20=state.f[20];
        f21=state.f[21];
        f22=state.f[22];
        f23=state.f[23];
        f24=state.f[24];
        f25=state.f[25];
        f26=state.f[26];
        f27=state.f[27];
        f28=state.f[28];
        f29=state.f[29];
        f30=state.f[30];
        f31=state.f[31];
        hi=state.hi; lo=state.lo; fcsr=state.fcsr;
        pc=state.pc;
    }
    protected void getCPUState(CPUState state) {
        state.r[1]=r1;
        state.r[2]=r2;
        state.r[3]=r3;
        state.r[4]=r4;
        state.r[5]=r5;
        state.r[6]=r6;
        state.r[7]=r7;
        state.r[8]=r8;
        state.r[9]=r9;
        state.r[10]=r10;
        state.r[11]=r11;
        state.r[12]=r12;
        state.r[13]=r13;
        state.r[14]=r14;
        state.r[15]=r15;
        state.r[16]=r16;
        state.r[17]=r17;
        state.r[18]=r18;
        state.r[19]=r19;
        state.r[20]=r20;
        state.r[21]=r21;
        state.r[22]=r22;
        state.r[23]=r23;
        state.r[24]=r24;
        state.r[25]=r25;
        state.r[26]=r26;
        state.r[27]=r27;
        state.r[28]=r28;
        state.r[29]=r29;
        state.r[30]=r30;
        state.r[31]=r31;
        state.f[0]=f0;
        state.f[1]=f1;
        state.f[2]=f2;
        state.f[3]=f3;
        state.f[4]=f4;
        state.f[5]=f5;
        state.f[6]=f6;
        state.f[7]=f7;
        state.f[8]=f8;
        state.f[9]=f9;
        state.f[10]=f10;
        state.f[11]=f11;
        state.f[12]=f12;
        state.f[13]=f13;
        state.f[14]=f14;
        state.f[15]=f15;
        state.f[16]=f16;
        state.f[17]=f17;
        state.f[18]=f18;
        state.f[19]=f19;
        state.f[20]=f20;
        state.f[21]=f21;
        state.f[22]=f22;
        state.f[23]=f23;
        state.f[24]=f24;
        state.f[25]=f25;
        state.f[26]=f26;
        state.f[27]=f27;
        state.f[28]=f28;
        state.f[29]=f29;
        state.f[30]=f30;
        state.f[31]=f31;
        state.hi=hi; state.lo=lo; state.fcsr=fcsr;
        state.pc=pc;
    }

    private static final java.util.Hashtable symbols = new java.util.Hashtable();
    static {
        symbols.put("MustDefLabel",new Integer(0x1ea00));
        symbols.put("stpcpy",new Integer(0x3e200));
        symbols.put("DataDWordLine",new Integer(0x25400));
        symbols.put("xmalloc",new Integer(0x30600));
        symbols.put("OH_ImmediateDirectX",new Integer(0x19400));
        symbols.put("setgrent",new Integer(0x53800));
        symbols.put("SB_ToUpper",new Integer(0x2f400));
        symbols.put("chroot",new Integer(0x4c800));
        symbols.put("strcpy",new Integer(0x3e600));
        symbols.put("xfree",new Integer(0x30a00));
        symbols.put("waitpid",new Integer(0x4aa00));
        symbols.put("OH_BitBranch",new Integer(0x18e00));
        symbols.put("LineComment",new Integer(0x24400));
        symbols.put("InfoCloseInput",new Integer(0x29600));
        symbols.put("OH_AccumulatorBit",new Integer(0x1b000));
        symbols.put("getgid",new Integer(0x492c4));
        symbols.put("Indent",new Integer(0x22800));
        symbols.put("sysconf",new Integer(0x4a000));
        symbols.put("printf",new Integer(0x3b600));
        symbols.put("SB_CopyBuf",new Integer(0x2e800));
        symbols.put("vsprintf",new Integer(0x69400));
        symbols.put("utime",new Integer(0x4a400));
        symbols.put("getlogin",new Integer(0x54a00));
        symbols.put("recv",new Integer(0x4fa00));
        symbols.put("connect",new Integer(0x4de00));
        symbols.put("IsBDigit",new Integer(0x2b400));
        symbols.put("GetVersionAsNumber",new Integer(0x30400));
        symbols.put("ungetc",new Integer(0x67200));
        symbols.put("InfoConsumeColon",new Integer(0x27a00));
        symbols.put("OH_ImmediateAbsolute",new Integer(0x19600));
        symbols.put("strerror",new Integer(0x3ee00));
        symbols.put("geteuid",new Integer(0x492b4));
        symbols.put("memmove",new Integer(0x5c400));
        symbols.put("snprintf",new Integer(0x60a00));
        symbols.put("IsDigit",new Integer(0x2ae00));
        symbols.put("pathconf",new Integer(0x4c400));
        symbols.put("GetStyleAttr",new Integer(0x12a00));
        symbols.put("FindExt",new Integer(0x2d200));
        symbols.put("mknod",new Integer(0x4ca00));
        symbols.put("InfoConsume",new Integer(0x27200));
        symbols.put("AddIntLabel",new Integer(0x1d800));
        symbols.put("OH_ImmediateAbsoluteX",new Integer(0x19800));
        symbols.put("OutputSettings",new Integer(0x25800));
        symbols.put("AsmInc",new Integer(0x11400));
        symbols.put("getgrgid",new Integer(0x53400));
        symbols.put("DataWordLine",new Integer(0x25000));
        symbols.put("Print",new Integer(0x2d800));
        symbols.put("InfoAvail",new Integer(0x29200));
        symbols.put("IsBlank",new Integer(0x2aa00));
        symbols.put("getenv",new Integer(0x59a00));
        symbols.put("fchmod",new Integer(0x4bc00));
        symbols.put("SB_VPrintf",new Integer(0x2fa00));
        symbols.put("IsUpper",new Integer(0x2b200));
        symbols.put("getegid",new Integer(0x492d4));
        symbols.put("GetCodeDWord",new Integer(0x13a00));
        symbols.put("setpriority",new Integer(0x4dc00));
        symbols.put("labs",new Integer(0x5a600));
        symbols.put("getpriority",new Integer(0x4da00));
        symbols.put("usleep",new Integer(0x4ce00));
        symbols.put("IsQuote",new Integer(0x2ba00));
        symbols.put("GetRemainingBytes",new Integer(0x13c00));
        symbols.put("getpagesize",new Integer(0x48780));
        symbols.put("WordTable",new Integer(0x14a00));
        symbols.put("fchown",new Integer(0x4b600));
        symbols.put("fgets",new Integer(0x34400));
        symbols.put("dirname",new Integer(0x54c00));
        symbols.put("EndSegment",new Integer(0x23c00));
        symbols.put("MarkRange",new Integer(0x12600));
        symbols.put("OH_DirectXIndirect",new Integer(0x18a00));
        symbols.put("memcpy",new Integer(0x48bdc));
        symbols.put("OH_DirectIndirectZ",new Integer(0x18800));
        symbols.put("OH_Implicit",new Integer(0x16800));
        symbols.put("MarkAddr",new Integer(0x12800));
        symbols.put("InfoNextTok",new Integer(0x26000));
        symbols.put("readlink",new Integer(0x4b200));
        symbols.put("dup2",new Integer(0x4a800));
        symbols.put("mbrtowc",new Integer(0x5be00));
        symbols.put("OH_DirectX",new Integer(0x17000));
        symbols.put("OH_DirectIndirectLongX",new Integer(0x19c00));
        symbols.put("getpass",new Integer(0x54600));
        symbols.put("getuid",new Integer(0x492a4));
        symbols.put("OH_StackRelativeIndirectY4510",new Integer(0x1a000));
        symbols.put("GetLabelAttr",new Integer(0x12c00));
        symbols.put("ValidAddrSizeForCPU",new Integer(0x2ce00));
        symbols.put("malloc",new Integer(0x39200));
        symbols.put("isatty",new Integer(0x5a200));
        symbols.put("iswspace",new Integer(0x5a400));
        symbols.put("endpwent",new Integer(0x54400));
        symbols.put("InfoOptionalAssign",new Integer(0x27e00));
        symbols.put("DataDByteLine",new Integer(0x24c00));
        symbols.put("sleep",new Integer(0x486f0));
        symbols.put("UserComment",new Integer(0x24200));
        symbols.put("vsnprintf",new Integer(0x69000));
        symbols.put("IsODigit",new Integer(0x2b600));
        symbols.put("GetCodeDByte",new Integer(0x13600));
        symbols.put("OH_JmpAbsolute",new Integer(0x1ba00));
        symbols.put("recvfrom",new Integer(0x4f400));
        symbols.put("SB_Compare",new Integer(0x2f600));
        symbols.put("UnknownOption",new Integer(0x2c200));
        symbols.put("strtoul",new Integer(0x41000));
        symbols.put("DigitVal",new Integer(0x11200));
        symbols.put("OH_DirectImmediate",new Integer(0x1ac00));
        symbols.put("gethostbyaddr",new Integer(0x52e00));
        symbols.put("OH_JmpAbsoluteXIndirect",new Integer(0x1be00));
        symbols.put("rmdir",new Integer(0x49e00));
        symbols.put("RtsTable",new Integer(0x15200));
        symbols.put("InitCmdLine",new Integer(0x2c000));
        symbols.put("socket",new Integer(0x4e000));
        symbols.put("select",new Integer(0x4f600));
        symbols.put("ForwardLabel",new Integer(0x1f000));
        symbols.put("readdir",new Integer(0x52200));
        symbols.put("lchown",new Integer(0x4b800));
        symbols.put("setgroups",new Integer(0x50a00));
        symbols.put("DefForward",new Integer(0x22e00));
        symbols.put("OH_AbsoluteIndirect",new Integer(0x18c00));
        symbols.put("fflush",new Integer(0x34000));
        symbols.put("AddExtLabelRange",new Integer(0x1e400));
        symbols.put("ftruncate",new Integer(0x4cc00));
        symbols.put("OH_AbsoluteLong",new Integer(0x17a00));
        symbols.put("OH_Immediate",new Integer(0x16a00));
        symbols.put("realpath",new Integer(0x4d400));
        symbols.put("OH_AccumulatorBitBranch",new Integer(0x1b200));
        symbols.put("chown",new Integer(0x4b400));
        symbols.put("SB_Terminate",new Integer(0x2e600));
        symbols.put("send",new Integer(0x4f800));
        symbols.put("OH_Illegal",new Integer(0x16400));
        symbols.put("chmod",new Integer(0x4ba00));
        symbols.put("InfoError",new Integer(0x25e00));
        symbols.put("OH_AbsoluteLongX",new Integer(0x17c00));
        symbols.put("alarm",new Integer(0x49664));
        symbols.put("SB_Done",new Integer(0x2dc00));
        symbols.put("DefOutOfRangeLabels",new Integer(0x1f200));
        symbols.put("strtol",new Integer(0x40a00));
        symbols.put("pipe",new Integer(0x4a600));
        symbols.put("AddIntLabelRange",new Integer(0x1e000));
        symbols.put("uname",new Integer(0x55000));
        symbols.put("accept",new Integer(0x4e600));
        symbols.put("AddrSizeFromStr",new Integer(0x2a200));
        symbols.put("GetSegmentAddrSize",new Integer(0x29c00));
        symbols.put("NeedArg",new Integer(0x2c400));
        symbols.put("basename",new Integer(0x54e00));
        symbols.put("GetLabelName",new Integer(0x1ec00));
        symbols.put("IsSegmentEnd",new Integer(0x12000));
        symbols.put("InfoSetName",new Integer(0x28e00));
        symbols.put("OH_AbsoluteY",new Integer(0x17800));
        symbols.put("strtod",new Integer(0x63200));
        symbols.put("SB_Realloc",new Integer(0x2e200));
        symbols.put("OH_Direct",new Integer(0x16e00));
        symbols.put("xdup",new Integer(0x30e00));
        symbols.put("GetLabel",new Integer(0x1ee00));
        symbols.put("AddExtLabel",new Integer(0x1da00));
        symbols.put("sysctl",new Integer(0x4d800));
        symbols.put("fstat",new Integer(0x66600));
        symbols.put("fprintf",new Integer(0x36600));
        symbols.put("setpwent",new Integer(0x54200));
        symbols.put("xstrdup",new Integer(0x30c00));
        symbols.put("strcat",new Integer(0x60c00));
        symbols.put("bind",new Integer(0x4ec00));
        symbols.put("InvDef",new Integer(0x2c800));
        symbols.put("inet_addr",new Integer(0x55e00));
        symbols.put("OH_StackRelative",new Integer(0x19a00));
        symbols.put("mkfifo",new Integer(0x4d000));
        symbols.put("sniprintf",new Integer(0x60600));
        symbols.put("OH_Absolute",new Integer(0x17400));
        symbols.put("chdir",new Integer(0x4a200));
        symbols.put("InfoConsumeSemi",new Integer(0x27800));
        symbols.put("OH_ImmediateDirect",new Integer(0x19200));
        symbols.put("initgroups",new Integer(0x56200));
        symbols.put("GetGranularity",new Integer(0x12400));
        symbols.put("HaveLabel",new Integer(0x1e800));
        symbols.put("InfoGetName",new Integer(0x29000));
        symbols.put("endgrent",new Integer(0x53a00));
        symbols.put("setsockopt",new Integer(0x4ea00));
        symbols.put("fseek",new Integer(0x37e00));
        symbols.put("OH_AbsoluteX",new Integer(0x17600));
        symbols.put("SetComment",new Integer(0x14200));
        symbols.put("GetVersionAsString",new Integer(0x30200));
        symbols.put("memchr",new Integer(0x3a000));
        symbols.put("Output",new Integer(0x22600));
        symbols.put("umask",new Integer(0x49294));
        symbols.put("lstat",new Integer(0x4be00));
        symbols.put("IsAlpha",new Integer(0x2a400));
        symbols.put("AddrTable",new Integer(0x14e00));
        symbols.put("OH_AbsoluteXIndirect",new Integer(0x1aa00));
        symbols.put("setgid",new Integer(0x50600));
        symbols.put("signal",new Integer(0x5fe00));
        symbols.put("read",new Integer(0x66a00));
        symbols.put("strncmp",new Integer(0x61000));
        symbols.put("DWordTable",new Integer(0x14c00));
        symbols.put("strncpy",new Integer(0x61200));
        symbols.put("sync",new Integer(0x51a00));
        symbols.put("StrCaseCmp",new Integer(0x30000));
        symbols.put("OH_DirectIndirectLong",new Integer(0x1a200));
        symbols.put("sendto",new Integer(0x4f200));
        symbols.put("IsAlNum",new Integer(0x2a600));
        symbols.put("realloc",new Integer(0x3bc00));
        symbols.put("InfoOptionalComma",new Integer(0x27c00));
        symbols.put("GetComment",new Integer(0x14400));
        symbols.put("LoadCode",new Integer(0x13000));
        symbols.put("DataByteLine",new Integer(0x24800));
        symbols.put("CodeLeft",new Integer(0x13e00));
        symbols.put("memcmp",new Integer(0x3a200));
        symbols.put("listen",new Integer(0x4ee00));
        symbols.put("InfoWarning",new Integer(0x25c00));
        symbols.put("Internal",new Integer(0x15e00));
        symbols.put("xrealloc",new Integer(0x30800));
        symbols.put("fork",new Integer(0x66400));
        symbols.put("sscanf",new Integer(0x3d400));
        symbols.put("SB_CompareStr",new Integer(0x2f800));
        symbols.put("getgrent",new Integer(0x53600));
        symbols.put("sigaction",new Integer(0x51e00));
        symbols.put("OH_JmpDirectIndirect",new Integer(0x1b400));
        symbols.put("SetOpcTable",new Integer(0x22000));
        symbols.put("fread",new Integer(0x37000));
        symbols.put("SB_AppendChar",new Integer(0x2ea00));
        symbols.put("inet_aton",new Integer(0x55a00));
        symbols.put("IsSpace",new Integer(0x2ac00));
        symbols.put("symlink",new Integer(0x4b000));
        symbols.put("fopen",new Integer(0x36200));
        symbols.put("InfoOpenInput",new Integer(0x29400));
        symbols.put("localtime",new Integer(0x38c00));
        symbols.put("memset",new Integer(0x48bec));
        symbols.put("main",new Integer(0x21c00));
        symbols.put("OH_DirectIndirectY",new Integer(0x18600));
        symbols.put("ftell",new Integer(0x38200));
        symbols.put("AddAbsSegment",new Integer(0x29800));
        symbols.put("fclose",new Integer(0x33800));
        symbols.put("inet_ntoa",new Integer(0x52600));
        symbols.put("getppid",new Integer(0x48dbc));
        symbols.put("time",new Integer(0x44c00));
        symbols.put("InfoAssureInt",new Integer(0x28000));
        symbols.put("opendir",new Integer(0x52000));
        symbols.put("SB_ToLower",new Integer(0x2f200));
        symbols.put("OH_ImmediateWord",new Integer(0x16c00));
        symbols.put("getgroups",new Integer(0x4fc00));
        symbols.put("getgrouplist",new Integer(0x56000));
        symbols.put("seteuid",new Integer(0x50400));
        symbols.put("putc",new Integer(0x3ba00));
        symbols.put("ReadInfoFile",new Integer(0x1c000));
        symbols.put("herror",new Integer(0x52c00));
        symbols.put("strcmp",new Integer(0x3e400));
        symbols.put("shutdown",new Integer(0x4f000));
        symbols.put("DefConst",new Integer(0x23200));
        symbols.put("ttyname",new Integer(0x51c00));
        symbols.put("vfiprintf",new Integer(0x68c00));
        symbols.put("getpwuid",new Integer(0x53e00));
        symbols.put("dup",new Integer(0x4c200));
        symbols.put("InvArg",new Integer(0x2c600));
        symbols.put("OpenOutput",new Integer(0x22200));
        symbols.put("getcwd",new Integer(0x4ac00));
        symbols.put("InfoAssureIdent",new Integer(0x28600));
        symbols.put("gethostbyname",new Integer(0x53000));
        symbols.put("getpwnam",new Integer(0x53c00));
        symbols.put("InfoAssureChar",new Integer(0x28400));
        symbols.put("Error",new Integer(0x15c00));
        symbols.put("getservbyname",new Integer(0x52800));
        symbols.put("gethostname",new Integer(0x55600));
        symbols.put("sprintf",new Integer(0x3d200));
        symbols.put("InfoAssureStr",new Integer(0x28200));
        symbols.put("strtof",new Integer(0x63400));
        symbols.put("atexit",new Integer(0x32c00));
        symbols.put("InfoRangeCheck",new Integer(0x28800));
        symbols.put("setlocale",new Integer(0x5b800));
        symbols.put("getpeername",new Integer(0x50000));
        symbols.put("StartSegment",new Integer(0x23800));
        symbols.put("AddrCheck",new Integer(0x11a00));
        symbols.put("nanf",new Integer(0x5f200));
        symbols.put("GetCodeWord",new Integer(0x13800));
        symbols.put("SB_InitFromString",new Integer(0x2da00));
        symbols.put("vfork",new Integer(0x4c600));
        symbols.put("ByteTable",new Integer(0x14600));
        symbols.put("InfoConsumeRCurly",new Integer(0x27600));
        symbols.put("fsync",new Integer(0x50e00));
        symbols.put("OH_ZeroPageBit",new Integer(0x1ae00));
        symbols.put("fputc",new Integer(0x36a00));
        symbols.put("SeparatorLine",new Integer(0x23600));
        symbols.put("OH_StackRelativeIndirectY",new Integer(0x19e00));
        symbols.put("OH_Relative",new Integer(0x17e00));
        symbols.put("DefLabel",new Integer(0x22c00));
        symbols.put("getsockopt",new Integer(0x4e800));
        symbols.put("StrCopy",new Integer(0x2fe00));
        symbols.put("hstrerror",new Integer(0x52a00));
        symbols.put("localtime_r",new Integer(0x38e00));
        symbols.put("GetAttr",new Integer(0x11c00));
        symbols.put("AddrSizeToStr",new Integer(0x2a000));
        symbols.put("InfoSpecialToken",new Integer(0x28a00));
        symbols.put("strftime",new Integer(0x3f200));
        symbols.put("localeconv",new Integer(0x5ba00));
        symbols.put("OH_DirectIndirect",new Integer(0x18400));
        symbols.put("LineFeed",new Integer(0x22a00));
        symbols.put("LongOption",new Integer(0x2cc00));
        symbols.put("GetCodeByte",new Integer(0x13400));
        symbols.put("OH_RelativeLong4510",new Integer(0x18200));
        symbols.put("InfoBoolToken",new Integer(0x28c00));
        symbols.put("InfoConsumeLCurly",new Integer(0x27400));
        symbols.put("fwrite",new Integer(0x38a00));
        symbols.put("xvsprintf",new Integer(0x32a00));
        symbols.put("access",new Integer(0x49c00));
        symbols.put("SB_Drop",new Integer(0x2e400));
        symbols.put("MakeFilename",new Integer(0x2d600));
        symbols.put("NewStrBuf",new Integer(0x2de00));
        symbols.put("DByteTable",new Integer(0x14800));
        symbols.put("OH_DirectY",new Integer(0x17200));
        symbols.put("AddDepLabel",new Integer(0x1de00));
        symbols.put("CloseOutput",new Integer(0x22400));
        symbols.put("OH_JmpAbsoluteIndirect",new Integer(0x1bc00));
        symbols.put("ResetCode",new Integer(0x14000));
        symbols.put("getdents",new Integer(0x4c000));
        symbols.put("OH_SpecialPage",new Integer(0x1b600));
        symbols.put("exit",new Integer(0x33400));
        symbols.put("AddUnnamedLabel",new Integer(0x1dc00));
        symbols.put("klogctl",new Integer(0x4d200));
        symbols.put("getgrnam",new Integer(0x53200));
        symbols.put("FindCPU",new Integer(0x2d000));
        symbols.put("atoi",new Integer(0x32e00));
        symbols.put("TextTable",new Integer(0x15600));
        symbols.put("GetArg",new Integer(0x2ca00));
        symbols.put("SB_Slice",new Integer(0x2ee00));
        symbols.put("Warning",new Integer(0x15a00));
        symbols.put("FreeStrBuf",new Integer(0x2e000));
        symbols.put("SegmentDefined",new Integer(0x11e00));
        symbols.put("IsSegmentStart",new Integer(0x12200));
        symbols.put("AbEnd",new Integer(0x29e00));
        symbols.put("getpwent",new Integer(0x54000));
        symbols.put("xsprintf",new Integer(0x32800));
        symbols.put("daemon",new Integer(0x55800));
        symbols.put("OH_BlockMove",new Integer(0x1a600));
        symbols.put("strlen",new Integer(0x10ee4));
        symbols.put("open",new Integer(0x66800));
        symbols.put("IsAscii",new Integer(0x2a800));
        symbols.put("xvsnprintf",new Integer(0x31a00));
        symbols.put("abs",new Integer(0x56c00));
        symbols.put("strchr",new Integer(0x60e00));
        symbols.put("IsXDigit",new Integer(0x2b800));
        symbols.put("fputs",new Integer(0x59000));
        symbols.put("SB_Printf",new Integer(0x2fc00));
        symbols.put("SB_AppendBuf",new Integer(0x2ec00));
        symbols.put("setsid",new Integer(0x50c00));
        symbols.put("setegid",new Integer(0x50800));
        symbols.put("SB_Move",new Integer(0x2f000));
        symbols.put("closedir",new Integer(0x52400));
        symbols.put("OH_DirectIndirectLongY",new Integer(0x1a400));
        symbols.put("vasprintf",new Integer(0x54800));
        symbols.put("xsnprintf",new Integer(0x32600));
        symbols.put("GetSegmentStartName",new Integer(0x29a00));
        symbols.put("setuid",new Integer(0x50200));
        symbols.put("OH_Accumulator",new Integer(0x16600));
        symbols.put("mkdir",new Integer(0x49a00));
        symbols.put("wcrtomb",new Integer(0x6ba00));
        symbols.put("close",new Integer(0x66200));
        symbols.put("OH_Rts",new Integer(0x1b800));
        symbols.put("OH_RelativeLong",new Integer(0x18000));
        symbols.put("_call_helper",new Integer(0x10f00));
        symbols.put("vfprintf",new Integer(0x47c00));
        symbols.put("IsLower",new Integer(0x2b000));
        symbols.put("fputwc",new Integer(0x6a200));
        symbols.put("raise",new Integer(0x5fc00));
        symbols.put("free",new Integer(0x39400));
        symbols.put("FindName",new Integer(0x2d400));
        symbols.put("getsockname",new Integer(0x4fe00));
    }
    public int lookupSymbol(String symbol) { Integer i = (Integer) symbols.get(symbol); return i==null ? -1 : i.intValue(); }

}
