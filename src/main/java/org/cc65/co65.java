/* This file was generated from co65 by Mips2Java on Wed Nov 02 05:02:01 UTC 2016 */
package org.cc65;

public final class co65 extends org.ibex.nestedvm.Runtime {
    /* program counter */
    private int pc = 0;

    /* General Purpose registers */
    private final static int r0 = 0;
    private int      r1,  r2,  r3,  r4,  r5,  r6,  r7,
                r8,  r9,  r10, r11, r12, r13, r14, r15,
                r16, r17, r18, r19, r20, r21, r22, r23,
                r24, r25, r26, r27, r28, r29, r30, r31,
                hi = 0, lo = 0;
    /* FP registers */
    private int f0,  f1,  f2,  f3,  f4,  f5,  f6,  f7,
                f8,  f9,  f10, f11, f12, f13, f14, f15,
                f16, f17, f18, f19, f20, f21, f22, f23,
                f24, f25, f26, f27, f28, f29, f30, f31;
    /* FP Control Register */
    private int fcsr = 0;

    private final void run_10000() throws ExecutionException { /* 0x10000 - 0x10200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10010;
                        pc=0x10010;
                        continue;
                    }
                case 0x10010:
                    /* Next insn is delay slot */ 
                    r31=0x10018;
                    pc=0x101ac;
                    continue;
                case 0x10018:
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10020;
                        pc=0x10020;
                        continue;
                    }
                case 0x10020:
                    /* Next insn is delay slot */ 
                    r31=0x10028;
                    pc=0x10e84;
                    run_10e00(); return;
                case 0x10028:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10038:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10048;
                        pc=0x10048;
                        continue;
                    }
                case 0x10048:
                    /* Next insn is delay slot */ 
                    r31=0x10050;
                    pc=0x100e4;
                    continue;
                case 0x10050:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10060:
                    r4 = 5 << 16;
                    r2 = 5 << 16;
                    r4 = r4 + 31568;
                    r2 = r2 + 31571;
                    r2 = r2 - r4;
                    r2 = (r2&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r25 = 0 << 16;
                        pc=0x10088;
                        continue;
                    }
                    r25 = 0 << 16;
                case 0x10080:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10088:
                    r25 = r25 + 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10080;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x1009c:
                    r4 = 5 << 16;
                    r2 = 5 << 16;
                    r4 = r4 + 31568;
                    r2 = r2 + 31568;
                    r2 = r2 - r4;
                    r2 = r2 >> 2;
                    r3 = r2 >>> 31;
                    r2 = r3 + r2;
                    r5 = r2 >> 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r25 = 0 << 16;
                        pc=0x100d0;
                        continue;
                    }
                    r25 = 0 << 16;
                case 0x100c8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x100d0:
                    r25 = r25 + 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x100c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x100e4:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = 5 << 16;
                    addr=r19+31956;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                        pc=0x10190;
                        continue;
                    }
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r18 = 5 << 16;
                    r17 = 5 << 16;
                    r18 = r18 + 15368;
                    r17 = r17 + 15372;
                    r16 = 5 << 16;
                    r17 = r17 - r18;
                    r2 = readPages[(r16+31960)>>>12][((r16+31960)>>>2)&0x3ff];
                    r17 = r17 >> 2;
                    r17 = r17 + -1;
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 1;
                        pc=0x10164;
                        continue;
                    }
                    r2 = r2 + 1;
                case 0x10138:
                    r3 = r2 << 2;
                    r3 = r18 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r16+31960)>>>12][((r16+31960)>>>2)&0x3ff] = r2;
                    pc=r3;
                    r31=0x10150;
                    return;
                case 0x10150:
                    r2 = readPages[(r16+31960)>>>12][((r16+31960)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 1;
                        pc=0x10138;
                        continue;
                    }
                    r2 = r2 + 1;
                case 0x10164:
                    /* Next insn is delay slot */ 
                    r31=0x1016c;
                    pc=0x10060;
                    continue;
                case 0x1016c:
                    r2 = 0 << 16;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + 1;
                        pc=0x1018c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + 29300;
                    r31=0x10188;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x10188:
                    r2 = r0 + 1;
                case 0x1018c:
                    addr=r19+31956;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x10190:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x101ac:
                    r2 = 0 << 16;
                    r29 = r29 + -24;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                        pc=0x101d4;
                        continue;
                    }
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r4 = 5 << 16;
                    r5 = 5 << 16;
                    r4 = r4 + 29300;
                    /* Next insn is delay slot */ 
                    r5 = r5 + 31964;
                    r31=0x101d4;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x101d4:
                    r4 = 5 << 16;
                    r2 = readPages[(r4+29304)>>>12][((r4+29304)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 0 << 16;
                        pc=0x101fc;
                        continue;
                    }
                    r2 = 0 << 16;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x101fc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r4 + 29304;
                    pc=r2;
                    r31=0x101fc;
                    return;
                case 0x101fc:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                case 0x10200:
                    pc=0x10200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10200() throws ExecutionException { /* 0x10200 - 0x10400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10200:
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=0x1009c;
                    run_10000(); return;
                case 0x10208:
                    r8 = r7 + r0;
                    r3 = r5 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r4 + r0;
                        pc=0x10360;
                        continue;
                    }
                    r9 = r4 + r0;
                    r2 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 1 << 16;
                        pc=0x103d8;
                        continue;
                    }
                    r2 = 1 << 16;
                    r2 = ((r7 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 256 << 16;
                        pc=0x10548;
                        run_10400(); return;
                    }
                    r2 = 256 << 16;
                    r2 = (r7&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r10 = r0 + 8;
                        pc=0x107e0;
                        run_10600(); return;
                    }
                    r10 = r0 + 8;
                    r10 = r0 + r0;
                case 0x10240:
                    r2 = 5 << 16;
                    r10 = r7 >>> (r10&0x1f);
                    r2 = r2 + 21708;
                    r2 = r10 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r6 = r2 + r6;
                    r2 = r0 + 32;
                    r2 = r2 - r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 << (r2&0x1f);
                        pc=0x1027c;
                        continue;
                    }
                    r4 = r4 << (r2&0x1f);
                    r6 = r5 >>> (r6&0x1f);
                    r8 = r7 << (r2&0x1f);
                    r9 = r4 | r6;
                    r3 = r5 << (r2&0x1f);
                case 0x1027c:
                    r2 = r8 >>> 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x1028c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x1028c:
                    r10 = r8 & 65535;
                    r5 = r3 >>> 16;
                    r6 = lo;
                    r7 = hi;
                    r7 = r7 << 16;
                    r5 = r7 | r5;
                    { long hilo = (long)(r6) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = lo;
                    r7 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x102c0;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x102c0:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x102e8;
                        continue;
                    }
                    r5 = r5 + r8;
                    r7 = ((r5 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r6 + -1;
                        pc=0x102e4;
                        continue;
                    }
                    r9 = r6 + -1;
                    r7 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + -2;
                        pc=0x10834;
                        run_10800(); return;
                    }
                    r6 = r6 + -2;
                case 0x102e4:
                    r6 = r9 + r0;
                case 0x102e8:
                    r4 = r5 - r4;
                    r9 = r3 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x102fc;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x102fc:
                    r5 = lo;
                    r11 = hi;
                    r3 = r11 << 16;
                    r3 = r3 | r9;
                    { long hilo = (long)(r5) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r7 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10328;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10328:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10350;
                        continue;
                    }
                    r3 = r3 + r8;
                    r8 = ((r3 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r5 + -1;
                        pc=0x10788;
                        run_10600(); return;
                    }
                    r2 = r5 + -1;
                    r10 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10788;
                        run_10600(); return;
                    }
                    r5 = r5 + -2;
                case 0x10350:
                    r3 = r6 << 16;
                    r3 = r5 | r3;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x10360:
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x1052c;
                        run_10400(); return;
                    }
                    r3 = r0 + r0;
                    r2 = 1 << 16;
                    r2 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10534;
                        run_10400(); return;
                    }
                    r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r2 = 256 << 16;
                    r2 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r0 + 24;
                        pc=0x107ac;
                        run_10600(); return;
                    }
                    r8 = r0 + 24;
                    r8 = r0 + 16;
                    r9 = r0 + 16;
                case 0x10394:
                    r3 = 5 << 16;
                    r8 = r6 >>> (r8&0x1f);
                    r3 = r3 + 21708;
                    r3 = r8 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + r9;
                    r9 = r0 + 32;
                    r9 = r9 - r2;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r7 >>> (r2&0x1f);
                        pc=0x10574;
                        run_10400(); return;
                    }
                    r3 = r7 >>> (r2&0x1f);
                    r4 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                        pc=0x107e8;
                        run_10600(); return;
                    }
                    r7 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r3 = r7 ^ 1;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x103d8:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                        pc=0x103fc;
                        continue;
                    }
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r2 = r0 + 1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x103f0;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x103f0:
                    r8 = lo;
                    r2 = 1 << 16;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                case 0x103fc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10560;
                        run_10400(); return;
                    }
                case 0x10400:
                    pc=0x10400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10400() throws ExecutionException { /* 0x10400 - 0x10600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10400:
                    r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r2 = 256 << 16;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + 24;
                        pc=0x107cc;
                        run_10600(); return;
                    }
                    r6 = r0 + 24;
                    r6 = r0 + 16;
                    r9 = r0 + 16;
                case 0x1041c:
                    r2 = 5 << 16;
                    r6 = r8 >>> (r6&0x1f);
                    r2 = r2 + 21708;
                    r2 = r6 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r0 + 32;
                    r9 = r2 + r9;
                    r7 = r7 - r9;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r4 >>> (r9&0x1f);
                        pc=0x10680;
                        run_10600(); return;
                    }
                    r11 = r4 >>> (r9&0x1f);
                    r5 = r4 - r8;
                    r6 = r8 >>> 16;
                    r10 = r8 & 65535;
                    r2 = r0 + 1;
                case 0x10454:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10460;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10460:
                    r7 = r3 >>> 16;
                    r9 = lo;
                    r11 = hi;
                    r11 = r11 << 16;
                    r7 = r11 | r7;
                    { long hilo = (long)(r9) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = lo;
                    r11 = ((r7 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10490;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10490:
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x104b8;
                        continue;
                    }
                    r7 = r7 + r8;
                    r5 = ((r7 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r9 + -1;
                        pc=0x104b4;
                        continue;
                    }
                    r11 = r9 + -1;
                    r5 = ((r7 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r9 + -2;
                        pc=0x1082c;
                        run_10800(); return;
                    }
                    r9 = r9 + -2;
                case 0x104b4:
                    r9 = r11 + r0;
                case 0x104b8:
                    r4 = r7 - r4;
                    r11 = r3 & 65535;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x104cc;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x104cc:
                    r5 = lo;
                    r12 = hi;
                    r3 = r12 << 16;
                    r3 = r3 | r11;
                    { long hilo = (long)(r5) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r7 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x104f8;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x104f8:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10520;
                        continue;
                    }
                    r3 = r3 + r8;
                    r8 = ((r3 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r5 + -1;
                        pc=0x10780;
                        run_10600(); return;
                    }
                    r4 = r5 + -1;
                    r10 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10780;
                        run_10600(); return;
                    }
                    r5 = r5 + -2;
                case 0x10520:
                    r3 = r9 << 16;
                    /* Next insn is delay slot */ 
                    r3 = r5 | r3;
                    pc=r31;
                    return;
                case 0x1052c:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x10534:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107b4;
                        run_10600(); return;
                    }
                    r8 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r9 = r0 + r0;
                    pc=0x10394;
                    run_10200(); return;
                case 0x10548:
                    r2 = ((r7 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107c0;
                        run_10600(); return;
                    }
                    r10 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 16;
                    pc=0x10240;
                    run_10200(); return;
                case 0x10560:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107d4;
                        run_10600(); return;
                    }
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r9 = r0 + r0;
                    pc=0x1041c;
                    continue;
                case 0x10574:
                    r6 = r6 << (r9&0x1f);
                    r6 = r6 | r3;
                    r12 = r4 >>> (r2&0x1f);
                    r8 = r6 >>> 16;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x10590;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10590:
                    r14 = r6 & 65535;
                    r2 = r5 >>> (r2&0x1f);
                    r4 = r4 << (r9&0x1f);
                    r4 = r4 | r2;
                    r15 = r4 >>> 16;
                    r13 = lo;
                    r11 = hi;
                    r11 = r11 << 16;
                    r11 = r11 | r15;
                    { long hilo = (long)(r13) * ((long)r14); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r3 = ((r11 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x105d0;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x105d0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r7 << (r9&0x1f);
                        pc=0x105ec;
                        continue;
                    }
                    r2 = r7 << (r9&0x1f);
                    r11 = r11 + r6;
                    r3 = ((r11 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r7 = r13 + -1;
                        pc=0x10808;
                        run_10800(); return;
                    }
                    r7 = r13 + -1;
                case 0x105e8:
                    r13 = r7 + r0;
                case 0x105ec:
                    r10 = r11 - r10;
                    r4 = r4 & 65535;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x10600;
                        run_10600(); return;
                    }
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10600:
                    pc=0x10600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10600() throws ExecutionException { /* 0x10600 - 0x10800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10600:
                    r3 = lo;
                    r7 = hi;
                    r7 = r7 << 16;
                    r4 = r7 | r4;
                    { long hilo = (long)(r3) * ((long)r14); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = lo;
                    r7 = ((r4 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x1062c;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x1062c:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10648;
                        continue;
                    }
                    r4 = r4 + r6;
                    r7 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r3 + -1;
                        pc=0x107f4;
                        continue;
                    }
                    r8 = r3 + -1;
                case 0x10644:
                    r3 = r8 + r0;
                case 0x10648:
                    r13 = r13 << 16;
                    r13 = r3 | r13;
                    r4 = r4 - r11;
                    { long hilo = (r13 & 0xffffffffL) * (r2 & 0xffffffffL); hi = (int) (hilo >>> 32); lo = (int) hilo; } 
                    r2 = hi;
                    r6 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r3 = lo;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107a0;
                        continue;
                    }
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x10790;
                        continue;
                    }
                case 0x10674:
                    r3 = r13 + r0;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x10680:
                    r8 = r8 << (r7&0x1f);
                    r6 = r8 >>> 16;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10694;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10694:
                    r10 = r8 & 65535;
                    r4 = r4 << (r7&0x1f);
                    r9 = r5 >>> (r9&0x1f);
                    r4 = r4 | r9;
                    r9 = r4 >>> 16;
                    r3 = r5 << (r7&0x1f);
                    r13 = lo;
                    r12 = hi;
                    r12 = r12 << 16;
                    r12 = r12 | r9;
                    { long hilo = (long)(r13) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = lo;
                    r2 = ((r12 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x106d8;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x106d8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10704;
                        continue;
                    }
                    r12 = r12 + r8;
                    r2 = ((r12 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r13 + -1;
                        pc=0x10824;
                        run_10800(); return;
                    }
                    r5 = r13 + -1;
                    r2 = ((r12 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10824;
                        run_10800(); return;
                    }
                    r13 = r13 + -2;
                    r12 = r12 + r8;
                case 0x10704:
                    r7 = r12 - r7;
                    r4 = r4 & 65535;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10718;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10718:
                    r2 = lo;
                    r9 = hi;
                    r9 = r9 << 16;
                    r9 = r9 | r4;
                    { long hilo = (long)(r2) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r4 = ((r9 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10744;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10744:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10770;
                        continue;
                    }
                    r9 = r9 + r8;
                    r4 = ((r9 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r2 + -1;
                        pc=0x1081c;
                        run_10800(); return;
                    }
                    r7 = r2 + -1;
                    r4 = ((r9 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1081c;
                        run_10800(); return;
                    }
                    r2 = r2 + -2;
                    r9 = r9 + r8;
                case 0x10770:
                    r13 = r13 << 16;
                    r5 = r9 - r5;
                    /* Next insn is delay slot */ 
                    r2 = r2 | r13;
                    pc=0x10454;
                    run_10400(); return;
                case 0x10780:
                    /* Next insn is delay slot */ 
                    r5 = r4 + r0;
                    pc=0x10520;
                    run_10400(); return;
                case 0x10788:
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    pc=0x10350;
                    run_10200(); return;
                case 0x10790:
                    r5 = r5 << (r9&0x1f);
                    r5 = ((r5 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10674;
                        continue;
                    }
                case 0x107a0:
                    r3 = r13 + -1;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x107ac:
                    /* Next insn is delay slot */ 
                    r9 = r0 + 24;
                    pc=0x10394;
                    run_10200(); return;
                case 0x107b4:
                    r8 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r9 = r0 + 8;
                    pc=0x10394;
                    run_10200(); return;
                case 0x107c0:
                    r10 = r0 + 24;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 24;
                    pc=0x10240;
                    run_10200(); return;
                case 0x107cc:
                    /* Next insn is delay slot */ 
                    r9 = r0 + 24;
                    pc=0x1041c;
                    run_10400(); return;
                case 0x107d4:
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r9 = r0 + 8;
                    pc=0x1041c;
                    run_10400(); return;
                case 0x107e0:
                    /* Next insn is delay slot */ 
                    r6 = r0 + 8;
                    pc=0x10240;
                    run_10200(); return;
                case 0x107e8:
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x107f4:
                    r7 = ((r4 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + -2;
                        pc=0x10644;
                        continue;
                    }
                    r3 = r3 + -2;
                case 0x10800:
                    pc=0x10800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10800() throws ExecutionException { /* 0x10800 - 0x10a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10800:
                    /* Next insn is delay slot */ 
                    r4 = r4 + r6;
                    pc=0x10648;
                    run_10600(); return;
                case 0x10808:
                    r3 = ((r11 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r13 = r13 + -2;
                        pc=0x105e8;
                        run_10400(); return;
                    }
                    r13 = r13 + -2;
                    /* Next insn is delay slot */ 
                    r11 = r11 + r6;
                    pc=0x105ec;
                    run_10400(); return;
                case 0x1081c:
                    /* Next insn is delay slot */ 
                    r2 = r7 + r0;
                    pc=0x10770;
                    run_10600(); return;
                case 0x10824:
                    /* Next insn is delay slot */ 
                    r13 = r5 + r0;
                    pc=0x10704;
                    run_10600(); return;
                case 0x1082c:
                    /* Next insn is delay slot */ 
                    r7 = r7 + r8;
                    pc=0x104b8;
                    run_10400(); return;
                case 0x10834:
                    /* Next insn is delay slot */ 
                    r5 = r5 + r8;
                    pc=0x102e8;
                    run_10200(); return;
                case 0x1083c:
                    r8 = r7 + r0;
                    r9 = r5 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r4 + r0;
                        pc=0x1098c;
                        continue;
                    }
                    r2 = r4 + r0;
                    r3 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = 1 << 16;
                        pc=0x10a18;
                        run_10a00(); return;
                    }
                    r3 = 1 << 16;
                    r3 = ((r7 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = 256 << 16;
                        pc=0x10b80;
                        run_10a00(); return;
                    }
                    r3 = 256 << 16;
                    r3 = (r7&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e18;
                        run_10e00(); return;
                    }
                    r10 = r0 + r0;
                case 0x10874:
                    r3 = 5 << 16;
                    r6 = r7 >>> (r6&0x1f);
                    r3 = r3 + 21708;
                    r3 = r6 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r12 = r0 + 32;
                    r10 = r3 + r10;
                    r12 = r12 - r10;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 << (r12&0x1f);
                        pc=0x10cdc;
                        run_10c00(); return;
                    }
                    r4 = r4 << (r12&0x1f);
                    r10 = r5 >>> (r10&0x1f);
                    r8 = r7 << (r12&0x1f);
                    r2 = r4 | r10;
                    r9 = r5 << (r12&0x1f);
                case 0x108ac:
                    r10 = r8 >>> 16;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x108bc;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x108bc:
                    r13 = r8 & 65535;
                    r11 = r9 >>> 16;
                    r7 = lo;
                    r3 = hi;
                    r3 = r3 << 16;
                    r11 = r3 | r11;
                    { long hilo = (long)(r7) * ((long)r13); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = lo;
                    r3 = ((r11 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x108f0;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x108f0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 - r7;
                        pc=0x10918;
                        continue;
                    }
                    r2 = r11 - r7;
                    r11 = r11 + r8;
                    r2 = ((r11 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 - r7;
                        pc=0x10918;
                        continue;
                    }
                    r2 = r11 - r7;
                    r2 = ((r11 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e5c;
                        run_10e00(); return;
                    }
                case 0x10914:
                    r2 = r11 - r7;
                case 0x10918:
                    r9 = r9 & 65535;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x10928;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10928:
                    r3 = lo;
                    r4 = hi;
                    r4 = r4 << 16;
                    r4 = r4 | r9;
                    { long hilo = (long)(r3) * ((long)r13); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = lo;
                    r5 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x10954;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10954:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1097c;
                        continue;
                    }
                    r4 = r4 + r8;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1097c;
                        continue;
                    }
                    r2 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1097c;
                        continue;
                    }
                    r4 = r4 + r8;
                case 0x1097c:
                    r3 = r4 - r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r3 >>> (r12&0x1f);
                    pc=r31;
                    return;
                case 0x1098c:
                    r3 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b60;
                        run_10a00(); return;
                    }
                    r3 = 1 << 16;
                    r3 = ((r6 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10b6c;
                        run_10a00(); return;
                    }
                    r3 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = 256 << 16;
                    r3 = ((r6 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r0 + 24;
                        pc=0x10df0;
                        run_10c00(); return;
                    }
                    r9 = r0 + 24;
                    r9 = r0 + 16;
                    r10 = r0 + 16;
                case 0x109c0:
                    r8 = 5 << 16;
                    r9 = r6 >>> (r9&0x1f);
                    r8 = r8 + 21708;
                    r8 = r9 + r8;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 + r10;
                    r10 = r0 + 32;
                    r10 = r10 - r3;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        r13 = r4 >>> (r3&0x1f);
                        pc=0x10bac;
                        run_10a00(); return;
                    }
                    r13 = r4 >>> (r3&0x1f);
                    r3 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r5 - r7;
                        pc=0x10a08;
                        run_10a00(); return;
                    }
                    r3 = r5 - r7;
                    r3 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e64;
                        run_10e00(); return;
                    }
                case 0x10a00:
                    pc=0x10a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10a00() throws ExecutionException { /* 0x10a00 - 0x10c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10a00:
                    r3 = r5 - r7;
                case 0x10a08:
                    r4 = r4 - r6;
                    r5 = ((r5 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r5;
                    pc=r31;
                    return;
                case 0x10a18:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = 1 << 16;
                        pc=0x10a38;
                        continue;
                    }
                    r2 = 1 << 16;
                    r2 = r0 + 1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x10a30;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10a30:
                    r8 = lo;
                    r2 = 1 << 16;
                case 0x10a38:
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10b98;
                        continue;
                    }
                    r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r2 = 256 << 16;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + 24;
                        pc=0x10e10;
                        run_10e00(); return;
                    }
                    r3 = r0 + 24;
                    r3 = r0 + 16;
                    r6 = r0 + 16;
                case 0x10a5c:
                    r2 = 5 << 16;
                    r3 = r8 >>> (r3&0x1f);
                    r2 = r2 + 21708;
                    r2 = r3 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r12 = r0 + 32;
                    r6 = r2 + r6;
                    r12 = r12 - r6;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        r10 = r4 >>> (r6&0x1f);
                        pc=0x10ce4;
                        run_10c00(); return;
                    }
                    r10 = r4 >>> (r6&0x1f);
                    r6 = r4 - r8;
                    r2 = r8 >>> 16;
                    r7 = r8 & 65535;
                case 0x10a90:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10a9c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10a9c:
                    r10 = r9 >>> 16;
                    r4 = lo;
                    r3 = hi;
                    r3 = r3 << 16;
                    r10 = r3 | r10;
                    { long hilo = (long)(r4) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = lo;
                    r3 = ((r10 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10acc;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10acc:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10aec;
                        continue;
                    }
                    r10 = r10 + r8;
                    r3 = ((r10 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = ((r10 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10aec;
                        continue;
                    }
                    r3 = ((r10 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e54;
                        run_10e00(); return;
                    }
                case 0x10aec:
                    r4 = r10 - r4;
                    r9 = r9 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10b00;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10b00:
                    r3 = lo;
                    r5 = hi;
                    r5 = r5 << 16;
                    r9 = r5 | r9;
                    { long hilo = (long)(r3) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = lo;
                    r5 = ((r9 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10b2c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10b2c:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b50;
                        continue;
                    }
                    r9 = r9 + r8;
                    r2 = ((r9 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b50;
                        continue;
                    }
                    r2 = ((r9 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e4c;
                        run_10e00(); return;
                    }
                case 0x10b50:
                    r3 = r9 - r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r3 >>> (r12&0x1f);
                    pc=r31;
                    return;
                case 0x10b60:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r5 + r0;
                    pc=r31;
                    return;
                case 0x10b6c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10de4;
                        run_10c00(); return;
                    }
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r10 = r0 + r0;
                    pc=0x109c0;
                    run_10800(); return;
                case 0x10b80:
                    r3 = ((r7 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10df8;
                        run_10c00(); return;
                    }
                    r6 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 16;
                    pc=0x10874;
                    run_10800(); return;
                case 0x10b98:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e04;
                        run_10e00(); return;
                    }
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    pc=0x10a5c;
                    continue;
                case 0x10bac:
                    r2 = r7 >>> (r3&0x1f);
                    r6 = r6 << (r10&0x1f);
                    r6 = r6 | r2;
                    r9 = r6 >>> 16;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10bc8;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10bc8:
                    r2 = r6 & 65535;
                    r11 = r5 >>> (r3&0x1f);
                    r4 = r4 << (r10&0x1f);
                    r4 = r4 | r11;
                    r15 = r4 >>> 16;
                    r7 = r7 << (r10&0x1f);
                    r14 = lo;
                    r12 = hi;
                    r12 = r12 << 16;
                    r12 = r12 | r15;
                    { long hilo = (long)(r14) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = lo;
                    r8 = ((r12 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                case 0x10c00:
                    pc=0x10c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10c00() throws ExecutionException { /* 0x10c00 - 0x10e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10c00:
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10c0c;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10c0c:
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 << (r10&0x1f);
                        pc=0x10c28;
                        continue;
                    }
                    r5 = r5 << (r10&0x1f);
                    r12 = r12 + r6;
                    r8 = ((r12 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        r13 = r14 + -1;
                        pc=0x10e38;
                        run_10e00(); return;
                    }
                    r13 = r14 + -1;
                case 0x10c24:
                    r14 = r13 + r0;
                case 0x10c28:
                    r11 = r12 - r11;
                    r4 = r4 & 65535;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10c3c;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10c3c:
                    r8 = lo;
                    r13 = hi;
                    { long hilo = (long)(r8) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = r13 << 16;
                    r4 = r2 | r4;
                    r12 = lo;
                    r2 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10c70;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10c70:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10c8c;
                        continue;
                    }
                    r4 = r4 + r6;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r8 + -1;
                        pc=0x10e24;
                        run_10e00(); return;
                    }
                    r9 = r8 + -1;
                case 0x10c88:
                    r8 = r9 + r0;
                case 0x10c8c:
                    r14 = r14 << 16;
                    r8 = r8 | r14;
                    r4 = r4 - r12;
                    { long hilo = (r8 & 0xffffffffL) * (r7 & 0xffffffffL); hi = (int) (hilo >>> 32); lo = (int) hilo; } 
                    r8 = hi;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    r9 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dcc;
                        continue;
                    }
                    if(r4 == r8) {
                        /* Next insn is delay slot */ 
                        r2 = r4 - r8;
                        pc=0x10e6c;
                        run_10e00(); return;
                    }
                    r2 = r4 - r8;
                    r7 = lo;
                case 0x10cbc:
                    r7 = r5 - r7;
                    r5 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r2 = r2 - r5;
                    r3 = r2 << (r3&0x1f);
                    r7 = r7 >>> (r10&0x1f);
                    r2 = r2 >>> (r10&0x1f);
                    /* Next insn is delay slot */ 
                    r3 = r3 | r7;
                    pc=r31;
                    return;
                case 0x10cdc:
                    /* Next insn is delay slot */ 
                    r12 = r0 + r0;
                    pc=0x108ac;
                    run_10800(); return;
                case 0x10ce4:
                    r8 = r8 << (r12&0x1f);
                    r2 = r8 >>> 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10cf8;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10cf8:
                    r7 = r8 & 65535;
                    r6 = r5 >>> (r6&0x1f);
                    r4 = r4 << (r12&0x1f);
                    r6 = r4 | r6;
                    r3 = r6 >>> 16;
                    r9 = r5 << (r12&0x1f);
                    r13 = lo;
                    r11 = hi;
                    r11 = r11 << 16;
                    r11 = r11 | r3;
                    { long hilo = (long)(r13) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r3 = ((r11 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10d3c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10d3c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10d60;
                        continue;
                    }
                    r11 = r11 + r8;
                    r3 = ((r11 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = ((r11 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10d60;
                        continue;
                    }
                    r3 = ((r11 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10d60;
                        continue;
                    }
                    r11 = r11 + r8;
                case 0x10d60:
                    r5 = r11 - r5;
                    r3 = r6 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10d74;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10d74:
                    r6 = lo;
                    r10 = hi;
                    r10 = r10 << 16;
                    r10 = r10 | r3;
                    { long hilo = (long)(r6) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = lo;
                    r3 = ((r10 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10da0;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10da0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dc4;
                        continue;
                    }
                    r10 = r10 + r8;
                    r3 = ((r10 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = ((r10 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10dc4;
                        continue;
                    }
                    r3 = ((r10 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dc4;
                        continue;
                    }
                    r10 = r10 + r8;
                case 0x10dc4:
                    /* Next insn is delay slot */ 
                    r6 = r10 - r6;
                    pc=0x10a90;
                    run_10a00(); return;
                case 0x10dcc:
                    r7 = r9 - r7;
                    r6 = r8 - r6;
                    r2 = ((r9 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r2 = r6 - r2;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r2;
                    pc=0x10cbc;
                    continue;
                case 0x10de4:
                    r9 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 8;
                    pc=0x109c0;
                    run_10800(); return;
                case 0x10df0:
                    /* Next insn is delay slot */ 
                    r10 = r0 + 24;
                    pc=0x109c0;
                    run_10800(); return;
                case 0x10df8:
                    r6 = r0 + 24;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 24;
                    pc=0x10874;
                    run_10800(); return;
                case 0x10e00:
                    pc=0x10e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10e00() throws ExecutionException { /* 0x10e00 - 0x11000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10e00:
                    r10 = r0 + 24;
                case 0x10e04:
                    r3 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 8;
                    pc=0x10a5c;
                    run_10a00(); return;
                case 0x10e10:
                    /* Next insn is delay slot */ 
                    r6 = r0 + 24;
                    pc=0x10a5c;
                    run_10a00(); return;
                case 0x10e18:
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 8;
                    pc=0x10874;
                    run_10800(); return;
                case 0x10e24:
                    r2 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + -2;
                        pc=0x10c88;
                        run_10c00(); return;
                    }
                    r8 = r8 + -2;
                    /* Next insn is delay slot */ 
                    r4 = r4 + r6;
                    pc=0x10c8c;
                    run_10c00(); return;
                case 0x10e38:
                    r8 = ((r12 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        r14 = r14 + -2;
                        pc=0x10c24;
                        run_10c00(); return;
                    }
                    r14 = r14 + -2;
                    /* Next insn is delay slot */ 
                    r12 = r12 + r6;
                    pc=0x10c28;
                    run_10c00(); return;
                case 0x10e4c:
                    /* Next insn is delay slot */ 
                    r9 = r9 + r8;
                    pc=0x10b50;
                    run_10a00(); return;
                case 0x10e54:
                    /* Next insn is delay slot */ 
                    r10 = r10 + r8;
                    pc=0x10aec;
                    run_10a00(); return;
                case 0x10e5c:
                    /* Next insn is delay slot */ 
                    r11 = r11 + r8;
                    pc=0x10914;
                    run_10800(); return;
                case 0x10e64:
                    /* Next insn is delay slot */ 
                    r3 = r5 + r0;
                    pc=r31;
                    return;
                case 0x10e6c:
                    r2 = ((r5 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dcc;
                        run_10c00(); return;
                    }
                    r7 = lo;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x10cbc;
                    run_10c00(); return;
                case 0x10e84:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+15360)>>>12][((r2+15360)>>>2)&0x3ff];
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x10edc;
                        continue;
                    }
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 5 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r16 + 15356;
                    r17 = r0 + -1;
                case 0x10eb4:
                    /* Next insn is delay slot */ 
                    r16 = r16 + -4;
                    pc=r2;
                    r31=0x10ebc;
                    return;
                case 0x10ebc:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x10eb4;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                case 0x10edc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10ee4:
                    r2 = r4 + 1;
                case 0x10ee8:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 1;
                        pc=0x10ee8;
                        continue;
                    }
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r2;
                    pc=r31;
                    return;
                case 0x10f00:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = r16 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x10f28;
                    return;
                case 0x10f28:
                    r3 = r2 + r0;
                    r2 = r0 + 2;
                    pc = 0x10f30;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x10f34;
                        return;
                    }
                case 0x10f34:
                    r2 = r0 + 1;
                    r3 = r0 + 1;
                    pc = 0x10f3c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x10f40;
                        return;
                    }
                case 0x10f40:
                case 0x11000:
                    pc=0x11000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11000() throws ExecutionException { /* 0x11000 - 0x11200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r28 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1107c;
                        continue;
                    }
                case 0x11018:
                    writePages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x11024;
                    pc=0x10000;
                    run_10000(); return;
                case 0x11024:
                    r4 = 1 << 16;
                    r4 = r4 + 56;
                    /* Next insn is delay slot */ 
                    r31=0x11034;
                    pc=0x1f400;
                    run_1f400(); return;
                case 0x11034:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1108c;
                        continue;
                    }
                    r2 = r16 + 4;
                    r4 = r0 + r0;
                case 0x1104c:
                    r2 = r2 + 4;
                    r6 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1104c;
                        continue;
                    }
                case 0x11060:
                    r6 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11070;
                    pc=0x15600;
                    run_15600(); return;
                case 0x11070:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1107c;
                    pc=0x1f800;
                    run_1f800(); return;
                case 0x1107c:
                    r2 = 6 << 16;
                    r28 = r2 + -1200;
                    /* Next insn is delay slot */ 
                    pc=0x11018;
                    continue;
                case 0x1108c:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x11060;
                    continue;
                case 0x11200:
                    pc=0x11200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11200() throws ExecutionException { /* 0x11200 - 0x11400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11200:
                    r29 = r29 + -24;
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 16384;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r6 = r6 + 16404;
                    r7 = r0 + 155;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1122c;
                    return;
                case 0x1122c:
                case 0x11400:
                    pc=0x11400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11400() throws ExecutionException { /* 0x11400 - 0x11600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11400:
                    r29 = r29 + -32;
                    r2 = (r5&0xffffffffL) < (6&0xffffffffL) ? 1 : 0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x115f0;
                        continue;
                    }
                    r2 = 5 << 16;
                    r2 = r2 + 18044;
                    r5 = r5 << 2;
                    r5 = r2 + r5;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x11438:
                    r2 = readPages[(r4+28)>>>12][((r4+28)>>>2)&0x3ff];
                    r16 = 5 << 16;
                    r6 = r6 - r2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    r7 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    r6 = 5 << 16;
                    r4 = r16 + 31988;
                    r5 = r0 + 256;
                    r6 = r6 + 16468;
                    /* Next insn is delay slot */ 
                    r31=0x11464;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x11464:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + 31988;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1147c:
                    r2 = readPages[(r4+36)>>>12][((r4+36)>>>2)&0x3ff];
                    r16 = 5 << 16;
                    r6 = r6 - r2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    r7 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r6 = 5 << 16;
                    r4 = r16 + 31988;
                    r5 = r0 + 256;
                    r6 = r6 + 16468;
                    /* Next insn is delay slot */ 
                    r31=0x114a8;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x114a8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + 31988;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x114c0:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11600;
                        run_11600(); return;
                    }
                    r2 = readPages[(r7+12)>>>12][((r7+12)>>>2)&0x3ff];
                    r3 = readPages[(r4+92)>>>12][((r4+92)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11610;
                        run_11600(); return;
                    }
                    r3 = readPages[(r4+100)>>>12][((r4+100)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r16 = 5 << 16;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    r6 = 5 << 16;
                    r4 = r16 + 31988;
                    r5 = r0 + 256;
                    r6 = r6 + 16468;
                    /* Next insn is delay slot */ 
                    r31=0x11510;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x11510:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + 31988;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11528:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    r16 = 5 << 16;
                    r6 = 5 << 16;
                    r7 = 5 << 16;
                    r4 = r16 + 31988;
                    r5 = r0 + 256;
                    r6 = r6 + 16468;
                    r7 = r7 + 17636;
                    /* Next insn is delay slot */ 
                    r31=0x11550;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x11550:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + 31988;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11568:
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r16 = 5 << 16;
                    r6 = r6 - r2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    r7 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    r6 = 5 << 16;
                    r4 = r16 + 31988;
                    r5 = r0 + 256;
                    r6 = r6 + 16468;
                    /* Next insn is delay slot */ 
                    r31=0x11594;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x11594:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + 31988;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x115ac:
                    r2 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                    r16 = 5 << 16;
                    r6 = r6 - r2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    r7 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    r6 = 5 << 16;
                    r4 = r16 + 31988;
                    r5 = r0 + 256;
                    r6 = r6 + 16468;
                    /* Next insn is delay slot */ 
                    r31=0x115d8;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x115d8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + 31988;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x115f0:
                    r4 = 5 << 16;
                    r4 = r4 + 16536;
                    /* Next insn is delay slot */ 
                    r31=0x11600;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x11600:
                    pc=0x11600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11600() throws ExecutionException { /* 0x11600 - 0x11800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11600:
                    r4 = 5 << 16;
                    r4 = r4 + 16476;
                    /* Next insn is delay slot */ 
                    r31=0x11610;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x11610:
                    r4 = 5 << 16;
                    r4 = r4 + 16420;
                    /* Next insn is delay slot */ 
                    r31=0x11620;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x11620:
                case 0x11800:
                    pc=0x11800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11800() throws ExecutionException { /* 0x11800 - 0x11a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11800:
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    r17 = r4 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    r21 = r6 + r0;
                    r18 = r7 + r0;
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11ac8;
                        run_11a00(); return;
                    }
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r30 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                case 0x11858:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x118b4;
                        continue;
                    }
                    r19 = 5 << 16;
                    r23 = r0 + r0;
                    r20 = r0 + r0;
                    r19 = r19 + 16792;
                case 0x11870:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11888;
                        continue;
                    }
                    r6 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    if(r6 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x118f0;
                        continue;
                    }
                case 0x11888:
                    r3 = r18 + r23;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r22 = r23 + 1;
                    r4 = r17 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x118a4;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x118a4:
                    r23 = r22 + r0;
                case 0x118a8:
                    r2 = ((r23 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11870;
                        continue;
                    }
                case 0x118b4:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x118f0:
                    addr=r30+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r0 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11a7c;
                        run_11a00(); return;
                    }
                    r2 = (r5&0xffffffffL) < (65&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x119c4;
                        continue;
                    }
                    r2 = r0 + 128;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11a20;
                        run_11a00(); return;
                    }
                    r2 = r0 + 192;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11a10;
                        run_11a00(); return;
                    }
                    r2 = r16 + -2;
                    r2 = ((r23 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11ae4;
                        run_11a00(); return;
                    }
                    r2 = r18 + r6;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r4 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    addr=r30+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r6 = r6 + r4;
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r4 << 16;
                    r6 = r6 + r4;
                    r2 = r2 << 8;
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r6 + r2;
                    r7 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11970;
                    pc=0x11400;
                    run_11400(); return;
                case 0x11970:
                    r5 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + 16736;
                    r6 = r2 + r0;
                    r23 = r23 + 3;
                    /* Next insn is delay slot */ 
                    r31=0x1198c;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x1198c:
                    r2 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r20 = r20 + 1;
                    r2 = ((r20 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x119b8;
                        continue;
                    }
                    r4 = readPages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff];
                    r2 = r20 << 2;
                    r2 = r4 + r2;
                    r30 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x118a8;
                    continue;
                case 0x119b8:
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x118a8;
                    continue;
                case 0x119c4:
                    r2 = r0 + 32;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11a10;
                        run_11a00(); return;
                    }
                    r6 = r18 + r6;
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r30+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r7 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x119ec;
                    pc=0x11400;
                    run_11400(); return;
                case 0x119ec:
                    r3 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r3 + 16668;
                    r6 = r2 + r0;
                    r23 = r23 + 1;
                case 0x11a00:
                    pc=0x11a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11a00() throws ExecutionException { /* 0x11a00 - 0x11c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11a00:
                    /* Next insn is delay slot */ 
                    r31=0x11a08;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x11a08:
                    /* Next insn is delay slot */ 
                    pc=0x1198c;
                    run_11800(); return;
                case 0x11a10:
                    r4 = 5 << 16;
                    r4 = r4 + 16752;
                    /* Next insn is delay slot */ 
                    r31=0x11a20;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x11a20:
                    r2 = r16 + -1;
                    r2 = ((r23 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11ad4;
                        continue;
                    }
                    r2 = r18 + r6;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r30+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r6 = r6 << 8;
                    r6 = r6 + r2;
                    r7 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11a58;
                    pc=0x11400;
                    run_11400(); return;
                case 0x11a58:
                    r3 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r3 + 16640;
                    r6 = r2 + r0;
                    r23 = r23 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x11a74;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x11a74:
                    /* Next insn is delay slot */ 
                    pc=0x1198c;
                    run_11800(); return;
                case 0x11a7c:
                    r6 = r18 + r6;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r30+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r6 = r6 << 8;
                    r6 = r6 + r2;
                    r7 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11aa4;
                    pc=0x11400;
                    run_11400(); return;
                case 0x11aa4:
                    r5 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + 16652;
                    r6 = r2 + r0;
                    r23 = r23 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x11ac0;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x11ac0:
                    /* Next insn is delay slot */ 
                    pc=0x1198c;
                    run_11800(); return;
                case 0x11ac8:
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x11858;
                    run_11800(); return;
                case 0x11ad4:
                    r4 = 5 << 16;
                    r4 = r4 + 16588;
                    /* Next insn is delay slot */ 
                    r31=0x11ae4;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x11ae4:
                    r4 = 5 << 16;
                    r4 = r4 + 16684;
                    /* Next insn is delay slot */ 
                    r31=0x11af4;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x11af4:
                case 0x11c00:
                    pc=0x11c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11c00() throws ExecutionException { /* 0x11c00 - 0x11e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11c00:
                    addr=r28+-32452;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r29 = r29 + -64;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11c4c;
                        continue;
                    }
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = r0 + 2048;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x125e4;
                        run_12400(); return;
                    }
                case 0x11c4c:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r6 = 5 << 16;
                    r5 = r0 + 1;
                    r6 = r6 + 16856;
                    /* Next insn is delay slot */ 
                    r31=0x11c6c;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x11c6c:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = readPages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff];
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r6 = 5 << 16;
                    r5 = r0 + 1;
                    r6 = r6 + 16900;
                    /* Next insn is delay slot */ 
                    r31=0x11c8c;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x11c8c:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = readPages[(r18+32)>>>12][((r18+32)>>>2)&0x3ff];
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r6 = 5 << 16;
                    r5 = r0 + 1;
                    r6 = r6 + 16944;
                    /* Next insn is delay slot */ 
                    r31=0x11cac;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x11cac:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = readPages[(r18+40)>>>12][((r18+40)>>>2)&0x3ff];
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r6 = 5 << 16;
                    r5 = r0 + 1;
                    r6 = r6 + 16988;
                    /* Next insn is delay slot */ 
                    r31=0x11ccc;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x11ccc:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = readPages[(r18+92)>>>12][((r18+92)>>>2)&0x3ff];
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r6 = 5 << 16;
                    r5 = r0 + 1;
                    r6 = r6 + 17032;
                    /* Next insn is delay slot */ 
                    r31=0x11cec;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x11cec:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = readPages[(r18+104)>>>12][((r18+104)>>>2)&0x3ff];
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r6 = 5 << 16;
                    r5 = r0 + 1;
                    r6 = r6 + 17076;
                    /* Next insn is delay slot */ 
                    r31=0x11d0c;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x11d0c:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = readPages[(r18+68)>>>12][((r18+68)>>>2)&0x3ff];
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r6 = 5 << 16;
                    r5 = r0 + 1;
                    r6 = r6 + 17120;
                    /* Next insn is delay slot */ 
                    r31=0x11d2c;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x11d2c:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = 5 << 16;
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r7 = readPages[(r18+80)>>>12][((r18+80)>>>2)&0x3ff];
                    r5 = r0 + 1;
                    r6 = r6 + 17164;
                    /* Next insn is delay slot */ 
                    r31=0x11d4c;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x11d4c:
                    r2 = readPages[(r18+48)>>>12][((r18+48)>>>2)&0x3ff];
                    r20 = r0 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11e1c;
                        run_11e00(); return;
                    }
                    r30 = 5 << 16;
                    r19 = 5 << 16;
                    r22 = 5 << 16;
                    r16 = r0 + r0;
                    r30 = r30 + 17476;
                    r19 = r19 + 18068;
                    r23 = 5 << 16;
                    r22 = r22 + 17404;
                case 0x11d7c:
                    r3 = readPages[(r18+56)>>>12][((r18+56)>>>2)&0x3ff];
                    r2 = r16 << 2;
                    r2 = r3 + r2;
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = (r5&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11f94;
                        run_11e00(); return;
                    }
                    r5 = r5 << 2;
                    r5 = r19 + r5;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x11dbc:
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11dd0;
                        continue;
                    }
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11dd0;
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x11dd0:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11ddc;
                    pc=0x16e00;
                    run_16e00(); return;
                case 0x11ddc:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11de8;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x11de8:
                    r20 = r2 + r0;
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r0 + 1;
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r6 = r22 + r0;
                    r7 = r20 + r0;
                case 0x11e00:
                    pc=0x11e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11e00() throws ExecutionException { /* 0x11e00 - 0x12000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11e00:
                    /* Next insn is delay slot */ 
                    r31=0x11e08;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x11e08:
                    r2 = readPages[(r18+48)>>>12][((r18+48)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11d7c;
                        run_11c00(); return;
                    }
                case 0x11e1c:
                    addr=r28+-32492;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11fc4;
                        continue;
                    }
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11e60:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r21 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11e74;
                    pc=0x16e00;
                    run_16e00(); return;
                case 0x11e74:
                    r3 = 5 << 16;
                    r4 = r21 + r0;
                    r5 = r0 + 1;
                    r6 = r3 + 17368;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11e90;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x11e90:
                    /* Next insn is delay slot */ 
                    pc=0x11e08;
                    continue;
                case 0x11e98:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + 2;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11fac;
                        continue;
                    }
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    addr=r17+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r21 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11ebc;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x11ebc:
                    r6 = 5 << 16;
                    r7 = r2 + r0;
                    r4 = r21 + r0;
                    r5 = r0 + 1;
                    r6 = r6 + 17288;
                    /* Next insn is delay slot */ 
                    r31=0x11ed8;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x11ed8:
                    addr=r17+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r0 + 3;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x11e08;
                        continue;
                    }
                    r3 = readPages[(r28+-32464)>>>12][((r28+-32464)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11f84;
                        continue;
                    }
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11f84;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + 17324;
                    /* Next insn is delay slot */ 
                    r31=0x11f10;
                    pc=0x12800;
                    run_12800(); return;
                case 0x11f10:
                    /* Next insn is delay slot */ 
                    pc=0x11e08;
                    continue;
                case 0x11f18:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r21 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11f2c;
                    pc=0x16e00;
                    run_16e00(); return;
                case 0x11f2c:
                    r6 = 5 << 16;
                    r4 = r21 + r0;
                    r5 = r0 + 1;
                    r6 = r6 + 17208;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11f48;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x11f48:
                    /* Next insn is delay slot */ 
                    pc=0x11e08;
                    continue;
                case 0x11f50:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r21 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11f64;
                    pc=0x16e00;
                    run_16e00(); return;
                case 0x11f64:
                    r7 = r2 + r0;
                    r4 = r21 + r0;
                    r5 = r0 + 1;
                    r6 = r23 + 17440;
                    /* Next insn is delay slot */ 
                    r31=0x11f7c;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x11f7c:
                    /* Next insn is delay slot */ 
                    pc=0x11e08;
                    continue;
                case 0x11f84:
                    r2 = r0 + 3;
                    writePages[(r28+-32464)>>>12][((r28+-32464)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x11e08;
                    continue;
                case 0x11f94:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11fa4;
                    pc=0x12800;
                    run_12800(); return;
                case 0x11fa4:
                    /* Next insn is delay slot */ 
                    pc=0x11e08;
                    continue;
                case 0x11fac:
                    r4 = 5 << 16;
                    r4 = r4 + 17244;
                    /* Next insn is delay slot */ 
                    r31=0x11fbc;
                    pc=0x12800;
                    run_12800(); return;
                case 0x11fbc:
                    /* Next insn is delay slot */ 
                    pc=0x11e08;
                    continue;
                case 0x11fc4:
                    r4 = readPages[(r28+-32472)>>>12][((r28+-32472)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + 17520;
                    /* Next insn is delay slot */ 
                    r31=0x11fd8;
                    pc=0x22600;
                    run_22600(); return;
                case 0x11fd8:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x125f4;
                        run_12400(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x11fec;
                    pc=0x1c800;
                    run_1c800(); return;
                case 0x11fec:
                    r4 = readPages[(r28+-32464)>>>12][((r28+-32464)>>>2)&0x3ff];
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11ffc;
                    pc=0x15a00;
                    run_15a00(); return;
                case 0x11ffc:
                    r5 = 5 << 16;
                case 0x12000:
                    pc=0x12000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12000() throws ExecutionException { /* 0x12000 - 0x12200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12000:
                    r4 = r17 + r0;
                    r5 = r5 + 17548;
                    r6 = r16 + r0;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12018;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x12018:
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r2 & 32768;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12504;
                        run_12400(); return;
                    }
                case 0x1202c:
                    /* Next insn is delay slot */ 
                    r31=0x12034;
                    pc=0x1c800;
                    run_1c800(); return;
                case 0x12034:
                    r5 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + 17608;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1204c;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x1204c:
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12078;
                        continue;
                    }
                    r5 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + 17640;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1206c;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x1206c:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12078;
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x12078:
                    r4 = 5 << 16;
                    r4 = r4 + 17664;
                    r5 = r0 + 1;
                    r6 = r0 + 10;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12094;
                    pc=0x24a00;
                    run_24a00(); return;
                case 0x12094:
                    addr=r28+-32491;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1222c;
                        run_12200(); return;
                    }
                    r6 = 5 << 16;
                    r6 = r6 + 16812;
                case 0x120ac:
                    r5 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + 17676;
                    /* Next insn is delay slot */ 
                    r31=0x120c0;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x120c0:
                    r6 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1258c;
                        run_12400(); return;
                    }
                    r5 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + 17692;
                    /* Next insn is delay slot */ 
                    r31=0x120e4;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x120e4:
                    r6 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12570;
                        run_12400(); return;
                    }
                    r5 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + 17692;
                    /* Next insn is delay slot */ 
                    r31=0x12108;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x12108:
                    r6 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12554;
                        run_12400(); return;
                    }
                    r5 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + 17692;
                    /* Next insn is delay slot */ 
                    r31=0x1212c;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x1212c:
                    r6 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12538;
                        run_12400(); return;
                    }
                    r5 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + 17692;
                    /* Next insn is delay slot */ 
                    r31=0x12150;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x12150:
                    r4 = r0 + 10;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12160;
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x12160:
                    r2 = readPages[(r18+92)>>>12][((r18+92)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x121c0;
                        continue;
                    }
                    r19 = 5 << 16;
                    r16 = r0 + r0;
                    r19 = r19 + 17740;
                case 0x1217c:
                    r3 = readPages[(r18+100)>>>12][((r18+100)>>>2)&0x3ff];
                    r2 = r16 << 2;
                    r2 = r3 + r2;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1219c;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x1219c:
                    r2 = readPages[(r18+92)>>>12][((r18+92)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1217c;
                        continue;
                    }
                    r4 = r0 + 10;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x121c0;
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x121c0:
                    r2 = readPages[(r18+104)>>>12][((r18+104)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x122bc;
                        run_12200(); return;
                    }
                    r20 = 5 << 16;
                    r23 = 5 << 16;
                    r19 = r0 + r0;
                    r20 = r20 + 18088;
                    r23 = r23 + 31988;
                    r22 = 5 << 16;
                    r21 = 5 << 16;
                case 0x121ec:
                    r3 = readPages[(r18+112)>>>12][((r18+112)>>>2)&0x3ff];
                    r2 = r19 << 2;
                    r2 = r3 + r2;
                    r16 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                case 0x12200:
                    pc=0x12200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12200() throws ExecutionException { /* 0x12200 - 0x12400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12200:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (6&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12528;
                        run_12400(); return;
                    }
                    r2 = r2 << 2;
                    r2 = r20 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x1222c:
                    r6 = 5 << 16;
                    r6 = r6 + 16808;
                    /* Next insn is delay slot */ 
                    pc=0x120ac;
                    run_12000(); return;
                case 0x1223c:
                    r2 = readPages[(r18+28)>>>12][((r18+28)>>>2)&0x3ff];
                    r7 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    r4 = r4 - r2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r5 = r0 + 256;
                    r4 = r23 + r0;
                    r6 = r22 + 16468;
                    r30 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x12264;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x12264:
                    r16 = r16 + 8;
                    r4 = r17 + r0;
                    r5 = r21 + 17752;
                    r6 = r16 + r0;
                    r7 = r30 + 31988;
                    /* Next insn is delay slot */ 
                    r31=0x12280;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x12280:
                    r5 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + 17764;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12298;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x12298:
                    r2 = readPages[(r18+104)>>>12][((r18+104)>>>2)&0x3ff];
                    r19 = r19 + 1;
                    r2 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x121ec;
                        run_12000(); return;
                    }
                    r4 = r0 + 10;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x122bc;
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x122bc:
                    r6 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    r7 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + 17776;
                    /* Next insn is delay slot */ 
                    r31=0x122d8;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x122d8:
                    r2 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r7 = readPages[(r18+60)>>>12][((r18+60)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    r6 = r18 + 68;
                    /* Next insn is delay slot */ 
                    r31=0x122f8;
                    pc=0x11800;
                    run_11800(); return;
                case 0x122f8:
                    r6 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    r7 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + 17816;
                    /* Next insn is delay slot */ 
                    r31=0x12314;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x12314:
                    r2 = readPages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff];
                    r7 = readPages[(r18+64)>>>12][((r18+64)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    r6 = r18 + 80;
                    /* Next insn is delay slot */ 
                    r31=0x12334;
                    pc=0x11800;
                    run_11800(); return;
                case 0x12334:
                    r7 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    r6 = readPages[(r28+-32760)>>>12][((r28+-32760)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + 17856;
                    /* Next insn is delay slot */ 
                    r31=0x12350;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x12350:
                    r16 = 5 << 16;
                    r6 = readPages[(r18+32)>>>12][((r18+32)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r16 + 17896;
                    /* Next insn is delay slot */ 
                    r31=0x12368;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x12368:
                    r4 = r0 + 10;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12378;
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x12378:
                    r4 = 5 << 16;
                    r4 = r4 + 17908;
                    r5 = r0 + 1;
                    r6 = r0 + 23;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12394;
                    pc=0x24a00;
                    run_24a00(); return;
                case 0x12394:
                    r3 = readPages[(r28+-32464)>>>12][((r28+-32464)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x125a8;
                        run_12400(); return;
                    }
                    r6 = readPages[(r28+-32764)>>>12][((r28+-32764)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r7 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r5 + 18004;
                    /* Next insn is delay slot */ 
                    r31=0x123c0;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x123c0:
                    r6 = readPages[(r18+40)>>>12][((r18+40)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r16 + 17896;
                    /* Next insn is delay slot */ 
                    r31=0x123d4;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x123d4:
                    r5 = r17 + r0;
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x123e4;
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x123e4:
                    r4 = 5 << 16;
                    r4 = r4 + 18036;
                    r7 = r17 + r0;
                    r5 = r0 + 1;
                    r6 = r0 + 5;
                    /* Next insn is delay slot */ 
                    r31=0x12400;
                    pc=0x24a00;
                    run_24a00(); return;
                case 0x12400:
                    pc=0x12400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12400() throws ExecutionException { /* 0x12400 - 0x12600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12400:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x12438:
                    r2 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r7 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    r4 = r4 - r2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r5 = r0 + 256;
                    r4 = r23 + r0;
                    r6 = r22 + 16468;
                    r30 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x12460;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x12460:
                    /* Next insn is delay slot */ 
                    pc=0x12264;
                    run_12200(); return;
                case 0x12468:
                    r2 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r7 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    r4 = r4 - r2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r5 = r0 + 256;
                    r4 = r23 + r0;
                    r6 = r22 + 16468;
                    r30 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x12490;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x12490:
                    /* Next insn is delay slot */ 
                    pc=0x12264;
                    run_12200(); return;
                case 0x12498:
                    r7 = 5 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r5 = r0 + 256;
                    r4 = r23 + r0;
                    r6 = r22 + 16468;
                    r7 = r7 + 17636;
                    r30 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x124bc;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x124bc:
                    /* Next insn is delay slot */ 
                    pc=0x12264;
                    run_12200(); return;
                case 0x124c4:
                    r4 = 5 << 16;
                    r4 = r4 + 16476;
                    /* Next insn is delay slot */ 
                    r31=0x124d4;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x124d4:
                    r2 = readPages[(r18+36)>>>12][((r18+36)>>>2)&0x3ff];
                    r7 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 - r2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r5 = r0 + 256;
                    r4 = r23 + r0;
                    r6 = r22 + 16468;
                    r30 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x124fc;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x124fc:
                    /* Next insn is delay slot */ 
                    pc=0x12264;
                    run_12200(); return;
                case 0x12504:
                    r4 = 5 << 16;
                    r4 = r4 + 17600;
                    r5 = r0 + 1;
                    r6 = r0 + 6;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12520;
                    pc=0x24a00;
                    run_24a00(); return;
                case 0x12520:
                    /* Next insn is delay slot */ 
                    pc=0x1202c;
                    run_12000(); return;
                case 0x12528:
                    r4 = 5 << 16;
                    r4 = r4 + 16536;
                    /* Next insn is delay slot */ 
                    r31=0x12538;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x12538:
                    r4 = 5 << 16;
                    r4 = r4 + 17728;
                    /* Next insn is delay slot */ 
                    r31=0x12548;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x12548:
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x12150;
                    run_12000(); return;
                case 0x12554:
                    r4 = 5 << 16;
                    r4 = r4 + 17720;
                    /* Next insn is delay slot */ 
                    r31=0x12564;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x12564:
                    writePages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1212c;
                    run_12000(); return;
                case 0x12570:
                    r4 = 5 << 16;
                    r4 = r4 + 17712;
                    /* Next insn is delay slot */ 
                    r31=0x12580;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x12580:
                    writePages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x12108;
                    run_12000(); return;
                case 0x1258c:
                    r4 = 5 << 16;
                    r4 = r4 + 17708;
                    /* Next insn is delay slot */ 
                    r31=0x1259c;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x1259c:
                    writePages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x120e4;
                    run_12000(); return;
                case 0x125a8:
                    r4 = 5 << 16;
                    r4 = r4 + 17932;
                    r5 = r0 + 1;
                    r6 = r0 + 48;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x125c4;
                    pc=0x24a00;
                    run_24a00(); return;
                case 0x125c4:
                    r5 = 5 << 16;
                    r6 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r5 + 17984;
                    /* Next insn is delay slot */ 
                    r31=0x125dc;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x125dc:
                    /* Next insn is delay slot */ 
                    pc=0x123d4;
                    run_12200(); return;
                case 0x125e4:
                    r4 = 5 << 16;
                    r4 = r4 + 16816;
                    /* Next insn is delay slot */ 
                    r31=0x125f4;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x125f4:
                    r16 = readPages[(r28+-32472)>>>12][((r28+-32472)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12600;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x12600:
                    pc=0x12600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12600() throws ExecutionException { /* 0x12600 - 0x12800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12600:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1260c;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x1260c:
                    r4 = 5 << 16;
                    r4 = r4 + 17524;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12624;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x12624:
                case 0x12800:
                    pc=0x12800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12800() throws ExecutionException { /* 0x12800 - 0x12a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12800:
                    r29 = r29 + -32;
                    r2 = r29 + 36;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r6 = readPages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r5 = 5 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + 18112;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x12840;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x12840:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12858;
                    pc=0x2e800;
                    run_2e800(); return;
                case 0x12858:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x128c0;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x128ac:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x128c0:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12924;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x12924;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12924:
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x12930;
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x12930:
                    /* Next insn is delay slot */ 
                    pc=0x128ac;
                    continue;
                case 0x12a00:
                    pc=0x12a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12a00() throws ExecutionException { /* 0x12a00 - 0x12c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12a00:
                    r29 = r29 + -32;
                    r2 = r29 + 36;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r6 = readPages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r5 = 5 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + 18128;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x12a40;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x12a40:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12a58;
                    pc=0x2e800;
                    run_2e800(); return;
                case 0x12a58:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x12ab8;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x12aac:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x12ab8;
                    pc=0x1f800;
                    run_1f800(); return;
                case 0x12ab8:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12b10;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x12b10;
                        continue;
                    }
                    r2 = r2 + 1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x12aac;
                    continue;
                case 0x12b10:
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x12b1c;
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x12b1c:
                    /* Next insn is delay slot */ 
                    pc=0x12aac;
                    continue;
                case 0x12c00:
                    pc=0x12c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12c00() throws ExecutionException { /* 0x12c00 - 0x12e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12c00:
                    r29 = r29 + -32;
                    r2 = r29 + 36;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r6 = readPages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r5 = 5 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + 18140;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x12c40;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x12c40:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12c58;
                    pc=0x2e800;
                    run_2e800(); return;
                case 0x12c58:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x12cb8;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x12cac:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x12cb8;
                    pc=0x1f800;
                    run_1f800(); return;
                case 0x12cb8:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12d10;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x12d10;
                        continue;
                    }
                    r2 = r2 + 1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x12cac;
                    continue;
                case 0x12d10:
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x12d1c;
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x12d1c:
                    /* Next insn is delay slot */ 
                    pc=0x12cac;
                    continue;
                case 0x12e00:
                    pc=0x12e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12e00() throws ExecutionException { /* 0x12e00 - 0x13000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12e00:
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r5 = r4 + r0;
                    r2 = r2 + -1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x12e34;
                        continue;
                    }
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12e34:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x12e48;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x12e48:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x12e64;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12e64:
                    r4 = 5 << 16;
                    r4 = r4 + 18164;
                    /* Next insn is delay slot */ 
                    r31=0x12e74;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x12e74:
                case 0x13000:
                    pc=0x13000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13000() throws ExecutionException { /* 0x13000 - 0x13200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13000:
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    r3 = r3 + -1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1307c;
                        continue;
                    }
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    r4 = r2 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r17 = tmp;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x130b4;
                        continue;
                    }
                case 0x13048:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x1305c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 << 8;
                    r2 = r2 | r17;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1307c:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1308c;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1308c:
                    r17 = r2 + r0;
                    r2 = r0 + -1;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x130d0;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13048;
                        continue;
                    }
                case 0x130b4:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x130c4;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x130c4:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1305c;
                        continue;
                    }
                case 0x130d0:
                    r4 = 5 << 16;
                    r4 = r4 + 18164;
                    /* Next insn is delay slot */ 
                    r31=0x130e0;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x130e0:
                case 0x13200:
                    pc=0x13200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13200() throws ExecutionException { /* 0x13200 - 0x13400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13200:
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    r3 = r3 + -1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x132a4;
                        continue;
                    }
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    r4 = r2 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r17 = tmp;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x132dc;
                        continue;
                    }
                case 0x13248:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    r2 = r4 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    r2 = r2 << 8;
                    r17 = r2 | r17;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13314;
                        continue;
                    }
                case 0x13270:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x13284:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 << 16;
                    r2 = r17 | r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x132a4:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x132b4;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x132b4:
                    r17 = r2 + r0;
                    r2 = r0 + -1;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x13330;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13248;
                        continue;
                    }
                case 0x132dc:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x132ec;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x132ec:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x13330;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 << 8;
                    r3 = r3 + -1;
                    r17 = r2 | r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13270;
                        continue;
                    }
                case 0x13314:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13324;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x13324:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x13284;
                        continue;
                    }
                case 0x13330:
                    r4 = 5 << 16;
                    r4 = r4 + 18164;
                    /* Next insn is delay slot */ 
                    r31=0x13340;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x13340:
                case 0x13400:
                    pc=0x13400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13400() throws ExecutionException { /* 0x13400 - 0x13600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13400:
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    r3 = r3 + -1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x134d8;
                        continue;
                    }
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    r4 = r2 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r17 = tmp;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13510;
                        continue;
                    }
                case 0x1344c:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    r2 = r4 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    r2 = r2 << 8;
                    r17 = r2 | r17;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13548;
                        continue;
                    }
                case 0x13474:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    r2 = r4 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13580;
                        continue;
                    }
                case 0x13494:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x134ac:
                    r2 = r2 << 8;
                    r2 = r2 | r18;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 << 16;
                    r2 = r17 | r2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x134d8:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x134e8;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x134e8:
                    r17 = r2 + r0;
                    r2 = r0 + -1;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1359c;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1344c;
                        continue;
                    }
                case 0x13510:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13520;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x13520:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1359c;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 << 8;
                    r3 = r3 + -1;
                    r17 = r2 | r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13474;
                        continue;
                    }
                case 0x13548:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13558;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x13558:
                    r18 = r2 + r0;
                    r2 = r0 + -1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1359c;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13494;
                        continue;
                    }
                case 0x13580:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13590;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x13590:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x134ac;
                        continue;
                    }
                case 0x1359c:
                    r4 = 5 << 16;
                    r4 = r4 + 18164;
                    /* Next insn is delay slot */ 
                    r31=0x135ac;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x135ac:
                case 0x13600:
                    pc=0x13600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13600() throws ExecutionException { /* 0x13600 - 0x13800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13600:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r5 + r0;
                    r16 = r6 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1363c;
                        continue;
                    }
                case 0x13620:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1363c:
                    r7 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x13650;
                    pc=0x23400;
                    run_23400(); return;
                case 0x13650:
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x13620;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + 18164;
                    /* Next insn is delay slot */ 
                    r31=0x13668;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x13668:
                case 0x13800:
                    pc=0x13800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13800() throws ExecutionException { /* 0x13800 - 0x13a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13800:
                    addr=r28+-32452;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + 1;
                    addr=r28+-32452;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13a00:
                    pc=0x13a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13a00() throws ExecutionException { /* 0x13a00 - 0x13c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13a00:
                    r2 = r0 + 1;
                    addr=r28+-32491;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13c00:
                    pc=0x13c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13c00() throws ExecutionException { /* 0x13c00 - 0x13e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13c00:
                    r2 = r0 + 1;
                    addr=r28+-32492;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13e00:
                    pc=0x13e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13e00() throws ExecutionException { /* 0x13e00 - 0x14000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13e00:
                    addr=r28+-32448;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + 1;
                    addr=r28+-32448;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14000:
                    pc=0x14000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14000() throws ExecutionException { /* 0x14000 - 0x14200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14000:
                    r4 = 5 << 16;
                    r5 = readPages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r4 = r4 + 18192;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1401c;
                    pc=0x26800;
                    run_26800(); return;
                case 0x1401c:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14028;
                    pc=0x1f800;
                    run_1f800(); return;
                case 0x14028:
                case 0x14200:
                    pc=0x14200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14200() throws ExecutionException { /* 0x14200 - 0x14400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14200:
                    r29 = r29 + -24;
                    r4 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1421c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1421c:
                    r3 = r0 + -1;
                    writePages[(r28+-32464)>>>12][((r28+-32464)>>>2)&0x3ff] = r2;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x14240;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14240:
                    r4 = 5 << 16;
                    r4 = r4 + 19156;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14254;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x14254:
                case 0x14400:
                    pc=0x14400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14400() throws ExecutionException { /* 0x14400 - 0x14600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14400:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x14424;
                    pc=0x1c800;
                    run_1c800(); return;
                case 0x14424:
                    r5 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + 19180;
                    r6 = r16 + r0;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14440;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x14440:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1444c;
                    pc=0x1f800;
                    run_1f800(); return;
                case 0x1444c:
                case 0x14600:
                    pc=0x14600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14600() throws ExecutionException { /* 0x14600 - 0x14800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14600:
                    r29 = r29 + -24;
                    r4 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1461c;
                    pc=0x1c200;
                    run_1c200(); return;
                case 0x1461c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14648;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14630;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x14630:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32760)>>>12][((r28+-32760)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14648:
                    r4 = 5 << 16;
                    r4 = r4 + 19188;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1465c;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x1465c:
                case 0x14800:
                    pc=0x14800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14800() throws ExecutionException { /* 0x14800 - 0x14a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14800:
                    r29 = r29 + -32;
                    r4 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14824;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x14824:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1486c;
                        continue;
                    }
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                case 0x14838:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x148dc;
                        continue;
                    }
                case 0x14840:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1484c;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x1484c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1486c:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x14878;
                    pc=0x17200;
                    run_17200(); return;
                case 0x14878:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x148c4;
                        continue;
                    }
                case 0x14880:
                    r16 = r17 + 1;
                    r18 = r0 + 95;
                case 0x14888:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14840;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x148a0;
                    pc=0x17400;
                    run_17400(); return;
                case 0x148a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x148b8;
                        continue;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x14838;
                        continue;
                    }
                case 0x148b8:
                    r16 = r16 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x14888;
                    continue;
                case 0x148c4:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 95;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x14838;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x14880;
                    continue;
                case 0x148dc:
                    r4 = 5 << 16;
                    r4 = r4 + 19220;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x148f0;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x148f0:
                case 0x14a00:
                    pc=0x14a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14a00() throws ExecutionException { /* 0x14a00 - 0x14c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14a00:
                    r29 = r29 + -24;
                    r4 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14a1c;
                    pc=0x1c200;
                    run_1c200(); return;
                case 0x14a1c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14a48;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14a30;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x14a30:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32764)>>>12][((r28+-32764)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14a48:
                    r4 = 5 << 16;
                    r4 = r4 + 19188;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14a5c;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x14a5c:
                case 0x14c00:
                    pc=0x14c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14c00() throws ExecutionException { /* 0x14c00 - 0x14e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14c00:
                    r29 = r29 + -24;
                    r4 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14c1c;
                    pc=0x1c200;
                    run_1c200(); return;
                case 0x14c1c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14c48;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14c30;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x14c30:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14c48:
                    r4 = 5 << 16;
                    r4 = r4 + 19188;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14c5c;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x14c5c:
                case 0x14e00:
                    pc=0x14e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14e00() throws ExecutionException { /* 0x14e00 - 0x15000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14e00:
                    r29 = r29 + -24;
                    r4 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14e1c;
                    pc=0x1c200;
                    run_1c200(); return;
                case 0x14e1c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14e48;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14e30;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x14e30:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14e48:
                    r4 = 5 << 16;
                    r4 = r4 + 19188;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14e5c;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x14e5c:
                case 0x15000:
                    pc=0x15000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15000() throws ExecutionException { /* 0x15000 - 0x15200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15000:
                    r29 = r29 + -32;
                    r4 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15024;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x15024:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1506c;
                        continue;
                    }
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                case 0x15038:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x150dc;
                        continue;
                    }
                case 0x15040:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1504c;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x1504c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1506c:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x15078;
                    pc=0x17200;
                    run_17200(); return;
                case 0x15078:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x150c4;
                        continue;
                    }
                case 0x15080:
                    r16 = r17 + 1;
                    r18 = r0 + 95;
                case 0x15088:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15040;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x150a0;
                    pc=0x17400;
                    run_17400(); return;
                case 0x150a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x150b8;
                        continue;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x15038;
                        continue;
                    }
                case 0x150b8:
                    r16 = r16 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x15088;
                    continue;
                case 0x150c4:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 95;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x15038;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x15080;
                    continue;
                case 0x150dc:
                    r4 = 5 << 16;
                    r4 = r4 + 19220;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x150f0;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x150f0:
                case 0x15200:
                    pc=0x15200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15200() throws ExecutionException { /* 0x15200 - 0x15400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15200:
                    r29 = r29 + -32;
                    r4 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15224;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x15224:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1526c;
                        continue;
                    }
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                case 0x15238:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x152dc;
                        continue;
                    }
                case 0x15240:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1524c;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x1524c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1526c:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x15278;
                    pc=0x17200;
                    run_17200(); return;
                case 0x15278:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x152c4;
                        continue;
                    }
                case 0x15280:
                    r16 = r17 + 1;
                    r18 = r0 + 95;
                case 0x15288:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15240;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x152a0;
                    pc=0x17400;
                    run_17400(); return;
                case 0x152a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x152b8;
                        continue;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x15238;
                        continue;
                    }
                case 0x152b8:
                    r16 = r16 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x15288;
                    continue;
                case 0x152c4:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 95;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x15238;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x15280;
                    continue;
                case 0x152dc:
                    r4 = 5 << 16;
                    r4 = r4 + 19220;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x152f0;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x152f0:
                case 0x15400:
                    pc=0x15400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15400() throws ExecutionException { /* 0x15400 - 0x15600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15400:
                    r29 = r29 + -32;
                    r4 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15424;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x15424:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1546c;
                        continue;
                    }
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                case 0x15438:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x154dc;
                        continue;
                    }
                case 0x15440:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1544c;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x1544c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1546c:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x15478;
                    pc=0x17200;
                    run_17200(); return;
                case 0x15478:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x154c4;
                        continue;
                    }
                case 0x15480:
                    r16 = r17 + 1;
                    r18 = r0 + 95;
                case 0x15488:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15440;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x154a0;
                    pc=0x17400;
                    run_17400(); return;
                case 0x154a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x154b8;
                        continue;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x15438;
                        continue;
                    }
                case 0x154b8:
                    r16 = r16 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x15488;
                    continue;
                case 0x154c4:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 95;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x15438;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x15480;
                    continue;
                case 0x154dc:
                    r4 = 5 << 16;
                    r4 = r4 + 19220;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x154f0;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x154f0:
                case 0x15600:
                    pc=0x15600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15600() throws ExecutionException { /* 0x15600 - 0x15800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15600:
                    r29 = r29 + -40;
                    r6 = 5 << 16;
                    r6 = r6 + 19248;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r5;
                    r4 = r29 + 40;
                    r5 = r29 + 44;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x15634;
                    pc=0x18e00;
                    run_18e00(); return;
                case 0x15634:
                    r4 = readPages[(r28+-32460)>>>12][((r28+-32460)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r3 = (r4&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x157bc;
                        continue;
                    }
                    r18 = 5 << 16;
                    r17 = 5 << 16;
                    r18 = r18 + 19500;
                    r17 = r17 + 19796;
                    /* Next insn is delay slot */ 
                    pc=0x15694;
                    continue;
                case 0x15664:
                    r2 = readPages[(r28+-32468)>>>12][((r28+-32468)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15830;
                        run_15800(); return;
                    }
                    writePages[(r28+-32468)>>>12][((r28+-32468)>>>2)&0x3ff] = r16;
                case 0x15678:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x157bc;
                        continue;
                    }
                case 0x15694:
                    r3 = readPages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r16 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 45;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15664;
                        continue;
                    }
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + -45;
                    r2 = r2 & 255;
                    r3 = (r2&0xffffffffL) < (74&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x157b0;
                        continue;
                    }
                    r2 = r2 << 2;
                    r2 = r18 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x156ec:
                    addr=r28+-32448;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + 1;
                    addr=r28+-32448;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x15678;
                    continue;
                case 0x15704:
                    r4 = r29 + 16;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x15714;
                    pc=0x19800;
                    run_19800(); return;
                case 0x15714:
                    writePages[(r28+-32472)>>>12][((r28+-32472)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r28+-32460)>>>12][((r28+-32460)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x15678;
                    continue;
                case 0x15724:
                    r2 = r0 + 1;
                    addr=r28+-32492;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x15678;
                    continue;
                case 0x15734:
                    r4 = r29 + 16;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x15744;
                    pc=0x19800;
                    run_19800(); return;
                case 0x15744:
                    r5 = r2 + r0;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15754;
                    pc=0x14200;
                    run_14200(); return;
                case 0x15754:
                    r4 = readPages[(r28+-32460)>>>12][((r28+-32460)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x15678;
                    continue;
                case 0x15760:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15770;
                    pc=0x14000;
                    run_14000(); return;
                case 0x15770:
                    r2 = r0 + 1;
                    addr=r28+-32491;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x15678;
                    continue;
                case 0x15780:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15790;
                    pc=0x14400;
                    run_14400(); return;
                case 0x15790:
                    r4 = r29 + 16;
                    r5 = r17 + r0;
                    r6 = r0 + 15;
                    /* Next insn is delay slot */ 
                    r31=0x157a4;
                    pc=0x19a00;
                    run_19a00(); return;
                case 0x157a4:
                    r4 = readPages[(r28+-32460)>>>12][((r28+-32460)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x15678;
                    continue;
                case 0x157b0:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x157bc;
                    pc=0x19000;
                    run_19000(); return;
                case 0x157bc:
                    r4 = readPages[(r28+-32468)>>>12][((r28+-32468)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15844;
                        run_15800(); return;
                    }
                    r2 = readPages[(r28+-32472)>>>12][((r28+-32472)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15810;
                        run_15800(); return;
                    }
                case 0x157dc:
                    /* Next insn is delay slot */ 
                    r31=0x157e4;
                    pc=0x16400;
                    run_16400(); return;
                case 0x157e4:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x157f0;
                    pc=0x11c00;
                    run_11c00(); return;
                case 0x157f0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                case 0x15800:
                    pc=0x15800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15800() throws ExecutionException { /* 0x15800 - 0x15a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15800:
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15810:
                    r5 = 5 << 16;
                    r5 = r5 + 31588;
                    /* Next insn is delay slot */ 
                    r31=0x15820;
                    pc=0x1be00;
                    run_1be00(); return;
                case 0x15820:
                    writePages[(r28+-32472)>>>12][((r28+-32472)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r28+-32468)>>>12][((r28+-32468)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x157dc;
                    run_15600(); return;
                case 0x15830:
                    r4 = 5 << 16;
                    r4 = r4 + 19256;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15844;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x15844:
                    r4 = 5 << 16;
                    r4 = r4 + 19288;
                    /* Next insn is delay slot */ 
                    r31=0x15854;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x15854:
                case 0x15a00:
                    pc=0x15a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15a00() throws ExecutionException { /* 0x15a00 - 0x15c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15a00:
                    r2 = (r4&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r5 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15a2c;
                        continue;
                    }
                    r2 = 5 << 16;
                    r5 = r4 << 2;
                    r2 = r2 + 20036;
                    r5 = r5 + r2;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15a2c:
                    r4 = 5 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + 19976;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x15a44;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x15a44:
                case 0x15c00:
                    pc=0x15c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15c00() throws ExecutionException { /* 0x15c00 - 0x15e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15c00:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 5 << 16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r18 = r4 + r0;
                    r17 = r17 + 20036;
                    r16 = r0 + r0;
                    r19 = r0 + 4;
                case 0x15c2c:
                    r5 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15c3c;
                    pc=0x1c600;
                    run_1c600(); return;
                case 0x15c3c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15c78;
                        continue;
                    }
                    r16 = r16 + 1;
                    r17 = r17 + 4;
                    if(r16 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x15c2c;
                        continue;
                    }
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15c78:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15e00:
                    pc=0x15e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15e00() throws ExecutionException { /* 0x15e00 - 0x16000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15e00:
                    r29 = r29 + -544;
                    writePages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff] = r18;
                    writePages[(r29+532)>>>12][((r29+532)>>>2)&0x3ff] = r17;
                    writePages[(r29+528)>>>12][((r29+528)>>>2)&0x3ff] = r16;
                    writePages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff] = r31;
                    r18 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15e20;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x15e20:
                    r2 = r2 << 24;
                    r2 = r2 >> 24;
                    r16 = r0 + r0;
                    r17 = r0 + 512;
                    /* Next insn is delay slot */ 
                    pc=0x15e54;
                    continue;
                case 0x15e38:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15e44;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x15e44:
                    r2 = r2 << 24;
                    r2 = r2 >> 24;
                    if(r16 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x15ea8;
                        continue;
                    }
                case 0x15e54:
                    r16 = r16 + 1;
                    r4 = r29 + 16;
                    r3 = r4 + r16;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15e38;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15e78;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x15e78:
                    r4 = r2 + r0;
                    r5 = r29 + 16;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15e8c;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x15e8c:
                    r31 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    r18 = readPages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff];
                    r17 = readPages[(r29+532)>>>12][((r29+532)>>>2)&0x3ff];
                    r16 = readPages[(r29+528)>>>12][((r29+528)>>>2)&0x3ff];
                    r29 = r29 + 544;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15ea8:
                    r4 = 5 << 16;
                    r4 = r4 + 20052;
                    r5 = r0 + 512;
                    /* Next insn is delay slot */ 
                    r31=0x15ebc;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x15ebc:
                case 0x16000:
                    pc=0x16000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16000() throws ExecutionException { /* 0x16000 - 0x16200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16000:
                    r29 = r29 + -552;
                    writePages[(r29+544)>>>12][((r29+544)>>>2)&0x3ff] = r19;
                    writePages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff] = r18;
                    writePages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff] = r17;
                    writePages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    writePages[(r29+532)>>>12][((r29+532)>>>2)&0x3ff] = r16;
                    r19 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16028;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x16028:
                    r2 = r2 << 24;
                    r2 = r2 >> 24;
                    r4 = r0 + r0;
                    r18 = r0 + 512;
                    /* Next insn is delay slot */ 
                    pc=0x16060;
                    continue;
                case 0x16040:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1604c;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x1604c:
                    r2 = r2 << 24;
                    r2 = r2 >> 24;
                    if(r16 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x16140;
                        continue;
                    }
                    r4 = r16 + r0;
                case 0x16060:
                    r16 = r4 + 1;
                    r3 = r29 + 16;
                    r6 = r3 + r16;
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16040;
                        continue;
                    }
                    r4 = r4 + 12;
                    /* Next insn is delay slot */ 
                    r31=0x16084;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x16084:
                    r4 = r2 + 8;
                    r5 = r29 + 16;
                    r6 = r16 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1609c;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x1609c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x160a8;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x160a8:
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r2 = r2 & 8192;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1610c;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x160fc;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x160d4;
                    pc=0x13400;
                    run_13400(); return;
                case 0x160d4:
                    r31 = readPages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+544)>>>12][((r29+544)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r17 = readPages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff];
                    r18 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    r16 = readPages[(r29+532)>>>12][((r29+532)>>>2)&0x3ff];
                    r29 = r29 + 552;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x160fc:
                    r4 = 5 << 16;
                    r4 = r4 + 20148;
                    /* Next insn is delay slot */ 
                    r31=0x1610c;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x1610c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16118;
                    pc=0x13000;
                    run_13000(); return;
                case 0x16118:
                    r31 = readPages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+544)>>>12][((r29+544)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r17 = readPages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff];
                    r18 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    r16 = readPages[(r29+532)>>>12][((r29+532)>>>2)&0x3ff];
                    r29 = r29 + 552;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16140:
                    r4 = 5 << 16;
                    r4 = r4 + 20100;
                    r5 = r0 + 512;
                    /* Next insn is delay slot */ 
                    r31=0x16154;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x16154:
                case 0x16200:
                    pc=0x16200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16200() throws ExecutionException { /* 0x16200 - 0x16400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16200:
                    r29 = r29 + -56;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r17 + r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r30 = r5 + r0;
                    r20 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16244;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x16244:
                    r23 = r2 & 255;
                    r16 = r0 + -1;
                    r18 = r0 + 255;
                    r21 = r0 + -32;
                    r22 = r0 + 64;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1631c;
                        continue;
                    }
                case 0x16260:
                    r4 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1626c;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1626c:
                    r19 = r2 + r0;
                    if(r23 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x16294;
                        continue;
                    }
                case 0x16278:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16284;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x16284:
                    r23 = r2 & 255;
                    r16 = r16 + 254;
                    if(r23 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x16278;
                        continue;
                    }
                case 0x16294:
                    r16 = r16 + r23;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r16;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x162a8;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x162a8:
                    r2 = r2 & 255;
                    r3 = r2 & r21;
                    r2 = r2 & 7;
                    addr=r19+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r19+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16370;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x162c8:
                    writePages[(r19+12)>>>12][((r19+12)>>>2)&0x3ff] = r2;
                    if(r3 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x16350;
                        continue;
                    }
                    r2 = r0 + 160;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x16364;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x162ec;
                    pc=0x13000;
                    run_13000(); return;
                case 0x162ec:
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r2;
                case 0x162f0:
                    r6 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16304;
                    pc=0x1a800;
                    run_1a800(); return;
                case 0x16304:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16310;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x16310:
                    r23 = r2 & 255;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16260;
                        continue;
                    }
                case 0x1631c:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16350:
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r2 = r2 & 16384;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x163b8;
                        continue;
                    }
                case 0x16364:
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x162f0;
                    continue;
                case 0x16370:
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r2 = r2 & 8192;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x163d0;
                        continue;
                    }
                    r3 = r0 + 8192;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x163a8;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1639c;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1639c:
                    addr=r19+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x162c8;
                    continue;
                case 0x163a8:
                    r4 = 5 << 16;
                    r4 = r4 + 20148;
                    /* Next insn is delay slot */ 
                    r31=0x163b8;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x163b8:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x163c4;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x163c4:
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x162f0;
                    continue;
                case 0x163d0:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x163dc;
                    pc=0x13000;
                    run_13000(); return;
                case 0x163dc:
                    addr=r19+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x162c8;
                    continue;
                case 0x16400:
                    pc=0x16400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16400() throws ExecutionException { /* 0x16400 - 0x16600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16400:
                    r5 = 5 << 16;
                    r29 = r29 + -48;
                    r5 = r5 + 20188;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16434;
                    pc=0x22600;
                    run_22600(); return;
                case 0x16434:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16a08;
                        run_16a00(); return;
                    }
                    r4 = r0 + 116;
                    /* Next insn is delay slot */ 
                    r31=0x1644c;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1644c:
                    r16 = r2 + r0;
                    r2 = 5 << 16;
                    r4 = readPages[(r2+20824)>>>12][((r2+20824)>>>2)&0x3ff];
                    r2 = r2 + 20824;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r4;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r3;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r4;
                    writePages[(r16+72)>>>12][((r16+72)>>>2)&0x3ff] = r3;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r4;
                    writePages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff] = r3;
                    writePages[(r16+92)>>>12][((r16+92)>>>2)&0x3ff] = r4;
                    writePages[(r16+96)>>>12][((r16+96)>>>2)&0x3ff] = r3;
                    writePages[(r16+104)>>>12][((r16+104)>>>2)&0x3ff] = r4;
                    writePages[(r16+108)>>>12][((r16+108)>>>2)&0x3ff] = r3;
                    writePages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff] = r2;
                    writePages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff] = r0;
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r0;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    writePages[(r16+88)>>>12][((r16+88)>>>2)&0x3ff] = r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                    writePages[(r16+112)>>>12][((r16+112)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    r6 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x164bc;
                    pc=0x13600;
                    run_13600(); return;
                case 0x164bc:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = 65535 << 16;
                    r3 = r3 & r2;
                    r2 = 256 << 16;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x169f0;
                        run_16800(); return;
                    }
                    r18 = r16 + 2;
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    r6 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r31=0x164ec;
                    pc=0x13600;
                    run_13600(); return;
                case 0x164ec:
                    r4 = r18 + r0;
                    r5 = r28 + -32744;
                    r6 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r31=0x16500;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x16500:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x169d4;
                        run_16800(); return;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16514;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x16514:
                    r2 = r2 << 24;
                    r2 = r2 >> 24;
                    addr=r16+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x169c0;
                        run_16800(); return;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16534;
                    pc=0x13000;
                    run_13000(); return;
                case 0x16534:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = r2 & 8192;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168c4;
                        run_16800(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168b4;
                        run_16800(); return;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16558;
                    pc=0x13400;
                    run_13400(); return;
                case 0x16558:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 & 8192;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168e8;
                        run_16800(); return;
                    }
                case 0x16570:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168b4;
                        run_16800(); return;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16584;
                    pc=0x13400;
                    run_13400(); return;
                case 0x16584:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 & 8192;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1690c;
                        run_16800(); return;
                    }
                case 0x1659c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168b4;
                        run_16800(); return;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x165b0;
                    pc=0x13400;
                    run_13400(); return;
                case 0x165b0:
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 & 8192;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16920;
                        run_16800(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168b4;
                        run_16800(); return;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x165dc;
                    pc=0x13400;
                    run_13400(); return;
                case 0x165dc:
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 & 8192;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16934;
                        run_16800(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168b4;
                        run_16800(); return;
                    }
                    r4 = r17 + r0;
                case 0x16600:
                    pc=0x16600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16600() throws ExecutionException { /* 0x16600 - 0x16800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16600:
                    /* Next insn is delay slot */ 
                    r31=0x16608;
                    pc=0x13400;
                    run_13400(); return;
                case 0x16608:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 & 8192;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16948;
                        run_16800(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168b4;
                        run_16800(); return;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16634;
                    pc=0x13400;
                    run_13400(); return;
                case 0x16634:
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 & 8192;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1695c;
                        run_16800(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168b4;
                        run_16800(); return;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16660;
                    pc=0x13400;
                    run_13400(); return;
                case 0x16660:
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 & 8192;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16970;
                        run_16800(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168b4;
                        run_16800(); return;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1668c;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1668c:
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 & 8192;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16984;
                        run_16800(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168b4;
                        run_16800(); return;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x166b8;
                    pc=0x13400;
                    run_13400(); return;
                case 0x166b8:
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r2;
                    r21 = r0 + 1;
                    r20 = r16 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x16728;
                    continue;
                case 0x166cc:
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x16a34;
                        run_16a00(); return;
                    }
                    r2 = r2 + -2;
                    r19 = r2 & 255;
                    r4 = r19 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x166e8;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x166e8:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r19&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r17 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x166fc;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x166fc:
                    addr=r18+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r17 + r0;
                    r5 = r18 + 2;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16714;
                    pc=0x13600;
                    run_13600(); return;
                case 0x16714:
                    r6 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16728;
                    pc=0x1a800;
                    run_1a800(); return;
                case 0x16728:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16734;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x16734:
                    r2 = r2 & 255;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x166cc;
                        continue;
                    }
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1674c;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1674c:
                    r6 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = r2 + r0;
                    r4 = r17 + r0;
                    writePages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x16764;
                    pc=0x13600;
                    run_13600(); return;
                case 0x16764:
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16770;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x16770:
                    r6 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16788;
                    pc=0x13600;
                    run_13600(); return;
                case 0x16788:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 & 8192;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16998;
                        run_16800(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168b4;
                        run_16800(); return;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x167b0;
                    pc=0x13400;
                    run_13400(); return;
                case 0x167b0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x167ec;
                        continue;
                    }
                    r19 = r16 + 92;
                    r18 = r2 + r0;
                case 0x167c0:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x167cc;
                    pc=0x15e00;
                    run_15e00(); return;
                case 0x167cc:
                    r6 = readPages[(r16+92)>>>12][((r16+92)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r5 = r2 + r0;
                    r18 = r18 + -1;
                    /* Next insn is delay slot */ 
                    r31=0x167e4;
                    pc=0x1a800;
                    run_1a800(); return;
                case 0x167e4:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x167c0;
                        continue;
                    }
                case 0x167ec:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    r6 = r16 + 68;
                    /* Next insn is delay slot */ 
                    r31=0x16800;
                    pc=0x16200;
                    run_16200(); return;
                case 0x16800:
                    pc=0x16800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16800() throws ExecutionException { /* 0x16800 - 0x16a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16800:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    r6 = r16 + 80;
                    /* Next insn is delay slot */ 
                    r31=0x16814;
                    pc=0x16200;
                    run_16200(); return;
                case 0x16814:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 & 8192;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x169ac;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168b4;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1683c;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1683c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1687c;
                        continue;
                    }
                    r19 = r16 + 104;
                    r18 = r2 + r0;
                case 0x1684c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1685c;
                    pc=0x16000;
                    run_16000(); return;
                case 0x1685c:
                    r6 = readPages[(r16+104)>>>12][((r16+104)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r5 = r2 + r0;
                    r18 = r18 + -1;
                    /* Next insn is delay slot */ 
                    r31=0x16874;
                    pc=0x1a800;
                    run_1a800(); return;
                case 0x16874:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1684c;
                        continue;
                    }
                case 0x1687c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16888;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x16888:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x168b4:
                    r4 = 5 << 16;
                    r4 = r4 + 20148;
                    /* Next insn is delay slot */ 
                    r31=0x168c4;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x168c4:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x168d0;
                    pc=0x13000;
                    run_13000(); return;
                case 0x168d0:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 & 8192;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16570;
                        run_16400(); return;
                    }
                case 0x168e8:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x168f4;
                    pc=0x13000;
                    run_13000(); return;
                case 0x168f4:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 & 8192;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1659c;
                        run_16400(); return;
                    }
                case 0x1690c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16918;
                    pc=0x13000;
                    run_13000(); return;
                case 0x16918:
                    /* Next insn is delay slot */ 
                    pc=0x165b0;
                    run_16400(); return;
                case 0x16920:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1692c;
                    pc=0x13000;
                    run_13000(); return;
                case 0x1692c:
                    /* Next insn is delay slot */ 
                    pc=0x165dc;
                    run_16400(); return;
                case 0x16934:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16940;
                    pc=0x13000;
                    run_13000(); return;
                case 0x16940:
                    /* Next insn is delay slot */ 
                    pc=0x16608;
                    run_16600(); return;
                case 0x16948:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16954;
                    pc=0x13000;
                    run_13000(); return;
                case 0x16954:
                    /* Next insn is delay slot */ 
                    pc=0x16634;
                    run_16600(); return;
                case 0x1695c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16968;
                    pc=0x13000;
                    run_13000(); return;
                case 0x16968:
                    /* Next insn is delay slot */ 
                    pc=0x16660;
                    run_16600(); return;
                case 0x16970:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1697c;
                    pc=0x13000;
                    run_13000(); return;
                case 0x1697c:
                    /* Next insn is delay slot */ 
                    pc=0x1668c;
                    run_16600(); return;
                case 0x16984:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16990;
                    pc=0x13000;
                    run_13000(); return;
                case 0x16990:
                    /* Next insn is delay slot */ 
                    pc=0x166b8;
                    run_16600(); return;
                case 0x16998:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x169a4;
                    pc=0x13000;
                    run_13000(); return;
                case 0x169a4:
                    /* Next insn is delay slot */ 
                    pc=0x167b0;
                    run_16600(); return;
                case 0x169ac:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x169b8;
                    pc=0x13000;
                    run_13000(); return;
                case 0x169b8:
                    /* Next insn is delay slot */ 
                    pc=0x1683c;
                    continue;
                case 0x169c0:
                    r4 = 5 << 16;
                    r4 = r4 + 20300;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x169d4;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x169d4:
                    r4 = 5 << 16;
                    addr=r16+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    addr=r16+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    addr=r16+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r4 = r4 + 20244;
                    /* Next insn is delay slot */ 
                    r31=0x169f0;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x169f0:
                    r4 = 5 << 16;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r4 = r4 + 20192;
                case 0x16a00:
                    pc=0x16a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16a00() throws ExecutionException { /* 0x16a00 - 0x16c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16a00:
                    /* Next insn is delay slot */ 
                    r31=0x16a08;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x16a08:
                    /* Next insn is delay slot */ 
                    r31=0x16a10;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x16a10:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16a1c;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x16a1c:
                    r4 = 5 << 16;
                    r4 = r4 + 17524;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16a34;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x16a34:
                    r4 = 5 << 16;
                    r4 = r4 + 20336;
                    /* Next insn is delay slot */ 
                    r31=0x16a44;
                    pc=0x12a00;
                    run_12a00(); return;
                case 0x16a44:
                case 0x16c00:
                    pc=0x16c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16c00() throws ExecutionException { /* 0x16c00 - 0x16e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16c00:
                    r4 = r4 + -1;
                    r4 = r4 & 255;
                    r2 = (r4&0xffffffffL) < (3&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16c30;
                        continue;
                    }
                    r2 = 5 << 16;
                    r2 = r2 + 20456;
                    r4 = r4 << 2;
                    r4 = r4 + r2;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16c30:
                    r2 = 5 << 16;
                    r2 = r2 + 20388;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16e00:
                    pc=0x16e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16e00() throws ExecutionException { /* 0x16e00 - 0x17000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16e00:
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17014;
                        run_17000(); return;
                    }
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17014;
                        run_17000(); return;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x16e60;
                    continue;
                case 0x16e50:
                    addr=r18+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16e74;
                        continue;
                    }
                case 0x16e60:
                    r2 = r2 + 1;
                    r3 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    r18 = r4 + r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16e50;
                        continue;
                    }
                case 0x16e74:
                    r20 = 5 << 16;
                    r19 = 5 << 16;
                    r22 = 5 << 16;
                    r16 = r4 + r0;
                    r17 = r0 + r0;
                    r20 = r20 + 32244;
                    r21 = r0 + 92;
                    r19 = r19 + 20396;
                    r22 = r22 + 20432;
                    /* Next insn is delay slot */ 
                    pc=0x16ec8;
                    continue;
                case 0x16ea0:
                    r3 = r17 + 1;
                    r2 = (r3&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    r17 = r20 + r17;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16f54;
                        continue;
                    }
                case 0x16eb8:
                    r16 = r16 + 1;
                    if(r16 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x16f54;
                        continue;
                    }
                case 0x16ec4:
                    r17 = r3 + r0;
                case 0x16ec8:
                    addr=r16+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r3 = r3 + r4;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 32;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16ea0;
                        continue;
                    }
                    r2 = r20 + r17;
                    r4 = r17 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r21&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = (r4&0xffffffffL) < (252&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17008;
                        run_17000(); return;
                    }
                    addr=r16+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r2 = r6 + -8;
                    r2 = r2 & 255;
                    r3 = (r2&0xffffffffL) < (6&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16fec;
                        continue;
                    }
                    r2 = r2 << 2;
                    r2 = r22 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x16f38:
                    r4 = r20 + r4;
                    r2 = r0 + 114;
                    r16 = r16 + 1;
                    r3 = r17 + 2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r16 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x16ec4;
                        continue;
                    }
                case 0x16f54:
                    r3 = r20 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16f8c:
                    r4 = r20 + r4;
                    r2 = r0 + 118;
                    r3 = r17 + 2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x16eb8;
                    continue;
                case 0x16fa4:
                    r4 = r20 + r4;
                    r2 = r0 + 110;
                    r3 = r17 + 2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x16eb8;
                    continue;
                case 0x16fbc:
                    r4 = r20 + r4;
                    r2 = r0 + 116;
                    r3 = r17 + 2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x16eb8;
                    continue;
                case 0x16fd4:
                    r4 = r20 + r4;
                    r2 = r0 + 98;
                    r3 = r17 + 2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x16eb8;
                    continue;
                case 0x16fec:
                    r4 = r20 + r4;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16ffc;
                    pc=0x28400;
                    run_28400(); return;
                case 0x16ffc:
                    r3 = r17 + 4;
                case 0x17000:
                    pc=0x17000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17000() throws ExecutionException { /* 0x17000 - 0x17200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17000:
                    /* Next insn is delay slot */ 
                    pc=0x16eb8;
                    run_16e00(); return;
                case 0x17008:
                    r3 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x16f54;
                    run_16e00(); return;
                case 0x17014:
                    r20 = 5 << 16;
                    r3 = r0 + r0;
                    r20 = r20 + 32244;
                    /* Next insn is delay slot */ 
                    pc=0x16f54;
                    run_16e00(); return;
                case 0x17200:
                    pc=0x17200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17200() throws ExecutionException { /* 0x17200 - 0x17400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17200:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + -33;
                    r2 = r4 & r2;
                    r2 = r2 + -65;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17400:
                    pc=0x17400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17400() throws ExecutionException { /* 0x17400 - 0x17600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17400:
                    r4 = r4 & 255;
                    r2 = r4 & 223;
                    r2 = r2 + -65;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17428;
                        continue;
                    }
                    r4 = r4 + -48;
                    r2 = (r4&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17428:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17600:
                    pc=0x17600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17600() throws ExecutionException { /* 0x17600 - 0x17800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17600:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = ~(r0 | r4);
                    r2 = r2 >>> 31;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17800:
                    pc=0x17800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17800() throws ExecutionException { /* 0x17800 - 0x17a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17800:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + 32;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x17824;
                        continue;
                    }
                    r4 = r4 ^ 9;
                    r2 = (r4&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17824:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17a00:
                    pc=0x17a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17a00() throws ExecutionException { /* 0x17a00 - 0x17c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17a00:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + 32;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x17a28;
                        continue;
                    }
                    r2 = r4 + -9;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17a28:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17c00:
                    pc=0x17c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17c00() throws ExecutionException { /* 0x17c00 - 0x17e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17c00:
                    r4 = r4 + -48;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17e00:
                    pc=0x17e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17e00() throws ExecutionException { /* 0x17e00 - 0x18000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17e00:
                    r4 = r4 + -97;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18000:
                    pc=0x18000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18000() throws ExecutionException { /* 0x18000 - 0x18200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18000:
                    r4 = r4 + -65;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18200:
                    pc=0x18200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18200() throws ExecutionException { /* 0x18200 - 0x18400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18200:
                    r4 = r4 + -48;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18400:
                    pc=0x18400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18400() throws ExecutionException { /* 0x18400 - 0x18600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18400:
                    r4 = r4 + -48;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18600:
                    pc=0x18600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18600() throws ExecutionException { /* 0x18600 - 0x18800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18600:
                    r4 = r4 & 255;
                    r2 = r4 & 223;
                    r2 = r2 + -65;
                    r2 = (r2&0xffffffffL) < (6&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18628;
                        continue;
                    }
                    r4 = r4 + -48;
                    r2 = (r4&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18628:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18800:
                    pc=0x18800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18800() throws ExecutionException { /* 0x18800 - 0x18a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18800:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + 34;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x18824;
                        continue;
                    }
                    r4 = r4 ^ 39;
                    r2 = (r4&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18824:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18a00:
                    pc=0x18a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18a00() throws ExecutionException { /* 0x18a00 - 0x18c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18a00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = 5 << 16;
                    r4 = r4 + 20468;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x18a34;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x18a34:
                case 0x18c00:
                    pc=0x18c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18c00() throws ExecutionException { /* 0x18c00 - 0x18e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18c00:
                    r29 = r29 + -296;
                    writePages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff] = r18;
                    writePages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r16 = r5 + r0;
                    r4 = r5 + r0;
                    r5 = 5 << 16;
                    r5 = r5 + 22628;
                    writePages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff] = r19;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r31;
                    writePages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff] = r20;
                    writePages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x18c38;
                    pc=0x22600;
                    run_22600(); return;
                case 0x18c38:
                    r19 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18dd0;
                        continue;
                    }
                case 0x18c44:
                    r4 = r29 + 16;
                    r5 = r0 + 256;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18c58;
                    pc=0x20800;
                    run_20800(); return;
                case 0x18c58:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18d44;
                        continue;
                    }
                case 0x18c60:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x18c6c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x18c6c:
                    r17 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18c8c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x18d74;
                    continue;
                case 0x18c80:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18d74;
                        continue;
                    }
                    r17 = r16 + r0;
                case 0x18c8c:
                    r16 = r17 + -1;
                    r2 = r29 + 16;
                    r3 = r2 + r16;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x18ca4;
                    pc=0x17a00;
                    run_17a00(); return;
                case 0x18ca4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18c80;
                        continue;
                    }
                case 0x18cac:
                    r2 = r29 + 16;
                    r17 = r2 + r17;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x18cc8;
                    continue;
                case 0x18cc4:
                    r16 = r16 + 1;
                case 0x18cc8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x18cd4;
                    pc=0x17a00;
                    run_17a00(); return;
                case 0x18cd4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18cc4;
                        continue;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18c44;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18cf8;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x18cf8:
                    r4 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r16 = r2 + r0;
                    r2 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18d80;
                        continue;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                case 0x18d14:
                    r5 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r2 + r3;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r5;
                    r4 = r29 + 16;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    r5 = r0 + 256;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18d3c;
                    pc=0x20800;
                    run_20800(); return;
                case 0x18d3c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18c60;
                        continue;
                    }
                case 0x18d44:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18d50;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x18d50:
                    r31 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r20 = readPages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff];
                    r19 = readPages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff];
                    r18 = readPages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff];
                    r17 = readPages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff];
                    r16 = readPages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff];
                    r29 = r29 + 296;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18d74:
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x18cac;
                    continue;
                case 0x18d80:
                    r20 = r4 << 1;
                    r4 = r4 << 3;
                    /* Next insn is delay slot */ 
                    r31=0x18d90;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x18d90:
                    r6 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18dac;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x18dac:
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18db8;
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x18db8:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r17;
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r20;
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x18d14;
                    continue;
                case 0x18dd0:
                    /* Next insn is delay slot */ 
                    r31=0x18dd8;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x18dd8:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18de4;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x18de4:
                    r4 = 5 << 16;
                    r4 = r4 + 20556;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18dfc;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x18dfc:
                case 0x18e00:
                    pc=0x18e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18e00() throws ExecutionException { /* 0x18e00 - 0x19000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18e00:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r22;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    r20 = r5 + r0;
                    r16 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18f54;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x18e48;
                    pc=0x1bc00;
                    run_1bc00(); return;
                case 0x18e48:
                    writePages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18f54;
                        continue;
                    }
                case 0x18e5c:
                    r2 = r0 + 8;
                    r4 = r0 + 32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x18e74;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x18e74:
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x18f88;
                        continue;
                    }
                    r16 = r0 + r0;
                    r21 = r0 + 64;
                    /* Next insn is delay slot */ 
                    pc=0x18ebc;
                    continue;
                case 0x18e94:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x18e98:
                    r4 = r3 + 1;
                    r16 = r16 + 1;
                    r3 = r3 << 2;
                    r3 = r2 + r3;
                    r2 = r6 < r16 ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18f84;
                        continue;
                    }
                case 0x18ebc:
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r2 = r16 << 2;
                    r2 = r3 + r2;
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ee8;
                        continue;
                    }
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x18f60;
                        continue;
                    }
                case 0x18ee8:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18e94;
                        continue;
                    }
                    r4 = r2 << 3;
                    r22 = r2 << 1;
                    /* Next insn is delay slot */ 
                    r31=0x18f10;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x18f10:
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18f2c;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x18f2c:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18f38;
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x18f38:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r22;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x18e98;
                    continue;
                case 0x18f54:
                    writePages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x18e5c;
                    continue;
                case 0x18f60:
                    r4 = r29 + 16;
                    r5 = r17 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x18f70;
                    pc=0x18c00;
                    run_18c00(); return;
                case 0x18f70:
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r2 = r6 < r16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ebc;
                        continue;
                    }
                case 0x18f84:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x18f88:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r28+-32460)>>>12][((r28+-32460)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff] = r2;
                    r22 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r3;
                    r21 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r19 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19000:
                    pc=0x19000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19000() throws ExecutionException { /* 0x19000 - 0x19200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19000:
                    r5 = r4 + r0;
                    r4 = 5 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + 20580;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1901c;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x1901c:
                case 0x19200:
                    pc=0x19200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19200() throws ExecutionException { /* 0x19200 - 0x19400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19200:
                    r5 = r4 + r0;
                    r4 = 5 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + 20600;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1921c;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x1921c:
                case 0x19400:
                    pc=0x19400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19400() throws ExecutionException { /* 0x19400 - 0x19600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19400:
                    r2 = r4 + r0;
                    r4 = 5 << 16;
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r4 = r4 + 20632;
                    r5 = r2 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x19424;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x19424:
                case 0x19600:
                    pc=0x19600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19600() throws ExecutionException { /* 0x19600 - 0x19800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19600:
                    r5 = r4 + r0;
                    r4 = 5 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + 20664;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1961c;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x1961c:
                case 0x19800:
                    pc=0x19800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19800() throws ExecutionException { /* 0x19800 - 0x19a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19800:
                    r6 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff];
                    r2 = r6 << 2;
                    r3 = r3 + r2;
                    r7 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = r7 + r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19844;
                        continue;
                    }
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r6 = r6 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19854;
                        continue;
                    }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r6;
                case 0x19844:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19854:
                    r4 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19860;
                    pc=0x19200;
                    run_19200(); return;
                case 0x19860:
                case 0x19a00:
                    pc=0x19a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19a00() throws ExecutionException { /* 0x19a00 - 0x19c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19a00:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    r21 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = readPages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff];
                    r2 = r21 << 2;
                    r19 = r19 + r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r20 = r4 + r0;
                    r16 = r5 + r0;
                    r17 = r6 + r0;
                    r18 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19a60;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x19ae0;
                    continue;
                case 0x19a50:
                    r17 = r17 + -1;
                    r16 = r16 + 12;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19ae0;
                        continue;
                    }
                case 0x19a60:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19a70;
                    pc=0x29200;
                    run_29200(); return;
                case 0x19a70:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19a50;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19acc;
                        continue;
                    }
                    r5 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r21;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19aec;
                        continue;
                    }
                    r25 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r18 + r0;
                case 0x19aa4:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x19acc:
                    r25 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x19aa4;
                    continue;
                case 0x19ae0:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19aec;
                    pc=0x19000;
                    run_19000(); return;
                case 0x19aec:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19af8;
                    pc=0x19200;
                    run_19200(); return;
                case 0x19af8:
                case 0x19c00:
                    pc=0x19c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19c00() throws ExecutionException { /* 0x19c00 - 0x19e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19c00:
                    r29 = r29 + -64;
                    r2 = r5 < r6 ? 1 : 0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    r22 = r5 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r6;
                    r20 = r7 + r0;
                    r19 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r21 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19d1c;
                        continue;
                    }
                case 0x19c50:
                    r18 = r22 << 2;
                    r30 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r16 = r22 + 1;
                    r18 = r21 + r18;
                case 0x19c60:
                    r2 = r30 < r16 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19ca4;
                        continue;
                    }
                    r17 = r16 << 2;
                    r17 = r21 + r17;
                case 0x19c74:
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r6 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=r20;
                    r31=0x19c88;
                    return;
                case 0x19c88:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x19d50;
                        continue;
                    }
                    r16 = r16 + 1;
                    r2 = r30 < r16 ? 1 : 0;
                    r17 = r17 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19c74;
                        continue;
                    }
                case 0x19ca4:
                    if(r30 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x19cc8;
                        continue;
                    }
                    r2 = r30 << 2;
                    r2 = r21 + r2;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r4;
                case 0x19cc8:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r19;
                    r2 = r3 + r22;
                    r4 = r2 >>> 31;
                    r2 = r4 + r2;
                    r2 = r2 >> 1;
                    r2 = r2 < r30 ? 1 : 0;
                    r4 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19dbc;
                        continue;
                    }
                    r5 = r30 + 1;
                    r6 = r3 + r0;
                    r30 = r30 + -1;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19d08;
                    pc=0x19c00;
                    continue;
                case 0x19d08:
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r30;
                    r3 = r30 + r0;
                case 0x19d10:
                    r2 = r22 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19c50;
                        continue;
                    }
                case 0x19d1c:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19d50:
                    r2 = r30 < r16 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19ca4;
                        continue;
                    }
                    r7 = r30 << 2;
                    r23 = r21 + r7;
                    /* Next insn is delay slot */ 
                    pc=0x19d80;
                    continue;
                case 0x19d6c:
                    r30 = r30 + -1;
                    r2 = r30 < r16 ? 1 : 0;
                    r23 = r23 + -4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19ca4;
                        continue;
                    }
                case 0x19d80:
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r6 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=r20;
                    r31=0x19d94;
                    return;
                case 0x19d94:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x19d6c;
                        continue;
                    }
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    r30 = r30 + -1;
                    writePages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x19c60;
                    continue;
                case 0x19dbc:
                    r5 = r22 + r0;
                    r6 = r30 + -1;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19dd0;
                    pc=0x19c00;
                    continue;
                case 0x19dd0:
                    r22 = r30 + 1;
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x19d10;
                    continue;
                case 0x19e00:
                    pc=0x19e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19e00() throws ExecutionException { /* 0x19e00 - 0x1a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19e00:
                    r2 = r4 + r0;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r0;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a000:
                    pc=0x1a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a000() throws ExecutionException { /* 0x1a000 - 0x1a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a000:
                    r4 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x1a200:
                    pc=0x1a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a200() throws ExecutionException { /* 0x1a200 - 0x1a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a200:
                    r29 = r29 + -24;
                    r4 = r0 + 12;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1a214;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1a214:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a400:
                    pc=0x1a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a400() throws ExecutionException { /* 0x1a400 - 0x1a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a400:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1a41c;
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x1a41c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x1a600:
                    pc=0x1a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a600() throws ExecutionException { /* 0x1a600 - 0x1a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a600:
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    r2 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a660;
                        continue;
                    }
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r5;
                    r4 = r5 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1a634;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1a634:
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a650;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x1a650:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a65c;
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x1a65c:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r17;
                case 0x1a660:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a800:
                    pc=0x1a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a800() throws ExecutionException { /* 0x1a800 - 0x1aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a800:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r6 + r0;
                    r6 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r2 = ((r6 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a920;
                        continue;
                    }
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r19 = r5 + r0;
                    r3 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a85c;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a8d0;
                        continue;
                    }
                    r3 = r2 << 1;
                    r4 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a944;
                        continue;
                    }
                case 0x1a85c:
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                case 0x1a860:
                    if(r17 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x1a8c4;
                        continue;
                    }
                    r4 = r17 + 1;
                    r4 = r4 << 2;
                    r18 = r4 + -4;
                    r6 = r6 - r17;
                    r4 = r5 + r4;
                    r6 = r6 << 2;
                    r5 = r5 + r18;
                    /* Next insn is delay slot */ 
                    r31=0x1a88c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1a88c:
                    r17 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                case 0x1a894:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    r2 = r5 + r18;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a8c4:
                    r18 = r17 << 2;
                    /* Next insn is delay slot */ 
                    pc=0x1a894;
                    continue;
                case 0x1a8d0:
                    r4 = r0 + 16;
                    r3 = r0 + 4;
                case 0x1a8d8:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1a8e4;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1a8e4:
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a900;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x1a900:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a90c;
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x1a90c:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1a860;
                    continue;
                case 0x1a920:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 20692;
                    r6 = r6 + 20712;
                    r7 = r0 + 138;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1a944;
                    return;
                case 0x1a944:
                    r4 = r2 << 3;
                    /* Next insn is delay slot */ 
                    pc=0x1a8d8;
                    continue;
                case 0x1aa00:
                    pc=0x1aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1aa00() throws ExecutionException { /* 0x1aa00 - 0x1ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1aa00:
                    r6 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aa58;
                        continue;
                    }
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1aa6c;
                        continue;
                    }
                    r3 = r3 + 4;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1aa4c;
                    continue;
                case 0x1aa38:
                    r3 = r3 + 4;
                    r4 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1aa64;
                        continue;
                    }
                case 0x1aa4c:
                    r2 = r2 + 1;
                    if(r2 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x1aa38;
                        continue;
                    }
                case 0x1aa58:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1aa64:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1aa6c:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ac00:
                    pc=0x1ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ac00() throws ExecutionException { /* 0x1ac00 - 0x1ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ac00:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ac40;
                        continue;
                    }
                    r2 = r2 + -1;
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r4 = r5 << 2;
                    r6 = r4 + 4;
                    r2 = r2 - r5;
                    r4 = r3 + r4;
                    r5 = r3 + r6;
                    r6 = r2 << 2;
                    /* Next insn is delay slot */ 
                    pc=0x26000;
                    run_26000(); return;
                case 0x1ac40:
                    r29 = r29 + -24;
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 16384;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r6 = r6 + 20712;
                    r7 = r0 + 268;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1ac6c;
                    return;
                case 0x1ac6c:
                case 0x1ae00:
                    pc=0x1ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ae00() throws ExecutionException { /* 0x1ae00 - 0x1b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ae00:
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ae5c;
                        continue;
                    }
                    r8 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = readPages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff];
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1aeb8;
                        continue;
                    }
                    r3 = r8 + 4;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1ae50;
                    continue;
                case 0x1ae3c:
                    r3 = r3 + 4;
                    r6 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    if(r5 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x1ae80;
                        continue;
                    }
                case 0x1ae50:
                    r2 = r2 + 1;
                    if(r2 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x1ae3c;
                        continue;
                    }
                case 0x1ae5c:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 20728;
                    r6 = r6 + 20712;
                    r7 = r0 + 284;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1ae80;
                    return;
                case 0x1ae80:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ae5c;
                        continue;
                    }
                    r3 = r2 << 2;
                    r5 = r3 + 4;
                case 0x1ae90:
                    r7 = r7 + -1;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r7 - r2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r7;
                    r5 = r8 + r5;
                    r4 = r8 + r3;
                    r6 = r6 << 2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x26000;
                    run_26000(); return;
                case 0x1aeb8:
                    r5 = r0 + 4;
                    r3 = r0 + r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1ae90;
                    continue;
                case 0x1b000:
                    pc=0x1b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b000() throws ExecutionException { /* 0x1b000 - 0x1b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b000:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r6 + r0;
                    r6 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r2 = ((r17 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r16 = r4 + r0;
                    r18 = r5 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b0e8;
                        continue;
                    }
                    r4 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b0dc;
                        continue;
                    }
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1b054;
                    continue;
                case 0x1b050:
                    r2 = r2 << 1;
                case 0x1b054:
                    r3 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b050;
                        continue;
                    }
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b118;
                        continue;
                    }
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                case 0x1b070:
                    r3 = ((r6 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b0a8;
                        continue;
                    }
                    r7 = r6 << 2;
                    r4 = r17 - r6;
                    r3 = r0 + r0;
                case 0x1b088:
                    r2 = r2 + r7;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r3 = r3 + 1;
                    r7 = r7 + 4;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1b088;
                        continue;
                    }
                    r6 = r17 + r0;
                case 0x1b0a8:
                    r3 = r6 + 1;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r2 = r2 + r6;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r18;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b0dc:
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x1b054;
                    continue;
                case 0x1b0e8:
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = r17 << 2;
                    r17 = r2 + r17;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r5;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b118:
                    r4 = r2 << 2;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b128;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1b128:
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b144;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x1b144:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1b150;
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x1b150:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1b070;
                    continue;
                case 0x1b200:
                    pc=0x1b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b200() throws ExecutionException { /* 0x1b200 - 0x1b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b200:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    r3 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    r18 = r5 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b39c;
                        continue;
                    }
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    r5 = r5 << 2;
                    r4 = r3 + r5;
                    r17 = r6 + r0;
                    r5 = r5 + 4;
                    r6 = r2 - r18;
                    r19 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r3 + r5;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r6 = r6 << 2;
                    r18 = ((r18 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    r31=0x1b268;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1b268:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b274;
                        continue;
                    }
                    r17 = r17 + -1;
                case 0x1b274:
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = ((r6 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b378;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b2b4;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b328;
                        continue;
                    }
                    r3 = r2 << 1;
                    r4 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b3c0;
                        continue;
                    }
                case 0x1b2b4:
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                case 0x1b2b8:
                    if(r17 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x1b31c;
                        continue;
                    }
                    r4 = r17 + 1;
                    r4 = r4 << 2;
                    r18 = r4 + -4;
                    r6 = r6 - r17;
                    r4 = r5 + r4;
                    r6 = r6 << 2;
                    r5 = r5 + r18;
                    /* Next insn is delay slot */ 
                    r31=0x1b2e4;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1b2e4:
                    r17 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                case 0x1b2ec:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    r5 = r5 + r18;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r19;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b31c:
                    r18 = r17 << 2;
                    /* Next insn is delay slot */ 
                    pc=0x1b2ec;
                    continue;
                case 0x1b328:
                    r4 = r0 + 16;
                    r3 = r0 + 4;
                case 0x1b330:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1b33c;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1b33c:
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b358;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x1b358:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1b364;
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x1b364:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1b2b8;
                    continue;
                case 0x1b378:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 20692;
                    r6 = r6 + 20712;
                    r7 = r0 + 138;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1b39c;
                    return;
                case 0x1b39c:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 16384;
                    r6 = r6 + 16404;
                    r7 = r0 + 129;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1b3c0;
                    return;
                case 0x1b3c0:
                    r4 = r2 << 3;
                    /* Next insn is delay slot */ 
                    pc=0x1b330;
                    continue;
                case 0x1b400:
                    pc=0x1b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b400() throws ExecutionException { /* 0x1b400 - 0x1b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b400:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r29 = r29 + -56;
                    r3 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r16 = r5 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b598;
                        continue;
                    }
                    r20 = r5 + r6;
                    r3 = ((r2 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    r18 = r6 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b598;
                        continue;
                    }
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r17 = r7 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b598;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b538;
                        continue;
                    }
                    if(r5 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x1b538;
                        continue;
                    }
                    r22 = r6 << 2;
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b484;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1b484:
                    r5 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r23 = r16 << 2;
                    r4 = r2 + r0;
                    r5 = r5 + r23;
                    r6 = r22 + r0;
                    r21 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b4a4;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x1b4a4:
                    r2 = ((r17 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b568;
                        continue;
                    }
                    r20 = ((r17 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b5bc;
                        continue;
                    }
                    r16 = r17 - r16;
                    r6 = r16 - r18;
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r5 = r17 - r6;
                    r5 = r5 << 2;
                    r4 = r2 + r23;
                    r5 = r2 + r5;
                    r6 = r6 << 2;
                    r17 = r17 - r18;
                    /* Next insn is delay slot */ 
                    r31=0x1b4e8;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1b4e8:
                    r20 = r17 << 2;
                case 0x1b4ec:
                    r4 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r5 = r21 + r0;
                    r4 = r4 + r20;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b504;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x1b504:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x1b538:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b568:
                    r5 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r18 = r18 + r17;
                    r20 = r17 << 2;
                    r4 = r18 << 2;
                    r6 = r16 - r17;
                    r4 = r5 + r4;
                    r6 = r6 << 2;
                    r5 = r5 + r20;
                    /* Next insn is delay slot */ 
                    r31=0x1b590;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1b590:
                    /* Next insn is delay slot */ 
                    pc=0x1b4ec;
                    continue;
                case 0x1b598:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 20740;
                    r6 = r6 + 20712;
                    r7 = r0 + 378;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1b5bc;
                    return;
                case 0x1b5bc:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 20808;
                    r6 = r6 + 20712;
                    r7 = r0 + 407;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1b5e0;
                    return;
                case 0x1b5e0:
                case 0x1b600:
                    pc=0x1b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b600() throws ExecutionException { /* 0x1b600 - 0x1b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b600:
                    r29 = r29 + -32;
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r6 + r3;
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b680;
                        continue;
                    }
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                case 0x1b63c:
                    r3 = r3 << 2;
                    r5 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = r4 + r3;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b654;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x1b654:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b680:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r4 = r4 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b690;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1b690:
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b6ac;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x1b6ac:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1b6b8;
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x1b6b8:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r6 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1b63c;
                    continue;
                case 0x1b800:
                    pc=0x1b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b800() throws ExecutionException { /* 0x1b800 - 0x1ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b800:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b83c;
                        continue;
                    }
                    r29 = r29 + -32;
                    r7 = r5 + r0;
                    r5 = r0 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    r6 = r2 + -1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1b834;
                    pc=0x19c00;
                    run_19c00(); return;
                case 0x1b834:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                case 0x1b83c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ba00:
                    pc=0x1ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ba00() throws ExecutionException { /* 0x1ba00 - 0x1bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ba00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ba18;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1ba18:
                    r3 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bac8;
                        continue;
                    }
                    r2 = r2 + -1;
                    r2 = r16 + r2;
                    r3 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1baa4;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 46;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1bab4;
                        continue;
                    }
                    r4 = r0 + 92;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1bac8;
                        continue;
                    }
                    r4 = r0 + 47;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1bac8;
                        continue;
                    }
                    r4 = r0 + 46;
                    r5 = r0 + 92;
                    r6 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x1ba94;
                    continue;
                case 0x1ba74:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1bab4;
                        continue;
                    }
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1bac8;
                        continue;
                    }
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x1bac8;
                        continue;
                    }
                case 0x1ba94:
                    r2 = r2 + -1;
                    r3 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ba74;
                        continue;
                    }
                case 0x1baa4:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 46;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1bac8;
                        continue;
                    }
                case 0x1bab4:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1bac8:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1bc00:
                    pc=0x1bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1bc00() throws ExecutionException { /* 0x1bc00 - 0x1be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1bc00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bc18;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1bc18:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc7c;
                        continue;
                    }
                    r3 = r16 + r2;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 92;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc7c;
                        continue;
                    }
                    r4 = r0 + 47;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc7c;
                        continue;
                    }
                    r4 = r0 + 92;
                    r5 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x1bc6c;
                    continue;
                case 0x1bc50:
                    r3 = r16 + r2;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc7c;
                        continue;
                    }
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc7c;
                        continue;
                    }
                case 0x1bc6c:
                    r2 = r2 + -1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc50;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x1bc7c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r16 + r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1be00:
                    pc=0x1be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1be00() throws ExecutionException { /* 0x1be00 - 0x1c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1be00:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r16 = r4 + r0;
                    r18 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1be28;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1be28:
                    r17 = r2 + r0;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf34;
                        continue;
                    }
                    r6 = r17 + -1;
                    r6 = r16 + r6;
                    r2 = ((r6 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1beb8;
                        continue;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 46;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1bec8;
                        continue;
                    }
                    r2 = r0 + 92;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf34;
                        continue;
                    }
                    r2 = r0 + 47;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf34;
                        continue;
                    }
                    r7 = r0 + 46;
                    r8 = r0 + 92;
                    r9 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x1bea8;
                    continue;
                case 0x1be88:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x1bec8;
                        continue;
                    }
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf34;
                        continue;
                    }
                    if(r3 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf34;
                        continue;
                    }
                case 0x1bea8:
                    r6 = r6 + -1;
                    r3 = ((r6 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1be88;
                        continue;
                    }
                case 0x1beb8:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 46;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf34;
                        continue;
                    }
                case 0x1bec8:
                    r4 = r18 + r0;
                    r19 = r6 - r16;
                    /* Next insn is delay slot */ 
                    r31=0x1bed8;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1bed8:
                    r2 = r2 + 1;
                    r4 = r2 + r19;
                    /* Next insn is delay slot */ 
                    r31=0x1bee8;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1bee8:
                    r17 = r2 + r0;
                    r5 = r16 + r0;
                    r6 = r19 + r0;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bf00;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x1bf00:
                    r4 = r17 + r19;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bf10;
                    pc=0x29400;
                    run_29400(); return;
                case 0x1bf10:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1bf34:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bf40;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1bf40:
                    r4 = r17 + 1;
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    r31=0x1bf50;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1bf50:
                    r4 = r2 + r0;
                    r5 = r16 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bf64;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1bf64:
                    r4 = r2 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bf74;
                    pc=0x29400;
                    run_29400(); return;
                case 0x1bf74:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c000:
                    pc=0x1c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c000() throws ExecutionException { /* 0x1c000 - 0x1c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c000:
                    addr=r28+-32448;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r29 = r29 + -32;
                    r5 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c02c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c02c:
                    r2 = r29 + 44;
                    r5 = r6 + r0;
                    r6 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1c044;
                    pc=0x2e800;
                    run_2e800(); return;
                case 0x1c044:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c200:
                    pc=0x1c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c200() throws ExecutionException { /* 0x1c200 - 0x1c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c200:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r2 = r0 + 95;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c234;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1c22c;
                    pc=0x17200;
                    run_17200(); return;
                case 0x1c22c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c27c;
                        continue;
                    }
                case 0x1c234:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c240;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1c240:
                    r2 = (r2&0xffffffffL) < (81&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c27c;
                        continue;
                    }
                    r17 = r0 + 95;
                case 0x1c250:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c298;
                        continue;
                    }
                    if(r4 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x1c250;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1c274;
                    pc=0x17400;
                    run_17400(); return;
                case 0x1c274:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c250;
                        continue;
                    }
                case 0x1c27c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c298:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c400:
                    pc=0x1c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c400() throws ExecutionException { /* 0x1c400 - 0x1c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c400:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r18 = r5 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c42c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1c42c:
                    r3 = ((r2 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c46c;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    r6 = r2 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x1c44c;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x1c44c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c46c:
                    r18 = r18 + -1;
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    r18 = r16 + r18;
                    /* Next insn is delay slot */ 
                    r31=0x1c488;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x1c488:
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c600:
                    pc=0x1c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c600() throws ExecutionException { /* 0x1c600 - 0x1c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c600:
                    r8 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x1c64c;
                    continue;
                case 0x1c610:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r2 = r3 + r0;
                    r9 = r8 + r6;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 3;
                    if(r9 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x1c68c;
                        continue;
                    }
                case 0x1c630:
                    r2 = r2 - r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c69c;
                        continue;
                    }
                case 0x1c63c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c69c;
                        continue;
                    }
                    r4 = r4 + 1;
                    r5 = r5 + 1;
                case 0x1c64c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r8 + r3;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 3;
                    if(r2 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x1c610;
                        continue;
                    }
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r2 = r3 + -32;
                    r9 = r8 + r6;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 3;
                    if(r9 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x1c630;
                        continue;
                    }
                case 0x1c68c:
                    r6 = r6 + -32;
                    r2 = r2 - r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c63c;
                        continue;
                    }
                case 0x1c69c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c800:
                    pc=0x1c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c800() throws ExecutionException { /* 0x1c800 - 0x1ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c800:
                    r29 = r29 + -32;
                    r2 = r0 + 15;
                    r6 = 5 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = 5 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r16 + 32500;
                    r5 = r0 + 60;
                    r6 = r6 + 20836;
                    r7 = r0 + 2;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1c834;
                    pc=0x1ec00;
                    run_1ec00(); return;
                case 0x1c834:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + 32500;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ca00:
                    pc=0x1ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ca00() throws ExecutionException { /* 0x1ca00 - 0x1cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ca00:
                    r2 = r0 + 752;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1cc00:
                    pc=0x1cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1cc00() throws ExecutionException { /* 0x1cc00 - 0x1ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1cc00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc3c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1cc20;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x1cc20:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc54;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1cc3c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1cc54:
                    r4 = 5 << 16;
                    r4 = r4 + 20844;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1cc68;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x1cc68:
                case 0x1ce00:
                    pc=0x1ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ce00() throws ExecutionException { /* 0x1ce00 - 0x1d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ce00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ce18;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x1ce18:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ce34;
                        continue;
                    }
                case 0x1ce20:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ce34:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ce20;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + 20888;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ce50;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x1ce50:
                case 0x1d000:
                    pc=0x1d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d000() throws ExecutionException { /* 0x1d000 - 0x1d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d000:
                    /* Next insn is delay slot */ 
                    pc=0x25000;
                    run_25000(); return;
                case 0x1d200:
                    pc=0x1d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d200() throws ExecutionException { /* 0x1d200 - 0x1d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d200:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d28c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1d224;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1d224:
                    r16 = r2 + 1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d268;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d23c;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x1d23c:
                    r4 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d2a8;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x1d268:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x1d28c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d2a8:
                    r4 = 5 << 16;
                    r4 = r4 + 20844;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d2bc;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x1d2bc:
                case 0x1d400:
                    pc=0x1d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d400() throws ExecutionException { /* 0x1d400 - 0x1d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d400:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d458;
                        continue;
                    }
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d42c;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x1d42c:
                    r4 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d47c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x1d458:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x1d47c:
                    r4 = 5 << 16;
                    r4 = r4 + 20844;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d490;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x1d490:
                case 0x1d600:
                    pc=0x1d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d600() throws ExecutionException { /* 0x1d600 - 0x1d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d600:
                    r29 = r29 + -64;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r4+276)>>>12][((r4+276)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r2 = r4 & 256;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r23;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r22;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r17 = r6 + r0;
                    r18 = r7 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d984;
                        run_1d800(); return;
                    }
                    r23 = 5 << 16;
                    r23 = r23 + 20944;
                case 0x1d64c:
                    r2 = r4 & 128;
                    writePages[(r16+284)>>>12][((r16+284)>>>2)&0x3ff] = r23;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d688;
                        continue;
                    }
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d688;
                        continue;
                    }
                    r18 = r0 - r18;
                    r2 = ((r0 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r17 = r0 - r17;
                    r17 = r17 - r2;
                    r2 = r0 + 45;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x1d6ac;
                    continue;
                case 0x1d688:
                    r2 = r4 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d994;
                        run_1d800(); return;
                    }
                    r2 = r4 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1daac;
                        run_1da00(); return;
                    }
                    r2 = r0 + 32;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r0 + 1;
                case 0x1d6ac:
                    r2 = r17 | r18;
                    r22 = r16 + 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1db1c;
                        run_1da00(); return;
                    }
                    r20 = readPages[(r16+280)>>>12][((r16+280)>>>2)&0x3ff];
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1d6d0;
                    continue;
                case 0x1d6cc:
                    r23 = readPages[(r16+284)>>>12][((r16+284)>>>2)&0x3ff];
                case 0x1d6d0:
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    r7 = r20 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d6e8;
                    pc=0x1083c;
                    run_10800(); return;
                case 0x1d6e8:
                    r23 = r23 + r3;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r19 = r19 + 1;
                    addr=r19+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = readPages[(r16+280)>>>12][((r16+280)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    r6 = r0 + r0;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d714;
                    pc=0x10208;
                    run_10200(); return;
                case 0x1d714:
                    r17 = r2 + r0;
                    r2 = r3 | r2;
                    r18 = r3 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d6cc;
                        continue;
                    }
                    r4 = readPages[(r16+276)>>>12][((r16+276)>>>2)&0x3ff];
                    r19 = r19 - r22;
                case 0x1d730:
                    r2 = r4 & 64;
                    writePages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff] = r19;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1da90;
                        run_1da00(); return;
                    }
                    r3 = readPages[(r16+292)>>>12][((r16+292)>>>2)&0x3ff];
                case 0x1d744:
                    r2 = r4 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d76c;
                        continue;
                    }
                    r2 = readPages[(r16+280)>>>12][((r16+280)>>>2)&0x3ff];
                    r5 = r0 + 16;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1dab8;
                        run_1da00(); return;
                    }
                    r5 = r0 + 8;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1daf4;
                        run_1da00(); return;
                    }
                case 0x1d76c:
                    r2 = r19 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1da84;
                        run_1da00(); return;
                    }
                    r3 = r0 + r0;
                case 0x1d77c:
                    r2 = r4 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d9f8;
                        run_1d800(); return;
                    }
                    r7 = r3 + r21;
                    r19 = r7 + r19;
                    r7 = readPages[(r16+288)>>>12][((r16+288)>>>2)&0x3ff];
                    r2 = r19 < r7 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d9f8;
                        run_1d800(); return;
                    }
                    r4 = r4 & 17;
                    r7 = r7 - r19;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d9a8;
                        run_1d800(); return;
                    }
                case 0x1d7b4:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d870;
                        run_1d800(); return;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d7f0;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1d7f0:
                    r2 = (r21&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d870;
                        run_1d800(); return;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1d800:
                    pc=0x1d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d800() throws ExecutionException { /* 0x1d800 - 0x1da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d800:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r29+17;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d830;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1d830:
                    r21 = (r21&0xffffffffL) < (3&0xffffffffL) ? 1 : 0;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d870;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r29+18;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d870;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1d870:
                    r2 = readPages[(r16+276)>>>12][((r16+276)>>>2)&0x3ff];
                    r2 = r2 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d8d8;
                        continue;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d8d4;
                        continue;
                    }
                    r2 = r7 + -1;
                    r6 = r0 + -1;
                    r7 = r0 + 48;
                case 0x1d898:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d8c8;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1d8c8:
                    r2 = r2 + -1;
                    if(r2 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x1d898;
                        continue;
                    }
                case 0x1d8d4:
                    r7 = r0 + r0;
                case 0x1d8d8:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d928;
                        continue;
                    }
                    r3 = r3 + -1;
                    r8 = r0 + 48;
                    r6 = r0 + -1;
                case 0x1d8ec:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d91c;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1d91c:
                    r3 = r3 + -1;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x1d8ec;
                        continue;
                    }
                case 0x1d928:
                    r2 = readPages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff];
                case 0x1d930:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1da04;
                        run_1da00(); return;
                    }
                    r2 = r2 + -1;
                    r3 = r16 + r2;
                    writePages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff] = r2;
                    addr=r3+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d930;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1d930;
                    continue;
                case 0x1d984:
                    r23 = 5 << 16;
                    r23 = r23 + 20964;
                    /* Next insn is delay slot */ 
                    pc=0x1d64c;
                    run_1d600(); return;
                case 0x1d994:
                    r2 = r0 + 43;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x1d6ac;
                    run_1d600(); return;
                case 0x1d9a8:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d9f8;
                        continue;
                    }
                    r2 = r7 + -1;
                    r6 = r0 + -1;
                    r7 = r0 + 32;
                case 0x1d9bc:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d9ec;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1d9ec:
                    r2 = r2 + -1;
                    if(r2 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x1d9bc;
                        continue;
                    }
                case 0x1d9f8:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1d7b4;
                    run_1d600(); return;
                case 0x1da00:
                    pc=0x1da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1da00() throws ExecutionException { /* 0x1da00 - 0x1dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1da00:
                case 0x1da04:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1da54;
                        continue;
                    }
                    r2 = r7 + -1;
                    r6 = r0 + 32;
                    r5 = r0 + -1;
                case 0x1da18:
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1da48;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1da48:
                    r2 = r2 + -1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1da18;
                        continue;
                    }
                case 0x1da54:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r23 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r22 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1da84:
                    r3 = r3 - r19;
                    /* Next insn is delay slot */ 
                    pc=0x1d77c;
                    run_1d600(); return;
                case 0x1da90:
                    r4 = r4 | 64;
                    r2 = r0 + 1;
                    writePages[(r16+276)>>>12][((r16+276)>>>2)&0x3ff] = r4;
                    writePages[(r16+292)>>>12][((r16+292)>>>2)&0x3ff] = r2;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x1d744;
                    run_1d600(); return;
                case 0x1daac:
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1d6ac;
                    run_1d600(); return;
                case 0x1dab8:
                    r6 = r29 + 16;
                    r5 = r6 + r21;
                    r6 = r0 + 48;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r4 & 256;
                    r2 = r21 + 1;
                    r21 = r21 + 2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1db28;
                        continue;
                    }
                    r5 = r0 + 88;
                case 0x1dae0:
                    r6 = r29 + 16;
                    r2 = r6 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1d76c;
                    run_1d600(); return;
                case 0x1daf4:
                    r2 = r19 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1da84;
                        continue;
                    }
                    r2 = r29 + r21;
                    r3 = r0 + 48;
                    addr=r2+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r21 + 1;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1d77c;
                    run_1d600(); return;
                case 0x1db1c:
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1d730;
                    run_1d600(); return;
                case 0x1db28:
                    r5 = r0 + 120;
                    /* Next insn is delay slot */ 
                    pc=0x1dae0;
                    continue;
                case 0x1dc00:
                    pc=0x1dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1dc00() throws ExecutionException { /* 0x1dc00 - 0x1de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1dc00:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = readPages[(r4+276)>>>12][((r4+276)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r2 = r19 & 64;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    r17 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dd94;
                        continue;
                    }
                    r18 = readPages[(r4+292)>>>12][((r4+292)>>>2)&0x3ff];
                    r4 = r5 + r0;
                    r6 = r18 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1dc48;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x1dc48:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dc54;
                        continue;
                    }
                    r18 = r2 - r17;
                case 0x1dc54:
                    r2 = r19 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dcd4;
                        continue;
                    }
                    r2 = readPages[(r16+288)>>>12][((r16+288)>>>2)&0x3ff];
                    r3 = r18 < r2 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dcd4;
                        continue;
                    }
                    r19 = r19 & 1;
                    r2 = r2 - r18;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dcd8;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dcd4;
                        continue;
                    }
                    r3 = r2 + -1;
                    r6 = r0 + 32;
                    r2 = r0 + -1;
                case 0x1dc98:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dcc8;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1dcc8:
                    r3 = r3 + -1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1dc98;
                        continue;
                    }
                case 0x1dcd4:
                    r2 = r0 + r0;
                case 0x1dcd8:
                    r6 = r17 + r18;
                case 0x1dcdc:
                    if(r17 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x1dd24;
                        continue;
                    }
                case 0x1dce4:
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r17 = r17 + 1;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dcdc;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r17 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x1dce4;
                        continue;
                    }
                case 0x1dd24:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dd74;
                        continue;
                    }
                    r2 = r2 + -1;
                    r6 = r0 + 32;
                    r5 = r0 + -1;
                case 0x1dd38:
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dd68;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1dd68:
                    r2 = r2 + -1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1dd38;
                        continue;
                    }
                case 0x1dd74:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1dd94:
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1dda0;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1dda0:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1dc54;
                    continue;
                case 0x1de00:
                    pc=0x1de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1de00() throws ExecutionException { /* 0x1de00 - 0x1e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1de00:
                    r2 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ded8;
                        continue;
                    }
                    r2 = 5 << 16;
                    r2 = r2 + 21228;
                    r5 = r5 << 2;
                    r5 = r2 + r5;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x1de2c:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1de4c:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1de6c:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r0 + -8;
                    r3 = r3 + 7;
                    r3 = r3 & r2;
                    r2 = r3 + 8;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1de94:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 >> 31;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1deb8:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    addr=r2+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ded8:
                    r29 = r29 + -24;
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 20984;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r6 = r6 + 21016;
                    r7 = r0 + 179;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1df04;
                    return;
                case 0x1df04:
                case 0x1e000:
                    pc=0x1e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e000() throws ExecutionException { /* 0x1e000 - 0x1e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e000:
                    r29 = r29 + -360;
                    writePages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff] = r22;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r21;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r20;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r19;
                    writePages[(r29+332)>>>12][((r29+332)>>>2)&0x3ff] = r18;
                    writePages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff] = r17;
                    writePages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff] = r31;
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r23;
                    writePages[(r29+324)>>>12][((r29+324)>>>2)&0x3ff] = r16;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r22 = 5 << 16;
                    r18 = 5 << 16;
                    r19 = 5 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r5;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r0;
                    r20 = r0 + r0;
                    r22 = r22 + 21256;
                    r18 = r18 + 21512;
                    r21 = 5 << 16;
                    r19 = r19 + 21324;
                    r17 = r6 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e0b8;
                        continue;
                    }
                case 0x1e068:
                    r2 = r0 + 37;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1e118;
                        continue;
                    }
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e0a4;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1e0a4:
                    r6 = r17 + r0;
                case 0x1e0a8:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r17 = r6 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e068;
                        continue;
                    }
                case 0x1e0b8:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e0e4;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x1e0e4:
                    r31 = readPages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff];
                    r23 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                    r22 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    r21 = readPages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff];
                    r20 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r19 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    r18 = readPages[(r29+332)>>>12][((r29+332)>>>2)&0x3ff];
                    r17 = readPages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff];
                    r16 = readPages[(r29+324)>>>12][((r29+324)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    r29 = r29 + 360;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e118:
                    addr=r6+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e4c4;
                        run_1e400(); return;
                    }
                    r2 = r6 + 3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r17 = r2 + -1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e184;
                        continue;
                    }
                case 0x1e140:
                    r3 = r16 + -32;
                    r3 = r3 & 255;
                    r4 = (r3&0xffffffffL) < (17&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e2e4;
                        run_1e200(); return;
                    }
                    r3 = r3 << 2;
                    r3 = r22 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x1e16c:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 16;
                    r2 = r2 + 1;
                case 0x1e178:
                    r17 = r2 + -1;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e140;
                        continue;
                    }
                case 0x1e184:
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r5;
                    r23 = r0 + r0;
                case 0x1e18c:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e198;
                    pc=0x17c00;
                    run_17c00(); return;
                case 0x1e198:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e500;
                        run_1e400(); return;
                    }
                    r3 = r0 + 46;
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    if(r16 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e338;
                        run_1e200(); return;
                    }
                case 0x1e1b0:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r3 = r2 | 64;
                    r4 = r0 + 42;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r3;
                    if(r16 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1e718;
                        run_1e600(); return;
                    }
                    r4 = r16 + r0;
                    r23 = r17 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x1e1d8;
                    pc=0x17c00;
                    run_17c00(); return;
                case 0x1e1d8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e6d4;
                        run_1e600(); return;
                    }
                    r16 = r16 + -48;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x1e20c;
                    run_1e200(); return;
                case 0x1e1f0:
                    r2 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    r16 = r16 + -48;
                    r3 = r2 << 1;
                    r2 = r2 << 3;
                case 0x1e200:
                    pc=0x1e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e200() throws ExecutionException { /* 0x1e200 - 0x1e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e200:
                    r2 = r3 + r2;
                    r16 = r2 + r16;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r16;
                case 0x1e20c:
                    r23 = r23 + 1;
                    addr=r23+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e224;
                    pc=0x17c00;
                    run_17c00(); return;
                case 0x1e224:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e1f0;
                        run_1e000(); return;
                    }
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r17 = r23 + r0;
                case 0x1e234:
                    r3 = r0 + 2;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = r16 + -76;
                    r3 = r3 & 255;
                    r4 = (r3&0xffffffffL) < (47&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e354;
                        continue;
                    }
                case 0x1e250:
                    r4 = r2 & 6;
                    r3 = r0 + 6;
                    r5 = r0 + 2;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e390;
                        continue;
                    }
                case 0x1e264:
                    r3 = r0 + -5;
                    r2 = r2 & r3;
                    r4 = r2 & 17;
                    r3 = r0 + 17;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e3a0;
                        continue;
                    }
                case 0x1e280:
                    r3 = r0 + -17;
                    r2 = r2 & r3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1e3a0;
                    continue;
                case 0x1e294:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 1;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x1e178;
                    run_1e000(); return;
                case 0x1e2a8:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 2;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x1e178;
                    run_1e000(); return;
                case 0x1e2bc:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 8;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x1e178;
                    run_1e000(); return;
                case 0x1e2d0:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 4;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x1e178;
                    run_1e000(); return;
                case 0x1e2e4:
                    r2 = r0 + 42;
                    r3 = r17 + r0;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r5;
                    r23 = r16 + r0;
                    if(r16 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1e18c;
                        run_1e000(); return;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e74c;
                        run_1e600(); return;
                    }
                case 0x1e31c:
                    r2 = r5 | 32;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r17 = r17 + 1;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                case 0x1e32c:
                    r3 = r0 + 46;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e1b0;
                        run_1e000(); return;
                    }
                case 0x1e338:
                    r3 = r0 + 2;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = r16 + -76;
                    r3 = r3 & 255;
                    r4 = (r3&0xffffffffL) < (47&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e250;
                        continue;
                    }
                case 0x1e354:
                    r3 = r3 << 2;
                    r3 = r19 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x1e36c:
                    r3 = r0 + 5;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 5;
                case 0x1e380:
                    r4 = r2 & 6;
                    r3 = r0 + 6;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e264;
                        continue;
                    }
                case 0x1e390:
                    r4 = r2 & 17;
                    r3 = r0 + 17;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e280;
                        continue;
                    }
                case 0x1e3a0:
                    r3 = r2 & 64;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e3b8;
                        continue;
                    }
                    r3 = r0 + -17;
                    r2 = r2 & r3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                case 0x1e3b8:
                    r16 = r16 + -88;
                    r16 = r16 & 255;
                    r3 = (r16&0xffffffffL) < (33&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e6f4;
                        run_1e600(); return;
                    }
                    r16 = r16 << 2;
                    r16 = r18 + r16;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x1e3e4:
                    r3 = r0 + 6;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x1e380;
                    continue;
                case 0x1e400:
                    pc=0x1e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e400() throws ExecutionException { /* 0x1e400 - 0x1e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e400:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r3 = r0 + 108;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e7b8;
                        run_1e600(); return;
                    }
                    r3 = r0 + 3;
                    r17 = r17 + 1;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x1e380;
                    run_1e200(); return;
                case 0x1e428:
                    r3 = r0 + 4;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x1e380;
                    run_1e200(); return;
                case 0x1e444:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r3 = r0 + 104;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e7d4;
                        run_1e600(); return;
                    }
                    r3 = r0 + 1;
                    r17 = r17 + 1;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x1e380;
                    run_1e200(); return;
                case 0x1e46c:
                    r3 = r0 + 7;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x1e380;
                    run_1e200(); return;
                case 0x1e488:
                    r2 = r2 | 384;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                case 0x1e490:
                    r2 = r0 + 16;
                case 0x1e494:
                    r4 = r29 + 16;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1e4a4;
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x1e4a4:
                    r6 = r2 + r0;
                    r4 = r29 + 16;
                    r7 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e4b8;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x1e4b8:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1e0a8;
                    run_1e000(); return;
                case 0x1e4c4:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r6 + 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e0a4;
                        run_1e000(); return;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r17 + r0;
                    r3 = r2 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1e0a8;
                    run_1e000(); return;
                case 0x1e500:
                    r23 = r23 + -48;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r23;
                    /* Next insn is delay slot */ 
                    pc=0x1e52c;
                    continue;
                case 0x1e510:
                    r2 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r16 = r16 + -48;
                    r3 = r2 << 1;
                    r2 = r2 << 3;
                    r2 = r3 + r2;
                    r16 = r2 + r16;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r16;
                case 0x1e52c:
                    r17 = r17 + 1;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e544;
                    pc=0x17c00;
                    run_17c00(); return;
                case 0x1e544:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e510;
                        continue;
                    }
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r2 = r2 | 32;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1e32c;
                    run_1e200(); return;
                case 0x1e564:
                    r20 = r0 + 1;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1e0a8;
                    run_1e000(); return;
                case 0x1e574:
                    r2 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e794;
                        run_1e600(); return;
                    }
                    r2 = 5 << 16;
                    r5 = r5 << 2;
                    r2 = r2 + 21644;
                    r2 = r2 + r5;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x1e5a0:
                    r2 = r0 + 10;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r2;
                    r2 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ea1c;
                        run_1ea00(); return;
                    }
                    r5 = r5 << 2;
                    r2 = r21 + 21672;
                    r2 = r2 + r5;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x1e5d0:
                    r2 = r2 | 128;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x1e494;
                    continue;
                case 0x1e5e4:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ea40;
                        run_1ea00(); return;
                    }
                case 0x1e600:
                    pc=0x1e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e600() throws ExecutionException { /* 0x1e600 - 0x1e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e600:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1e610;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x1e610:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1e0a8;
                    run_1e000(); return;
                case 0x1e61c:
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e9d8;
                        run_1e800(); return;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r3 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ea64;
                        run_1ea00(); return;
                    }
                    r4 = r2 & 64;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e820;
                        run_1e800(); return;
                    }
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    r4 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e66c;
                        continue;
                    }
                case 0x1e668:
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r2;
                case 0x1e66c:
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1e67c;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x1e67c:
                    r20 = r0 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1e0a8;
                    run_1e000(); return;
                case 0x1e68c:
                    r2 = r2 | 128;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x1e494;
                    run_1e400(); return;
                case 0x1e6a0:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    r3 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r29 + 316;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    addr=r29+316;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+317;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x1e6c8;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x1e6c8:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1e0a8;
                    run_1e000(); return;
                case 0x1e6d4:
                    r2 = r0 + 45;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1e834;
                        run_1e800(); return;
                    }
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1e234;
                    run_1e200(); return;
                case 0x1e6f4:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 21144;
                    r6 = r6 + 21016;
                    r7 = r0 + 616;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1e718;
                    return;
                case 0x1e718:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r4 + 4;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r4;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e9c4;
                        run_1e800(); return;
                    }
                    r2 = r3 + r0;
                case 0x1e73c:
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r17 = r17 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x1e338;
                    run_1e200(); return;
                case 0x1e74c:
                    r2 = r0 - r2;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r2;
                    r5 = r5 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x1e31c;
                    run_1e200(); return;
                case 0x1e760:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x1e768:
                    r2 = r4 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                case 0x1e77c:
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x1e794:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 21088;
                    r6 = r6 + 21016;
                    r7 = r0 + 362;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1e7b8;
                    return;
                case 0x1e7b8:
                    r3 = r0 + 3;
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 2;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x1e380;
                    run_1e200(); return;
                case 0x1e7d4:
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r0;
                    r17 = r17 + 2;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1e380;
                    run_1e200(); return;
                case 0x1e7ec:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                case 0x1e800:
                    pc=0x1e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e800() throws ExecutionException { /* 0x1e800 - 0x1ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e800:
                    r6 = r7 >> 31;
                case 0x1e808:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1e814;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x1e814:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1e0a8;
                    run_1e000(); return;
                case 0x1e820:
                    r2 = r2 | 64;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1e668;
                    run_1e600(); return;
                case 0x1e834:
                    r17 = r17 + 2;
                case 0x1e838:
                    r17 = r17 + 1;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e850;
                    pc=0x17c00;
                    run_17c00(); return;
                case 0x1e850:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e838;
                        continue;
                    }
                    r3 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r2 = r0 + -65;
                    r2 = r3 & r2;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1e338;
                    run_1e200(); return;
                case 0x1e870:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x1e878:
                    r4 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x1e768;
                    run_1e600(); return;
                case 0x1e898:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1e77c;
                    run_1e600(); return;
                case 0x1e8a4:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x1e8ac:
                    r2 = r4 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x1e878;
                    continue;
                case 0x1e8cc:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x1e8d4:
                    r4 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x1e8ac;
                    continue;
                case 0x1e8f4:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x1e8fc:
                    r2 = r3 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x1e8d4;
                    continue;
                case 0x1e91c:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x1e8fc;
                    continue;
                case 0x1e940:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -8;
                    r3 = r3 + 7;
                    r2 = r3 & r2;
                    r3 = r2 + 8;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1e808;
                    continue;
                case 0x1e968:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1e808;
                    continue;
                case 0x1e984:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r7 = tmp;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r6 = r7 >> 31;
                    /* Next insn is delay slot */ 
                    pc=0x1e808;
                    continue;
                case 0x1e9a4:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r2+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r6 = r7 >> 31;
                    /* Next insn is delay slot */ 
                    pc=0x1e808;
                    continue;
                case 0x1e9c4:
                    r3 = r0 + -65;
                    r2 = r2 & r3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1e73c;
                    run_1e600(); return;
                case 0x1e9d8:
                    r2 = r2 | 192;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = r0 + 8;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r2;
                    r2 = r0 + 16;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                case 0x1ea00:
                    pc=0x1ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ea00() throws ExecutionException { /* 0x1ea00 - 0x1ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ea00:
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1ea10;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x1ea10:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1e0a8;
                    run_1e000(); return;
                case 0x1ea1c:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 21036;
                    r6 = r6 + 21016;
                    r7 = r0 + 160;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1ea40;
                    return;
                case 0x1ea40:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 21068;
                    r6 = r6 + 21016;
                    r7 = r0 + 571;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1ea64;
                    return;
                case 0x1ea64:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 21080;
                    r6 = r6 + 21016;
                    r7 = r0 + 580;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1ea88;
                    return;
                case 0x1ea88:
                case 0x1ec00:
                    pc=0x1ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ec00() throws ExecutionException { /* 0x1ec00 - 0x1ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ec00:
                    r29 = r29 + -32;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r7 = r29 + 44;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x1ec1c;
                    pc=0x1e000;
                    run_1e000(); return;
                case 0x1ec1c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ee00:
                    pc=0x1ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ee00() throws ExecutionException { /* 0x1ee00 - 0x1f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ee00:
                    r29 = r29 + -32;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r7 = r29 + 44;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x1ee24;
                    pc=0x1e000;
                    run_1e000(); return;
                case 0x1ee24:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ee50;
                        continue;
                    }
                    r3 = r2 + 1;
                    r16 = ((r3 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ee50;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ee50:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 21184;
                    r6 = r6 + 21016;
                    r7 = r0 + 676;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1ee74;
                    return;
                case 0x1ee74:
                case 0x1f000:
                    pc=0x1f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f000() throws ExecutionException { /* 0x1f000 - 0x1f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f018;
                    pc=0x1e000;
                    run_1e000(); return;
                case 0x1f018:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f044;
                        continue;
                    }
                    r3 = r2 + 1;
                    r16 = ((r3 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f044;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f044:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 21184;
                    r6 = r6 + 21016;
                    r7 = r0 + 676;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1f068;
                    return;
                case 0x1f068:
                case 0x1f200:
                    pc=0x1f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f200() throws ExecutionException { /* 0x1f200 - 0x1f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f200:
                    r29 = r29 + -32;
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r6 = readPages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r5 = 5 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + 21700;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1f238;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x1f238:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r29 + 36;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x1f254;
                    pc=0x2e800;
                    run_2e800(); return;
                case 0x1f254:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1f268;
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x1f268:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x1f274;
                    pc=0x1f800;
                    run_1f800(); return;
                case 0x1f274:
                case 0x1f400:
                    pc=0x1f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f400() throws ExecutionException { /* 0x1f400 - 0x1f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f400:
                    r5 = r4 + r0;
                    r6 = r0 + r0;
                    r4 = r0 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3d200;
                    run_3d200(); return;
                case 0x1f600:
                    pc=0x1f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f600() throws ExecutionException { /* 0x1f600 - 0x1f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f600:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f800:
                    pc=0x1f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f800() throws ExecutionException { /* 0x1f800 - 0x1fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f800:
                    r29 = r29 + -24;
                    r5 = r0 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f81c;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x1f81c:
                    r4 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    r2 = readPages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f83c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1f83c;
                    return;
                case 0x1f83c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f848;
                    pc=0x2f000;
                    run_2f000(); return;
                case 0x1f848:
                case 0x1fa00:
                    pc=0x1fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fa00() throws ExecutionException { /* 0x1fa00 - 0x1fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fa00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fa4c;
                        continue;
                    }
                    r17 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fa3c;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fb38;
                        continue;
                    }
                case 0x1fa3c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fa6c;
                        continue;
                    }
                case 0x1fa4c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fa6c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1fa7c;
                    pc=0x20200;
                    run_20200(); return;
                case 0x1fa7c:
                    r3 = readPages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff];
                    r18 = r2 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1faa4;
                        continue;
                    }
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x1fa9c;
                    return;
                case 0x1fa9c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fb48;
                        continue;
                    }
                case 0x1faa4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fb54;
                        continue;
                    }
                case 0x1fab8:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fae4;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1fae0;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1fae0;
                    pc=0x23800;
                    run_23800(); return;
                case 0x1fae0:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x1fae4:
                    r5 = readPages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fb04;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1fb00;
                    pc=0x23800;
                    run_23800(); return;
                case 0x1fb00:
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                case 0x1fb04:
                    /* Next insn is delay slot */ 
                    r31=0x1fb0c;
                    pc=0x21800;
                    run_21800(); return;
                case 0x1fb0c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x1fb18;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x1fb18:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fb38:
                    /* Next insn is delay slot */ 
                    r31=0x1fb40;
                    pc=0x21400;
                    run_21400(); return;
                case 0x1fb40:
                    /* Next insn is delay slot */ 
                    pc=0x1fa3c;
                    continue;
                case 0x1fb48:
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x1faa4;
                    continue;
                case 0x1fb54:
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1fb64;
                    pc=0x23800;
                    run_23800(); return;
                case 0x1fb64:
                    /* Next insn is delay slot */ 
                    pc=0x1fab8;
                    continue;
                case 0x1fc00:
                    pc=0x1fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fc00() throws ExecutionException { /* 0x1fc00 - 0x1fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fc00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1fa00;
                    run_1fa00(); return;
                case 0x1fe00:
                    pc=0x1fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fe00() throws ExecutionException { /* 0x1fe00 - 0x20000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fe00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -40;
                    r3 = r2 & 8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    r17 = r5 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ff40;
                        continue;
                    }
                    r3 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 | 2048;
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fff4;
                        continue;
                    }
                case 0x1fe44:
                    r3 = readPages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ff1c;
                        continue;
                    }
                    r2 = r2 & 65535;
                    r4 = r2 & 4096;
                    r16 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2000c;
                        run_20000(); return;
                    }
                    r6 = readPages[(r17+80)>>>12][((r17+80)>>>2)&0x3ff];
                case 0x1fe70:
                    r2 = r2 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fea4;
                        continue;
                    }
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r6 = r6 - r2;
                    r2 = readPages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fea4;
                        continue;
                    }
                    r2 = readPages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff];
                    r6 = r6 - r2;
                case 0x1fea4:
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x1feb8;
                    return;
                case 0x1feb8:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x20044;
                        run_20000(); return;
                    }
                case 0x1fec4:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r4 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r3 = r3 & 63487;
                    r3 = r3 << 16;
                    r3 = r3 >> 16;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 & 4096;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r0;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x200c8;
                        run_20000(); return;
                    }
                case 0x1fef0:
                    r5 = readPages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r16;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ff1c;
                        continue;
                    }
                    r2 = r17 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ff18;
                        continue;
                    }
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ff18;
                    pc=0x23800;
                    run_23800(); return;
                case 0x1ff18:
                    writePages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff] = r0;
                case 0x1ff1c:
                    r2 = r0 + r0;
                case 0x1ff20:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ff40:
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ff1c;
                        continue;
                    }
                    r16 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r2 & 3;
                    r16 = r16 - r18;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r18;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffe8;
                        continue;
                    }
                    r2 = readPages[(r5+20)>>>12][((r5+20)>>>2)&0x3ff];
                case 0x1ff70:
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    if(r16 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ff94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1ff1c;
                    continue;
                case 0x1ff84:
                    r16 = r16 - r2;
                    r18 = r18 + r2;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ff1c;
                        continue;
                    }
                case 0x1ff94:
                    r2 = readPages[(r17+36)>>>12][((r17+36)>>>2)&0x3ff];
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r6 = r18 + r0;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1ffb0;
                    return;
                case 0x1ffb0:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ff84;
                        continue;
                    }
                case 0x1ffb8:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 | 64;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ffe8:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1ff70;
                    continue;
                case 0x1fff4:
                    r3 = readPages[(r5+60)>>>12][((r5+60)>>>2)&0x3ff];
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fe44;
                        continue;
                    }
                case 0x20000:
                    pc=0x20000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20000() throws ExecutionException { /* 0x20000 - 0x20200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20000:
                    /* Next insn is delay slot */ 
                    pc=0x1ff1c;
                    run_1fe00(); return;
                case 0x2000c:
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r4 = r19 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x20024;
                    return;
                case 0x20024:
                    r6 = r2 + r0;
                    r2 = r0 + -1;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x20090;
                        continue;
                    }
                case 0x20034:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = readPages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1fe70;
                    run_1fe00(); return;
                case 0x20044:
                    r3 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fec4;
                        run_1fe00(); return;
                    }
                    r2 = r0 + 29;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2006c;
                        continue;
                    }
                    r2 = r0 + 22;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffb8;
                        run_1fe00(); return;
                    }
                case 0x2006c:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r0;
                    r2 = r2 & 63487;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1fef0;
                    run_1fe00(); return;
                case 0x20090:
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20034;
                        continue;
                    }
                    r3 = r0 + 29;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x200b8;
                        continue;
                    }
                    r3 = r0 + 22;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffb8;
                        run_1fe00(); return;
                    }
                case 0x200b8:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r16;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1ff20;
                    run_1fe00(); return;
                case 0x200c8:
                    writePages[(r17+80)>>>12][((r17+80)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1fef0;
                    run_1fe00(); return;
                case 0x20200:
                    pc=0x20200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20200() throws ExecutionException { /* 0x20200 - 0x20400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20200:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20228;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20268;
                        continue;
                    }
                case 0x20228:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20250;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20250:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x1fe00;
                    run_1fe00(); return;
                case 0x20268:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x20274;
                    pc=0x21400;
                    run_21400(); return;
                case 0x20274:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x20228;
                    continue;
                case 0x20400:
                    pc=0x20400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20400() throws ExecutionException { /* 0x20400 - 0x20600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20400:
                    r5 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20418;
                        continue;
                    }
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x20200;
                    run_20200(); return;
                case 0x20418:
                    r5 = 2 << 16;
                    r4 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    r5 = r5 + 512;
                    /* Next insn is delay slot */ 
                    pc=0x24600;
                    run_24600(); return;
                case 0x20600:
                    pc=0x20600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20600() throws ExecutionException { /* 0x20600 - 0x20800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20600:
                    r2 = r6 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x207a4;
                        continue;
                    }
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r21 = r4 + r0;
                    r22 = r5 + r0;
                    r17 = r7 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20654;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20740;
                        continue;
                    }
                case 0x20654:
                    r18 = r6 + -1;
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x206d0;
                    continue;
                case 0x20664:
                    r2 = ((r18 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    r20 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20678;
                        continue;
                    }
                    r16 = r18 + r0;
                case 0x20678:
                    r4 = r20 + r0;
                    r5 = r0 + 10;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2068c;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x2068c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20758;
                        continue;
                    }
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 - r16;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = r20 + r0;
                    r2 = r2 + r16;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r6 = r16 + r0;
                    r18 = r18 - r16;
                    /* Next insn is delay slot */ 
                    r31=0x206c4;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x206c4:
                    r19 = r19 + r16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2070c;
                        continue;
                    }
                case 0x206d0:
                    r16 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20664;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x206f0;
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x206f0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20704;
                        continue;
                    }
                    r16 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x20664;
                    continue;
                case 0x20704:
                    if(r19 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x20798;
                        continue;
                    }
                case 0x2070c:
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r22 + r0;
                case 0x20714:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20740:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x2074c;
                    pc=0x21400;
                    run_21400(); return;
                case 0x2074c:
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x20654;
                    continue;
                case 0x20758:
                    r2 = r2 + 1;
                    r3 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r16 = r2 - r20;
                    r3 = r3 - r16;
                    r6 = r16 + r0;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r4 = r19 + r0;
                    r5 = r20 + r0;
                    r16 = r19 + r16;
                    /* Next insn is delay slot */ 
                    r31=0x20788;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x20788:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x20714;
                    continue;
                case 0x20798:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x20714;
                    continue;
                case 0x207a4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20800:
                    pc=0x20800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20800() throws ExecutionException { /* 0x20800 - 0x20a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20800:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x20600;
                    run_20600(); return;
                case 0x20a00:
                    pc=0x20a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20a00() throws ExecutionException { /* 0x20a00 - 0x20c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20a00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20c00:
                    pc=0x20c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20c00() throws ExecutionException { /* 0x20c00 - 0x20e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20c00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20e00:
                    pc=0x20e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20e00() throws ExecutionException { /* 0x20e00 - 0x21000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20e00:
                    r5 = 2 << 16;
                    r5 = r5 + -1024;
                    /* Next insn is delay slot */ 
                    pc=0x24400;
                    run_24400(); return;
                case 0x21000:
                    pc=0x21000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21000() throws ExecutionException { /* 0x21000 - 0x21200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21000:
                    r29 = r29 + -32;
                    r2 = r5 << 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r18 = r5 << 4;
                    r18 = r18 - r2;
                    r18 = r18 + r5;
                    r18 = r18 << 3;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = r5 + r0;
                    r5 = r18 + 12;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x21038;
                    pc=0x25200;
                    run_25200(); return;
                case 0x21038:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21064;
                        continue;
                    }
                    r4 = r2 + 12;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r17;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r4;
                    r5 = r0 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21064;
                    pc=0x2f7ec;
                    run_2f600(); return;
                case 0x21064:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21200:
                    pc=0x21200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21200() throws ExecutionException { /* 0x21200 - 0x21400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21200:
                    r5 = 2 << 16;
                    r4 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    r5 = r5 + -1024;
                    /* Next insn is delay slot */ 
                    pc=0x24400;
                    run_24400(); return;
                case 0x21400:
                    pc=0x21400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21400() throws ExecutionException { /* 0x21400 - 0x21600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21400:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    r29 = r29 + -48;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2157c;
                        continue;
                    }
                    r2 = 2 << 16;
                    r2 = r2 + 3584;
                    writePages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    r16 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r4+740)>>>12][((r4+740)>>>2)&0x3ff] = r2;
                    r2 = r4 + 748;
                    writePages[(r4+744)>>>12][((r4+744)>>>2)&0x3ff] = r2;
                    r22 = r0 + 1;
                    r2 = r0 + 4;
                    r21 = 3 << 16;
                    r20 = 3 << 16;
                    r19 = 3 << 16;
                    r18 = 3 << 16;
                    writePages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff] = r22;
                    writePages[(r4+736)>>>12][((r4+736)>>>2)&0x3ff] = r0;
                    r21 = r21 + -31232;
                    r4 = r16 + 92;
                    r20 = r20 + -30208;
                    r19 = r19 + -29696;
                    r18 = r18 + -29184;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x214bc;
                    pc=0x2f7ec;
                    run_2f600(); return;
                case 0x214bc:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                    r16 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r4 = r16 + 92;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r22&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x21510;
                    pc=0x2f7ec;
                    run_2f600(); return;
                case 0x21510:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                    r16 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r2 = r0 + 18;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 2;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x21568;
                    pc=0x2f7ec;
                    run_2f600(); return;
                case 0x21568:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                case 0x2157c:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21600:
                    pc=0x21600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21600() throws ExecutionException { /* 0x21600 - 0x21800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21600:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r2 = readPages[(r18+56)>>>12][((r18+56)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21700;
                        continue;
                    }
                case 0x2162c:
                    r18 = r18 + 736;
                    r17 = r0 + -1;
                case 0x21634:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21660;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x216e4;
                    continue;
                case 0x21650:
                    r2 = r2 + -1;
                    r16 = r16 + 104;
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x216e4;
                        continue;
                    }
                case 0x21660:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21650;
                        continue;
                    }
                    r2 = r0 + -1;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x216b0;
                    pc=0x2f7ec;
                    run_2f600(); return;
                case 0x216b0:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    writePages[(r16+72)>>>12][((r16+72)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x216c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x216e4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21714;
                        continue;
                    }
                case 0x216f4:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x21634;
                    continue;
                case 0x21700:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2170c;
                    pc=0x21400;
                    run_21400(); return;
                case 0x2170c:
                    /* Next insn is delay slot */ 
                    pc=0x2162c;
                    continue;
                case 0x21714:
                    r4 = r19 + r0;
                    r5 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x21724;
                    pc=0x21000;
                    run_21000(); return;
                case 0x21724:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x216f4;
                        continue;
                    }
                    r2 = r0 + 12;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x216c4;
                    continue;
                case 0x21800:
                    pc=0x21800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21800() throws ExecutionException { /* 0x21800 - 0x21a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21800:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21a00:
                    pc=0x21a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21a00() throws ExecutionException { /* 0x21a00 - 0x21c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21a00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21c00:
                    pc=0x21c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21c00() throws ExecutionException { /* 0x21c00 - 0x21e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21c00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21e00:
                    pc=0x21e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21e00() throws ExecutionException { /* 0x21e00 - 0x22000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21e00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22000:
                    pc=0x22000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22000() throws ExecutionException { /* 0x22000 - 0x22200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22000:
                    r5 = 2 << 16;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r5 + 2560;
                    /* Next insn is delay slot */ 
                    pc=0x24400;
                    run_24400(); return;
                case 0x22200:
                    pc=0x22200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22200() throws ExecutionException { /* 0x22200 - 0x22400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22200:
                    r5 = 2 << 16;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r5 + 3072;
                    /* Next insn is delay slot */ 
                    pc=0x24400;
                    run_24400(); return;
                case 0x22400:
                    pc=0x22400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22400() throws ExecutionException { /* 0x22400 - 0x22600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22400:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r19 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r29 + 16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x22430;
                    pc=0x3f600;
                    run_3f600(); return;
                case 0x22430:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x224f4;
                        continue;
                    }
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x22448;
                    pc=0x21600;
                    run_21600(); return;
                case 0x22448:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x224f4;
                        continue;
                    }
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    r7 = r0 + 438;
                    /* Next insn is delay slot */ 
                    r31=0x2246c;
                    pc=0x2f020;
                    run_2f000(); return;
                case 0x2246c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x224e0;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 3 << 16;
                    r2 = r2 + -31232;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r2;
                    r2 = 3 << 16;
                    r2 = r2 + -30208;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r2;
                    r2 = 3 << 16;
                    r2 = r2 + -29696;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r2;
                    r2 = 3 << 16;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r17&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -29184;
                    r17 = r17 & 256;
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r2;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22518;
                        continue;
                    }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x224e0:
                    /* Next insn is delay slot */ 
                    r31=0x224e8;
                    pc=0x21800;
                    run_21800(); return;
                case 0x224e8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x224f4;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x224f4:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22518:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x22530;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x22530:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22600:
                    pc=0x22600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22600() throws ExecutionException { /* 0x22600 - 0x22800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22400;
                    run_22400(); return;
                case 0x22800:
                    pc=0x22800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22800() throws ExecutionException { /* 0x22800 - 0x22a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22800:
                    r29 = r29 + -32;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r7 = r29 + 44;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x2281c;
                    pc=0x2c400;
                    run_2c400(); return;
                case 0x2281c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22a00:
                    pc=0x22a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22a00() throws ExecutionException { /* 0x22a00 - 0x22c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22a00:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r6 = r5 + r0;
                    r7 = r29 + 40;
                    r5 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x22a30;
                    pc=0x2c400;
                    run_2c400(); return;
                case 0x22a30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22c00:
                    pc=0x22c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22c00() throws ExecutionException { /* 0x22c00 - 0x22e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22c00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22c40;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22c40;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x22c38;
                    pc=0x21400;
                    run_21400(); return;
                case 0x22c38:
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x22c40:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x26a00;
                    run_26a00(); return;
                case 0x22e00:
                    pc=0x22e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22e00() throws ExecutionException { /* 0x22e00 - 0x23000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22e00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r6 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22e5c;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22e44;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x22e3c;
                    pc=0x21400;
                    run_21400(); return;
                case 0x22e3c:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x22e44:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x26a00;
                    run_26a00(); return;
                case 0x22e5c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x26a00;
                    run_26a00(); return;
                case 0x23000:
                    pc=0x23000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23000() throws ExecutionException { /* 0x23000 - 0x23200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23000:
                    { long hilo = (long)(r7) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -64;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    r21 = lo;
                    r22 = r6 + r0;
                    r23 = r7 + r0;
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23180;
                        continue;
                    }
                    r20 = r4 + r0;
                    r18 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23068;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x232b8;
                        run_23200(); return;
                    }
                case 0x23068:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2309c;
                        continue;
                    }
                case 0x23080:
                    r4 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r3 | 8192;
                    r3 = r0 + -8193;
                    r3 = r4 & r3;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r3;
                    r2 = r2 & 65535;
                case 0x2309c:
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x231a8;
                        continue;
                    }
                    r2 = r2 & 2;
                    r3 = r17 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x231c0;
                        continue;
                    }
                case 0x230bc:
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23108;
                    continue;
                case 0x230c8:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x230d4;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x230d4:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r2 = r2 + r17;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r16 + r0;
                    r18 = r18 + r17;
                    r19 = r19 - r17;
                    /* Next insn is delay slot */ 
                    r31=0x230f8;
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x230f8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2318c;
                        continue;
                    }
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                case 0x23108:
                    r3 = ((r17 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    r4 = r18 + r0;
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230c8;
                        continue;
                    }
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23128;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x23128:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 - r19;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r19 = r2 + r19;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r19;
                case 0x23148:
                    r2 = r23 + r0;
                case 0x2314c:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23180:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2314c;
                    continue;
                case 0x2318c:
                    r2 = r21 - r19;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        if(r22!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                        }
                        pc=0x2319c;
                        continue;
                    }
                    if(r22!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x2319c:
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x2314c;
                    continue;
                case 0x231a8:
                    r2 = r2 & 2;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    r3 = r0 + r0;
                    r17 = r0 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230bc;
                        continue;
                    }
                case 0x231c0:
                    r2 = ((r21 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    r17 = r3 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x231d4;
                        continue;
                    }
                    r17 = r21 + r0;
                case 0x231d4:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x231e8;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x231e8:
                    r19 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r19 = r19 + r17;
                    r2 = r2 - r17;
                    r18 = r18 + r17;
                case 0x23200:
                    pc=0x23200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23200() throws ExecutionException { /* 0x23200 - 0x23400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23200:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r19;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r17 = r21 - r17;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x232e0;
                        continue;
                    }
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23148;
                        run_23000(); return;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23238;
                        continue;
                    }
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23234;
                    pc=0x23800;
                    run_23800(); return;
                case 0x23234:
                    r19 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                case 0x23238:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x2323c:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r30 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x23258;
                    continue;
                case 0x23250:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23148;
                        run_23000(); return;
                    }
                case 0x23258:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r18;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r17;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r18;
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23274;
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x23274:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r30;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r19;
                    r17 = r17 - r4;
                    r18 = r18 + r4;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23250;
                        continue;
                    }
                    r2 = r21 - r17;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        if(r22!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                        }
                        pc=0x232ac;
                        continue;
                    }
                    if(r22!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x232ac:
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x2314c;
                    run_23000(); return;
                case 0x232b8:
                    /* Next insn is delay slot */ 
                    r31=0x232c0;
                    pc=0x21400;
                    run_21400(); return;
                case 0x232c0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2309c;
                        run_23000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x23080;
                    run_23000(); return;
                case 0x232e0:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2323c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x23148;
                    run_23000(); return;
                case 0x23400:
                    pc=0x23400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23400() throws ExecutionException { /* 0x23400 - 0x23600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23400:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x23430;
                    pc=0x23000;
                    run_23000(); return;
                case 0x23430:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23600:
                    pc=0x23600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23600() throws ExecutionException { /* 0x23600 - 0x23800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23600:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r18 = 5 << 16;
                    r17 = r4 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r20 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r18 + 30376;
                    /* Next insn is delay slot */ 
                    r31=0x23634;
                    pc=0x2f380;
                    run_2f200(); return;
                case 0x23634:
                    r4 = r17 + r0;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23644;
                    pc=0x26200;
                    run_26200(); return;
                case 0x23644:
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r19 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r19 = r19 & r2;
                    r5 = r19 - r20;
                    r5 = r5 + -17;
                    r5 = r5 + r16;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        if(r16!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r16 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r16 & 0xffffffffL));
                        }
                        pc=0x23670;
                        continue;
                    }
                    if(r16!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r16 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r16 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x23670:
                    r20 = lo;
                    r20 = r20 + -1;
                    { long hilo = (long)(r20) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r20 = lo;
                    r16 = r20 < r16 ? 1 : 0;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x236b4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x236a0;
                    pc=0x2f120;
                    run_2f000(); return;
                case 0x236a0:
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r3 = r3 + r19;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x236e8;
                        continue;
                    }
                case 0x236b4:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x236c0;
                    pc=0x26400;
                    run_26400(); return;
                case 0x236c0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x236e8:
                    r4 = r17 + r0;
                    r5 = r0 - r20;
                    /* Next insn is delay slot */ 
                    r31=0x236f8;
                    pc=0x2f120;
                    run_2f000(); return;
                case 0x236f8:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x23758;
                        continue;
                    }
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r19 = r19 - r20;
                    r19 = r19 | 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r19;
                    r2 = 5 << 16;
                    r3 = readPages[(r2+32560)>>>12][((r2+32560)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r20 = r3 - r20;
                    writePages[(r2+32560)>>>12][((r2+32560)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    r31=0x23730;
                    pc=0x26400;
                    run_26400(); return;
                case 0x23730:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23758:
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23768;
                    pc=0x2f120;
                    run_2f000(); return;
                case 0x23768:
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r4 = r2 - r3;
                    r5 = r4 < 16 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x236b4;
                        continue;
                    }
                    r5 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r4 = r4 | 1;
                    r2 = r2 - r5;
                    r5 = 5 << 16;
                    writePages[(r5+32560)>>>12][((r5+32560)>>>2)&0x3ff] = r2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x236b4;
                    continue;
                case 0x23800:
                    pc=0x23800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23800() throws ExecutionException { /* 0x23800 - 0x23a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23800:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x239a0;
                        continue;
                    }
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23828;
                    pc=0x26200;
                    run_26200(); return;
                case 0x23828:
                    r8 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r2 = r0 + -2;
                    r6 = r16 + -8;
                    r2 = r8 & r2;
                    r3 = r6 + r2;
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r7 = 5 << 16;
                    r4 = r0 + -4;
                    r7 = r7 + 30376;
                    r5 = r5 & r4;
                    r4 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x23a44;
                        run_23a00(); return;
                    }
                    r8 = r8 & 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r5;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23964;
                        continue;
                    }
                    r4 = r0 + r0;
                case 0x23874:
                    r8 = r3 + r5;
                    r8 = readPages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff];
                    r8 = r8 & 1;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x238ac;
                        continue;
                    }
                    r2 = r2 + r5;
                    r5 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a0c;
                        run_23a00(); return;
                    }
                case 0x2389c:
                    r3 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r5;
                case 0x238ac:
                    r3 = r2 | 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    r3 = r6 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23948;
                        continue;
                    }
                    r3 = (r2&0xffffffffL) < (512&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x239b8;
                        continue;
                    }
                    r3 = r2 >>> 9;
                    r4 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ab8;
                        run_23a00(); return;
                    }
                    r4 = r2 >>> 6;
                    r4 = r4 + 56;
                    r8 = r4 << 1;
                case 0x238ec:
                    r8 = r8 << 2;
                    r8 = r7 + r8;
                    r3 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x23ad4;
                        run_23a00(); return;
                    }
                    r4 = r0 + -4;
                case 0x23908:
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r5 = r5 & r4;
                    r5 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23930;
                        continue;
                    }
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r8 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x23908;
                        continue;
                    }
                case 0x23930:
                    r2 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                case 0x23938:
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r2;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r3;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r6;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r6;
                case 0x23948:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x26400;
                    run_26400(); return;
                case 0x23964:
                    r4 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r8 = 5 << 16;
                    r6 = r6 - r4;
                    r2 = r2 + r4;
                    r4 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r8 = r8 + 30384;
                    if(r4 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x23aac;
                        run_23a00(); return;
                    }
                    r8 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r8;
                    writePages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff] = r4;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23874;
                    continue;
                case 0x239a0:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x239b8:
                    r2 = r2 >>> 3;
                    r3 = r2 >> 2;
                    r4 = r0 + 1;
                    r3 = r4 << (r3&0x1f);
                    r4 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r2 = r2 << 3;
                    r3 = r3 | r4;
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r3;
                    r7 = r7 + r2;
                    r2 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r7;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r6;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r6;
                case 0x23a00:
                    pc=0x23a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23a00() throws ExecutionException { /* 0x23a00 - 0x23c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23a00:
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x26400;
                    run_26400(); return;
                case 0x23a0c:
                    r8 = 5 << 16;
                    r8 = r8 + 30384;
                    if(r5 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x2389c;
                        run_23800(); return;
                    }
                    r3 = r2 | 1;
                    writePages[(r7+20)>>>12][((r7+20)>>>2)&0x3ff] = r6;
                    writePages[(r7+16)>>>12][((r7+16)>>>2)&0x3ff] = r6;
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r5;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r5;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    r6 = r6 + r2;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x23948;
                    run_23800(); return;
                case 0x23a44:
                    r8 = r8 & 1;
                    r2 = r5 + r2;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a78;
                        continue;
                    }
                    r3 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r6 = r6 - r3;
                    r4 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r3 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r4;
                case 0x23a78:
                    r5 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r3 = r2 | 1;
                    r2 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23948;
                        run_23800(); return;
                    }
                    r5 = readPages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23aa4;
                    pc=0x23600;
                    run_23600(); return;
                case 0x23aa4:
                    /* Next insn is delay slot */ 
                    pc=0x23948;
                    run_23800(); return;
                case 0x23aac:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23874;
                    run_23800(); return;
                case 0x23ab8:
                    r4 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23afc;
                        continue;
                    }
                    r4 = r3 + 91;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x238ec;
                    run_23800(); return;
                case 0x23ad4:
                    r2 = r0 + 1;
                    r4 = r4 >> 2;
                    r4 = r2 << (r4&0x1f);
                    r2 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r2 = r4 | r2;
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r2;
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23938;
                    run_23800(); return;
                case 0x23afc:
                    r4 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23b1c;
                        continue;
                    }
                    r4 = r2 >>> 12;
                    r4 = r4 + 110;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x238ec;
                    run_23800(); return;
                case 0x23b1c:
                    r4 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23b3c;
                        continue;
                    }
                    r4 = r2 >>> 15;
                    r4 = r4 + 119;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x238ec;
                    run_23800(); return;
                case 0x23b3c:
                    r3 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23b5c;
                        continue;
                    }
                    r4 = r2 >>> 18;
                    r4 = r4 + 124;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x238ec;
                    run_23800(); return;
                case 0x23b5c:
                    r8 = r0 + 252;
                    r4 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x238ec;
                    run_23800(); return;
                case 0x23c00:
                    pc=0x23c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23c00() throws ExecutionException { /* 0x23c00 - 0x23e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23c00:
                    r29 = r29 + -120;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r21;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r18;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r23;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r22;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r20;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r19;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    r21 = r6 + r0;
                    r18 = r7 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23c50;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e30;
                        run_23e00(); return;
                    }
                case 0x23c50:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 264;
                    r3 = r3 & 264;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23e4c;
                        run_23e00(); return;
                    }
                case 0x23c64:
                    r19 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24188;
                        run_24000(); return;
                    }
                    r2 = r0 + 1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23dc4;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23cd4;
                        continue;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23cd4;
                        continue;
                    }
                    r2 = r0 + 22;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                case 0x23c9c:
                    r20 = r0 + -1;
                case 0x23ca0:
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r23 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r22 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r21 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r20 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 120;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23cd4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    r20 = r0 + r0;
                case 0x23ce0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24124;
                        run_24000(); return;
                    }
                case 0x23ce8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 2074;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d24;
                        continue;
                    }
                    r2 = r2 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23eb8;
                        run_23e00(); return;
                    }
                    r2 = 3 << 16;
                    r2 = r2 + -29696;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23e64;
                        run_23e00(); return;
                    }
                case 0x23d1c:
                    r3 = r3 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x23d24:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23d34;
                    pc=0x20200;
                    run_20200(); return;
                case 0x23d34:
                    r20 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23c9c;
                        continue;
                    }
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r21 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x23d58;
                    return;
                case 0x23d58:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x23c9c;
                        continue;
                    }
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d90;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23d8c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23d8c;
                    pc=0x23800;
                    run_23800(); return;
                case 0x23d8c:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x23d90:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r4 = r16 + 92;
                    r2 = r2 & 63455;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x23dbc;
                    pc=0x2f7ec;
                    run_2f600(); return;
                case 0x23dbc:
                    /* Next insn is delay slot */ 
                    pc=0x23ca0;
                    continue;
                case 0x23dc4:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23dd4;
                    pc=0x20200;
                    run_20200(); return;
                case 0x23dd4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r2 & 4096;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x240e4;
                        run_24000(); return;
                    }
                    r20 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x23dec:
                    r3 = r2 & 4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23fa0;
                        run_23e00(); return;
                    }
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23fc8;
                        run_23e00(); return;
                    }
                case 0x23e00:
                    pc=0x23e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23e00() throws ExecutionException { /* 0x23e00 - 0x24000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23e00:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e1c;
                        continue;
                    }
                    r3 = r3 - r2;
                    r20 = r20 + r3;
                case 0x23e1c:
                    r21 = r21 + r20;
                    r22 = r0 + 1;
                    r18 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23ce0;
                    run_23c00(); return;
                case 0x23e30:
                    /* Next insn is delay slot */ 
                    r31=0x23e38;
                    pc=0x21400;
                    run_21400(); return;
                case 0x23e38:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 264;
                    r3 = r3 & 264;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23c64;
                        run_23c00(); return;
                    }
                case 0x23e4c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23e5c;
                    pc=0x20200;
                    run_20200(); return;
                case 0x23e5c:
                    /* Next insn is delay slot */ 
                    pc=0x23c64;
                    run_23c00(); return;
                case 0x23e64:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d1c;
                        run_23c00(); return;
                    }
                    r4 = r17 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x23e84;
                    pc=0x2f160;
                    run_2f000(); return;
                case 0x23e84:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24118;
                        run_24000(); return;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 | 32768;
                    r3 = r3 & 61440;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24118;
                        run_24000(); return;
                    }
                    r2 = r0 + 1024;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 1024;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x23eb8:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23fd4;
                        continue;
                    }
                    r23 = r21 + r0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24004;
                        run_24000(); return;
                    }
                case 0x23ecc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 4096;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2413c;
                        run_24000(); return;
                    }
                    r2 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x23ee4:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r20 = r2 - r3;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24168;
                        run_24000(); return;
                    }
                    r6 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r20 = r20 - r6;
                case 0x23f04:
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r20 = r20 + r3;
                    r2 = r2 - r4;
                    r20 = r20 - r2;
                    r2 = r6 + r2;
                case 0x23f1c:
                    r3 = r23 < r20 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24020;
                        run_24000(); return;
                    }
                    r3 = r20 + r2;
                    r3 = ((r23 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24020;
                        run_24000(); return;
                    }
                    r20 = r23 - r20;
                    r4 = r4 + r20;
                    r2 = r2 - r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r4;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23f70;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23f6c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23f6c;
                    pc=0x23800;
                    run_23800(); return;
                case 0x23f6c:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x23f70:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 65503;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x23f80:
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x23f94;
                    pc=0x2f7ec;
                    run_2f600(); return;
                case 0x23f94:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23ca0;
                    run_23c00(); return;
                case 0x23fa0:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r20 = r20 - r2;
                    r2 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23fc8;
                        continue;
                    }
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r20 = r20 - r2;
                case 0x23fc8:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x23e1c;
                    continue;
                case 0x23fd4:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x23fe8;
                    pc=0x2f160;
                    run_2f000(); return;
                case 0x23fe8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d24;
                        run_23c00(); return;
                    }
                    r23 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r21 + r23;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ecc;
                        continue;
                    }
                case 0x24000:
                    pc=0x24000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24000() throws ExecutionException { /* 0x24000 - 0x24200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24000:
                case 0x24004:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24168;
                        continue;
                    }
                    r6 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x23f04;
                    run_23e00(); return;
                case 0x24020:
                    r20 = readPages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r20 = r0 - r20;
                    r20 = r23 & r20;
                    r4 = r17 + r0;
                    r6 = r20 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x24044;
                    return;
                case 0x24044:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x23d24;
                        run_23c00(); return;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24084;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24080;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24080;
                    pc=0x23800;
                    run_23800(); return;
                case 0x24080:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x24084:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r23 = r23 - r20;
                    r2 = r2 & 65503;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23f80;
                        run_23e00(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x240ac;
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x240ac:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d24;
                        run_23c00(); return;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r23 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d24;
                        run_23c00(); return;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 - r23;
                    r3 = r3 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x23f80;
                    run_23e00(); return;
                case 0x240e4:
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x240fc;
                    return;
                case 0x240fc:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23c9c;
                        run_23c00(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x23dec;
                    run_23c00(); return;
                case 0x24118:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x23d1c;
                    run_23c00(); return;
                case 0x24124:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24134;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x24134:
                    /* Next insn is delay slot */ 
                    pc=0x23ce8;
                    run_23c00(); return;
                case 0x2413c:
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x24154;
                    return;
                case 0x24154:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x23ee4;
                        run_23e00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x23d24;
                    run_23c00(); return;
                case 0x24168:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r2 = r2 - r4;
                    r20 = r20 - r2;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x23f1c;
                    run_23e00(); return;
                case 0x24188:
                    r2 = r0 + 29;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r20 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x23ca0;
                    run_23c00(); return;
                case 0x24200:
                    pc=0x24200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24200() throws ExecutionException { /* 0x24200 - 0x24400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24200:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x24400:
                    pc=0x24400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24400() throws ExecutionException { /* 0x24400 - 0x24600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24400:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = r4 + 736;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x244cc;
                        continue;
                    }
                    r21 = r5 + r0;
                    r20 = r0 + r0;
                    r18 = r0 + -1;
                case 0x24438:
                    r17 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r16 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r17 = r17 + -1;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24490;
                        continue;
                    }
                case 0x2444c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r3 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24480;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x24480;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r21;
                    r31=0x2447c;
                    return;
                case 0x2447c:
                    r20 = r20 | r2;
                case 0x24480:
                    r17 = r17 + -1;
                    r16 = r16 + 104;
                    if(r17 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x2444c;
                        continue;
                    }
                case 0x24490:
                    r19 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24438;
                        continue;
                    }
                case 0x244a0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x244cc:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x244a0;
                    continue;
                case 0x24600:
                    pc=0x24600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24600() throws ExecutionException { /* 0x24600 - 0x24800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24600:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r19 = r4 + 736;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x246dc;
                        continue;
                    }
                    r21 = r5 + r0;
                    r22 = r0 + r0;
                    r18 = r0 + -1;
                case 0x24640:
                    r17 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r16 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r17 = r17 + -1;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2469c;
                        continue;
                    }
                case 0x24654:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r3 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2468c;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x2468c;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r21;
                    r31=0x24688;
                    return;
                case 0x24688:
                    r22 = r22 | r2;
                case 0x2468c:
                    r17 = r17 + -1;
                    r16 = r16 + 104;
                    if(r17 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x24654;
                        continue;
                    }
                case 0x2469c:
                    r19 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24640;
                        continue;
                    }
                case 0x246ac:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r22 + r0;
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x246dc:
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x246ac;
                    continue;
                case 0x24800:
                    pc=0x24800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24800() throws ExecutionException { /* 0x24800 - 0x24a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24800:
                    { long hilo = (long)(r7) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -64;
                    r2 = r29 + 28;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r18 = lo;
                    r19 = r6 + r0;
                    r20 = r7 + r0;
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24868;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24914;
                        continue;
                    }
                case 0x24868:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 8192;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24894;
                        continue;
                    }
                    r3 = r3 | 8192;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r2 = r3 & r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                case 0x24894:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x248a8;
                    pc=0x3fc00;
                    run_3fc00(); return;
                case 0x248a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x248ec;
                        continue;
                    }
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = r18 - r2;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        if(r19!=0) {
                        hi = (int)((r18 & 0xffffffffL) % (r19 & 0xffffffffL)); lo = (int)((r18 & 0xffffffffL) / (r19 & 0xffffffffL));
                        }
                        pc=0x248c8;
                        continue;
                    }
                    if(r19!=0) {
                    hi = (int)((r18 & 0xffffffffL) % (r19 & 0xffffffffL)); lo = (int)((r18 & 0xffffffffL) / (r19 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x248c8:
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x248ec:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24914:
                    /* Next insn is delay slot */ 
                    r31=0x2491c;
                    pc=0x21400;
                    run_21400(); return;
                case 0x2491c:
                    /* Next insn is delay slot */ 
                    pc=0x24868;
                    continue;
                case 0x24a00:
                    pc=0x24a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24a00() throws ExecutionException { /* 0x24a00 - 0x24c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24a00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x24a30;
                    pc=0x24800;
                    run_24800(); return;
                case 0x24a30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24c00:
                    pc=0x24c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24c00() throws ExecutionException { /* 0x24c00 - 0x24e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24c00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -104;
                    r3 = r2 & 65535;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = r3 & 2;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r31;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r19;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r18;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24d30;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r17 = r4 + r0;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24cf0;
                        continue;
                    }
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x24c4c;
                    pc=0x2f160;
                    run_2f000(); return;
                case 0x24c4c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24ce4;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r0 | 32768;
                    r2 = r2 & 61440;
                    r19 = r2 ^ 8192;
                    r19 = (r19&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x24d70;
                        continue;
                    }
                case 0x24c70:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r18 = r0 + 1024;
                    r2 = r2 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x24c80:
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24c90;
                    pc=0x25200;
                    run_25200(); return;
                case 0x24c90:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24d14;
                        continue;
                    }
                    r3 = 2 << 16;
                    r3 = r3 + 3584;
                    writePages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff] = r3;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r3 = r3 | 128;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r18;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24da4;
                        continue;
                    }
                case 0x24cc4:
                    r31 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24ce4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 65535;
                case 0x24cf0:
                    r3 = r3 & 128;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24d64;
                        continue;
                    }
                    r18 = r0 + 1024;
                case 0x24d00:
                    r2 = r2 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x24c80;
                    continue;
                case 0x24d14:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 512;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24cc4;
                        continue;
                    }
                    r2 = r2 | 2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x24d30:
                    r2 = r16 + 67;
                    r31 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24d64:
                    r18 = r0 + 64;
                    /* Next insn is delay slot */ 
                    pc=0x24d00;
                    continue;
                case 0x24d70:
                    r2 = 3 << 16;
                    r3 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    r2 = r2 + -29696;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24c70;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r18 = r0 + 1024;
                    r2 = r2 | 1024;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1024;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x24c80;
                    continue;
                case 0x24da4:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24db4;
                    pc=0x3d000;
                    run_3d000(); return;
                case 0x24db4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24cc4;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x24cc4;
                    continue;
                case 0x24e00:
                    pc=0x24e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24e00() throws ExecutionException { /* 0x24e00 - 0x25000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24e00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x25200;
                    run_25200(); return;
                case 0x25000:
                    pc=0x25000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25000() throws ExecutionException { /* 0x25000 - 0x25200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25000:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x23800;
                    run_23800(); return;
                case 0x25200:
                    pc=0x25200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25200() throws ExecutionException { /* 0x25200 - 0x25400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25200:
                    r2 = r5 + 11;
                    r29 = r29 + -64;
                    r3 = (r2&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25304;
                        continue;
                    }
                    r17 = r0 + -8;
                    r17 = r2 & r17;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x25314;
                        continue;
                    }
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25314;
                        continue;
                    }
                case 0x2525c:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x25268;
                    pc=0x26200;
                    run_26200(); return;
                case 0x25268:
                    r2 = (r17&0xffffffffL) < (504&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25328;
                        continue;
                    }
                    r18 = 5 << 16;
                    r18 = r18 + 30376;
                    r2 = r18 + r17;
                    r16 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r7 = r17 >>> 3;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x258d8;
                        run_25800(); return;
                    }
                case 0x25290:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r3 & r2;
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r4;
                case 0x252b0:
                    r2 = r16 + r2;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r3 = r3 | 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x252cc;
                    pc=0x26400;
                    run_26400(); return;
                case 0x252cc:
                    r2 = r16 + 8;
                case 0x252d0:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25304:
                    r17 = r0 + 16;
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2525c;
                        continue;
                    }
                case 0x25314:
                    r2 = r0 + 12;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x252d0;
                    continue;
                case 0x25328:
                    r2 = r17 >>> 9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2554c;
                        run_25400(); return;
                    }
                    r3 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x257b8;
                        run_25600(); return;
                    }
                    r8 = r17 >>> 6;
                    r8 = r8 + 56;
                    r6 = r8 << 1;
                case 0x2534c:
                    r18 = 5 << 16;
                    r6 = r6 << 2;
                    r18 = r18 + 30376;
                    r6 = r18 + r6;
                    r16 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    if(r6 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x253d0;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = r3 & r2;
                    r4 = r3 - r17;
                    r2 = r4 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2555c;
                        run_25400(); return;
                    }
                    r7 = r0 + -4;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x253c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x25568;
                    run_25400(); return;
                case 0x2539c:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r7;
                    r2 = r3 - r17;
                    r5 = r2 < 16 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2555c;
                        run_25400(); return;
                    }
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x25568;
                        run_25400(); return;
                    }
                case 0x253c0:
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r6 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x2539c;
                        continue;
                    }
                case 0x253d0:
                    r7 = r8 + 1;
                case 0x253d4:
                    r9 = 5 << 16;
                    r16 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r9 = r9 + 30384;
                    if(r16 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x258b0;
                        run_25800(); return;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r2 = r3 & r2;
                    r3 = r2 - r17;
                    r4 = r3 < 16 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2586c;
                        run_25800(); return;
                    }
                case 0x25400:
                    pc=0x25400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25400() throws ExecutionException { /* 0x25400 - 0x25600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25400:
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r9;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r9;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x252b0;
                        run_25200(); return;
                    }
                    r3 = (r2&0xffffffffL) < (512&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x257e4;
                        run_25600(); return;
                    }
                    r3 = r2 >>> 3;
                    r2 = r3 >> 2;
                    r4 = r0 + 1;
                    r4 = r4 << (r2&0x1f);
                    r3 = r3 << 3;
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r3 = r18 + r3;
                    r2 = r4 | r2;
                    r4 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r4;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r16;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r16;
                case 0x25458:
                    r3 = r7 >> 2;
                    r4 = r0 + 1;
                    r4 = r4 << (r3&0x1f);
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x255a0;
                        continue;
                    }
                    r3 = r2 & r4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25498;
                        continue;
                    }
                    r3 = r0 + -4;
                    r7 = r7 & r3;
                case 0x25484:
                    r4 = r4 << 1;
                    r3 = r2 & r4;
                    r7 = r7 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25484;
                        continue;
                    }
                case 0x25498:
                    r8 = r0 + -4;
                case 0x2549c:
                    r10 = r7 << 3;
                    r10 = r18 + r10;
                    r6 = r10 + r0;
                    r11 = r7 + r0;
                case 0x254ac:
                    r16 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    if(r6 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x254dc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x258bc;
                    run_25800(); return;
                case 0x254c4:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x258f4;
                        run_25800(); return;
                    }
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r6 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x258bc;
                        run_25800(); return;
                    }
                case 0x254dc:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r8;
                    r2 = r3 - r17;
                    r5 = r2 < 16 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x254c4;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r16 + r17;
                    r17 = r17 | 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r17;
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r5;
                    r4 = r2 | 1;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r3;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r9;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r9;
                    r3 = r3 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x25540;
                    pc=0x26400;
                    run_26400(); return;
                case 0x25540:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x252d0;
                    run_25200(); return;
                case 0x2554c:
                    r6 = r0 + 126;
                    r8 = r0 + 63;
                    /* Next insn is delay slot */ 
                    pc=0x2534c;
                    run_25200(); return;
                case 0x2555c:
                    r8 = r8 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x253d0;
                    run_25200(); return;
                case 0x25568:
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r16 + r3;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x25594;
                    pc=0x26400;
                    run_26400(); return;
                case 0x25594:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x252d0;
                    run_25200(); return;
                case 0x255a0:
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r21 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r21 = r21 & r2;
                    r2 = ((r21 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x255d0;
                        continue;
                    }
                    r2 = r21 - r17;
                    r3 = r2 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25788;
                        run_25600(); return;
                    }
                case 0x255d0:
                    r22 = readPages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x255dc;
                    pc=0x2f380;
                    run_2f200(); return;
                case 0x255dc:
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r22 = r22 + 16;
                    r23 = r2 + r0;
                    r2 = r0 + -1;
                    r30 = r16 + r21;
                    r22 = r22 + r17;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2560c;
                        run_25600(); return;
                    }
                    r2 = r22 + -1;
                case 0x25600:
                    pc=0x25600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25600() throws ExecutionException { /* 0x25600 - 0x25800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25600:
                    r2 = r2 + r23;
                    r22 = r0 - r23;
                    r22 = r22 & r2;
                case 0x2560c:
                    r4 = r19 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2561c;
                    pc=0x2f120;
                    run_2f000(); return;
                case 0x2561c:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25758;
                        continue;
                    }
                    r2 = ((r20 & 0xffffffffL) < (r30 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25954;
                        run_25800(); return;
                    }
                case 0x25638:
                    r3 = 5 << 16;
                    r2 = readPages[(r3+32560)>>>12][((r3+32560)>>>2)&0x3ff];
                    r4 = r23 + -1;
                    r2 = r22 + r2;
                    writePages[(r3+32560)>>>12][((r3+32560)>>>2)&0x3ff] = r2;
                    if(r30 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x25aac;
                        run_25a00(); return;
                    }
                case 0x25654:
                    r6 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r5 = r0 + -1;
                    if(r6 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x25ad0;
                        run_25a00(); return;
                    }
                    r30 = r20 - r30;
                    r2 = r2 + r30;
                    writePages[(r3+32560)>>>12][((r3+32560)>>>2)&0x3ff] = r2;
                case 0x25670:
                    r2 = r20 & 7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25a10;
                        run_25a00(); return;
                    }
                    r5 = r0 + 8;
                    r2 = r5 - r2;
                    r20 = r20 + r2;
                case 0x25688:
                    r22 = r20 + r22;
                    r2 = r2 + r23;
                    r4 = r22 & r4;
                    r22 = r2 - r4;
                    r5 = r22 + r0;
                    r4 = r19 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x256ac;
                    pc=0x2f120;
                    run_2f000(); return;
                case 0x256ac:
                    r4 = r0 + -1;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x25afc;
                        run_25a00(); return;
                    }
                    r2 = r2 - r20;
                    r4 = r22 + r2;
                    r4 = r4 | 1;
                case 0x256c8:
                    r2 = readPages[(r3+32560)>>>12][((r3+32560)>>>2)&0x3ff];
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r20;
                    r2 = r22 + r2;
                    writePages[(r3+32560)>>>12][((r3+32560)>>>2)&0x3ff] = r2;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r4;
                    if(r16 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x25728;
                        continue;
                    }
                    r3 = (r21&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25a44;
                        run_25a00(); return;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r21 = r21 + -12;
                    r3 = r0 + -8;
                    r3 = r21 & r3;
                    r4 = r4 & 1;
                    r4 = r3 | r4;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r5 = r0 + 5;
                    r4 = r16 + r3;
                    r3 = (r3&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r5;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r5;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25adc;
                        run_25a00(); return;
                    }
                case 0x25728:
                    r3 = readPages[(r28+-32436)>>>12][((r28+-32436)>>>2)&0x3ff];
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25740;
                        continue;
                    }
                    writePages[(r28+-32436)>>>12][((r28+-32436)>>>2)&0x3ff] = r2;
                case 0x25740:
                    r3 = readPages[(r28+-32440)>>>12][((r28+-32440)>>>2)&0x3ff];
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25758;
                        continue;
                    }
                    writePages[(r28+-32440)>>>12][((r28+-32440)>>>2)&0x3ff] = r2;
                case 0x25758:
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r2;
                case 0x2576c:
                    r2 = r3 - r17;
                    r3 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x259d8;
                        run_25800(); return;
                    }
                    r3 = r2 < 16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x259d8;
                        run_25800(); return;
                    }
                case 0x25788:
                    r3 = r17 | 1;
                    r2 = r2 | 1;
                    r17 = r16 + r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    r4 = r19 + r0;
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r17;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x257ac;
                    pc=0x26400;
                    run_26400(); return;
                case 0x257ac:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x252d0;
                    run_25200(); return;
                case 0x257b8:
                    r3 = (r2&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25930;
                        run_25800(); return;
                    }
                    r3 = (r2&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x259f0;
                        run_25800(); return;
                    }
                    r8 = r17 >>> 12;
                    r8 = r8 + 110;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2534c;
                    run_25200(); return;
                case 0x257e4:
                    r3 = r2 >>> 9;
                    r4 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25940;
                        run_25800(); return;
                    }
                    r4 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25a7c;
                        run_25a00(); return;
                    }
                case 0x25800:
                    pc=0x25800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25800() throws ExecutionException { /* 0x25800 - 0x25a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25800:
                    r4 = r3 + 91;
                    r5 = r4 << 1;
                case 0x25808:
                    r5 = r5 << 2;
                    r5 = r18 + r5;
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x25a1c;
                        run_25a00(); return;
                    }
                    r6 = r0 + -4;
                case 0x25824:
                    r4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r4 & r6;
                    r4 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2584c;
                        continue;
                    }
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r5 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x25824;
                        continue;
                    }
                case 0x2584c:
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                case 0x25854:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r16;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x25458;
                    run_25400(); return;
                case 0x2586c:
                    r2 = r16 + r17;
                    r4 = r3 | 1;
                    r17 = r17 | 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r17;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r2;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r2;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r9;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r9;
                    r2 = r2 + r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x258a4;
                    pc=0x26400;
                    run_26400(); return;
                case 0x258a4:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x252d0;
                    run_25200(); return;
                case 0x258b0:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x25458;
                    run_25400(); return;
                case 0x258bc:
                    r11 = r11 + 1;
                    r2 = r11 & 3;
                    r6 = r6 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x254ac;
                        run_25400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x25978;
                    continue;
                case 0x258d8:
                    r2 = r16 + 8;
                    r16 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r7 = r7 + 2;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x253d4;
                        run_25200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x25290;
                    run_25200(); return;
                case 0x258f4:
                    r3 = r16 + r3;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x25924;
                    pc=0x26400;
                    run_26400(); return;
                case 0x25924:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x252d0;
                    run_25200(); return;
                case 0x25930:
                    r8 = r2 + 91;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2534c;
                    run_25200(); return;
                case 0x25940:
                    r4 = r2 >>> 6;
                    r4 = r4 + 56;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x25808;
                    continue;
                case 0x25954:
                    if(r16 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x25758;
                        run_25600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x25638;
                    run_25600(); return;
                case 0x25964:
                    r2 = r10 + -8;
                    r10 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    r7 = r7 + -1;
                    if(r10 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25b5c;
                        run_25a00(); return;
                    }
                case 0x25978:
                    r2 = r7 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25964;
                        continue;
                    }
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r3 = ~(r0 | r4);
                    r2 = r3 & r2;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                case 0x25994:
                    r4 = r4 << 1;
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x255a0;
                        run_25400(); return;
                    }
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x255a0;
                        run_25400(); return;
                    }
                    r3 = r2 & r4;
                    r7 = r11 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2549c;
                        run_25400(); return;
                    }
                case 0x259bc:
                    r4 = r4 << 1;
                    r3 = r2 & r4;
                    r7 = r7 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x259bc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2549c;
                    run_25400(); return;
                case 0x259d8:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x259e4;
                    pc=0x26400;
                    run_26400(); return;
                case 0x259e4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x252d0;
                    run_25200(); return;
                case 0x259f0:
                    r3 = (r2&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25a5c;
                        run_25a00(); return;
                    }
                    r8 = r17 >>> 15;
                case 0x25a00:
                    pc=0x25a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25a00() throws ExecutionException { /* 0x25a00 - 0x25c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25a00:
                    r8 = r8 + 119;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2534c;
                    run_25200(); return;
                case 0x25a10:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x25688;
                    run_25600(); return;
                case 0x25a1c:
                    r2 = r0 + 1;
                    r4 = r4 >> 2;
                    r4 = r2 << (r4&0x1f);
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r2 = r4 | r2;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                    r4 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x25854;
                    run_25800(); return;
                case 0x25a44:
                    r2 = r0 + 1;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    r16 = r20 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2576c;
                    run_25600(); return;
                case 0x25a5c:
                    r2 = (r2&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25a9c;
                        continue;
                    }
                    r8 = r17 >>> 18;
                    r8 = r8 + 124;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2534c;
                    run_25200(); return;
                case 0x25a7c:
                    r4 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25b0c;
                        continue;
                    }
                    r4 = r2 >>> 12;
                    r4 = r4 + 110;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x25808;
                    run_25800(); return;
                case 0x25a9c:
                    r6 = r0 + 252;
                    r8 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x2534c;
                    run_25200(); return;
                case 0x25aac:
                    r5 = r30 & r4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25654;
                        run_25600(); return;
                    }
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r4 = r22 + r21;
                    r4 = r4 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x25728;
                    run_25600(); return;
                case 0x25ad0:
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    pc=0x25670;
                    run_25600(); return;
                case 0x25adc:
                    r4 = r19 + r0;
                    r5 = r16 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x25aec;
                    pc=0x23800;
                    run_23800(); return;
                case 0x25aec:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+32560)>>>12][((r2+32560)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x25728;
                    run_25600(); return;
                case 0x25afc:
                    r4 = r0 + 1;
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x256c8;
                    run_25600(); return;
                case 0x25b0c:
                    r4 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25b2c;
                        continue;
                    }
                    r4 = r2 >>> 15;
                    r4 = r4 + 119;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x25808;
                    run_25800(); return;
                case 0x25b2c:
                    r3 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25b4c;
                        continue;
                    }
                    r4 = r2 >>> 18;
                    r4 = r4 + 124;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x25808;
                    run_25800(); return;
                case 0x25b4c:
                    r5 = r0 + 252;
                    r4 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x25808;
                    run_25800(); return;
                case 0x25b5c:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x25994;
                    run_25800(); return;
                case 0x25c00:
                    pc=0x25c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25c00() throws ExecutionException { /* 0x25c00 - 0x25e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25c00:
                    r2 = r4 & 3;
                    r7 = r5 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25c5c;
                        continue;
                    }
                    r2 = r6 + -1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25c40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x25cb0;
                    continue;
                case 0x25c24:
                    r4 = r4 + 1;
                    r3 = r4 & 3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25c60;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25cb0;
                        continue;
                    }
                    r2 = r2 + -1;
                case 0x25c40:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x25c24;
                        continue;
                    }
                case 0x25c50:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25c5c:
                    r2 = r6 + r0;
                case 0x25c60:
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25cbc;
                        continue;
                    }
                case 0x25c6c:
                    r5 = r2 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25cb0;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x25c50;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x25ca4;
                    continue;
                case 0x25c94:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 + 1;
                    if(r3 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x25c50;
                        continue;
                    }
                case 0x25ca4:
                    r4 = r4 + 1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x25c94;
                        continue;
                    }
                case 0x25cb0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25cbc:
                    r5 = r5 & 255;
                    r3 = r5 << 8;
                    r3 = r3 | r5;
                    r9 = r3 << 16;
                    r8 = 65278 << 16;
                    r6 = 32896 << 16;
                    r9 = r9 | r3;
                    r8 = r8 | 65279;
                    r6 = r6 | 32896;
                case 0x25ce0:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r9 ^ r3;
                    r5 = r3 + r8;
                    r3 = ~(r0 | r3);
                    r3 = r5 & r3;
                    r3 = r3 & r6;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25c6c;
                        continue;
                    }
                    r2 = r2 + -4;
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25ce0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x25c6c;
                    continue;
                case 0x25e00:
                    pc=0x25e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25e00() throws ExecutionException { /* 0x25e00 - 0x26000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25e00:
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25e9c;
                        continue;
                    }
                    r2 = r4 | r5;
                    r2 = r2 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25e70;
                        continue;
                    }
                case 0x25e1c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r7 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25eac;
                        continue;
                    }
                    r6 = r6 + -1;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x25e54;
                    continue;
                case 0x25e40:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 + 1;
                    if(r7 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25eac;
                        continue;
                    }
                case 0x25e54:
                    r4 = r4 + 1;
                    r5 = r5 + 1;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x25e40;
                        continue;
                    }
                case 0x25e64:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25e70:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25e9c;
                        continue;
                    }
                    r6 = r6 + -4;
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 4;
                    r5 = r5 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25e70;
                        continue;
                    }
                case 0x25e9c:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25e1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x25e64;
                    continue;
                case 0x25eac:
                    r2 = r7 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26000:
                    pc=0x26000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26000() throws ExecutionException { /* 0x26000 - 0x26200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26000:
                    r3 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r2 = r4 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26050;
                        continue;
                    }
                    r7 = r5 + r6;
                    r3 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26050;
                        continue;
                    }
                    r3 = r4 + r6;
                    r5 = r3 - r6;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26148;
                        continue;
                    }
                case 0x26030:
                    r7 = r7 + -1;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x26030;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26050:
                    r3 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26150;
                        continue;
                    }
                    r3 = r2 | r5;
                    r3 = r3 & 3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26164;
                        continue;
                    }
                    r7 = r5 + r0;
                    r3 = r2 + r0;
                    r4 = r6 + r0;
                case 0x26078:
                    r8 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r7 = r7 + 16;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-12)>>>12][((r7+-12)>>>2)&0x3ff];
                    r3 = r3 + 16;
                    writePages[(r3+-12)>>>12][((r3+-12)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-8)>>>12][((r7+-8)>>>2)&0x3ff];
                    r4 = r4 + -16;
                    writePages[(r3+-8)>>>12][((r3+-8)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff];
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r8;
                    r8 = (r4&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26078;
                        continue;
                    }
                    r4 = r6 + -16;
                    r4 = r4 >>> 4;
                    r4 = r4 + 1;
                    r4 = r4 << 4;
                    r10 = r6 & 15;
                    r3 = r2 + r4;
                    r5 = r5 + r4;
                    r4 = (r10&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26178;
                        continue;
                    }
                    r8 = r5 + r0;
                    r7 = r3 + r0;
                    r4 = r10 + r0;
                case 0x260e8:
                    r8 = r8 + 4;
                    r9 = readPages[(r8+-4)>>>12][((r8+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    r4 = r4 + -4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r9;
                    r9 = (r4&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x260e8;
                        continue;
                    }
                    r4 = r10 + -4;
                    r4 = r4 >>> 2;
                    r4 = r4 + 1;
                    r4 = r4 << 2;
                    r6 = r6 & 3;
                    r3 = r3 + r4;
                    r5 = r5 + r4;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26170;
                        continue;
                    }
                case 0x2612c:
                    r6 = r3 + r6;
                case 0x26130:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x26130;
                        continue;
                    }
                case 0x26148:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26150:
                    r3 = r2 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2612c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x26170;
                    continue;
                case 0x26164:
                    r3 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2612c;
                    continue;
                case 0x26170:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26178:
                    r6 = r10 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2612c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x26170;
                    continue;
                case 0x26200:
                    pc=0x26200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26200() throws ExecutionException { /* 0x26200 - 0x26400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26200:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26400:
                    pc=0x26400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26400() throws ExecutionException { /* 0x26400 - 0x26600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26400:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26600:
                    pc=0x26600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26600() throws ExecutionException { /* 0x26600 - 0x26800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26600:
                    r29 = r29 + -32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r6 = r5 + r0;
                    r5 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r7 = r29 + 40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x26628;
                    pc=0x2c400;
                    run_2c400(); return;
                case 0x26628:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26800:
                    pc=0x26800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26800() throws ExecutionException { /* 0x26800 - 0x26a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26800:
                    r29 = r29 + -32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    r6 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    r5 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r7 = r29 + 36;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x26830;
                    pc=0x2c400;
                    run_2c400(); return;
                case 0x26830:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26a00:
                    pc=0x26a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26a00() throws ExecutionException { /* 0x26a00 - 0x26c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26a00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26a28;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26ac8;
                        continue;
                    }
                case 0x26a28:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26a74;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                case 0x26a54:
                    r3 = r2 + 1;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26a74:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26ae8;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x26a54;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = r0 + 10;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x26ac8:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x26ad8;
                    pc=0x21400;
                    run_21400(); return;
                case 0x26ad8:
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x26a28;
                    continue;
                case 0x26ae8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x26c00:
                    pc=0x26c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26c00() throws ExecutionException { /* 0x26c00 - 0x26e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26c00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26c34;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26ccc;
                        continue;
                    }
                case 0x26c34:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26c84;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                case 0x26c60:
                    r3 = r2 + 1;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26c84:
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26cdc;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x26c60;
                        continue;
                    }
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x26ce4;
                    continue;
                case 0x26ccc:
                    /* Next insn is delay slot */ 
                    r31=0x26cd4;
                    pc=0x21400;
                    run_21400(); return;
                case 0x26cd4:
                    /* Next insn is delay slot */ 
                    pc=0x26c34;
                    continue;
                case 0x26cdc:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r17 + r0;
                case 0x26ce4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = r16 + r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x26e00:
                    pc=0x26e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26e00() throws ExecutionException { /* 0x26e00 - 0x27000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26e00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27000;
                    run_27000(); return;
                case 0x27000:
                    pc=0x27000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27000() throws ExecutionException { /* 0x27000 - 0x27200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27000:
                    r29 = r29 + -56;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    r20 = r6 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2734c;
                        run_27200(); return;
                    }
                    r21 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27048;
                    pc=0x26200;
                    run_26200(); return;
                case 0x27048:
                    r3 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r2 = r20 + 11;
                    r17 = r0 + -4;
                    r4 = (r2&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    r19 = r16 + -8;
                    r17 = r3 & r17;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2718c;
                        continue;
                    }
                    r4 = r0 + 16;
                    r18 = r0 + 16;
                case 0x27070:
                    r2 = ((r18 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x271a0;
                        continue;
                    }
                    r2 = r17 < r4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x271e0;
                        continue;
                    }
                    r23 = 5 << 16;
                    r23 = r23 + 30376;
                    r5 = readPages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff];
                    r2 = r19 + r17;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x27384;
                        run_27200(); return;
                    }
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r7 = r0 + -2;
                    r7 = r6 & r7;
                    r7 = r2 + r7;
                    r7 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r7 = r7 & 1;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x271b4;
                        continue;
                    }
                    r6 = r0 + r0;
                    r2 = r0 + r0;
                case 0x270cc:
                    r3 = r3 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x272a4;
                        run_27200(); return;
                    }
                    r22 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r22 = r19 - r22;
                    r7 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r3 = r7 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27498;
                        run_27400(); return;
                    }
                    r3 = r3 + r17;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x274a4;
                        run_27400(); return;
                    }
                    r23 = r6 + r3;
                    r5 = r23 < r4 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27294;
                        run_27200(); return;
                    }
                    r3 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                case 0x27128:
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    r3 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r6 = r17 + -4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    r19 = r22 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27470;
                        run_27400(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x273e4;
                        run_27200(); return;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x275c0;
                        run_27400(); return;
                    }
                    r3 = r22 + 16;
                    r16 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x273e8;
                    run_27200(); return;
                case 0x2718c:
                    r18 = r0 + -8;
                    r18 = r2 & r18;
                    r4 = r18 + r0;
                    if(r18 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x27070;
                        continue;
                    }
                case 0x271a0:
                    r2 = r0 + 12;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27220;
                    run_27200(); return;
                case 0x271b4:
                    r7 = r0 + -4;
                    r6 = r6 & r7;
                    r7 = r6 + r17;
                    r8 = r7 < r4 ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x270cc;
                        continue;
                    }
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r17 = r7 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                case 0x271e0:
                    r6 = r17 - r18;
                    r2 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27254;
                        run_27200(); return;
                    }
                    r3 = r3 & 1;
                    r3 = r3 | r17;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r17 = r19 + r17;
                case 0x27200:
                    pc=0x27200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27200() throws ExecutionException { /* 0x27200 - 0x27400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27200:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r2 = r2 | 1;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                case 0x27210:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2721c;
                    pc=0x26400;
                    run_26400(); return;
                case 0x2721c:
                    r2 = r16 + r0;
                case 0x27220:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27254:
                    r3 = r3 & 1;
                    r5 = r19 + r18;
                    r2 = r6 | 1;
                    r18 = r3 | r18;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r18;
                    r6 = r5 + r6;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 | 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r2;
                    r5 = r5 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x2728c;
                    pc=0x23800;
                    run_23800(); return;
                case 0x2728c:
                    /* Next insn is delay slot */ 
                    pc=0x27210;
                    continue;
                case 0x27294:
                    r23 = r3 + r0;
                case 0x27298:
                    r4 = r23 < r4 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27128;
                        run_27000(); return;
                    }
                case 0x272a4:
                    r5 = r20 + r0;
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x272b4;
                    pc=0x25200;
                    run_25200(); return;
                case 0x272b4:
                    r20 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2768c;
                        run_27600(); return;
                    }
                    r3 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r4 = r2 + -8;
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    r2 = r19 + r2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x275a8;
                        run_27400(); return;
                    }
                    r6 = r17 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27458;
                        run_27400(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x273b0;
                        continue;
                    }
                    r2 = r20 + r0;
                    r3 = r16 + r0;
                case 0x27300:
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                case 0x27324:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27334;
                    pc=0x23800;
                    run_23800(); return;
                case 0x27334:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27340;
                    pc=0x26400;
                    run_26400(); return;
                case 0x27340:
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27220;
                    continue;
                case 0x2734c:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r6 + r0;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=0x25200;
                    run_25200(); return;
                case 0x27384:
                    r6 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r6 = r6 & r2;
                    r2 = r6 + r17;
                    r7 = r18 + 16;
                    r7 = r2 < r7 ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2741c;
                        run_27400(); return;
                    }
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x270cc;
                    run_27000(); return;
                case 0x273b0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27574;
                        run_27400(); return;
                    }
                    r2 = r20 + 8;
                    r3 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x27300;
                    continue;
                case 0x273e4:
                    r3 = r19 + r0;
                case 0x273e8:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                case 0x27400:
                    pc=0x27400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27400() throws ExecutionException { /* 0x27400 - 0x27600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27400:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r16 = r19 + r0;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x271e0;
                    run_27000(); return;
                case 0x2741c:
                    r2 = r2 - r18;
                    r19 = r19 + r18;
                    r2 = r2 | 1;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r19;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 & 1;
                    r18 = r18 | r2;
                    writePages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x2744c;
                    pc=0x26400;
                    run_26400(); return;
                case 0x2744c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27220;
                    run_27200(); return;
                case 0x27458:
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27468;
                    pc=0x26000;
                    run_26000(); return;
                case 0x27468:
                    /* Next insn is delay slot */ 
                    pc=0x27324;
                    run_27200(); return;
                case 0x27470:
                    r4 = r19 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27480;
                    pc=0x26000;
                    run_26000(); return;
                case 0x27480:
                    r16 = r19 + r0;
                    r3 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x271e0;
                    run_27000(); return;
                case 0x27498:
                    r23 = r3 + r17;
                    /* Next insn is delay slot */ 
                    pc=0x27298;
                    run_27200(); return;
                case 0x274a4:
                    r30 = r6 + r3;
                    r2 = r18 + 16;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27294;
                        run_27200(); return;
                    }
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    r3 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r6 = r17 + -4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    r19 = r22 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27640;
                        run_27600(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27634;
                        run_27600(); return;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27658;
                        run_27600(); return;
                    }
                    r3 = r22 + 16;
                    r16 = r16 + 8;
                case 0x27514:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                case 0x27538:
                    r2 = r30 - r18;
                    r3 = r22 + r18;
                    r2 = r2 | 1;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r3;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 & 1;
                    r18 = r18 | r2;
                    writePages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x27568;
                    pc=0x26400;
                    run_26400(); return;
                case 0x27568:
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27220;
                    run_27200(); return;
                case 0x27574:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x275f4;
                        continue;
                    }
                    r2 = r20 + 16;
                    r3 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x27300;
                    run_27200(); return;
                case 0x275a8:
                    r4 = readPages[(r20+-4)>>>12][((r20+-4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r2 = r4 & r2;
                    r17 = r17 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x271e0;
                    run_27000(); return;
                case 0x275c0:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x27614;
                        run_27600(); return;
                    }
                    r3 = r22 + 24;
                    r16 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x273e8;
                    run_27200(); return;
                case 0x275f4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r16 + 24;
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r2;
                case 0x27600:
                    pc=0x27600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27600() throws ExecutionException { /* 0x27600 - 0x27800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27600:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = r20 + 24;
                    writePages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x27300;
                    run_27200(); return;
                case 0x27614:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r22 + 32;
                    writePages[(r22+24)>>>12][((r22+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r16 = r16 + 24;
                    writePages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x273e8;
                    run_27200(); return;
                case 0x27634:
                    r3 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27514;
                    run_27400(); return;
                case 0x27640:
                    r4 = r19 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27650;
                    pc=0x26000;
                    run_26000(); return;
                case 0x27650:
                    /* Next insn is delay slot */ 
                    pc=0x27538;
                    run_27400(); return;
                case 0x27658:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x276a4;
                        continue;
                    }
                    r3 = r22 + 24;
                    r16 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x27514;
                    run_27400(); return;
                case 0x2768c:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27698;
                    pc=0x26400;
                    run_26400(); return;
                case 0x27698:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27220;
                    run_27200(); return;
                case 0x276a4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r22 + 32;
                    writePages[(r22+24)>>>12][((r22+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r16 = r16 + 24;
                    writePages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x27514;
                    run_27400(); return;
                case 0x27800:
                    pc=0x27800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27800() throws ExecutionException { /* 0x27800 - 0x27a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27800:
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 9;
                    r3 = r3 & 9;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x27820;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27820:
                    /* Next insn is delay slot */ 
                    pc=0x20400;
                    run_20400(); return;
                case 0x27a00:
                    pc=0x27a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27a00() throws ExecutionException { /* 0x27a00 - 0x27c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27a00:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27a38;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27ba0;
                        continue;
                    }
                case 0x27a38:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27a6c;
                        continue;
                    }
                    r4 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x27a6c:
                    r4 = r2 & 32;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27b7c;
                        continue;
                    }
                    r4 = r2 & 4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27b3c;
                        continue;
                    }
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27ac4;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x27ab0;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27ab0;
                    pc=0x23800;
                    run_23800(); return;
                case 0x27ab0:
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27c6c;
                        run_27c00(); return;
                    }
                case 0x27ac4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27c98;
                        run_27c00(); return;
                    }
                case 0x27ad4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r19 = tmp;
                    r18 = r19 & 65535;
                    r2 = r18 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27bb0;
                        continue;
                    }
                case 0x27aec:
                    r6 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = readPages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r6;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x27b0c;
                    return;
                case 0x27b0c:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x27b64;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x27b1c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27b3c:
                    r4 = r2 & 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27cb0;
                        run_27c00(); return;
                    }
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27c2c;
                        run_27c00(); return;
                    }
                    r3 = r3 | 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x27ac4;
                    continue;
                case 0x27b64:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27bf8;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 32;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x27b7c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27ba0:
                    /* Next insn is delay slot */ 
                    r31=0x27ba8;
                    pc=0x21400;
                    run_21400(); return;
                case 0x27ba8:
                    /* Next insn is delay slot */ 
                    pc=0x27a38;
                    continue;
                case 0x27bb0:
                    r2 = r0 + 1;
                    r4 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    r5 = 2 << 16;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r5 + 30720;
                    /* Next insn is delay slot */ 
                    r31=0x27bcc;
                    pc=0x24400;
                    run_24400(); return;
                case 0x27bcc:
                    r18 = r18 & 9;
                    r2 = r0 + 9;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r19&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x27aec;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27bf0;
                    pc=0x1fe00;
                    run_1fe00(); return;
                case 0x27bf0:
                    /* Next insn is delay slot */ 
                    pc=0x27aec;
                    continue;
                case 0x27bf8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                case 0x27c00:
                    pc=0x27c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27c00() throws ExecutionException { /* 0x27c00 - 0x27e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27c00:
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    r2 = r0 + -1;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27c2c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27c3c;
                    pc=0x20200;
                    run_20200(); return;
                case 0x27c3c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27b7c;
                        run_27a00(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r3 = r3 & 65527;
                    r3 = r3 << 16;
                    r3 = r3 >> 16;
                    r3 = r3 | 4;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x27ac4;
                    run_27a00(); return;
                case 0x27c6c:
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27c98:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27ca8;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x27ca8:
                    /* Next insn is delay slot */ 
                    pc=0x27ad4;
                    run_27a00(); return;
                case 0x27cb0:
                    r2 = r0 + 9;
                    r3 = r3 | 64;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x27b1c;
                    run_27a00(); return;
                case 0x27e00:
                    pc=0x27e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27e00() throws ExecutionException { /* 0x27e00 - 0x28000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27e00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27e30;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27e84;
                        continue;
                    }
                case 0x27e30:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27e40;
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x27e40:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27e94;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x27e6c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27e84:
                    /* Next insn is delay slot */ 
                    r31=0x27e8c;
                    pc=0x21400;
                    run_21400(); return;
                case 0x27e8c:
                    /* Next insn is delay slot */ 
                    pc=0x27e30;
                    continue;
                case 0x27e94:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x27e6c;
                    continue;
                case 0x28000:
                    pc=0x28000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28000() throws ExecutionException { /* 0x28000 - 0x28200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28000:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x28200:
                    pc=0x28200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28200() throws ExecutionException { /* 0x28200 - 0x28400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28200:
                    r29 = r29 + -136;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 148;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x28248;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x28248:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28400:
                    pc=0x28400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28400() throws ExecutionException { /* 0x28400 - 0x28600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28400:
                    r29 = r29 + -136;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    r2 = r2 | 65535;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r6;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 144;
                    r6 = r5 + r0;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x28454;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x28454:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28600:
                    pc=0x28600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28600() throws ExecutionException { /* 0x28600 - 0x28800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28600:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2861c;
                    pc=0x2f0a0;
                    run_2f000(); return;
                case 0x2861c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28644;
                        continue;
                    }
                    r3 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r3;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28644:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 & 61439;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28800:
                    pc=0x28800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28800() throws ExecutionException { /* 0x28800 - 0x28a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28800:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28a00:
                    pc=0x28a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28a00() throws ExecutionException { /* 0x28a00 - 0x28c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28a00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -40;
                    r3 = r2 & 256;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r19 = r4 + r0;
                    r16 = r5 + r0;
                    r18 = r6 + r0;
                    r17 = r7 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28a50;
                        continue;
                    }
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r6 = r0 + r0;
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x28a4c;
                    pc=0x2f1a0;
                    run_2f000(); return;
                case 0x28a4c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                case 0x28a50:
                    r3 = r0 + -4097;
                    r2 = r2 & r3;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r19 + r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + r0;
                    r7 = r17 + r0;
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2f0e0;
                    run_2f000(); return;
                case 0x28c00:
                    pc=0x28c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28c00() throws ExecutionException { /* 0x28c00 - 0x28e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28c00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x28c1c;
                    pc=0x2f1a0;
                    run_2f000(); return;
                case 0x28c1c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x28c4c;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 | 4096;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28c4c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 & 61439;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28e00:
                    pc=0x28e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28e00() throws ExecutionException { /* 0x28e00 - 0x29000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28e00:
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2f060;
                    run_2f000(); return;
                case 0x29000:
                    pc=0x29000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29000() throws ExecutionException { /* 0x29000 - 0x29200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29000:
                    r3 = r5 | r4;
                    r3 = r3 & 3;
                    r2 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x290a4;
                        continue;
                    }
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r8 = 65278 << 16;
                    r8 = r8 | 65279;
                    r6 = ~(r0 | r3);
                    r4 = r3 + r8;
                    r7 = 32896 << 16;
                    r4 = r6 & r4;
                    r7 = r7 | 32896;
                    r4 = r4 & r7;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x290a4;
                        continue;
                    }
                case 0x29040:
                    r2 = r2 + 4;
                    r5 = r5 + 4;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r6 = ~(r0 | r3);
                    r4 = r3 + r8;
                    r4 = r6 & r4;
                    r4 = r4 & r7;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x290a4;
                        continue;
                    }
                    r2 = r2 + 4;
                    r5 = r5 + 4;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r6 = ~(r0 | r3);
                    r4 = r3 + r8;
                    r4 = r6 & r4;
                    r4 = r4 & r7;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29040;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x290a4;
                    continue;
                case 0x290a0:
                    r2 = r4 + r0;
                case 0x290a4:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x290a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29200:
                    pc=0x29200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29200() throws ExecutionException { /* 0x29200 - 0x29400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29200:
                    r2 = r4 | r5;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29268;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x29244;
                    continue;
                case 0x2921c:
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29254;
                        continue;
                    }
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r5 + 2;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2928c;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r6 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2928c;
                        continue;
                    }
                case 0x29244:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r4 + 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2921c;
                        continue;
                    }
                case 0x29254:
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29260:
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29254;
                        continue;
                    }
                case 0x29268:
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29260;
                        continue;
                    }
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2928c:
                    r2 = r6 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29400:
                    pc=0x29400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29400() throws ExecutionException { /* 0x29400 - 0x29600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29400:
                    r3 = r4 | r5;
                    r3 = r3 & 3;
                    r2 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29490;
                        continue;
                    }
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r10 = 65278 << 16;
                    r10 = r10 | 65279;
                    r4 = ~(r0 | r6);
                    r3 = r6 + r10;
                    r9 = 32896 << 16;
                    r3 = r4 & r3;
                    r9 = r9 | 32896;
                    r3 = r3 & r9;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29490;
                        continue;
                    }
                    r3 = r2 + r0;
                case 0x29444:
                    r3 = r3 + 4;
                    r5 = r5 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r8 = ~(r0 | r6);
                    r7 = r6 + r10;
                    r7 = r8 & r7;
                    r7 = r7 & r9;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29444;
                        continue;
                    }
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29494;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29490:
                    r3 = r2 + r0;
                case 0x29494:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29494;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29600:
                    pc=0x29600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29600() throws ExecutionException { /* 0x29600 - 0x29800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29600:
                    r29 = r29 + -24;
                    r2 = (r5&0xffffffffL) < (143&0xffffffffL) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29adc;
                        run_29a00(); return;
                    }
                    r2 = 5 << 16;
                    r3 = r5 << 2;
                    r2 = r2 + 24188;
                    r2 = r2 + r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x29634:
                    r2 = 5 << 16;
                    r2 = r2 + 22620;
                case 0x2963c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2964c:
                    r2 = 5 << 16;
                    r2 = r2 + 22612;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x2965c:
                    r2 = 5 << 16;
                    r2 = r2 + 24088;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x2966c:
                    r2 = 5 << 16;
                    r2 = r2 + 24064;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x2967c:
                    r2 = 5 << 16;
                    r2 = r2 + 24044;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x2968c:
                    r2 = 5 << 16;
                    r2 = r2 + 20808;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x2969c:
                    r2 = 5 << 16;
                    r2 = r2 + 23992;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x296ac:
                    r2 = 5 << 16;
                    r2 = r2 + 24016;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x296bc:
                    r2 = 5 << 16;
                    r2 = r2 + 23596;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x296cc:
                    r2 = 5 << 16;
                    r2 = r2 + 24144;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x296dc:
                    r2 = 5 << 16;
                    r2 = r2 + 22836;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x296ec:
                    r2 = 5 << 16;
                    r2 = r2 + 22780;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x296fc:
                    r2 = 5 << 16;
                    r2 = r2 + 23044;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x2970c:
                    r2 = 5 << 16;
                    r2 = r2 + 23256;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x2971c:
                    r2 = 5 << 16;
                    r2 = r2 + 23028;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x2972c:
                    r2 = 5 << 16;
                    r2 = r2 + 24164;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x2973c:
                    r2 = 5 << 16;
                    r2 = r2 + 23112;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x2974c:
                    r2 = 5 << 16;
                    r2 = r2 + 23464;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x2975c:
                    r2 = 5 << 16;
                    r2 = r2 + 23956;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x2976c:
                    r2 = 5 << 16;
                    r2 = r2 + 23932;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x2977c:
                    r2 = 5 << 16;
                    r2 = r2 + 23912;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x2978c:
                    r2 = 5 << 16;
                    r2 = r2 + 23888;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x2979c:
                    r2 = 5 << 16;
                    r2 = r2 + 23856;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x297ac:
                    r2 = 5 << 16;
                    r2 = r2 + 23824;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x297bc:
                    r2 = 5 << 16;
                    r2 = r2 + 23776;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x297cc:
                    r2 = 5 << 16;
                    r2 = r2 + 23748;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x297dc:
                    r2 = 5 << 16;
                    r2 = r2 + 24108;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x297ec:
                    r2 = 5 << 16;
                    r2 = r2 + 23724;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    continue;
                case 0x297fc:
                    r2 = 5 << 16;
                case 0x29800:
                    pc=0x29800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29800() throws ExecutionException { /* 0x29800 - 0x29a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29800:
                    r2 = r2 + 23696;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2980c:
                    r2 = 5 << 16;
                    r2 = r2 + 23676;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2981c:
                    r2 = 5 << 16;
                    r2 = r2 + 23648;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2982c:
                    r2 = 5 << 16;
                    r2 = r2 + 23636;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2983c:
                    r2 = 5 << 16;
                    r2 = r2 + 23616;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2984c:
                    r2 = 5 << 16;
                    r2 = r2 + 23580;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2985c:
                    r2 = 5 << 16;
                    r2 = r2 + 23556;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2986c:
                    r2 = 5 << 16;
                    r2 = r2 + 23536;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2987c:
                    r2 = 5 << 16;
                    r2 = r2 + 23512;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2988c:
                    r2 = 5 << 16;
                    r2 = r2 + 23496;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2989c:
                    r2 = 5 << 16;
                    r2 = r2 + 23488;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x298ac:
                    r2 = 5 << 16;
                    r2 = r2 + 23452;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x298bc:
                    r2 = 5 << 16;
                    r2 = r2 + 23432;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x298cc:
                    r2 = 5 << 16;
                    r2 = r2 + 23404;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x298dc:
                    r2 = 5 << 16;
                    r2 = r2 + 23384;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x298ec:
                    r2 = 5 << 16;
                    r2 = r2 + 23368;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x298fc:
                    r2 = 5 << 16;
                    r2 = r2 + 23356;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2990c:
                    r2 = 5 << 16;
                    r2 = r2 + 23340;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2991c:
                    r2 = 5 << 16;
                    r2 = r2 + 23316;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2992c:
                    r2 = 5 << 16;
                    r2 = r2 + 23300;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2993c:
                    r2 = 5 << 16;
                    r2 = r2 + 23276;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2994c:
                    r2 = 5 << 16;
                    r2 = r2 + 23240;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2995c:
                    r2 = 5 << 16;
                    r2 = r2 + 23224;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2996c:
                    r2 = 5 << 16;
                    r2 = r2 + 23200;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2997c:
                    r2 = 5 << 16;
                    r2 = r2 + 23180;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2998c:
                    r2 = 5 << 16;
                    r2 = r2 + 23148;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x2999c:
                    r2 = 5 << 16;
                    r2 = r2 + 23092;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x299ac:
                    r2 = 5 << 16;
                    r2 = r2 + 23076;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x299bc:
                    r2 = 5 << 16;
                    r2 = r2 + 23012;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x299cc:
                    r2 = 5 << 16;
                    r2 = r2 + 22996;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x299dc:
                    r2 = 5 << 16;
                    r2 = r2 + 22976;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x299ec:
                    r2 = 5 << 16;
                    r2 = r2 + 22964;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x299fc:
                    r2 = 5 << 16;
                case 0x29a00:
                    pc=0x29a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29a00() throws ExecutionException { /* 0x29a00 - 0x29c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29a00:
                    r2 = r2 + 22940;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x29a0c:
                    r2 = 5 << 16;
                    r2 = r2 + 22928;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x29a1c:
                    r2 = 5 << 16;
                    r2 = r2 + 22908;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x29a2c:
                    r2 = 5 << 16;
                    r2 = r2 + 22888;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x29a3c:
                    r2 = 5 << 16;
                    r2 = r2 + 22868;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x29a4c:
                    r2 = 5 << 16;
                    r2 = r2 + 22824;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x29a5c:
                    r2 = 5 << 16;
                    r2 = r2 + 22808;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x29a6c:
                    r2 = 5 << 16;
                    r2 = r2 + 22760;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x29a7c:
                    r2 = 5 << 16;
                    r2 = r2 + 22740;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x29a8c:
                    r2 = 5 << 16;
                    r2 = r2 + 22712;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x29a9c:
                    r2 = 5 << 16;
                    r2 = r2 + 22700;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x29aac:
                    r2 = 5 << 16;
                    r2 = r2 + 22676;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x29abc:
                    r2 = 5 << 16;
                    r2 = r2 + 22660;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x29acc:
                    r2 = 5 << 16;
                    r2 = r2 + 22632;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x29adc:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29b10;
                        continue;
                    }
                case 0x29ae4:
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29af8;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x29af8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2963c;
                        run_29600(); return;
                    }
                    r2 = 5 << 16;
                    r2 = r2 + 17636;
                    /* Next insn is delay slot */ 
                    pc=0x2963c;
                    run_29600(); return;
                case 0x29b10:
                    r7 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29ae4;
                    continue;
                case 0x29c00:
                    pc=0x29c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29c00() throws ExecutionException { /* 0x29c00 - 0x29e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29c00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29600;
                    run_29600(); return;
                case 0x29e00:
                    pc=0x29e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29e00() throws ExecutionException { /* 0x29e00 - 0x2a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29e00:
                    r29 = r29 + -304;
                    writePages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff] = r31;
                    writePages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff] = r22;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r4;
                    r22 = r5 + r0;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r6;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r7;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r30;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r23;
                    writePages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff] = r21;
                    writePages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff] = r20;
                    writePages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff] = r19;
                    writePages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff] = r18;
                    writePages[(r29+268)>>>12][((r29+268)>>>2)&0x3ff] = r17;
                    writePages[(r29+264)>>>12][((r29+264)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x29e44;
                    pc=0x41600;
                    run_41600(); return;
                case 0x29e44:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x29e5c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x29e5c:
                    writePages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff] = r2;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29e84;
                        continue;
                    }
                    r2 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ba64;
                        run_2ba00(); return;
                    }
                case 0x29e84:
                    r21 = r29 + 40;
                    r2 = 5 << 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r21;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r0;
                    writePages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff] = r0;
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r0;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r0;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r0;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r0;
                    r8 = r21 + r0;
                    r19 = r2 + 25156;
                case 0x29eb8:
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a5a4;
                        run_2a400(); return;
                    }
                case 0x29ed0:
                    r3 = r0 + 37;
                    r16 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x29ef0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x29f5c;
                    continue;
                case 0x29ee8:
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x29f04;
                        continue;
                    }
                case 0x29ef0:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29ee8;
                        continue;
                    }
                case 0x29f04:
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    r17 = r16 - r3;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29f5c;
                        continue;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    r2 = r2 + r17;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a004;
                        run_2a000(); return;
                    }
                    r8 = r8 + 8;
                case 0x29f4c:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r3 = r3 + r17;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r3;
                case 0x29f5c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a02c;
                        run_2a000(); return;
                    }
                    r16 = r16 + 1;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r30 = r0 + -1;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r0;
                    r17 = r0 + r0;
                    r6 = r0 + 42;
                    r7 = r0 + r0;
                case 0x29f8c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r3 = r16 + 1;
                case 0x29f94:
                    r2 = r18 + -32;
                    r4 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ab2c;
                        run_2aa00(); return;
                    }
                    r4 = 5 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + 24784;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x29fc4:
                    r17 = r17 | 16;
                case 0x29fc8:
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29f8c;
                    continue;
                case 0x29fd4:
                    r4 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r7 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ab1c;
                        run_2aa00(); return;
                    }
                    r7 = r0 - r7;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r2;
                case 0x29ff4:
                    r17 = r17 | 4;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29f8c;
                    continue;
                case 0x2a000:
                    pc=0x2a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a000() throws ExecutionException { /* 0x2a000 - 0x2a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a000:
                case 0x2a004:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2a018;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2a018:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        continue;
                    }
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29f4c;
                    run_29e00(); return;
                case 0x2a02c:
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        continue;
                    }
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2a050;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2a050:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a09c;
                        continue;
                    }
                    r2 = r0 + -1;
                case 0x2a068:
                    r31 = readPages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff];
                    r30 = readPages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff];
                    r23 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r22 = readPages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff];
                    r21 = readPages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff];
                    r20 = readPages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff];
                    r19 = readPages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff];
                    r18 = readPages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff];
                    r17 = readPages[(r29+268)>>>12][((r29+268)>>>2)&0x3ff];
                    r16 = readPages[(r29+264)>>>12][((r29+264)>>>2)&0x3ff];
                    r29 = r29 + 304;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a09c:
                    r2 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2a068;
                    continue;
                case 0x2a0a8:
                    r5 = r0 + 43;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29f8c;
                    run_29e00(); return;
                case 0x2a0b8:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r3 + 4;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc0c;
                        run_2bc00(); return;
                    }
                    r4 = r16 + r0;
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bae0;
                        run_2ba00(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x2a0f8;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x2a0f8:
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2beac;
                        run_2be00(); return;
                    }
                    r2 = r2 - r16;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a11c;
                        continue;
                    }
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r30;
                case 0x2a11c:
                    r2 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bafc;
                        run_2ba00(); return;
                    }
                case 0x2a12c:
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                case 0x2a140:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a158;
                        continue;
                    }
                case 0x2a148:
                    r2 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                case 0x2a158:
                    r4 = r17 & 2;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a178;
                        continue;
                    }
                    r5 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r5;
                case 0x2a178:
                    r2 = r17 & 132;
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ab50;
                        run_2aa00(); return;
                    }
                    r4 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r5 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r20 = r4 - r5;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ab50;
                        run_2aa00(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bb48;
                        run_2ba00(); return;
                    }
                    r4 = r20 + r0;
                    writePages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff] = r16;
                    r20 = r17 + r0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    r23 = r0 + 16;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a1ec;
                    continue;
                case 0x2a1d8:
                    r17 = r17 + -16;
                    r4 = r17 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a248;
                        run_2a200(); return;
                    }
                case 0x2a1ec:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r23;
                case 0x2a200:
                    pc=0x2a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a200() throws ExecutionException { /* 0x2a200 - 0x2a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a200:
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a1d8;
                        run_2a000(); return;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2a224;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2a224:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r17 = r17 + -16;
                    r4 = r17 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a1ec;
                        run_2a000(); return;
                    }
                case 0x2a248:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff];
                    r17 = r20 + r0;
                    r20 = r4 + r0;
                case 0x2a258:
                    r3 = r3 + 1;
                    r4 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r2 = r20 + r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b21c;
                        run_2b200(); return;
                    }
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r8 = r8 + 8;
                case 0x2a288:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a2c4;
                        continue;
                    }
                    r3 = r29 + 182;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b050;
                        run_2b000(); return;
                    }
                    r8 = r8 + 8;
                case 0x2a2c4:
                    r3 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a308;
                        continue;
                    }
                    r3 = r29 + 180;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 2;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b07c;
                        run_2b000(); return;
                    }
                    r8 = r8 + 8;
                case 0x2a308:
                    r4 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r3 = r0 + 128;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2aebc;
                        run_2ae00(); return;
                    }
                case 0x2a318:
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r20 = r30 - r3;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a414;
                        run_2a400(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b6c0;
                        run_2b600(); return;
                    }
                    r5 = 5 << 16;
                    r23 = r5 + 25140;
                    r4 = r23 + r0;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r16;
                    r23 = r20 + r0;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r17 + r0;
                    r30 = r0 + 16;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a37c;
                    continue;
                case 0x2a368:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a3d8;
                        continue;
                    }
                case 0x2a37c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r17;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a368;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2a3b4;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2a3b4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a37c;
                        continue;
                    }
                case 0x2a3d8:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r17 = r20 + r0;
                    r20 = r23 + r0;
                    r23 = r4 + r0;
                case 0x2a3ec:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                case 0x2a400:
                    pc=0x2a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a400() throws ExecutionException { /* 0x2a400 - 0x2a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a400:
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b024;
                        run_2b000(); return;
                    }
                    r8 = r8 + 8;
                case 0x2a414:
                    r3 = r17 & 256;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ad50;
                        run_2ac00(); return;
                    }
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ac54;
                        run_2ac00(); return;
                    }
                case 0x2a44c:
                    r8 = r8 + 8;
                case 0x2a450:
                    r17 = r17 & 4;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a550;
                        continue;
                    }
                    r3 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r4 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r16 = r3 - r4;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a550;
                        continue;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bbfc;
                        run_2ba00(); return;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    r17 = r0 + 16;
                    r18 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2a4ac;
                    continue;
                case 0x2a498:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a508;
                        continue;
                    }
                case 0x2a4ac:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a498;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2a4e4;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2a4e4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a4ac;
                        continue;
                    }
                case 0x2a508:
                    r3 = r3 + 1;
                    r5 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r2 = r2 + r16;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a550;
                        continue;
                    }
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2a544;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2a544:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                case 0x2a550:
                    r3 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r5 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a56c;
                        continue;
                    }
                    r3 = r5 + r0;
                case 0x2a56c:
                    r4 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r4 + r3;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ac80;
                        run_2ac00(); return;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    r8 = r21 + r0;
                case 0x2a58c:
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29ed0;
                        run_29e00(); return;
                    }
                case 0x2a5a4:
                    r16 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x29f5c;
                    run_29e00(); return;
                case 0x2a5b0:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29fc8;
                        run_29e00(); return;
                    }
                    r5 = r0 + 32;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29f8c;
                    run_29e00(); return;
                case 0x2a5c8:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r4 = r3 + 1;
                    if(r18 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2c104;
                        run_2c000(); return;
                    }
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r30 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a61c;
                        run_2a600(); return;
                    }
                case 0x2a5ec:
                    r4 = r4 + 1;
                    r3 = r30 << 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r30 = r30 << 3;
                    r30 = r3 + r30;
                case 0x2a600:
                    pc=0x2a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a600() throws ExecutionException { /* 0x2a600 - 0x2a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a600:
                    r30 = r2 + r30;
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a5ec;
                        run_2a400(); return;
                    }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ba54;
                        run_2ba00(); return;
                    }
                case 0x2a61c:
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29f94;
                    run_29e00(); return;
                case 0x2a628:
                    r17 = r17 | 128;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29f8c;
                    run_29e00(); return;
                case 0x2a638:
                    r7 = r0 + r0;
                    r2 = r18 + -48;
                case 0x2a640:
                    r3 = r3 + 1;
                    r4 = r7 << 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r7 = r7 << 3;
                    r7 = r4 + r7;
                    r7 = r7 + r2;
                    r2 = r18 + -48;
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a640;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x29f94;
                    run_29e00(); return;
                case 0x2a670:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aaec;
                        run_2aa00(); return;
                    }
                case 0x2a688:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                case 0x2a6a4:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a6b4;
                        continue;
                    }
                    r5 = r0 + -129;
                    r17 = r17 & r5;
                case 0x2a6b4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2acac;
                        run_2ac00(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2acac;
                        run_2ac00(); return;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b0d0;
                        run_2b000(); return;
                    }
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b0d0;
                        run_2b000(); return;
                    }
                    r2 = r0 + 48;
                    addr=r29+143;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r16 = r29 + 143;
                case 0x2a6ec:
                    r2 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r4 = r2 < r30 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a704;
                        continue;
                    }
                    r2 = r30 + r0;
                case 0x2a704:
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a140;
                    run_2a000(); return;
                case 0x2a714:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aaa8;
                        run_2aa00(); return;
                    }
                case 0x2a72c:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a6a4;
                    continue;
                case 0x2a750:
                    r2 = 5 << 16;
                    r2 = r2 + 20944;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r2;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a990;
                        run_2a800(); return;
                    }
                case 0x2a774:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                case 0x2a788:
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b0e0;
                        run_2b000(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b0e0;
                        run_2b000(); return;
                    }
                    r3 = r0 + 48;
                    addr=r29+180;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+181;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = r17 | 2;
                    r4 = r0 + 2;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a6a4;
                    continue;
                case 0x2a7c0:
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a92c;
                        run_2a800(); return;
                    }
                case 0x2a7d8:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                case 0x2a7ec:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a950;
                        run_2a800(); return;
                    }
                case 0x2a7f4:
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2a6a4;
                    continue;
                case 0x2a800:
                    pc=0x2a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a800() throws ExecutionException { /* 0x2a800 - 0x2aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a800:
                case 0x2a804:
                    r17 = r17 | 64;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29f8c;
                    run_29e00(); return;
                case 0x2a814:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r29+104;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                case 0x2a834:
                    r4 = r0 + 1;
                    r5 = r0 + 1;
                    r3 = r0 + r0;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r4;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r5;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    r16 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=0x2a158;
                    run_2a000(); return;
                case 0x2a85c:
                    r17 = r17 | 1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29f8c;
                    run_29e00(); return;
                case 0x2a86c:
                    r2 = r17 & 16;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b36c;
                        run_2b200(); return;
                    }
                    r17 = r17 & 64;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b36c;
                        run_2b200(); return;
                    }
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x29eb8;
                    run_29e00(); return;
                case 0x2a8bc:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r0 + 48;
                    addr=r29+180;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 120;
                    addr=r29+181;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r17 = r17 | 2;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r3 = 5 << 16;
                    r3 = r3 + 20964;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r3;
                    r4 = r0 + 2;
                    r18 = r0 + 120;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a6a4;
                    run_2a600(); return;
                case 0x2a910:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a7d8;
                        run_2a600(); return;
                    }
                case 0x2a92c:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b66c;
                        run_2b600(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a7f4;
                        run_2a600(); return;
                    }
                case 0x2a950:
                    r3 = r0 + 45;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    r3 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2a6a4;
                    run_2a600(); return;
                case 0x2a96c:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = 5 << 16;
                    r3 = r3 + 20964;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a774;
                        run_2a600(); return;
                    }
                case 0x2a990:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b658;
                        run_2b600(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2a788;
                    run_2a600(); return;
                case 0x2a9b4:
                    r2 = r17 & 8;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b644;
                        run_2b600(); return;
                    }
                    r4 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r4 + 7;
                case 0x2a9d8:
                    r2 = r0 + -8;
                    r2 = r3 & r2;
                    r3 = r2 + 8;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    writePages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff] = f0;
                    f12 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                case 0x2aa00:
                    pc=0x2aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2aa00() throws ExecutionException { /* 0x2aa00 - 0x2ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2aa00:
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = f1;
                    f13 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2aa10;
                    pc=0x44400;
                    run_44400(); return;
                case 0x2aa10:
                    r3 = r0 + 1;
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2b5e4;
                        run_2b400(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x2bce0;
                        run_2bc00(); return;
                    }
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                case 0x2aa48:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ba44;
                        run_2ba00(); return;
                    }
                    r16 = 5 << 16;
                    r16 = r16 + 24764;
                case 0x2aa5c:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r4 = r0 + 3;
                    r2 = r0 + 3;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r4;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a140;
                    run_2a000(); return;
                case 0x2aa84:
                    r17 = r17 | 8;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29f8c;
                    run_29e00(); return;
                case 0x2aa94:
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a72c;
                        run_2a600(); return;
                    }
                case 0x2aaa8:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b680;
                        run_2b600(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a6a4;
                    run_2a600(); return;
                case 0x2aad8:
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a688;
                        run_2a600(); return;
                    }
                case 0x2aaec:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b6a0;
                        run_2b600(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a6a4;
                    run_2a600(); return;
                case 0x2ab1c:
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r2;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29f8c;
                    run_29e00(); return;
                case 0x2ab2c:
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a02c;
                        run_2a000(); return;
                    }
                    addr=r29+104;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2a834;
                    run_2a800(); return;
                case 0x2ab50:
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2a288;
                    run_2a200(); return;
                case 0x2ab5c:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    r3 = r4 < 2 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2afcc;
                        run_2ae00(); return;
                    }
                case 0x2ab80:
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b534;
                        run_2b400(); return;
                    }
                    r4 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r8 = r8 + 8;
                    r3 = r3 + 1;
                    r5 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b588;
                        run_2b400(); return;
                    }
                case 0x2abcc:
                    r8 = r8 + 8;
                case 0x2abd0:
                    f0 = r0;
                    f2 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x2b24c;
                        run_2b200(); return;
                    }
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r4 = r5 + -1;
                case 0x2ac00:
                    pc=0x2ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ac00() throws ExecutionException { /* 0x2ac00 - 0x2ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ac00:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r4;
                case 0x2ac0c:
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aff4;
                        run_2ae00(); return;
                    }
                case 0x2ac24:
                    r8 = r8 + 8;
                case 0x2ac28:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r29 + 164;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    r2 = r5 + r2;
                case 0x2ac3c:
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a44c;
                        run_2a400(); return;
                    }
                case 0x2ac54:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2ac68;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2ac68:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a450;
                    run_2a400(); return;
                case 0x2ac80:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2ac94;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2ac94:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a58c;
                    run_2a400(); return;
                case 0x2acac:
                    r5 = r0 + 1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2b0a8;
                        run_2b000(); return;
                    }
                    r6 = r29 + 144;
                    r5 = r0 + 2;
                    r16 = r6 + r0;
                    if(r4 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2ad00;
                        continue;
                    }
                    r5 = readPages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff];
                case 0x2acd0:
                    r4 = r2 & 15;
                    r4 = r5 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r16 = r16 + -1;
                    r2 = r2 >>> 4;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2acd0;
                        continue;
                    }
                case 0x2acf0:
                    r6 = r6 - r16;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x2a6ec;
                    run_2a600(); return;
                case 0x2ad00:
                    r4 = r2 & 7;
                    r16 = r16 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ad00;
                        continue;
                    }
                    r2 = r17 & 1;
                    r5 = r16 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2acf0;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2acf0;
                        continue;
                    }
                    r16 = r16 + -1;
                    r6 = r6 - r16;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x2a6ec;
                    run_2a600(); return;
                case 0x2ad50:
                    r18 = r18 < 102 ? 1 : 0;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ab5c;
                        run_2aa00(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x2b0f4;
                        run_2b000(); return;
                    }
                    r3 = 5 << 16;
                    r3 = r3 + 21076;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b6d4;
                        run_2b600(); return;
                    }
                    r8 = r8 + 8;
                case 0x2adb8:
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r3 = r3 < r4 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2addc;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a450;
                        run_2a400(); return;
                    }
                case 0x2addc:
                    r3 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                case 0x2ae00:
                    pc=0x2ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ae00() throws ExecutionException { /* 0x2ae00 - 0x2b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ae00:
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ba18;
                        run_2ba00(); return;
                    }
                    r8 = r8 + 8;
                case 0x2ae18:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a450;
                        run_2a400(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b308;
                        run_2b200(); return;
                    }
                    r5 = 5 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r5 + 25140;
                    r18 = r0 + 16;
                    r20 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2ae68;
                    continue;
                case 0x2ae54:
                    r8 = r8 + 8;
                case 0x2ae58:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b314;
                        run_2b200(); return;
                    }
                case 0x2ae68:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ae54;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2aea0;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2aea0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ae58;
                    continue;
                case 0x2aebc:
                    r3 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r4 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r20 = r3 - r4;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a318;
                        run_2a200(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bd2c;
                        run_2bc00(); return;
                    }
                    r4 = 5 << 16;
                    r23 = r4 + 25140;
                    r4 = r23 + r0;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r16;
                    r23 = r20 + r0;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r17 + r0;
                    r7 = r0 + 16;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2af24;
                    continue;
                case 0x2af10:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2af88;
                        continue;
                    }
                case 0x2af24:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r17;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r7;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2af10;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    writePages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x2af60;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2af60:
                    r7 = readPages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2af24;
                        continue;
                    }
                case 0x2af88:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r17 = r20 + r0;
                    r20 = r23 + r0;
                    r23 = r4 + r0;
                case 0x2af9c:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b5b8;
                        run_2b400(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2a318;
                    run_2a200(); return;
                case 0x2afcc:
                    r3 = r17 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ab80;
                        run_2aa00(); return;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ac24;
                        run_2ac00(); return;
                    }
                case 0x2aff4:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                case 0x2b000:
                    pc=0x2b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b000() throws ExecutionException { /* 0x2b000 - 0x2b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b000:
                    /* Next insn is delay slot */ 
                    r31=0x2b008;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2b008:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ac28;
                    run_2ac00(); return;
                case 0x2b024:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2b038;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2b038:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a414;
                    run_2a400(); return;
                case 0x2b050:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2b064;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2b064:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a2c4;
                    run_2a200(); return;
                case 0x2b07c:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2b090;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2b090:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a308;
                    run_2a200(); return;
                case 0x2b0a8:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b328;
                        run_2b200(); return;
                    }
                    r2 = r2 + 48;
                    r4 = r0 + 1;
                    addr=r29+143;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r4;
                    r16 = r29 + 143;
                    /* Next insn is delay slot */ 
                    pc=0x2a6ec;
                    run_2a600(); return;
                case 0x2b0d0:
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r0;
                    r16 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=0x2a6ec;
                    run_2a600(); return;
                case 0x2b0e0:
                    r4 = r0 + 2;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a6a4;
                    run_2a600(); return;
                case 0x2b0f4:
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b700;
                        run_2b600(); return;
                    }
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r18 = r16 + r3;
                    r20 = r18 - r16;
                    r3 = r4 < r20 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b124;
                        continue;
                    }
                    r20 = r4 + r0;
                case 0x2b124:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b158;
                        continue;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bb68;
                        run_2ba00(); return;
                    }
                    r8 = r8 + 8;
                case 0x2b158:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bb5c;
                        run_2ba00(); return;
                    }
                case 0x2b160:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r20 = r3 - r20;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b3dc;
                        run_2b200(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c094;
                        run_2c000(); return;
                    }
                    r5 = 5 << 16;
                    r23 = r5 + 25140;
                    r4 = r23 + r0;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r16;
                    r23 = r20 + r0;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r30 = r0 + 16;
                    r18 = r17 + r0;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b1c8;
                    continue;
                case 0x2b1b4:
                    r8 = r8 + 8;
                case 0x2b1b8:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b39c;
                        run_2b200(); return;
                    }
                case 0x2b1c8:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r17;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b1b4;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2b200;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2b200:
                    pc=0x2b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b200() throws ExecutionException { /* 0x2b200 - 0x2b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b200:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b1b8;
                    run_2b000(); return;
                case 0x2b21c:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2b230;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2b230:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a288;
                    run_2a200(); return;
                case 0x2b24c:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r4 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ac28;
                        run_2ac00(); return;
                    }
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c084;
                        run_2c000(); return;
                    }
                    r4 = 5 << 16;
                    r23 = r4 + 25140;
                    r18 = r0 + 16;
                    r20 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2b298;
                    continue;
                case 0x2b284:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2f4;
                        continue;
                    }
                case 0x2b298:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b284;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2b2d0;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2b2d0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b298;
                        continue;
                    }
                case 0x2b2f4:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                    /* Next insn is delay slot */ 
                    pc=0x2ac0c;
                    run_2ac00(); return;
                case 0x2b308:
                    r4 = 5 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r4 + 25140;
                case 0x2b314:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                    /* Next insn is delay slot */ 
                    pc=0x2ac3c;
                    run_2ac00(); return;
                case 0x2b328:
                    r6 = r29 + 144;
                    r16 = r6 + r0;
                    r4 = r0 + 10;
                case 0x2b334:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x2b340;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x2b340:
                    r16 = r16 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b334;
                        continue;
                    }
                    r6 = r6 - r16;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x2a6ec;
                    run_2a600(); return;
                case 0x2b36c:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x29eb8;
                    run_29e00(); return;
                case 0x2b39c:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r17 = r18 + r0;
                    r18 = r20 + r0;
                    r20 = r23 + r0;
                    r23 = r4 + r0;
                case 0x2b3b4:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc50;
                        run_2bc00(); return;
                    }
                    r8 = r8 + 8;
                case 0x2b3dc:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r16 + r3;
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b408;
                        run_2b400(); return;
                    }
                    r4 = r17 & 1;
                case 0x2b400:
                    pc=0x2b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b400() throws ExecutionException { /* 0x2b400 - 0x2b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b400:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b43c;
                        continue;
                    }
                case 0x2b408:
                    r4 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r5 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + r5;
                    r4 = r4 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bbcc;
                        run_2ba00(); return;
                    }
                    r8 = r8 + 8;
                case 0x2b43c:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r18 = r18 - r16;
                    r3 = r4 - r3;
                    r4 = r18 < r3 ? 1 : 0;
                    r20 = r3 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b45c;
                        continue;
                    }
                    r20 = r18 + r0;
                case 0x2b45c:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b490;
                        continue;
                    }
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r4 = r4 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc7c;
                        run_2bc00(); return;
                    }
                    r8 = r8 + 8;
                case 0x2b490:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bcb4;
                        run_2bc00(); return;
                    }
                case 0x2b498:
                    r16 = r3 - r20;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a450;
                        run_2a400(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b308;
                        run_2b200(); return;
                    }
                    r5 = 5 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r5 + 25140;
                    r18 = r0 + 16;
                    r20 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2b4e0;
                    continue;
                case 0x2b4cc:
                    r8 = r8 + 8;
                case 0x2b4d0:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b314;
                        run_2b200(); return;
                    }
                case 0x2b4e0:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b4cc;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2b518;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2b518:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b4d0;
                    continue;
                case 0x2b534:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2b548;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2b548:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r4 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    r3 = r3 + 1;
                    r5 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2abcc;
                        run_2aa00(); return;
                    }
                case 0x2b588:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2b59c;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2b59c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2abd0;
                    run_2aa00(); return;
                case 0x2b5b8:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2b5cc;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2b5cc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a318;
                    run_2a200(); return;
                case 0x2b5e4:
                    f12 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    f13 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2b5f8;
                    pc=0x44400;
                    run_44400(); return;
                case 0x2b5f8:
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b834;
                        run_2b800(); return;
                    }
                case 0x2b600:
                    pc=0x2b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b600() throws ExecutionException { /* 0x2b600 - 0x2b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b600:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ba94;
                        run_2ba00(); return;
                    }
                    r16 = 5 << 16;
                    r16 = r16 + 24772;
                case 0x2b618:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r5 = r0 + 3;
                    r2 = r0 + 3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r5;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a140;
                    run_2a000(); return;
                case 0x2b644:
                    r2 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r2 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x2a9d8;
                    run_2a800(); return;
                case 0x2b658:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2a788;
                    run_2a600(); return;
                case 0x2b66c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2a7ec;
                    run_2a600(); return;
                case 0x2b680:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a6a4;
                    run_2a600(); return;
                case 0x2b6a0:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a6a4;
                    run_2a600(); return;
                case 0x2b6c0:
                    r4 = 5 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r4 + 25140;
                    /* Next insn is delay slot */ 
                    pc=0x2a3ec;
                    run_2a200(); return;
                case 0x2b6d4:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2b6e8;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2b6e8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2adb8;
                    run_2ac00(); return;
                case 0x2b700:
                    r4 = 5 << 16;
                    r4 = r4 + 21076;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2baa4;
                        run_2ba00(); return;
                    }
                    r8 = r8 + 8;
                    r18 = r3 + r0;
                case 0x2b73c:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b760;
                        continue;
                    }
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b760;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a450;
                        run_2a400(); return;
                    }
                case 0x2b760:
                    r3 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bee0;
                        run_2be00(); return;
                    }
                    r8 = r8 + 8;
                case 0x2b79c:
                    r18 = r0 - r18;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bb30;
                        run_2ba00(); return;
                    }
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bb94;
                        run_2ba00(); return;
                    }
                    r5 = 5 << 16;
                    r23 = r5 + 25140;
                    r20 = r0 + 16;
                    r30 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2b7e0;
                    continue;
                case 0x2b7cc:
                    r8 = r8 + 8;
                case 0x2b7d0:
                    r18 = r18 + -16;
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bb9c;
                        run_2ba00(); return;
                    }
                case 0x2b7e0:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b7cc;
                        continue;
                    }
                case 0x2b800:
                    pc=0x2b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b800() throws ExecutionException { /* 0x2b800 - 0x2ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b800:
                    r4 = r30 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2b818;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2b818:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b7d0;
                    run_2b600(); return;
                case 0x2b834:
                    r9 = r0 + -33;
                    r2 = r0 + -1;
                    r20 = r18 & r9;
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2bad4;
                        run_2ba00(); return;
                    }
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2becc;
                        run_2be00(); return;
                    }
                case 0x2b854:
                    r2 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r23 = r17 | 256;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf14;
                        run_2be00(); return;
                    }
                    f0 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r0;
                    f1 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    writePages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff] = f0;
                    writePages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff] = f1;
                case 0x2b87c:
                    r2 = r0 + 102;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2bd40;
                        run_2bc00(); return;
                    }
                    r2 = r0 + 70;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2bd40;
                        run_2bc00(); return;
                    }
                    r2 = r0 + 69;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf3c;
                        run_2be00(); return;
                    }
                    r5 = r30 + r0;
                case 0x2b8a4:
                    r2 = r0 + 2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 176;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 172;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r2 = r29 + 156;
                    r7 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    r6 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff] = r5;
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x2b8e4;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x2b8e4:
                    r16 = r2 + r0;
                    r2 = r0 + 103;
                    r5 = readPages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff];
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b908;
                        continue;
                    }
                    r2 = r0 + 71;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b914;
                        continue;
                    }
                case 0x2b908:
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c06c;
                        run_2c000(); return;
                    }
                case 0x2b914:
                    r2 = r0 + 70;
                    r4 = r16 + r5;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2be4c;
                        run_2be00(); return;
                    }
                case 0x2b924:
                    f0 = r0;
                    f2 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x2bd20;
                        run_2bc00(); return;
                    }
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b980;
                        continue;
                    }
                    r5 = r0 + 48;
                case 0x2b960:
                    r3 = r2 + 1;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b960;
                        continue;
                    }
                case 0x2b980:
                    r2 = r2 - r16;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r2;
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2bcf4;
                        run_2bc00(); return;
                    }
                    r2 = r18 < 102 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c180;
                        run_2c000(); return;
                    }
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = r0 + 102;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2bfac;
                        run_2be00(); return;
                    }
                case 0x2b9b4:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r2 = r4 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf48;
                        run_2be00(); return;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf80;
                        run_2be00(); return;
                    }
                    r2 = r4 + r0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c164;
                        run_2c000(); return;
                    }
                case 0x2b9e4:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r18 = r0 + 103;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                case 0x2b9f0:
                    r5 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bcc0;
                        run_2bc00(); return;
                    }
                case 0x2ba00:
                    pc=0x2ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ba00() throws ExecutionException { /* 0x2ba00 - 0x2bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ba00:
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a140;
                    run_2a000(); return;
                case 0x2ba18:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2ba2c;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2ba2c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ae18;
                    run_2ae00(); return;
                case 0x2ba44:
                    r16 = 5 << 16;
                    r16 = r16 + 24760;
                    /* Next insn is delay slot */ 
                    pc=0x2aa5c;
                    run_2aa00(); return;
                case 0x2ba54:
                    r30 = r0 + -1;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29f94;
                    run_29e00(); return;
                case 0x2ba64:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r0 + 64;
                    /* Next insn is delay slot */ 
                    r31=0x2ba74;
                    pc=0x25200;
                    run_25200(); return;
                case 0x2ba74:
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r2;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c18c;
                        run_2c000(); return;
                    }
                    r2 = r0 + 64;
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x29e84;
                    run_29e00(); return;
                case 0x2ba94:
                    r16 = 5 << 16;
                    r16 = r16 + 24768;
                    /* Next insn is delay slot */ 
                    pc=0x2b618;
                    run_2b600(); return;
                case 0x2baa4:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2bab8;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2bab8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r18 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b73c;
                    run_2b600(); return;
                case 0x2bad4:
                    r30 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x2b854;
                    run_2b800(); return;
                case 0x2bae0:
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x2baec;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2baec:
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a12c;
                        run_2a000(); return;
                    }
                case 0x2bafc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a12c;
                    run_2a000(); return;
                case 0x2bb08:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2bb1c;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2bb1c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                case 0x2bb30:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x2ac3c;
                    run_2ac00(); return;
                case 0x2bb48:
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x2a258;
                    run_2a200(); return;
                case 0x2bb5c:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b160;
                    run_2b000(); return;
                case 0x2bb68:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2bb7c;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2bb7c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b158;
                    run_2b000(); return;
                case 0x2bb94:
                    r4 = 5 << 16;
                    r23 = r4 + 25140;
                case 0x2bb9c:
                    r3 = r3 + 1;
                    r2 = r2 + r18;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bb08;
                        continue;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2bb30;
                    continue;
                case 0x2bbcc:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2bbe0;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2bbe0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b43c;
                    run_2b400(); return;
                case 0x2bbfc:
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                case 0x2bc00:
                    pc=0x2bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2bc00() throws ExecutionException { /* 0x2bc00 - 0x2be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2bc00:
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x2a508;
                    run_2a400(); return;
                case 0x2bc0c:
                    r3 = (r30&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r2 = r30 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc20;
                        continue;
                    }
                    r2 = r0 + 6;
                case 0x2bc20:
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c078;
                        run_2c000(); return;
                    }
                case 0x2bc2c:
                    r16 = 5 << 16;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r20;
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    r16 = r16 + 24776;
                    /* Next insn is delay slot */ 
                    pc=0x2a158;
                    run_2a000(); return;
                case 0x2bc50:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2bc64;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2bc64:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b3dc;
                    run_2b200(); return;
                case 0x2bc7c:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2bc90;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2bc90:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = r5 - r3;
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b490;
                    run_2b400(); return;
                case 0x2bcb4:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b498;
                    run_2b400(); return;
                case 0x2bcc0:
                    r3 = r0 + 45;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r3 = r0 + 45;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a148;
                    run_2a000(); return;
                case 0x2bce0:
                    r2 = r0 + 45;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 45;
                    /* Next insn is delay slot */ 
                    pc=0x2aa48;
                    run_2aa00(); return;
                case 0x2bcf4:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r3 = r2 < -3 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bd90;
                        continue;
                    }
                    r3 = r30 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bd90;
                        continue;
                    }
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2b9b4;
                    run_2b800(); return;
                case 0x2bd20:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b980;
                    run_2b800(); return;
                case 0x2bd2c:
                    r5 = 5 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r5 + 25140;
                    /* Next insn is delay slot */ 
                    pc=0x2af9c;
                    run_2ae00(); return;
                case 0x2bd40:
                    r2 = r0 + 3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 176;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 172;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r2 = r29 + 156;
                    r7 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    r6 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r30;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x2bd7c;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x2bd7c:
                    r16 = r2 + r0;
                    r5 = r30 + r0;
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2b914;
                    run_2b800(); return;
                case 0x2bd90:
                    r18 = r18 + -2;
                case 0x2bd94:
                    r2 = r2 + -1;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r2;
                    addr=r29+164;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c134;
                        run_2c000(); return;
                    }
                    r3 = r0 + 43;
                    addr=r29+165;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2bdb0:
                    r3 = r2 < 10 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bfd8;
                        run_2be00(); return;
                    }
                    r2 = r2 + 48;
                    r3 = r0 + 48;
                    addr=r29+167;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+166;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 168;
                    r4 = r29 + 164;
                case 0x2bdd4:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = r2 - r4;
                    r3 = r3 + r4;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    r2 = r3 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2be20;
                        run_2be00(); return;
                    }
                case 0x2bdf8:
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                case 0x2be00:
                    pc=0x2be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2be00() throws ExecutionException { /* 0x2be00 - 0x2c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2be00:
                    r3 = r3 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2be3c;
                        continue;
                    }
                case 0x2be14:
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b9f0;
                    run_2b800(); return;
                case 0x2be20:
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bdf8;
                        run_2bc00(); return;
                    }
                    r2 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2be14;
                        continue;
                    }
                case 0x2be3c:
                    r2 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b9f0;
                    run_2b800(); return;
                case 0x2be4c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 48;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2be70;
                        continue;
                    }
                case 0x2be5c:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x2b924;
                    run_2b800(); return;
                case 0x2be70:
                    f0 = r0;
                    f2 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x2be5c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r2 = r2 - r5;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r2;
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x2b924;
                    run_2b800(); return;
                case 0x2beac:
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r30;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r30;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a140;
                    run_2a000(); return;
                case 0x2becc:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b854;
                        run_2b800(); return;
                    }
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2b854;
                    run_2b800(); return;
                case 0x2bee0:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x2bef4;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x2bef4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a050;
                        run_2a000(); return;
                    }
                    r18 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b79c;
                    run_2b600(); return;
                case 0x2bf14:
                    r3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    r5 = r0 + 45;
                    writePages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff] = r2;
                    writePages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff] = r4;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x2b87c;
                    run_2b800(); return;
                case 0x2bf3c:
                    r5 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2b8a4;
                    run_2b800(); return;
                case 0x2bf48:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c0f4;
                        run_2c000(); return;
                    }
                    r2 = r0 + 1;
                case 0x2bf5c:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf9c;
                        continue;
                    }
                case 0x2bf74:
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x2b9f0;
                    run_2b800(); return;
                case 0x2bf80:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf74;
                        continue;
                    }
                case 0x2bf9c:
                    r2 = r0 + r0;
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x2b9f0;
                    run_2b800(); return;
                case 0x2bfac:
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c0cc;
                        run_2c000(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c0a8;
                        run_2c000(); return;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c0a8;
                        run_2c000(); return;
                    }
                    r2 = r3 + r0;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2b9f0;
                    run_2b800(); return;
                case 0x2bfd8:
                    r6 = r29 + 163;
                    r3 = r6 + r0;
                    r4 = r0 + 10;
                case 0x2bfe4:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r4; lo = r2/r4;
                        pc=0x2bff0;
                        continue;
                    }
                    hi = r2%r4; lo = r2/r4;
                    throw new ExecutionException("Break");
                case 0x2bff0:
                    r3 = r3 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2c000:
                    pc=0x2c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c000() throws ExecutionException { /* 0x2c000 - 0x2c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c000:
                    r2 = lo;
                    r5 = r2 < 10 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bfe4;
                        run_2be00(); return;
                    }
                    r2 = r2 + 48;
                    r5 = r2 << 24;
                    r4 = r3 + -1;
                    r5 = r5 >> 24;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c170;
                        continue;
                    }
                    r2 = r29 + 166;
                    /* Next insn is delay slot */ 
                    pc=0x2c040;
                    continue;
                case 0x2c03c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x2c040:
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2c03c;
                        continue;
                    }
                    r4 = r29 + 164;
                    r2 = r4 - r3;
                    r3 = r29 + 166;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x2bdd4;
                    run_2bc00(); return;
                case 0x2c06c:
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2b980;
                    run_2b800(); return;
                case 0x2c078:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2bc2c;
                    run_2bc00(); return;
                case 0x2c084:
                    r5 = 5 << 16;
                    r23 = r5 + 25140;
                    /* Next insn is delay slot */ 
                    pc=0x2b2f4;
                    run_2b200(); return;
                case 0x2c094:
                    r4 = 5 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r4 + 25140;
                    /* Next insn is delay slot */ 
                    pc=0x2b3b4;
                    run_2b200(); return;
                case 0x2c0a8:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r2 = r30 + 1;
                    r2 = r3 + r2;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b9f0;
                        run_2b800(); return;
                    }
                case 0x2c0c0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b9f0;
                    run_2b800(); return;
                case 0x2c0cc:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c148;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c148;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = r0 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2b9f0;
                    run_2b800(); return;
                case 0x2c0f4:
                    r2 = r0 + 2;
                    r2 = r2 - r3;
                    /* Next insn is delay slot */ 
                    pc=0x2bf5c;
                    run_2be00(); return;
                case 0x2c104:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r30 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = r3 + 4;
                    r3 = r4 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ab1c;
                        run_2aa00(); return;
                    }
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r2;
                    r30 = r0 + -1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29f8c;
                    run_29e00(); return;
                case 0x2c134:
                    r3 = r0 + 45;
                    r2 = r0 - r2;
                    addr=r29+165;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2bdb0;
                    run_2bc00(); return;
                case 0x2c148:
                    r30 = r30 + 2;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r30;
                    r2 = r30 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b9f0;
                        run_2b800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2c0c0;
                    continue;
                case 0x2c164:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b9e4;
                    run_2b800(); return;
                case 0x2c170:
                    r2 = r29 + 166;
                    r4 = r29 + 164;
                    /* Next insn is delay slot */ 
                    pc=0x2bdd4;
                    run_2bc00(); return;
                case 0x2c180:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2bd94;
                    run_2bc00(); return;
                case 0x2c18c:
                    r3 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2a068;
                    run_2a000(); return;
                case 0x2c200:
                    pc=0x2c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c200() throws ExecutionException { /* 0x2c200 - 0x2c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c200:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2c400:
                    pc=0x2c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c400() throws ExecutionException { /* 0x2c400 - 0x2c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c400:
                    r29 = r29 + -1328;
                    writePages[(r29+1324)>>>12][((r29+1324)>>>2)&0x3ff] = r31;
                    writePages[(r29+1312)>>>12][((r29+1312)>>>2)&0x3ff] = r22;
                    writePages[(r29+1308)>>>12][((r29+1308)>>>2)&0x3ff] = r21;
                    r22 = r5 + r0;
                    r21 = r4 + r0;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r6;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r7;
                    writePages[(r29+1320)>>>12][((r29+1320)>>>2)&0x3ff] = r30;
                    writePages[(r29+1316)>>>12][((r29+1316)>>>2)&0x3ff] = r23;
                    writePages[(r29+1304)>>>12][((r29+1304)>>>2)&0x3ff] = r20;
                    writePages[(r29+1300)>>>12][((r29+1300)>>>2)&0x3ff] = r19;
                    writePages[(r29+1296)>>>12][((r29+1296)>>>2)&0x3ff] = r18;
                    writePages[(r29+1292)>>>12][((r29+1292)>>>2)&0x3ff] = r17;
                    writePages[(r29+1288)>>>12][((r29+1288)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x2c444;
                    pc=0x41600;
                    run_41600(); return;
                case 0x2c444:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x2c45c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2c45c:
                    writePages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff] = r2;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c478;
                        continue;
                    }
                    r2 = readPages[(r21+56)>>>12][((r21+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7ec;
                        run_2c600(); return;
                    }
                case 0x2c478:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c4ac;
                        continue;
                    }
                    r4 = readPages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff] = r2;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x2c4ac:
                    r4 = r2 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c658;
                        run_2c600(); return;
                    }
                    r4 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c658;
                        run_2c600(); return;
                    }
                    r2 = r2 & 26;
                    r4 = r0 + 10;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2c688;
                        run_2c600(); return;
                    }
                case 0x2c4d8:
                    r3 = r29 + 40;
                    r2 = 5 << 16;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r3;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r0;
                    writePages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff] = r0;
                    writePages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff] = r0;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r0;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r0;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r0;
                    r8 = r3 + r0;
                    r19 = r2 + 25544;
                case 0x2c50c:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cca4;
                        run_2cc00(); return;
                    }
                case 0x2c524:
                    r3 = r0 + 37;
                    r16 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2c544;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2c5b0;
                    continue;
                case 0x2c53c:
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2c558;
                        continue;
                    }
                case 0x2c544:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c53c;
                        continue;
                    }
                case 0x2c558:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r17 = r16 - r3;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c5b0;
                        continue;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r2 = r2 + r17;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c780;
                        run_2c600(); return;
                    }
                    r8 = r8 + 8;
                case 0x2c5a0:
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r3 = r3 + r17;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r3;
                case 0x2c5b0:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7a8;
                        run_2c600(); return;
                    }
                    r16 = r16 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r30 = r0 + -1;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r0;
                    r17 = r0 + r0;
                    r6 = r0 + 42;
                    r7 = r0 + r0;
                case 0x2c5e0:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r3 = r16 + 1;
                case 0x2c5e8:
                    r2 = r18 + -32;
                    r4 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d210;
                        run_2d200(); return;
                    }
                    r4 = 5 << 16;
                    r2 = r2 << 2;
                case 0x2c600:
                    pc=0x2c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c600() throws ExecutionException { /* 0x2c600 - 0x2c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c600:
                    r4 = r4 + 25172;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x2c618:
                    r17 = r17 | 16;
                case 0x2c61c:
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c5e0;
                    run_2c400(); return;
                case 0x2c628:
                    r4 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r7 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d200;
                        run_2d200(); return;
                    }
                    r7 = r0 - r7;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                case 0x2c648:
                    r17 = r17 | 4;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c5e0;
                    run_2c400(); return;
                case 0x2c658:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c668;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x2c668:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c748;
                        continue;
                    }
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 10;
                    r2 = r3 & 65535;
                    r2 = r2 & 26;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2c4d8;
                        run_2c400(); return;
                    }
                case 0x2c688:
                    addr=r22+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c4d8;
                        run_2c400(); return;
                    }
                    addr=r29+1078;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r22+36)>>>12][((r22+36)>>>2)&0x3ff];
                    r3 = r3 & r4;
                    addr=r29+1076;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff];
                    r2 = r29 + 40;
                    r6 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r7 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r2;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    r2 = r0 + 1024;
                    r5 = r29 + 1064;
                    writePages[(r29+1164)>>>12][((r29+1164)>>>2)&0x3ff] = r3;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r2;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r2;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c6f4;
                    pc=0x2c400;
                    run_2c400(); return;
                case 0x2c6f4:
                    r16 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c718;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    r31=0x2c710;
                    pc=0x20200;
                    run_20200(); return;
                case 0x2c710:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e778;
                        run_2e600(); return;
                    }
                case 0x2c718:
                    addr=r29+1076;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c73c;
                        continue;
                    }
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2c73c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c74c;
                    continue;
                case 0x2c748:
                    r2 = r0 + -1;
                case 0x2c74c:
                    r31 = readPages[(r29+1324)>>>12][((r29+1324)>>>2)&0x3ff];
                    r30 = readPages[(r29+1320)>>>12][((r29+1320)>>>2)&0x3ff];
                    r23 = readPages[(r29+1316)>>>12][((r29+1316)>>>2)&0x3ff];
                    r22 = readPages[(r29+1312)>>>12][((r29+1312)>>>2)&0x3ff];
                    r21 = readPages[(r29+1308)>>>12][((r29+1308)>>>2)&0x3ff];
                    r20 = readPages[(r29+1304)>>>12][((r29+1304)>>>2)&0x3ff];
                    r19 = readPages[(r29+1300)>>>12][((r29+1300)>>>2)&0x3ff];
                    r18 = readPages[(r29+1296)>>>12][((r29+1296)>>>2)&0x3ff];
                    r17 = readPages[(r29+1292)>>>12][((r29+1292)>>>2)&0x3ff];
                    r16 = readPages[(r29+1288)>>>12][((r29+1288)>>>2)&0x3ff];
                    r29 = r29 + 1328;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2c780:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2c794;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2c794:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        continue;
                    }
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2c5a0;
                    run_2c400(); return;
                case 0x2c7a8:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2c7cc;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2c7cc:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c748;
                        continue;
                    }
                    r2 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2c74c;
                    continue;
                case 0x2c7ec:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c7f8;
                    pc=0x21400;
                    run_21400(); return;
                case 0x2c7f8:
                    /* Next insn is delay slot */ 
                    pc=0x2c478;
                    run_2c400(); return;
                case 0x2c800:
                    pc=0x2c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c800() throws ExecutionException { /* 0x2c800 - 0x2ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c800:
                    r5 = r0 + 43;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c5e0;
                    run_2c400(); return;
                case 0x2c810:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r3 + 4;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e2a4;
                        run_2e200(); return;
                    }
                    r4 = r16 + r0;
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e184;
                        run_2e000(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x2c850;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x2c850:
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e438;
                        run_2e400(); return;
                    }
                    r2 = r2 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e07c;
                        run_2e000(); return;
                    }
                case 0x2c870:
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e1a0;
                        run_2e000(); return;
                    }
                case 0x2c880:
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                case 0x2c894:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c8ac;
                        continue;
                    }
                case 0x2c89c:
                    r2 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                case 0x2c8ac:
                    r4 = r17 & 2;
                    writePages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff] = r4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c8cc;
                        continue;
                    }
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                case 0x2c8cc:
                    r2 = r17 & 132;
                    writePages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d264;
                        run_2d200(); return;
                    }
                    r4 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r20 = r4 - r5;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d264;
                        run_2d200(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e1ac;
                        run_2e000(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    r23 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x2c92c;
                    continue;
                case 0x2c918:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c988;
                        continue;
                    }
                case 0x2c92c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r23;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c918;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2c964;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2c964:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c92c;
                        continue;
                    }
                case 0x2c988:
                    r3 = r3 + 1;
                    r4 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r2 = r20 + r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d8e4;
                        run_2d800(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r8 = r8 + 8;
                case 0x2c9b8:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c9f4;
                        continue;
                    }
                    r3 = r29 + 1206;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d760;
                        run_2d600(); return;
                    }
                    r8 = r8 + 8;
                case 0x2c9f4:
                    r3 = readPages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca38;
                        run_2ca00(); return;
                    }
                case 0x2ca00:
                    pc=0x2ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ca00() throws ExecutionException { /* 0x2ca00 - 0x2cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ca00:
                    r3 = r29 + 1204;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 2;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d734;
                        run_2d600(); return;
                    }
                    r8 = r8 + 8;
                case 0x2ca38:
                    r4 = readPages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff];
                    r3 = r0 + 128;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2d5cc;
                        run_2d400(); return;
                    }
                case 0x2ca48:
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r20 = r30 - r3;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb18;
                        continue;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2df0c;
                        run_2de00(); return;
                    }
                    r5 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 25528;
                    r30 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x2ca94;
                    continue;
                case 0x2ca80:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2caf0;
                        continue;
                    }
                case 0x2ca94:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca80;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2cacc;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2cacc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca94;
                        continue;
                    }
                case 0x2caf0:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d708;
                        run_2d600(); return;
                    }
                    r8 = r8 + 8;
                case 0x2cb18:
                    r3 = r17 & 256;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d464;
                        run_2d400(); return;
                    }
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d368;
                        run_2d200(); return;
                    }
                case 0x2cb50:
                    r8 = r8 + 8;
                case 0x2cb54:
                    r17 = r17 & 4;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cc50;
                        run_2cc00(); return;
                    }
                    r3 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r16 = r3 - r4;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cc50;
                        run_2cc00(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e2e8;
                        run_2e200(); return;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    r17 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x2cbac;
                    continue;
                case 0x2cb98:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cc08;
                        run_2cc00(); return;
                    }
                case 0x2cbac:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r6 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb98;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2cbe4;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2cbe4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x2cc00:
                    pc=0x2cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2cc00() throws ExecutionException { /* 0x2cc00 - 0x2ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2cc00:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cbac;
                        run_2ca00(); return;
                    }
                case 0x2cc08:
                    r3 = r3 + 1;
                    r5 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r2 = r2 + r16;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cc50;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2cc44;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2cc44:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                case 0x2cc50:
                    r3 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r5 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cc6c;
                        continue;
                    }
                    r3 = r5 + r0;
                case 0x2cc6c:
                    r4 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r4 = r4 + r3;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d394;
                        run_2d200(); return;
                    }
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    r8 = r29 + 40;
                case 0x2cc8c:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c524;
                        run_2c400(); return;
                    }
                case 0x2cca4:
                    r16 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2c5b0;
                    run_2c400(); return;
                case 0x2ccb0:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c61c;
                        run_2c600(); return;
                    }
                    r5 = r0 + 32;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c5e0;
                    run_2c400(); return;
                case 0x2ccc8:
                    r17 = r17 | 1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c5e0;
                    run_2c400(); return;
                case 0x2ccd8:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r4 = r3 + 1;
                    if(r18 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2e6fc;
                        run_2e600(); return;
                    }
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r30 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cd2c;
                        continue;
                    }
                case 0x2ccfc:
                    r4 = r4 + 1;
                    r3 = r30 << 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r30 = r30 << 3;
                    r30 = r3 + r30;
                    r30 = r2 + r30;
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ccfc;
                        continue;
                    }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e0d8;
                        run_2e000(); return;
                    }
                case 0x2cd2c:
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c5e8;
                    run_2c400(); return;
                case 0x2cd38:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d18c;
                        run_2d000(); return;
                    }
                case 0x2cd50:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                case 0x2cd6c:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cd7c;
                        continue;
                    }
                    r5 = r0 + -129;
                    r17 = r17 & r5;
                case 0x2cd7c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d3c0;
                        run_2d200(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d3c0;
                        run_2d200(); return;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d7b4;
                        run_2d600(); return;
                    }
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d7b4;
                        run_2d600(); return;
                    }
                    r2 = r0 + 48;
                    addr=r29+1103;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r16 = r29 + 1103;
                case 0x2cdb4:
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r4 = r2 < r30 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cdcc;
                        continue;
                    }
                    r2 = r30 + r0;
                case 0x2cdcc:
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c894;
                    run_2c800(); return;
                case 0x2cddc:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d1d0;
                        run_2d000(); return;
                    }
                case 0x2cdf4:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                case 0x2ce00:
                    pc=0x2ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ce00() throws ExecutionException { /* 0x2ce00 - 0x2d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ce00:
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2cd6c;
                    run_2cc00(); return;
                case 0x2ce18:
                    r7 = r0 + r0;
                    r2 = r18 + -48;
                case 0x2ce20:
                    r3 = r3 + 1;
                    r4 = r7 << 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r7 = r7 << 3;
                    r7 = r4 + r7;
                    r7 = r7 + r2;
                    r2 = r18 + -48;
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce20;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2c5e8;
                    run_2c400(); return;
                case 0x2ce50:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d0bc;
                        run_2d000(); return;
                    }
                case 0x2ce68:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x2ce7c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dc34;
                        run_2dc00(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2cd6c;
                    run_2cc00(); return;
                case 0x2ce94:
                    r17 = r17 | 64;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c5e0;
                    run_2c400(); return;
                case 0x2cea4:
                    r17 = r17 | 128;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c5e0;
                    run_2c400(); return;
                case 0x2ceb4:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r0 + 48;
                    addr=r29+1204;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 120;
                    addr=r29+1205;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r17 = r17 | 2;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r3 = 5 << 16;
                    r3 = r3 + 20964;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r3;
                    r4 = r0 + 2;
                    r18 = r0 + 120;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2cd6c;
                    run_2cc00(); return;
                case 0x2cf08:
                    r2 = r17 & 8;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2de68;
                        run_2de00(); return;
                    }
                    r4 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r4 + 7;
                case 0x2cf2c:
                    r2 = r0 + -8;
                    r2 = r3 & r2;
                    r3 = r2 + 8;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    writePages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff] = f0;
                    f12 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff] = f1;
                    f13 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2cf64;
                    pc=0x44400;
                    run_44400(); return;
                case 0x2cf64:
                    r3 = r0 + 1;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2dc50;
                        run_2dc00(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x2e344;
                        run_2e200(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                case 0x2cf9c:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e0c8;
                        run_2e000(); return;
                    }
                    r16 = 5 << 16;
                    r16 = r16 + 24760;
                case 0x2cfb0:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r4 = r0 + 3;
                    r2 = r0 + 3;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r4;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c894;
                    run_2c800(); return;
                case 0x2cfd8:
                    r17 = r17 | 8;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c5e0;
                    run_2c400(); return;
                case 0x2cfe8:
                    r2 = 5 << 16;
                    r2 = r2 + 20944;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r2;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                case 0x2d000:
                    pc=0x2d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d000() throws ExecutionException { /* 0x2d000 - 0x2d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d000:
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d104;
                        continue;
                    }
                case 0x2d00c:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x2d020:
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d7c4;
                        run_2d600(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d7c4;
                        run_2d600(); return;
                    }
                    r3 = r0 + 48;
                    addr=r29+1204;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1205;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = r17 | 2;
                    r4 = r0 + 2;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2cd6c;
                    run_2cc00(); return;
                case 0x2d058:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x2d078:
                    r4 = r0 + 1;
                    r5 = r0 + 1;
                    r3 = r0 + r0;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r4;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r5;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    r16 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    pc=0x2c8ac;
                    run_2c800(); return;
                case 0x2d0a0:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce68;
                        run_2ce00(); return;
                    }
                case 0x2d0bc:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2de9c;
                        run_2de00(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2ce7c;
                    run_2ce00(); return;
                case 0x2d0e0:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = 5 << 16;
                    r3 = r3 + 20964;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d00c;
                        continue;
                    }
                case 0x2d104:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2de54;
                        run_2de00(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2d020;
                    continue;
                case 0x2d128:
                    r2 = r17 & 16;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d234;
                        run_2d200(); return;
                    }
                    r17 = r17 & 64;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d234;
                        run_2d200(); return;
                    }
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2c50c;
                    run_2c400(); return;
                case 0x2d178:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cd50;
                        run_2cc00(); return;
                    }
                case 0x2d18c:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2de7c;
                        run_2de00(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2cd6c;
                    run_2cc00(); return;
                case 0x2d1bc:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cdf4;
                        run_2cc00(); return;
                    }
                case 0x2d1d0:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2deb0;
                        run_2de00(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2cd6c;
                    run_2cc00(); return;
                case 0x2d200:
                    pc=0x2d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d200() throws ExecutionException { /* 0x2d200 - 0x2d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d200:
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c5e0;
                    run_2c400(); return;
                case 0x2d210:
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7a8;
                        run_2c600(); return;
                    }
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2d078;
                    run_2d000(); return;
                case 0x2d234:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2c50c;
                    run_2c400(); return;
                case 0x2d264:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2c9b8;
                    run_2c800(); return;
                case 0x2d270:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    r3 = r4 < 2 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d6b0;
                        run_2d600(); return;
                    }
                case 0x2d294:
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2db8c;
                        run_2da00(); return;
                    }
                    r8 = r8 + 8;
                case 0x2d2b4:
                    r4 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r5 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dbbc;
                        run_2da00(); return;
                    }
                    r8 = r8 + 8;
                case 0x2d2e4:
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x2d914;
                        run_2d800(); return;
                    }
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r4 = r5 + -1;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r4;
                case 0x2d320:
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d6d8;
                        run_2d600(); return;
                    }
                case 0x2d338:
                    r8 = r8 + 8;
                case 0x2d33c:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = r29 + 1188;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    r2 = r5 + r2;
                case 0x2d350:
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb50;
                        run_2ca00(); return;
                    }
                case 0x2d368:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2d37c;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2d37c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2cb54;
                    run_2ca00(); return;
                case 0x2d394:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2d3a8;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2d3a8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2cc8c;
                    run_2cc00(); return;
                case 0x2d3c0:
                    r5 = r0 + 1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2d78c;
                        run_2d600(); return;
                    }
                    r6 = r29 + 1104;
                    r5 = r0 + 2;
                    r16 = r6 + r0;
                    if(r4 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2d414;
                        run_2d400(); return;
                    }
                    r5 = readPages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff];
                case 0x2d3e4:
                    r4 = r2 & 15;
                    r4 = r5 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r16 = r16 + -1;
                    r2 = r2 >>> 4;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d3e4;
                        continue;
                    }
                case 0x2d400:
                    pc=0x2d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d400() throws ExecutionException { /* 0x2d400 - 0x2d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d400:
                case 0x2d404:
                    r6 = r6 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x2cdb4;
                    run_2cc00(); return;
                case 0x2d414:
                    r4 = r2 & 7;
                    r16 = r16 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d414;
                        continue;
                    }
                    r2 = r17 & 1;
                    r5 = r16 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d404;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2d404;
                        continue;
                    }
                    r16 = r16 + -1;
                    r6 = r6 - r16;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x2cdb4;
                    run_2cc00(); return;
                case 0x2d464:
                    r18 = r18 < 102 ? 1 : 0;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d270;
                        run_2d200(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x2d7d8;
                        run_2d600(); return;
                    }
                    r3 = 5 << 16;
                    r3 = r3 + 21076;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2df20;
                        run_2de00(); return;
                    }
                    r8 = r8 + 8;
                case 0x2d4cc:
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r3 = r3 < r4 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d4f0;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb54;
                        run_2ca00(); return;
                    }
                case 0x2d4f0:
                    r3 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e118;
                        run_2e000(); return;
                    }
                    r8 = r8 + 8;
                case 0x2d52c:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb54;
                        run_2ca00(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d9b0;
                        run_2d800(); return;
                    }
                    r5 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 25528;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x2d578;
                    continue;
                case 0x2d564:
                    r8 = r8 + 8;
                case 0x2d568:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d9bc;
                        run_2d800(); return;
                    }
                case 0x2d578:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d564;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2d5b0;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2d5b0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2d568;
                    continue;
                case 0x2d5cc:
                    r3 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r20 = r3 - r4;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca48;
                        run_2ca00(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e3b8;
                        run_2e200(); return;
                    }
                    r4 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 25528;
                    r7 = r0 + 16;
                case 0x2d600:
                    pc=0x2d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d600() throws ExecutionException { /* 0x2d600 - 0x2d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d600:
                    /* Next insn is delay slot */ 
                    pc=0x2d61c;
                    continue;
                case 0x2d608:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d680;
                        continue;
                    }
                case 0x2d61c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r7;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d608;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    writePages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x2d658;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2d658:
                    r7 = readPages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d61c;
                        continue;
                    }
                case 0x2d680:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dc08;
                        run_2dc00(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2ca48;
                    run_2ca00(); return;
                case 0x2d6b0:
                    r3 = r17 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d294;
                        run_2d200(); return;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d338;
                        run_2d200(); return;
                    }
                case 0x2d6d8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2d6ec;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2d6ec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2d33c;
                    run_2d200(); return;
                case 0x2d708:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2d71c;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2d71c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2cb18;
                    run_2ca00(); return;
                case 0x2d734:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2d748;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2d748:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2ca38;
                    run_2ca00(); return;
                case 0x2d760:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2d774;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2d774:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2c9f4;
                    run_2c800(); return;
                case 0x2d78c:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d9d0;
                        run_2d800(); return;
                    }
                    r2 = r2 + 48;
                    r4 = r0 + 1;
                    addr=r29+1103;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r4;
                    r16 = r29 + 1103;
                    /* Next insn is delay slot */ 
                    pc=0x2cdb4;
                    run_2cc00(); return;
                case 0x2d7b4:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r0;
                    r16 = r29 + 1104;
                    /* Next insn is delay slot */ 
                    pc=0x2cdb4;
                    run_2cc00(); return;
                case 0x2d7c4:
                    r4 = r0 + 2;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2cd6c;
                    run_2cc00(); return;
                case 0x2d7d8:
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2df4c;
                        run_2de00(); return;
                    }
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r18 = r16 + r3;
                    r20 = r18 - r16;
                    r3 = r4 < r20 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d808;
                        run_2d800(); return;
                    }
                case 0x2d800:
                    pc=0x2d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d800() throws ExecutionException { /* 0x2d800 - 0x2da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d800:
                    r20 = r4 + r0;
                case 0x2d808:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d83c;
                        continue;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e1cc;
                        run_2e000(); return;
                    }
                    r8 = r8 + 8;
                case 0x2d83c:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e1c0;
                        run_2e000(); return;
                    }
                case 0x2d844:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r20 = r3 - r20;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2da38;
                        run_2da00(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ded0;
                        run_2de00(); return;
                    }
                    r5 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 25528;
                    r30 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x2d890;
                    continue;
                case 0x2d87c:
                    r8 = r8 + 8;
                case 0x2d880:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dedc;
                        run_2de00(); return;
                    }
                case 0x2d890:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d87c;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2d8c8;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2d8c8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2d880;
                    continue;
                case 0x2d8e4:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2d8f8;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2d8f8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2c9b8;
                    run_2c800(); return;
                case 0x2d914:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r4 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d33c;
                        run_2d200(); return;
                    }
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dbec;
                        run_2da00(); return;
                    }
                    r4 = 5 << 16;
                    r23 = r4 + 25528;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x2d95c;
                    continue;
                case 0x2d948:
                    r8 = r8 + 8;
                case 0x2d94c:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dbf4;
                        run_2da00(); return;
                    }
                case 0x2d95c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d948;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2d994;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2d994:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2d94c;
                    continue;
                case 0x2d9b0:
                    r4 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 25528;
                case 0x2d9bc:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                    /* Next insn is delay slot */ 
                    pc=0x2d350;
                    run_2d200(); return;
                case 0x2d9d0:
                    r6 = r29 + 1104;
                    r16 = r6 + r0;
                    r4 = r0 + 10;
                case 0x2d9dc:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x2d9e8;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x2d9e8:
                    r16 = r16 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d9dc;
                        continue;
                    }
                case 0x2da00:
                    pc=0x2da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2da00() throws ExecutionException { /* 0x2da00 - 0x2dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2da00:
                    r6 = r6 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x2cdb4;
                    run_2cc00(); return;
                case 0x2da14:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2da28;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2da28:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x2da38:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r16 + r3;
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2da64;
                        continue;
                    }
                    r4 = r17 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2da98;
                        continue;
                    }
                case 0x2da64:
                    r4 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r5 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r5;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e1f8;
                        run_2e000(); return;
                    }
                    r8 = r8 + 8;
                case 0x2da98:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r18 = r18 - r16;
                    r3 = r4 - r3;
                    r4 = r18 < r3 ? 1 : 0;
                    r20 = r3 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dab8;
                        continue;
                    }
                    r20 = r18 + r0;
                case 0x2dab8:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2daec;
                        continue;
                    }
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e26c;
                        run_2e200(); return;
                    }
                    r8 = r8 + 8;
                case 0x2daec:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e260;
                        run_2e200(); return;
                    }
                case 0x2daf4:
                    r16 = r3 - r20;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb54;
                        run_2ca00(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d9b0;
                        run_2d800(); return;
                    }
                    r5 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 25528;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x2db38;
                    continue;
                case 0x2db24:
                    r8 = r8 + 8;
                case 0x2db28:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d9bc;
                        run_2d800(); return;
                    }
                case 0x2db38:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2db24;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2db70;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2db70:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2db28;
                    continue;
                case 0x2db8c:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2dba0;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2dba0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2d2b4;
                    run_2d200(); return;
                case 0x2dbbc:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2dbd0;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2dbd0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2d2e4;
                    run_2d200(); return;
                case 0x2dbec:
                    r5 = 5 << 16;
                    r23 = r5 + 25528;
                case 0x2dbf4:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                case 0x2dc00:
                    pc=0x2dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2dc00() throws ExecutionException { /* 0x2dc00 - 0x2de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2dc00:
                    /* Next insn is delay slot */ 
                    pc=0x2d320;
                    run_2d200(); return;
                case 0x2dc08:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2dc1c;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2dc1c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2ca48;
                    run_2ca00(); return;
                case 0x2dc34:
                    r3 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    r3 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2cd6c;
                    run_2cc00(); return;
                case 0x2dc50:
                    f12 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    f13 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2dc64;
                    pc=0x44400;
                    run_44400(); return;
                case 0x2dc64:
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e088;
                        run_2e000(); return;
                    }
                    r9 = r0 + -33;
                    r2 = r0 + -1;
                    r20 = r18 & r9;
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2e5f4;
                        run_2e400(); return;
                    }
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2e514;
                        run_2e400(); return;
                    }
                case 0x2dc90:
                    r2 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    r23 = r17 | 256;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e568;
                        run_2e400(); return;
                    }
                    f0 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r0;
                    f1 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    writePages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff] = f0;
                    writePages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff] = f1;
                case 0x2dcb8:
                    r2 = r0 + 102;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2e368;
                        run_2e200(); return;
                    }
                    r2 = r0 + 70;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2e368;
                        run_2e200(); return;
                    }
                    r2 = r0 + 69;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2e55c;
                        run_2e400(); return;
                    }
                    r5 = r30 + r0;
                case 0x2dce0:
                    r2 = r0 + 2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1200;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1196;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r7 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    r2 = r29 + 1180;
                    r6 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    writePages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff] = r5;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x2dd20;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x2dd20:
                    r16 = r2 + r0;
                    r2 = r0 + 103;
                    r5 = readPages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff];
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2dd44;
                        continue;
                    }
                    r2 = r0 + 71;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2dd50;
                        continue;
                    }
                case 0x2dd44:
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e600;
                        run_2e600(); return;
                    }
                case 0x2dd50:
                    r2 = r0 + 70;
                    r4 = r16 + r5;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2e3d8;
                        run_2e200(); return;
                    }
                case 0x2dd60:
                    f0 = r0;
                    f2 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x2e3cc;
                        run_2e200(); return;
                    }
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ddbc;
                        continue;
                    }
                    r5 = r0 + 48;
                case 0x2dd9c:
                    r3 = r2 + 1;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dd9c;
                        continue;
                    }
                case 0x2ddbc:
                    r2 = r2 - r16;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r2;
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2e318;
                        run_2e200(); return;
                    }
                    r2 = r18 < 102 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e7a0;
                        run_2e600(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = r0 + 102;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2e60c;
                        run_2e600(); return;
                    }
                case 0x2ddf0:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r2 = r4 < r3 ? 1 : 0;
                case 0x2de00:
                    pc=0x2de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2de00() throws ExecutionException { /* 0x2de00 - 0x2e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2de00:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e590;
                        run_2e400(); return;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e5c8;
                        run_2e400(); return;
                    }
                    r2 = r4 + r0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e7bc;
                        run_2e600(); return;
                    }
                case 0x2de20:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r18 = r0 + 103;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                case 0x2de2c:
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e2f8;
                        run_2e200(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c894;
                    run_2c800(); return;
                case 0x2de54:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2d020;
                    run_2d000(); return;
                case 0x2de68:
                    r2 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r2 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x2cf2c;
                    run_2ce00(); return;
                case 0x2de7c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2cd6c;
                    run_2cc00(); return;
                case 0x2de9c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2ce7c;
                    run_2ce00(); return;
                case 0x2deb0:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2cd6c;
                    run_2cc00(); return;
                case 0x2ded0:
                    r4 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 25528;
                case 0x2dedc:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2da14;
                        run_2da00(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2da38;
                    run_2da00(); return;
                case 0x2df0c:
                    r4 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 25528;
                    /* Next insn is delay slot */ 
                    pc=0x2caf0;
                    run_2ca00(); return;
                case 0x2df20:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2df34;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2df34:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2d4cc;
                    run_2d400(); return;
                case 0x2df4c:
                    r4 = 5 << 16;
                    r4 = r4 + 21076;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e0e8;
                        run_2e000(); return;
                    }
                    r8 = r8 + 8;
                    r18 = r3 + r0;
                case 0x2df88:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dfac;
                        continue;
                    }
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dfac;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb54;
                        run_2ca00(); return;
                    }
                case 0x2dfac:
                    r3 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e528;
                        run_2e400(); return;
                    }
                    r8 = r8 + 8;
                case 0x2dfe8:
                    r18 = r0 - r18;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e16c;
                        run_2e000(); return;
                    }
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e228;
                        run_2e200(); return;
                    }
                case 0x2e000:
                    pc=0x2e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e000() throws ExecutionException { /* 0x2e000 - 0x2e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e000:
                    r5 = 5 << 16;
                    r23 = r5 + 25528;
                    r20 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x2e028;
                    continue;
                case 0x2e014:
                    r8 = r8 + 8;
                case 0x2e018:
                    r18 = r18 + -16;
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e230;
                        run_2e200(); return;
                    }
                case 0x2e028:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e014;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2e060;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2e060:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2e018;
                    continue;
                case 0x2e07c:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    /* Next insn is delay slot */ 
                    pc=0x2c870;
                    run_2c800(); return;
                case 0x2e088:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e358;
                        run_2e200(); return;
                    }
                    r16 = 5 << 16;
                    r16 = r16 + 24768;
                case 0x2e09c:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r5 = r0 + 3;
                    r2 = r0 + 3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c894;
                    run_2c800(); return;
                case 0x2e0c8:
                    r16 = 5 << 16;
                    r16 = r16 + 24764;
                    /* Next insn is delay slot */ 
                    pc=0x2cfb0;
                    run_2ce00(); return;
                case 0x2e0d8:
                    r30 = r0 + -1;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c5e8;
                    run_2c400(); return;
                case 0x2e0e8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2e0fc;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2e0fc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r18 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2df88;
                    run_2de00(); return;
                case 0x2e118:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2e12c;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2e12c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2d52c;
                    run_2d400(); return;
                case 0x2e144:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2e158;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2e158:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x2e16c:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x2d350;
                    run_2d200(); return;
                case 0x2e184:
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x2e190;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2e190:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c880;
                        run_2c800(); return;
                    }
                case 0x2e1a0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c880;
                    run_2c800(); return;
                case 0x2e1ac:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x2c988;
                    run_2c800(); return;
                case 0x2e1c0:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2d844;
                    run_2d800(); return;
                case 0x2e1cc:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2e1e0;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2e1e0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2d83c;
                    run_2d800(); return;
                case 0x2e1f8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                case 0x2e200:
                    pc=0x2e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e200() throws ExecutionException { /* 0x2e200 - 0x2e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e200:
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2e20c;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2e20c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2da98;
                    run_2da00(); return;
                case 0x2e228:
                    r4 = 5 << 16;
                    r23 = r4 + 25528;
                case 0x2e230:
                    r3 = r3 + 1;
                    r2 = r2 + r18;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e144;
                        run_2e000(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2e16c;
                    run_2e000(); return;
                case 0x2e260:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2daf4;
                    run_2da00(); return;
                case 0x2e26c:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2e280;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2e280:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = r5 - r3;
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2daec;
                    run_2da00(); return;
                case 0x2e2a4:
                    r3 = (r30&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r2 = r30 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e2b8;
                        continue;
                    }
                    r2 = r0 + 6;
                case 0x2e2b8:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e6f0;
                        run_2e600(); return;
                    }
                case 0x2e2c4:
                    r16 = 5 << 16;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    r16 = r16 + 24776;
                    /* Next insn is delay slot */ 
                    pc=0x2c8ac;
                    run_2c800(); return;
                case 0x2e2e8:
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x2cc08;
                    run_2cc00(); return;
                case 0x2e2f8:
                    r3 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r3 = r0 + 45;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c89c;
                    run_2c800(); return;
                case 0x2e318:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r3 = r2 < -3 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e458;
                        run_2e400(); return;
                    }
                    r3 = r30 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e458;
                        run_2e400(); return;
                    }
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2ddf0;
                    run_2dc00(); return;
                case 0x2e344:
                    r2 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 45;
                    /* Next insn is delay slot */ 
                    pc=0x2cf9c;
                    run_2ce00(); return;
                case 0x2e358:
                    r16 = 5 << 16;
                    r16 = r16 + 24772;
                    /* Next insn is delay slot */ 
                    pc=0x2e09c;
                    run_2e000(); return;
                case 0x2e368:
                    r2 = r0 + 3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1200;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1196;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r7 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    r2 = r29 + 1180;
                    r6 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r30;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x2e3a4;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x2e3a4:
                    r16 = r2 + r0;
                    r5 = r30 + r0;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2dd50;
                    run_2dc00(); return;
                case 0x2e3b8:
                    r5 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 25528;
                    /* Next insn is delay slot */ 
                    pc=0x2d680;
                    run_2d600(); return;
                case 0x2e3cc:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ddbc;
                    run_2dc00(); return;
                case 0x2e3d8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 48;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2e3fc;
                        continue;
                    }
                case 0x2e3e8:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x2dd60;
                    run_2dc00(); return;
                case 0x2e3fc:
                    f0 = r0;
                case 0x2e400:
                    pc=0x2e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e400() throws ExecutionException { /* 0x2e400 - 0x2e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e400:
                    f2 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x2e3e8;
                        run_2e200(); return;
                    }
                    r2 = r0 + 1;
                    r2 = r2 - r5;
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r2;
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x2dd60;
                    run_2dc00(); return;
                case 0x2e438:
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r30;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c894;
                    run_2c800(); return;
                case 0x2e458:
                    r18 = r18 + -2;
                case 0x2e45c:
                    r2 = r2 + -1;
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r2;
                    addr=r29+1188;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e73c;
                        run_2e600(); return;
                    }
                    r3 = r0 + 43;
                    addr=r29+1189;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2e478:
                    r3 = r2 < 10 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e638;
                        run_2e600(); return;
                    }
                    r2 = r2 + 48;
                    r3 = r0 + 48;
                    addr=r29+1191;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1190;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 1192;
                    r4 = r29 + 1188;
                case 0x2e49c:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = r2 - r4;
                    r3 = r3 + r4;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    r2 = r3 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e4e8;
                        continue;
                    }
                case 0x2e4c0:
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e504;
                        continue;
                    }
                case 0x2e4dc:
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2de2c;
                    run_2de00(); return;
                case 0x2e4e8:
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e4c0;
                        continue;
                    }
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e4dc;
                        continue;
                    }
                case 0x2e504:
                    r2 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2de2c;
                    run_2de00(); return;
                case 0x2e514:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dc90;
                        run_2dc00(); return;
                    }
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2dc90;
                    run_2dc00(); return;
                case 0x2e528:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2e53c;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x2e53c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7cc;
                        run_2c600(); return;
                    }
                    r18 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2dfe8;
                    run_2de00(); return;
                case 0x2e55c:
                    r5 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2dce0;
                    run_2dc00(); return;
                case 0x2e568:
                    r3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    r5 = r0 + 45;
                    writePages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff] = r2;
                    writePages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff] = r4;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x2dcb8;
                    run_2dc00(); return;
                case 0x2e590:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e72c;
                        run_2e600(); return;
                    }
                    r2 = r0 + 1;
                case 0x2e5a4:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e5e4;
                        continue;
                    }
                case 0x2e5bc:
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x2de2c;
                    run_2de00(); return;
                case 0x2e5c8:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e5bc;
                        continue;
                    }
                case 0x2e5e4:
                    r2 = r0 + r0;
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x2de2c;
                    run_2de00(); return;
                case 0x2e5f4:
                    r30 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x2dc90;
                    run_2dc00(); return;
                case 0x2e600:
                    pc=0x2e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e600() throws ExecutionException { /* 0x2e600 - 0x2e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e600:
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2ddbc;
                    run_2dc00(); return;
                case 0x2e60c:
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e750;
                        continue;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e6cc;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e6cc;
                        continue;
                    }
                    r2 = r3 + r0;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2de2c;
                    run_2de00(); return;
                case 0x2e638:
                    r6 = r29 + 1187;
                    r3 = r6 + r0;
                    r4 = r0 + 10;
                case 0x2e644:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r4; lo = r2/r4;
                        pc=0x2e650;
                        continue;
                    }
                    hi = r2%r4; lo = r2/r4;
                    throw new ExecutionException("Break");
                case 0x2e650:
                    r3 = r3 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    r5 = r2 < 10 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e644;
                        continue;
                    }
                    r2 = r2 + 48;
                    r5 = r2 << 24;
                    r4 = r3 + -1;
                    r5 = r5 >> 24;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e7ac;
                        continue;
                    }
                    r2 = r29 + 1190;
                    /* Next insn is delay slot */ 
                    pc=0x2e6a0;
                    continue;
                case 0x2e69c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x2e6a0:
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2e69c;
                        continue;
                    }
                    r4 = r29 + 1188;
                    r2 = r4 - r3;
                    r3 = r29 + 1190;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x2e49c;
                    run_2e400(); return;
                case 0x2e6cc:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r2 = r30 + 1;
                    r2 = r3 + r2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2de2c;
                        run_2de00(); return;
                    }
                case 0x2e6e4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2de2c;
                    run_2de00(); return;
                case 0x2e6f0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2e2c4;
                    run_2e200(); return;
                case 0x2e6fc:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r30 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = r3 + 4;
                    r3 = r4 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d200;
                        run_2d200(); return;
                    }
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                    r30 = r0 + -1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c5e0;
                    run_2c400(); return;
                case 0x2e72c:
                    r2 = r0 + 2;
                    r2 = r2 - r3;
                    /* Next insn is delay slot */ 
                    pc=0x2e5a4;
                    run_2e400(); return;
                case 0x2e73c:
                    r3 = r0 + 45;
                    r2 = r0 - r2;
                    addr=r29+1189;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2e478;
                    run_2e400(); return;
                case 0x2e750:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e784;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e784;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = r0 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2de2c;
                    run_2de00(); return;
                case 0x2e778:
                    r16 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2c718;
                    run_2c600(); return;
                case 0x2e784:
                    r30 = r30 + 2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    r2 = r30 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2de2c;
                        run_2de00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2e6e4;
                    continue;
                case 0x2e7a0:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2e45c;
                    run_2e400(); return;
                case 0x2e7ac:
                    r2 = r29 + 1190;
                    r4 = r29 + 1188;
                    /* Next insn is delay slot */ 
                    pc=0x2e49c;
                    run_2e400(); return;
                case 0x2e7bc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2de20;
                    run_2de00(); return;
                case 0x2e800:
                    pc=0x2e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e800() throws ExecutionException { /* 0x2e800 - 0x2ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e800:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c400;
                    run_2c400(); return;
                case 0x2ea00:
                    pc=0x2ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ea00() throws ExecutionException { /* 0x2ea00 - 0x2ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ea00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea38;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ebe4;
                        continue;
                    }
                case 0x2ea38:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 65535;
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ebb8;
                        continue;
                    }
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ebb8;
                        continue;
                    }
                case 0x2ea6c:
                    r3 = r3 & 8192;
                    r18 = r18 & 255;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eaf4;
                        continue;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r3 - r4;
                    r2 = r4 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eb24;
                        continue;
                    }
                case 0x2ea94:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2eb68;
                        continue;
                    }
                case 0x2eac0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eb8c;
                        continue;
                    }
                case 0x2ead4:
                    r2 = r18 + r0;
                case 0x2ead8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2eaf4:
                    r3 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r2 | 8192;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r3 & r2;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r3 - r4;
                    r2 = r4 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea94;
                        continue;
                    }
                case 0x2eb24:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2eb34;
                    pc=0x20200;
                    run_20200(); return;
                case 0x2eb34:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eb80;
                        continue;
                    }
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2eac0;
                        continue;
                    }
                case 0x2eb68:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2eb78;
                    pc=0x20200;
                    run_20200(); return;
                case 0x2eb78:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ead4;
                        continue;
                    }
                case 0x2eb80:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2ead8;
                    continue;
                case 0x2eb8c:
                    r2 = r0 + 10;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ead4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2eba8;
                    pc=0x20200;
                    run_20200(); return;
                case 0x2eba8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ead4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2eb80;
                    continue;
                case 0x2ebb8:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ebc8;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x2ebc8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eb80;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r2 & 65535;
                    /* Next insn is delay slot */ 
                    pc=0x2ea6c;
                    continue;
                case 0x2ebe4:
                    /* Next insn is delay slot */ 
                    r31=0x2ebec;
                    pc=0x21400;
                    run_21400(); return;
                case 0x2ebec:
                    /* Next insn is delay slot */ 
                    pc=0x2ea38;
                    continue;
                case 0x2ec00:
                    pc=0x2ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ec00() throws ExecutionException { /* 0x2ec00 - 0x2ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ec00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x2ee00:
                    pc=0x2ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ee00() throws ExecutionException { /* 0x2ee00 - 0x2f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ee00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ee34;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef44;
                        continue;
                    }
                case 0x2ee34:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r6 = tmp;
                    r2 = r6 & 65535;
                    r3 = r2 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eea4;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eed4;
                        continue;
                    }
                case 0x2ee5c:
                    r4 = r2 & 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef04;
                        continue;
                    }
                    r2 = r2 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef54;
                        continue;
                    }
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                case 0x2ee80:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef1c;
                        continue;
                    }
                case 0x2ee88:
                    r2 = r0 + r0;
                case 0x2ee8c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2eea4:
                    r3 = r2 & 16;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2efb0;
                        continue;
                    }
                    r2 = r2 & 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef64;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                case 0x2eec0:
                    r2 = r6 | 8;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 & 65535;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ee5c;
                        continue;
                    }
                case 0x2eed4:
                    r5 = r2 & 640;
                    r4 = r0 + 512;
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2ee5c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2eef4;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x2eef4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2ee5c;
                    continue;
                case 0x2ef04:
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r2 = r0 - r2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ee88;
                        continue;
                    }
                case 0x2ef1c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + r0;
                    r4 = r3 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ee8c;
                        continue;
                    }
                    r3 = r3 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2ee8c;
                    continue;
                case 0x2ef44:
                    /* Next insn is delay slot */ 
                    r31=0x2ef4c;
                    pc=0x21400;
                    run_21400(); return;
                case 0x2ef4c:
                    /* Next insn is delay slot */ 
                    pc=0x2ee34;
                    continue;
                case 0x2ef54:
                    r2 = r0 + r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2ee80;
                    continue;
                case 0x2ef64:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef94;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef90;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ef8c;
                    pc=0x23800;
                    run_23800(); return;
                case 0x2ef8c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r6 = tmp;
                case 0x2ef90:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x2ef94:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r0 + -37;
                    r6 = r6 & r2;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2eec0;
                    continue;
                case 0x2efb0:
                    r2 = r0 + 9;
                    r6 = r6 | 64;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r6&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2ee8c;
                    continue;
                case 0x2f000:
                    pc=0x2f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f000() throws ExecutionException { /* 0x2f000 - 0x2f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f000:
                    r2 = r0 + 1;
                    pc = 0x2f004;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f008;
                        return;
                    }
                case 0x2f008:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f010:
                    r2 = r0 + 2;
                    pc = 0x2f014;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f018;
                        return;
                    }
                case 0x2f018:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f020:
                    r2 = r0 + 3;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f034;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f038;
                        return;
                    }
                case 0x2f038:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f050;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f050:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f060:
                    r2 = r0 + 4;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f074;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f078;
                        return;
                    }
                case 0x2f078:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f090;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f090:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f0a0:
                    r2 = r0 + 5;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f0b4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f0b8;
                        return;
                    }
                case 0x2f0b8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f0d0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f0d0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f0e0:
                    r2 = r0 + 6;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f0f4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f0f8;
                        return;
                    }
                case 0x2f0f8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f110;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f110:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f120:
                    r2 = r0 + 7;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f134;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f138;
                        return;
                    }
                case 0x2f138:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f150;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f150:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f160:
                    r2 = r0 + 8;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f174;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f178;
                        return;
                    }
                case 0x2f178:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f190;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f190:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f1a0:
                    r2 = r0 + 10;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f1b4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f1b8;
                        return;
                    }
                case 0x2f1b8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f1d0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f1d0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f1e0:
                    r2 = r0 + 11;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f1f4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f1f8;
                        return;
                    }
                case 0x2f1f8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                case 0x2f200:
                    pc=0x2f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f200() throws ExecutionException { /* 0x2f200 - 0x2f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f200:
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f210;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f210:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f220:
                    r2 = r0 + 12;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f234;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f238;
                        return;
                    }
                case 0x2f238:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f250;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f250:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f260:
                    r2 = r0 + 13;
                    pc = 0x2f264;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f268;
                        return;
                    }
                case 0x2f268:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f270:
                    r2 = r0 + 14;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f284;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f288;
                        return;
                    }
                case 0x2f288:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f2a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f2a0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f2b0:
                    r2 = r0 + 15;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f2c4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f2c8;
                        return;
                    }
                case 0x2f2c8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f2e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f2e0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f2f0:
                    r2 = r0 + 16;
                    pc = 0x2f2f4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f2f8;
                        return;
                    }
                case 0x2f2f8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f300:
                    r2 = r0 + 17;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f314;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f318;
                        return;
                    }
                case 0x2f318:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f330;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f330:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f340:
                    r2 = r0 + 18;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f354;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f358;
                        return;
                    }
                case 0x2f358:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f370;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f370:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f380:
                    r2 = r0 + 19;
                    pc = 0x2f384;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f388;
                        return;
                    }
                case 0x2f388:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f390:
                    r2 = r0 + 20;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f3a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f3a8;
                        return;
                    }
                case 0x2f3a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f3c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f3c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f3d0:
                    r2 = r0 + 21;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f3e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f3e8;
                        return;
                    }
                case 0x2f3e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f400;
                        run_2f400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f400:
                    pc=0x2f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f400() throws ExecutionException { /* 0x2f400 - 0x2f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f400:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f410:
                    r2 = r0 + 22;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f424;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f428;
                        return;
                    }
                case 0x2f428:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f440;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f440:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f450:
                    r2 = r0 + 23;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f464;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f468;
                        return;
                    }
                case 0x2f468:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f480;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f480:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f490:
                    r2 = r0 + 24;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f4a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f4a8;
                        return;
                    }
                case 0x2f4a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f4c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f4c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f4d0:
                    r2 = r0 + 25;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f4e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f4e8;
                        return;
                    }
                case 0x2f4e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f500;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f500:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f510:
                    r2 = r0 + 26;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f524;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f528;
                        return;
                    }
                case 0x2f528:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f540;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f540:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f550:
                    r2 = r0 + 27;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f564;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f568;
                        return;
                    }
                case 0x2f568:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f580;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f580:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f590:
                    r2 = r0 + 28;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f5a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f5a8;
                        return;
                    }
                case 0x2f5a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f5c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f5c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f5d0:
                    r2 = r0 + 29;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f5e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f5e8;
                        return;
                    }
                case 0x2f5e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f600;
                        run_2f600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f600:
                    pc=0x2f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f600() throws ExecutionException { /* 0x2f600 - 0x2f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f600:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f610:
                    r2 = r0 + 30;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f624;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f628;
                        return;
                    }
                case 0x2f628:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f640;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f640:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f650:
                    r2 = r0 + 31;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f664;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f668;
                        return;
                    }
                case 0x2f668:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f680;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f680:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f690:
                    r2 = r0 + 32;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f6a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f6a8;
                        return;
                    }
                case 0x2f6a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f6c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f6c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f6d0:
                    r2 = r0 + 33;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f6e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f6e8;
                        return;
                    }
                case 0x2f6e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f700;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f700:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f710:
                    r2 = r0 + 34;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f724;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f728;
                        return;
                    }
                case 0x2f728:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f740;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f740:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f750:
                    r2 = r0 + 35;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f764;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f768;
                        return;
                    }
                case 0x2f768:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f780;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f780:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f790:
                    r2 = r0 + 36;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2f7b0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f7b4;
                        return;
                    }
                case 0x2f7b4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f7cc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f7cc:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f7dc:
                    r2 = r0 + 37;
                    pc = 0x2f7e0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f7e4;
                        return;
                    }
                case 0x2f7e4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f7ec:
                    r2 = r0 + 38;
                    pc = 0x2f7f0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f7f4;
                        return;
                    }
                case 0x2f7f4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f7fc:
                    r2 = r0 + 39;
                case 0x2f800:
                    pc=0x2f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f800() throws ExecutionException { /* 0x2f800 - 0x2fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f800:
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f810;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f814;
                        return;
                    }
                case 0x2f814:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f82c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f82c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f83c:
                    r2 = r0 + 40;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f850;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f854;
                        return;
                    }
                case 0x2f854:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f86c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f86c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f87c:
                    r2 = r0 + 41;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f890;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f894;
                        return;
                    }
                case 0x2f894:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f8ac;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f8ac:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f8bc:
                    r2 = r0 + 42;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f8d0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f8d4;
                        return;
                    }
                case 0x2f8d4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f8ec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f8ec:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f8fc:
                    r2 = r0 + 43;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f910;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f914;
                        return;
                    }
                case 0x2f914:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f92c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f92c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f93c:
                    r2 = r0 + 44;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f950;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f954;
                        return;
                    }
                case 0x2f954:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f96c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f96c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f97c:
                    r2 = r0 + 45;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f990;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f994;
                        return;
                    }
                case 0x2f994:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f9ac;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f9ac:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2f9bc:
                    r2 = r0 + 46;
                    pc = 0x2f9c0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f9c4;
                        return;
                    }
                case 0x2f9c4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f9cc:
                    r2 = r0 + 47;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f9e0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f9e4;
                        return;
                    }
                case 0x2f9e4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f9fc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f9fc:
                    r4 = r10 + r0;
                case 0x2fa00:
                    pc=0x2fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fa00() throws ExecutionException { /* 0x2fa00 - 0x2fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fa00:
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fa0c:
                    r2 = r0 + 51;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2fa20;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fa24;
                        return;
                    }
                case 0x2fa24:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fa3c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fa3c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fa4c:
                    r2 = r0 + 52;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2fa60;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fa64;
                        return;
                    }
                case 0x2fa64:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fa7c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fa7c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fa8c:
                    r2 = r0 + 53;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2faac;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fab0;
                        return;
                    }
                case 0x2fab0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fac8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fac8:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fad8:
                    r2 = r0 + 55;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2faec;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2faf0;
                        return;
                    }
                case 0x2faf0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fb08;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fb08:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fb18:
                    r2 = r0 + 54;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2fb2c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fb30;
                        return;
                    }
                case 0x2fb30:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fb48;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fb48:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fb58:
                    r2 = r0 + 56;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2fb6c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fb70;
                        return;
                    }
                case 0x2fb70:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fb88;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fb88:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fb98:
                    r2 = r0 + 57;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2fbac;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fbb0;
                        return;
                    }
                case 0x2fbb0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fbc8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fbc8:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fbd8:
                    r2 = r0 + 58;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2fbec;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fbf0;
                        return;
                    }
                case 0x2fbf0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fc08;
                        run_2fc00(); return;
                    }
                case 0x2fc00:
                    pc=0x2fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fc00() throws ExecutionException { /* 0x2fc00 - 0x2fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fc00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fc08:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fc18:
                    r2 = r0 + 59;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2fc2c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fc30;
                        return;
                    }
                case 0x2fc30:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fc48;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fc48:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fc58:
                    r2 = r0 + 60;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2fc78;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fc7c;
                        return;
                    }
                case 0x2fc7c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fc94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fc94:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fca4:
                    r2 = r0 + 61;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2fcc4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fcc8;
                        return;
                    }
                case 0x2fcc8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fce0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fce0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fcf0:
                    r2 = r0 + 62;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2fd04;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fd08;
                        return;
                    }
                case 0x2fd08:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fd20;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fd20:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fd30:
                    r2 = r0 + 63;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2fd44;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fd48;
                        return;
                    }
                case 0x2fd48:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fd60;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fd60:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fd70:
                    r2 = r0 + 64;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2fd84;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fd88;
                        return;
                    }
                case 0x2fd88:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fda0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fda0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fdb0:
                    r2 = r0 + 65;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2fdd0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fdd4;
                        return;
                    }
                case 0x2fdd4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fdec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fdec:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fdfc:
                    r2 = r0 + 66;
                case 0x2fe00:
                    pc=0x2fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fe00() throws ExecutionException { /* 0x2fe00 - 0x30000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fe00:
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2fe1c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fe20;
                        return;
                    }
                case 0x2fe20:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fe38;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fe38:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fe48:
                    r2 = r0 + 67;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2fe68;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fe6c;
                        return;
                    }
                case 0x2fe6c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fe84;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fe84:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2fe94:
                    r2 = r0 + 73;
                    pc = 0x2fe98;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fe9c;
                        return;
                    }
                case 0x2fe9c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fea4:
                    r2 = r0 + 68;
                    pc = 0x2fea8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2feac;
                        return;
                    }
                case 0x2feac:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2feb4:
                    r2 = r0 + 70;
                    pc = 0x2feb8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2febc;
                        return;
                    }
                case 0x2febc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fec4:
                    r2 = r0 + 69;
                    pc = 0x2fec8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fecc;
                        return;
                    }
                case 0x2fecc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fed4:
                    r2 = r0 + 71;
                    pc = 0x2fed8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fedc;
                        return;
                    }
                case 0x2fedc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fee4:
                    r2 = r0 + 82;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2fef8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fefc;
                        return;
                    }
                case 0x2fefc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ff14;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ff14:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2ff24:
                    r2 = r0 + 83;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ff38;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ff3c;
                        return;
                    }
                case 0x2ff3c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ff54;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ff54:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2ff64:
                    r2 = r0 + 84;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ff78;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ff7c;
                        return;
                    }
                case 0x2ff7c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ff94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ff94:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2ffa4:
                    r2 = r0 + 85;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ffb8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ffbc;
                        return;
                    }
                case 0x2ffbc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ffd4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ffd4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x2ffe4:
                    r2 = r0 + 80;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2fff8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2fffc;
                        return;
                    }
                case 0x2fffc:
                    r11 = r2 + 255;
                case 0x30000:
                    pc=0x30000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30000() throws ExecutionException { /* 0x30000 - 0x30200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30000:
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30014;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30014:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x30024:
                    r2 = r0 + 86;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x30038;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3003c;
                        return;
                    }
                case 0x3003c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30054;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30054:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x30064:
                    r2 = r0 + 81;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x30078;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3007c;
                        return;
                    }
                case 0x3007c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30094;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30094:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x300a4:
                    r2 = r0 + 87;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x300b8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x300bc;
                        return;
                    }
                case 0x300bc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x300d4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x300d4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x300e4:
                    r2 = r0 + 88;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x300f8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x300fc;
                        return;
                    }
                case 0x300fc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30114;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30114:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x30124:
                    r2 = r0 + 78;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x30138;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3013c;
                        return;
                    }
                case 0x3013c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30154;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30154:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x30164:
                    r2 = r0 + 76;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x30178;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3017c;
                        return;
                    }
                case 0x3017c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30194;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30194:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x301a4:
                    r2 = r0 + 77;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x301b8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x301bc;
                        return;
                    }
                case 0x301bc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x301d4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x301d4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x301e4:
                    r2 = r0 + 74;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x301f8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x301fc;
                        return;
                    }
                case 0x301fc:
                    r11 = r2 + 255;
                case 0x30200:
                    pc=0x30200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30200() throws ExecutionException { /* 0x30200 - 0x30400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30200:
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30214;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30214:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x30224:
                    r2 = r0 + 75;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x30238;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3023c;
                        return;
                    }
                case 0x3023c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30254;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30254:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x30264:
                    r2 = r0 + 79;
                    pc = 0x30268;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3026c;
                        return;
                    }
                case 0x3026c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30274:
                    r2 = r0 + 72;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x30288;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3028c;
                        return;
                    }
                case 0x3028c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x302a4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x302a4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x302b4:
                    r2 = r0 + 90;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x302c8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x302cc;
                        return;
                    }
                case 0x302cc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x302e4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x302e4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x302f4:
                    r2 = r0 + 89;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x30308;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3030c;
                        return;
                    }
                case 0x3030c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30324;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30324:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x30334:
                    r2 = r0 + 91;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x30348;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3034c;
                        return;
                    }
                case 0x3034c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30364;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30364:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30400;
                    run_30400(); return;
                case 0x30400:
                    pc=0x30400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30400() throws ExecutionException { /* 0x30400 - 0x30600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30400:
                    r5 = r0 - r5;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30600:
                    pc=0x30600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30600() throws ExecutionException { /* 0x30600 - 0x30800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2f340;
                    run_2f200(); return;
                case 0x30800:
                    pc=0x30800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30800() throws ExecutionException { /* 0x30800 - 0x30a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30124;
                    run_30000(); return;
                case 0x30a00:
                    pc=0x30a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30a00() throws ExecutionException { /* 0x30a00 - 0x30c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30a00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2f610;
                    run_2f600(); return;
                case 0x30c00:
                    pc=0x30c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30c00() throws ExecutionException { /* 0x30c00 - 0x30e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30c00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2f650;
                    run_2f600(); return;
                case 0x30e00:
                    pc=0x30e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30e00() throws ExecutionException { /* 0x30e00 - 0x31000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30e00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2f410;
                    run_2f400(); return;
                case 0x31000:
                    pc=0x31000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31000() throws ExecutionException { /* 0x31000 - 0x31200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2f3d0;
                    run_2f200(); return;
                case 0x31200:
                    pc=0x31200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31200() throws ExecutionException { /* 0x31200 - 0x31400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2f450;
                    run_2f400(); return;
                case 0x31400:
                    pc=0x31400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31400() throws ExecutionException { /* 0x31400 - 0x31600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31400:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2f490;
                    run_2f400(); return;
                case 0x31600:
                    pc=0x31600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31600() throws ExecutionException { /* 0x31600 - 0x31800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31600:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2f510;
                    run_2f400(); return;
                case 0x31800:
                    pc=0x31800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31800() throws ExecutionException { /* 0x31800 - 0x31a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31800:
                    r29 = r29 + -40;
                    r2 = r4 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31870;
                        continue;
                    }
                    r6 = r5 + r0;
                    r4 = r18 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x31840;
                    pc=0x2f550;
                    run_2f400(); return;
                case 0x31840:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x318c4;
                        continue;
                    }
                case 0x3184c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31870:
                    r16 = r0 + 256;
                    r19 = r0 + -1;
                    r20 = r0 + 34;
                case 0x3187c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x31888;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x31888:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r6 = r16 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x318a0;
                    pc=0x2f550;
                    run_2f400(); return;
                case 0x318a0:
                    if(r2 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x3184c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x318b4;
                    pc=0x25000;
                    run_25000(); return;
                case 0x318b4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = r16 << 1;
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x3187c;
                        continue;
                    }
                case 0x318c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31a00:
                    pc=0x31a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31a00() throws ExecutionException { /* 0x31a00 - 0x31c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31a00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2f550;
                    run_2f400(); return;
                case 0x31c00:
                    pc=0x31c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31c00() throws ExecutionException { /* 0x31c00 - 0x31e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31c00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2f710;
                    run_2f600(); return;
                case 0x31e00:
                    pc=0x31e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31e00() throws ExecutionException { /* 0x31e00 - 0x32000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31e00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2f690;
                    run_2f600(); return;
                case 0x32000:
                    pc=0x32000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32000() throws ExecutionException { /* 0x32000 - 0x32200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32000:
                    r3 = r4 + r0;
                    r2 = r5 & 65535;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 & 65535;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30164;
                    run_30000(); return;
                case 0x32200:
                    pc=0x32200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32200() throws ExecutionException { /* 0x32200 - 0x32400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32200:
                    r3 = r4 + r0;
                    r2 = r5 & 65535;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 & 65535;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x301a4;
                    run_30000(); return;
                case 0x32400:
                    pc=0x32400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32400() throws ExecutionException { /* 0x32400 - 0x32600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32400:
                    r3 = r4 + r0;
                    r2 = r5 & 65535;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 & 65535;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2f8fc;
                    run_2f800(); return;
                case 0x32600:
                    pc=0x32600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32600() throws ExecutionException { /* 0x32600 - 0x32800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x301e4;
                    run_30000(); return;
                case 0x32800:
                    pc=0x32800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32800() throws ExecutionException { /* 0x32800 - 0x32a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30224;
                    run_30200(); return;
                case 0x32a00:
                    pc=0x32a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32a00() throws ExecutionException { /* 0x32a00 - 0x32c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32a00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2f6d0;
                    run_2f600(); return;
                case 0x32c00:
                    pc=0x32c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32c00() throws ExecutionException { /* 0x32c00 - 0x32e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32c00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x32c30;
                    pc=0x2f790;
                    run_2f600(); return;
                case 0x32c30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32e00:
                    pc=0x32e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32e00() throws ExecutionException { /* 0x32e00 - 0x33000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32e00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2f7fc;
                    run_2f600(); return;
                case 0x33000:
                    pc=0x33000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33000() throws ExecutionException { /* 0x33000 - 0x33200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + 25560;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x33028;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x33028:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33200:
                    pc=0x33200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33200() throws ExecutionException { /* 0x33200 - 0x33400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33200:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2f83c;
                    run_2f800(); return;
                case 0x33400:
                    pc=0x33400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33400() throws ExecutionException { /* 0x33400 - 0x33600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33400:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2f87c;
                    run_2f800(); return;
                case 0x33600:
                    pc=0x33600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33600() throws ExecutionException { /* 0x33600 - 0x33800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33600:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r7 = r6 << 16;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r7 >> 16;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2f8bc;
                    run_2f800(); return;
                case 0x33800:
                    pc=0x33800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33800() throws ExecutionException { /* 0x33800 - 0x33a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2f93c;
                    run_2f800(); return;
                case 0x33a00:
                    pc=0x33a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33a00() throws ExecutionException { /* 0x33a00 - 0x33c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33a00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2f97c;
                    run_2f800(); return;
                case 0x33c00:
                    pc=0x33c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33c00() throws ExecutionException { /* 0x33c00 - 0x33e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33c00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2f9cc;
                    run_2f800(); return;
                case 0x33e00:
                    pc=0x33e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33e00() throws ExecutionException { /* 0x33e00 - 0x34000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33e00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2fa0c;
                    run_2fa00(); return;
                case 0x34000:
                    pc=0x34000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34000() throws ExecutionException { /* 0x34000 - 0x34200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2fa4c;
                    run_2fa00(); return;
                case 0x34200:
                    pc=0x34200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34200() throws ExecutionException { /* 0x34200 - 0x34400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34200:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x34240;
                    pc=0x2fa8c;
                    run_2fa00(); return;
                case 0x34240:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34400:
                    pc=0x34400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34400() throws ExecutionException { /* 0x34400 - 0x34600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34400:
                    r2 = r4 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    r3 = r0 + 8;
                    r8 = r5 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r16 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x34464;
                        continue;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x344a8;
                        continue;
                    }
                    r3 = r0 + 2;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x344c8;
                        continue;
                    }
                case 0x34444:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34464:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r9 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r2 + r0;
                    r6 = r8 + r0;
                    r7 = r9 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x34494;
                    pc=0x2fa8c;
                    run_2fa00(); return;
                case 0x34494:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x344a8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x344c8:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r5 + 25600;
                    /* Next insn is delay slot */ 
                    r31=0x344e0;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x344e0:
                    /* Next insn is delay slot */ 
                    pc=0x34444;
                    continue;
                case 0x34600:
                    pc=0x34600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34600() throws ExecutionException { /* 0x34600 - 0x34800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2fad8;
                    run_2fa00(); return;
                case 0x34800:
                    pc=0x34800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34800() throws ExecutionException { /* 0x34800 - 0x34a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34800:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2fb18;
                    run_2fa00(); return;
                case 0x34a00:
                    pc=0x34a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34a00() throws ExecutionException { /* 0x34a00 - 0x34c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34a00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2fb98;
                    run_2fa00(); return;
                case 0x34c00:
                    pc=0x34c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34c00() throws ExecutionException { /* 0x34c00 - 0x34e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34c00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2fb58;
                    run_2fa00(); return;
                case 0x34e00:
                    pc=0x34e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34e00() throws ExecutionException { /* 0x34e00 - 0x35000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34e00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2fbd8;
                    run_2fa00(); return;
                case 0x35000:
                    pc=0x35000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35000() throws ExecutionException { /* 0x35000 - 0x35200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35000:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x302f4;
                    run_30200(); return;
                case 0x35200:
                    pc=0x35200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35200() throws ExecutionException { /* 0x35200 - 0x35400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35200:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2fc18;
                    run_2fc00(); return;
                case 0x35400:
                    pc=0x35400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35400() throws ExecutionException { /* 0x35400 - 0x35600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35400:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x35438;
                    pc=0x2fca4;
                    run_2fc00(); return;
                case 0x35438:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35600:
                    pc=0x35600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35600() throws ExecutionException { /* 0x35600 - 0x35800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35600:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x35638;
                    pc=0x2fc58;
                    run_2fc00(); return;
                case 0x35638:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35800:
                    pc=0x35800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35800() throws ExecutionException { /* 0x35800 - 0x35a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35800:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2fd30;
                    run_2fc00(); return;
                case 0x35a00:
                    pc=0x35a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35a00() throws ExecutionException { /* 0x35a00 - 0x35c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35a00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2fcf0;
                    run_2fc00(); return;
                case 0x35c00:
                    pc=0x35c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35c00() throws ExecutionException { /* 0x35c00 - 0x35e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35c00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2fd70;
                    run_2fc00(); return;
                case 0x35e00:
                    pc=0x35e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35e00() throws ExecutionException { /* 0x35e00 - 0x36000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35e00:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x35e40;
                    pc=0x2fdb0;
                    run_2fc00(); return;
                case 0x35e40:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36000:
                    pc=0x36000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36000() throws ExecutionException { /* 0x36000 - 0x36200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36000:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x36040;
                    pc=0x2fdfc;
                    run_2fc00(); return;
                case 0x36040:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36200:
                    pc=0x36200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36200() throws ExecutionException { /* 0x36200 - 0x36400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36200:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x36238;
                    pc=0x2fe48;
                    run_2fe00(); return;
                case 0x36238:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36400:
                    pc=0x36400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36400() throws ExecutionException { /* 0x36400 - 0x36600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36400:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x36430;
                    pc=0x2fee4;
                    run_2fe00(); return;
                case 0x36430:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36600:
                    pc=0x36600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36600() throws ExecutionException { /* 0x36600 - 0x36800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36600:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x36630;
                    pc=0x2ff24;
                    run_2fe00(); return;
                case 0x36630:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36800:
                    pc=0x36800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36800() throws ExecutionException { /* 0x36800 - 0x36a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30274;
                    run_30200(); return;
                case 0x36a00:
                    pc=0x36a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36a00() throws ExecutionException { /* 0x36a00 - 0x36c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36a00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ff64;
                    run_2fe00(); return;
                case 0x36c00:
                    pc=0x36c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36c00() throws ExecutionException { /* 0x36c00 - 0x36e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36c00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ffa4;
                    run_2fe00(); return;
                case 0x36e00:
                    pc=0x36e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36e00() throws ExecutionException { /* 0x36e00 - 0x37000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36e00:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2ffe4;
                    run_2fe00(); return;
                case 0x37000:
                    pc=0x37000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37000() throws ExecutionException { /* 0x37000 - 0x37200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37000:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x30024;
                    run_30000(); return;
                case 0x37200:
                    pc=0x37200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37200() throws ExecutionException { /* 0x37200 - 0x37400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37200:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x30064;
                    run_30000(); return;
                case 0x37400:
                    pc=0x37400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37400() throws ExecutionException { /* 0x37400 - 0x37600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37400:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x300a4;
                    run_30000(); return;
                case 0x37600:
                    pc=0x37600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37600() throws ExecutionException { /* 0x37600 - 0x37800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x300e4;
                    run_30000(); return;
                case 0x37800:
                    pc=0x37800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37800() throws ExecutionException { /* 0x37800 - 0x37a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37800:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x302b4;
                    run_30200(); return;
                case 0x37a00:
                    pc=0x37a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37a00() throws ExecutionException { /* 0x37a00 - 0x37c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37a00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x30334;
                    run_30200(); return;
                case 0x37c00:
                    pc=0x37c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37c00() throws ExecutionException { /* 0x37c00 - 0x37e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37c00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2f590;
                    run_2f400(); return;
                case 0x37e00:
                    pc=0x37e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37e00() throws ExecutionException { /* 0x37e00 - 0x38000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37e00:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37e5c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x37e2c;
                    pc=0x2f550;
                    run_2f400(); return;
                case 0x37e2c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x37eb4;
                        continue;
                    }
                case 0x37e38:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37e5c:
                    r18 = r4 + r0;
                    r16 = r0 + 256;
                    r19 = r0 + -1;
                    r20 = r0 + 34;
                case 0x37e6c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37e78;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x37e78:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r6 = r16 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37e90;
                    pc=0x2f550;
                    run_2f400(); return;
                case 0x37e90:
                    if(r2 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x37e38;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37ea4;
                    pc=0x25000;
                    run_25000(); return;
                case 0x37ea4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = r16 << 1;
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x37e6c;
                        continue;
                    }
                case 0x37eb4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38000:
                    pc=0x38000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38000() throws ExecutionException { /* 0x38000 - 0x38200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38000:
                    r6 = r5 + r0;
                    r7 = r0 + r0;
                    r5 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2f510;
                    run_2f400(); return;
                case 0x38200:
                    pc=0x38200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38200() throws ExecutionException { /* 0x38200 - 0x38400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38200:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r5 = 5 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + 25560;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x38228;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x38228:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38400:
                    pc=0x38400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38400() throws ExecutionException { /* 0x38400 - 0x38600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38400:
                    r8 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r3 = r0 + 8;
                    r2 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    if(r8 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3845c;
                        continue;
                    }
                    r16 = r4 + r0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38474;
                        continue;
                    }
                    r3 = r0 + 2;
                    if(r6 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x38494;
                        continue;
                    }
                case 0x3843c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3845c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x2fa8c;
                    run_2fa00(); return;
                case 0x38474:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38494:
                    r3 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r5 + 25600;
                    /* Next insn is delay slot */ 
                    r31=0x384b0;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x384b0:
                    /* Next insn is delay slot */ 
                    pc=0x3843c;
                    continue;
                case 0x38600:
                    pc=0x38600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38600() throws ExecutionException { /* 0x38600 - 0x38800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38600:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38800:
                    pc=0x38800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38800() throws ExecutionException { /* 0x38800 - 0x38a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38800:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x38810;
                    pc=0x40a00;
                    run_40a00(); return;
                case 0x38810:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38830;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = 5 << 16;
                    r2 = r2 + 25636;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38830:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38a00:
                    pc=0x38a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38a00() throws ExecutionException { /* 0x38a00 - 0x38c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38a00:
                    r29 = r29 + -32;
                    r2 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r6 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38ab8;
                        continue;
                    }
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38a88;
                        continue;
                    }
                    r5 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r3 = r0 + -1;
                    if(r5 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x38a88;
                        continue;
                    }
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x38a50;
                    pc=0x45000;
                    run_45000(); return;
                case 0x38a50:
                    r17 = r2 + r0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38a68;
                        continue;
                    }
                case 0x38a5c:
                    r2 = r0 + -1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                case 0x38a68:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38a88:
                    /* Next insn is delay slot */ 
                    r31=0x38a90;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x38a90:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r0 + 22;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38ab8:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38a68;
                        continue;
                    }
                    r18 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x38acc;
                    pc=0x45000;
                    run_45000(); return;
                case 0x38acc:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x38ae0;
                    pc=0x45000;
                    run_45000(); return;
                case 0x38ae0:
                    /* Next insn is delay slot */ 
                    pc=0x38a5c;
                    continue;
                case 0x38c00:
                    pc=0x38c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38c00() throws ExecutionException { /* 0x38c00 - 0x38e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38c00:
                    r29 = r29 + -96;
                    r5 = r0 + r0;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x38c1c;
                    pc=0x49c00;
                    run_49c00(); return;
                case 0x38c1c:
                    r17 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x38cec;
                        continue;
                    }
                    r4 = r2 + r0;
                    r5 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x38c38;
                    pc=0x49a00;
                    run_49a00(); return;
                case 0x38c38:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x38cb4;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 16384;
                    r3 = r3 & 61440;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x38cb4;
                        continue;
                    }
                    r4 = r0 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x38c60;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x38c60:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38cf8;
                        continue;
                    }
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    r4 = r0 + 4096;
                    /* Next insn is delay slot */ 
                    r31=0x38c7c;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x38c7c:
                    r3 = r0 + 4096;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38d20;
                        continue;
                    }
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x38c9c:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 96;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38cb4:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x38cc0;
                    pc=0x49600;
                    run_49600(); return;
                case 0x38cc0:
                    /* Next insn is delay slot */ 
                    r31=0x38cc8;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x38cc8:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r3 = r0 + 20;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 96;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38cec:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x38c9c;
                    continue;
                case 0x38cf8:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x38d04;
                    pc=0x49600;
                    run_49600(); return;
                case 0x38d04:
                    /* Next insn is delay slot */ 
                    r31=0x38d0c;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x38d0c:
                    r3 = r0 + 12;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x38c9c;
                    continue;
                case 0x38d20:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x38d2c;
                    pc=0x49600;
                    run_49600(); return;
                case 0x38d2c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x38d38;
                    pc=0x25000;
                    run_25000(); return;
                case 0x38d38:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x38c9c;
                    continue;
                case 0x38e00:
                    pc=0x38e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38e00() throws ExecutionException { /* 0x38e00 - 0x39000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38e00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x38e18;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x38e18:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38e84;
                        continue;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x38e84;
                        continue;
                    }
                    r6 = r3 + r0;
                case 0x38e3c:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + r6;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38ec4;
                        continue;
                    }
                    r3 = r5 - r3;
                    r3 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38ec4;
                        continue;
                    }
                    r4 = r6 + r4;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r4;
                case 0x38e70:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38e84:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r6 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r7 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x38ea0;
                    pc=0x2f790;
                    run_2f600(); return;
                case 0x38ea0:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x38edc;
                        continue;
                    }
                    r5 = r2 + r0;
                    r6 = r0 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x38e3c;
                    continue;
                case 0x38ec4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38edc:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x38e70;
                    continue;
                case 0x39000:
                    pc=0x39000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39000() throws ExecutionException { /* 0x39000 - 0x39200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39000:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r4 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x39024;
                    pc=0x25000;
                    run_25000(); return;
                case 0x39024:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39030;
                    pc=0x25000;
                    run_25000(); return;
                case 0x39030:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x49600;
                    run_49600(); return;
                case 0x39200:
                    pc=0x39200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39200() throws ExecutionException { /* 0x39200 - 0x39400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39200:
                    r2 = r4 >>> 16;
                    r29 = r29 + -40;
                    r2 = r2 & 255;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r4 >>> 8;
                    r2 = r2 & 255;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r16 = 6 << 16;
                    r2 = r4 & 255;
                    r7 = r4 + r0;
                    r6 = 5 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r4 = r16 + -27516;
                    r5 = r0 + 18;
                    r6 = r6 + 25652;
                    r7 = r7 >>> 24;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x39250;
                    pc=0x45800;
                    run_45800(); return;
                case 0x39250:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r16 + -27516;
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39400:
                    pc=0x39400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39400() throws ExecutionException { /* 0x39400 - 0x39600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39400:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39600:
                    pc=0x39600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39600() throws ExecutionException { /* 0x39600 - 0x39800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39600:
                    r2 = (r4&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39628;
                        continue;
                    }
                    r2 = 5 << 16;
                    r2 = r2 + 25904;
                    r4 = r4 << 2;
                    r4 = r4 + r2;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39628:
                    r2 = 5 << 16;
                    r2 = r2 + 25664;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39800:
                    pc=0x39800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39800() throws ExecutionException { /* 0x39800 - 0x39a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39800:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r4 + r0;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39844;
                        continue;
                    }
                    r3 = 5 << 16;
                    r2 = r2 << 2;
                    r3 = r3 + 25904;
                    r2 = r2 + r3;
                    r5 = 5 << 16;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r5 + 25680;
                    /* Next insn is delay slot */ 
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x39844:
                    r7 = 5 << 16;
                    r5 = 5 << 16;
                    r7 = r7 + 25664;
                    r5 = r5 + 25680;
                    /* Next insn is delay slot */ 
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x39a00:
                    pc=0x39a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39a00() throws ExecutionException { /* 0x39a00 - 0x39c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39a00:
                    r29 = r29 + -40;
                    r2 = r0 + 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    r16 = r6 + r0;
                    if(r6 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x39ad4;
                        continue;
                    }
                    r2 = r0 + 4;
                    r17 = r5 + r0;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x39ad4;
                        continue;
                    }
                    r18 = r4 + r0;
                    r5 = r18 + r0;
                    r4 = r29 + 16;
                    r6 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x39a4c;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x39a4c:
                    r5 = r18 + r0;
                    r4 = r28 + -32416;
                    r6 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x39a60;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x39a60:
                    r18 = 6 << 16;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r18 + -27644;
                    r7 = r0 + 128;
                    /* Next insn is delay slot */ 
                    r31=0x39a7c;
                    pc=0x302f4;
                    run_30200(); return;
                case 0x39a7c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39af4;
                        continue;
                    }
                    r2 = 6 << 16;
                    r18 = r18 + -27644;
                    writePages[(r2+-27664)>>>12][((r2+-27664)>>>2)&0x3ff] = r18;
                    r3 = r28 + -32420;
                    r2 = r2 + -27664;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = r28 + -32424;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = r28 + -32416;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r16;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r17;
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32420)>>>12][((r28+-32420)>>>2)&0x3ff] = r0;
                    writePages[(r28+-32424)>>>12][((r28+-32424)>>>2)&0x3ff] = r3;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39ad4:
                    r2 = r0 + r0;
                case 0x39ad8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39af4:
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39ad8;
                    continue;
                case 0x39c00:
                    pc=0x39c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39c00() throws ExecutionException { /* 0x39c00 - 0x39e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39c00:
                    r29 = r29 + -1064;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r2 = r0 + 1024;
                    r5 = r18 + r0;
                    r6 = r29 + 16;
                    r7 = r29 + 1040;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r31;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    writePages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x39c38;
                    pc=0x2fbd8;
                    run_2fa00(); return;
                case 0x39c38:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39d1c;
                        continue;
                    }
                    r17 = readPages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff];
                    r9 = 6 << 16;
                    r9 = r9 + -28688;
                    r4 = r9 + r0;
                    r5 = r29 + 16;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39c60;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x39c60:
                    r9 = r2 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39d40;
                        continue;
                    }
                    r16 = 6 << 16;
                    r3 = r0 + r0;
                    r7 = r0 + r0;
                    r2 = r0 + r0;
                    r16 = r16 + -29716;
                    /* Next insn is delay slot */ 
                    pc=0x39c8c;
                    continue;
                case 0x39c88:
                    r3 = r2 + r0;
                case 0x39c8c:
                    r8 = r16 + r3;
                    r2 = r9 + r2;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r2;
                    r2 = r3 + 4;
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    r7 = r7 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39c88;
                        continue;
                    }
                case 0x39cac:
                    r2 = r7 << 2;
                    r17 = 6 << 16;
                    r2 = r16 + r2;
                    r4 = r17 + -29844;
                    r5 = r18 + r0;
                    r6 = r0 + 128;
                    r17 = r17 + -29844;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x39cd4;
                    pc=0x46000;
                    run_46000(); return;
                case 0x39cd4:
                    r2 = 6 << 16;
                    writePages[(r2+-29864)>>>12][((r2+-29864)>>>2)&0x3ff] = r17;
                    r3 = r28 + -32428;
                    r2 = r2 + -29864;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    r31 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r3 = r0 + 2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r3 = r0 + 4;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32428)>>>12][((r28+-32428)>>>2)&0x3ff] = r0;
                    r29 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39d1c:
                    r31 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    r29 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39d40:
                    r16 = 6 << 16;
                    r7 = r0 + r0;
                    r16 = r16 + -29716;
                    /* Next insn is delay slot */ 
                    pc=0x39cac;
                    continue;
                case 0x39e00:
                    pc=0x39e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39e00() throws ExecutionException { /* 0x39e00 - 0x3a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39e00:
                    r29 = r29 + -1088;
                    r5 = 5 << 16;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r30;
                    r30 = r4 + r0;
                    r4 = 5 << 16;
                    r4 = r4 + 25688;
                    r5 = r5 + 22628;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r31;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r23;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r22;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r21;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r20;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r19;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x39e48;
                    pc=0x22600;
                    run_22600(); return;
                case 0x39e48:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39f28;
                        continue;
                    }
                    r21 = 6 << 16;
                    r22 = 5 << 16;
                    r21 = r21 + -26472;
                    r23 = 6 << 16;
                    r22 = r22 + 25700;
                    r18 = 6 << 16;
                    r20 = 6 << 16;
                    r19 = r21 + r0;
                case 0x39e74:
                    r16 = r0 + 35;
                case 0x39e78:
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39e8c;
                    pc=0x20800;
                    run_20800(); return;
                case 0x39e8c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39f1c;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x39e78;
                        continue;
                    }
                    r2 = r23 + -20320;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 24;
                    r5 = r22 + r0;
                    r6 = r21 + r0;
                    r7 = r18 + -27496;
                    /* Next insn is delay slot */ 
                    r31=0x39ec4;
                    pc=0x45a00;
                    run_45a00(); return;
                case 0x39ec4:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39f1c;
                        continue;
                    }
                    r16 = r20 + -20328;
                    r2 = r18 + -27496;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r4 = r30 + r0;
                    r2 = r28 + -32412;
                    r5 = r19 + r0;
                    writePages[(r20+-20328)>>>12][((r20+-20328)>>>2)&0x3ff] = r19;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    writePages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x39efc;
                    pc=0x29200;
                    run_29200(); return;
                case 0x39efc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39e74;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39f10;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x39f10:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39f2c;
                    continue;
                case 0x39f1c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39f28;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x39f28:
                    r2 = r0 + r0;
                case 0x39f2c:
                    r31 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r30 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r23 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r22 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r21 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r20 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r19 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    r29 = r29 + 1088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3a000:
                    pc=0x3a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a000() throws ExecutionException { /* 0x3a000 - 0x3a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a000:
                    r29 = r29 + -1088;
                    r5 = 5 << 16;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r23;
                    r23 = r4 & 65535;
                    r4 = 5 << 16;
                    r4 = r4 + 25688;
                    r5 = r5 + 22628;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r31;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r30;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r22;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r21;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r20;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r19;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x3a048;
                    pc=0x22600;
                    run_22600(); return;
                case 0x3a048:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a11c;
                        continue;
                    }
                    r20 = 6 << 16;
                    r21 = 5 << 16;
                    r20 = r20 + -26472;
                    r22 = 6 << 16;
                    r21 = r21 + 25700;
                    r18 = 6 << 16;
                    r19 = 6 << 16;
                    r30 = r20 + r0;
                case 0x3a074:
                    r16 = r0 + 35;
                case 0x3a078:
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a08c;
                    pc=0x20800;
                    run_20800(); return;
                case 0x3a08c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a110;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x3a078;
                        continue;
                    }
                    r2 = r22 + -20320;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 24;
                    r5 = r21 + r0;
                    r6 = r20 + r0;
                    r7 = r18 + -27496;
                    /* Next insn is delay slot */ 
                    r31=0x3a0c4;
                    pc=0x45a00;
                    run_45a00(); return;
                case 0x3a0c4:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a110;
                        continue;
                    }
                    r16 = r19 + -20328;
                    r2 = r18 + -27496;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = r28 + -32412;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    addr=r16+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r19+-20328)>>>12][((r19+-20328)>>>2)&0x3ff] = r30;
                    writePages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff] = r0;
                    if(r2 != r23) {
                        /* Next insn is delay slot */ 
                        pc=0x3a074;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a104;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x3a104:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3a120;
                    continue;
                case 0x3a110:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a11c;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x3a11c:
                    r2 = r0 + r0;
                case 0x3a120:
                    r31 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r30 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r23 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r22 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r21 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r20 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r19 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    r29 = r29 + 1088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3a200:
                    pc=0x3a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a200() throws ExecutionException { /* 0x3a200 - 0x3a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a200:
                    r6 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    r29 = r29 + -2088;
                    writePages[(r29+2084)>>>12][((r29+2084)>>>2)&0x3ff] = r31;
                    writePages[(r29+2080)>>>12][((r29+2080)>>>2)&0x3ff] = r17;
                    writePages[(r29+2076)>>>12][((r29+2076)>>>2)&0x3ff] = r16;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a30c;
                        continue;
                    }
                    r4 = r29 + 1048;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x3a22c;
                    pc=0x20800;
                    run_20800(); return;
                case 0x3a22c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a30c;
                        continue;
                    }
                    addr=r29+1048;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r2 = r0 + 35;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3a2bc;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + -20320;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 1048;
                case 0x3a254:
                    r5 = 5 << 16;
                    r17 = 6 << 16;
                    r16 = 6 << 16;
                    r5 = r5 + 25700;
                    r6 = r17 + -26472;
                    r7 = r16 + -27496;
                    /* Next insn is delay slot */ 
                    r31=0x3a274;
                    pc=0x45a00;
                    run_45a00(); return;
                case 0x3a274:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a30c;
                        continue;
                    }
                    r2 = 6 << 16;
                    r17 = r17 + -26472;
                    writePages[(r2+-20328)>>>12][((r2+-20328)>>>2)&0x3ff] = r17;
                    r16 = r16 + -27496;
                    r2 = r2 + -20328;
                    r3 = r28 + -32412;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r16;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff] = r0;
                case 0x3a2a4:
                    r31 = readPages[(r29+2084)>>>12][((r29+2084)>>>2)&0x3ff];
                    r17 = readPages[(r29+2080)>>>12][((r29+2080)>>>2)&0x3ff];
                    r16 = readPages[(r29+2076)>>>12][((r29+2076)>>>2)&0x3ff];
                    r29 = r29 + 2088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3a2bc:
                    r6 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a30c;
                        continue;
                    }
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x3a2dc;
                    pc=0x20800;
                    run_20800(); return;
                case 0x3a2dc:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a30c;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x3a328;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + -20320;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x3a254;
                    continue;
                case 0x3a30c:
                    r31 = readPages[(r29+2084)>>>12][((r29+2084)>>>2)&0x3ff];
                    r17 = readPages[(r29+2080)>>>12][((r29+2080)>>>2)&0x3ff];
                    r16 = readPages[(r29+2076)>>>12][((r29+2076)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 2088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3a328:
                    /* Next insn is delay slot */ 
                    r31=0x3a330;
                    pc=0x3a200;
                    continue;
                case 0x3a330:
                    /* Next insn is delay slot */ 
                    pc=0x3a2a4;
                    continue;
                case 0x3a400:
                    pc=0x3a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a400() throws ExecutionException { /* 0x3a400 - 0x3a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a400:
                    r4 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a41c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3a41c;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x3a41c:
                    r4 = 5 << 16;
                    r5 = 5 << 16;
                    r4 = r4 + 25688;
                    r5 = r5 + 22628;
                    /* Next insn is delay slot */ 
                    r31=0x3a434;
                    pc=0x22600;
                    run_22600(); return;
                case 0x3a434:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3a600:
                    pc=0x3a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a600() throws ExecutionException { /* 0x3a600 - 0x3a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a600:
                    r4 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a61c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3a61c;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x3a61c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff] = r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3a800:
                    pc=0x3a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a800() throws ExecutionException { /* 0x3a800 - 0x3aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a800:
                    r29 = r29 + -1104;
                    r5 = 5 << 16;
                    writePages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff] = r4;
                    r4 = 5 << 16;
                    r4 = r4 + 25716;
                    r5 = r5 + 22628;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r17;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r31;
                    writePages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff] = r30;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r23;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r22;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r21;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r20;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r19;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r18;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x3a848;
                    pc=0x22600;
                    run_22600(); return;
                case 0x3a848:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a960;
                        continue;
                    }
                    r20 = 6 << 16;
                    r20 = r20 + -21352;
                    r19 = 6 << 16;
                    r18 = r20 + r0;
                case 0x3a864:
                    r16 = r0 + 35;
                case 0x3a868:
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a87c;
                    pc=0x20800;
                    run_20800(); return;
                case 0x3a87c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a954;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x3a868;
                        continue;
                    }
                    r3 = 6 << 16;
                    r2 = r3 + -20304;
                    r3 = 6 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r22 = r3 + -23400;
                    r8 = 6 << 16;
                    r3 = 6 << 16;
                    r2 = 6 << 16;
                    r2 = r2 + -20302;
                    r21 = r8 + -24424;
                    r30 = r3 + -25448;
                    r5 = 5 << 16;
                    r23 = 6 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r22;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r4 = r29 + 40;
                    r5 = r5 + 25728;
                    r6 = r20 + r0;
                    r7 = r23 + -22376;
                    /* Next insn is delay slot */ 
                    r31=0x3a8f0;
                    pc=0x45a00;
                    run_45a00(); return;
                case 0x3a8f0:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a954;
                        continue;
                    }
                    r2 = 5 << 16;
                    r4 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r16 = r19 + -20312;
                    r10 = r23 + -22376;
                    r2 = r2 + 17636;
                    r5 = r18 + r0;
                    writePages[(r19+-20312)>>>12][((r19+-20312)>>>2)&0x3ff] = r18;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r10;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r22;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r21;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r30;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x3a934;
                    pc=0x29200;
                    run_29200(); return;
                case 0x3a934:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a864;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a948;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x3a948:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3a964;
                    continue;
                case 0x3a954:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a960;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x3a960:
                    r2 = r0 + r0;
                case 0x3a964:
                    r31 = readPages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff];
                    r30 = readPages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff];
                    r23 = readPages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff];
                    r22 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    r21 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r20 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r19 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r18 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r17 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r16 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r29 = r29 + 1104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3aa00:
                    pc=0x3aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3aa00() throws ExecutionException { /* 0x3aa00 - 0x3ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3aa00:
                    r29 = r29 + -1112;
                    r4 = r4 & 65535;
                    r5 = 5 << 16;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r4;
                    r4 = 5 << 16;
                    r4 = r4 + 25716;
                    r5 = r5 + 22628;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r17;
                    writePages[(r29+1108)>>>12][((r29+1108)>>>2)&0x3ff] = r31;
                    writePages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff] = r30;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r23;
                    writePages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff] = r22;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r21;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r20;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r19;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r18;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x3aa4c;
                    pc=0x22600;
                    run_22600(); return;
                case 0x3aa4c:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ab60;
                        continue;
                    }
                    r19 = 6 << 16;
                    r22 = 6 << 16;
                    r19 = r19 + -21352;
                    r18 = 6 << 16;
                case 0x3aa68:
                    r16 = r0 + 35;
                case 0x3aa6c:
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3aa80;
                    pc=0x20800;
                    run_20800(); return;
                case 0x3aa80:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ab54;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x3aa6c;
                        continue;
                    }
                    r2 = r22 + -20304;
                    r3 = 6 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r20 = r3 + -23400;
                    r8 = 6 << 16;
                    r3 = 6 << 16;
                    r2 = 6 << 16;
                    r2 = r2 + -20302;
                    r23 = r8 + -24424;
                    r30 = r3 + -25448;
                    r5 = 5 << 16;
                    r21 = 6 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r23;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r4 = r29 + 40;
                    r5 = r5 + 25728;
                    r6 = r19 + r0;
                    r7 = r21 + -22376;
                    /* Next insn is delay slot */ 
                    r31=0x3aaf0;
                    pc=0x45a00;
                    run_45a00(); return;
                case 0x3aaf0:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ab54;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + -21352;
                    writePages[(r18+-20312)>>>12][((r18+-20312)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r16 = r18 + -20312;
                    r2 = r2 + 17636;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    addr=r16+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r10 = r21 + -22376;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r10;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r20;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r23;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r30;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3aa68;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ab48;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x3ab48:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ab64;
                    continue;
                case 0x3ab54:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ab60;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x3ab60:
                    r2 = r0 + r0;
                case 0x3ab64:
                    r31 = readPages[(r29+1108)>>>12][((r29+1108)>>>2)&0x3ff];
                    r30 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r23 = readPages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff];
                    r22 = readPages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff];
                    r21 = readPages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff];
                    r20 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    r19 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r18 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r17 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r16 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r29 = r29 + 1112;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ac00:
                    pc=0x3ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ac00() throws ExecutionException { /* 0x3ac00 - 0x3ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ac00:
                    r6 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -2112;
                    writePages[(r29+2108)>>>12][((r29+2108)>>>2)&0x3ff] = r31;
                    writePages[(r29+2104)>>>12][((r29+2104)>>>2)&0x3ff] = r20;
                    writePages[(r29+2100)>>>12][((r29+2100)>>>2)&0x3ff] = r19;
                    writePages[(r29+2096)>>>12][((r29+2096)>>>2)&0x3ff] = r18;
                    writePages[(r29+2092)>>>12][((r29+2092)>>>2)&0x3ff] = r17;
                    writePages[(r29+2088)>>>12][((r29+2088)>>>2)&0x3ff] = r16;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ad90;
                        continue;
                    }
                    r4 = r29 + 1064;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x3ac38;
                    pc=0x20800;
                    run_20800(); return;
                case 0x3ac38:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ad90;
                        continue;
                    }
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r2 = r0 + 35;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3ad10;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + -20304;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r18 = 6 << 16;
                    r2 = 6 << 16;
                    r17 = 6 << 16;
                    r16 = 6 << 16;
                    r2 = r2 + -20302;
                    r18 = r18 + -23400;
                    r17 = r17 + -24424;
                    r16 = r16 + -25448;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r4 = r29 + 1064;
                case 0x3ac90:
                    r5 = 5 << 16;
                    r20 = 6 << 16;
                    r19 = 6 << 16;
                    r5 = r5 + 25728;
                    r6 = r20 + -21352;
                    r7 = r19 + -22376;
                    /* Next insn is delay slot */ 
                    r31=0x3acb0;
                    pc=0x45a00;
                    run_45a00(); return;
                case 0x3acb0:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ad90;
                        continue;
                    }
                    r2 = 6 << 16;
                    r20 = r20 + -21352;
                    r3 = 5 << 16;
                    writePages[(r2+-20312)>>>12][((r2+-20312)>>>2)&0x3ff] = r20;
                    r19 = r19 + -22376;
                    r2 = r2 + -20312;
                    r3 = r3 + 17636;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r19;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r18;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r17;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r16;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                case 0x3acec:
                    r31 = readPages[(r29+2108)>>>12][((r29+2108)>>>2)&0x3ff];
                    r20 = readPages[(r29+2104)>>>12][((r29+2104)>>>2)&0x3ff];
                    r19 = readPages[(r29+2100)>>>12][((r29+2100)>>>2)&0x3ff];
                    r18 = readPages[(r29+2096)>>>12][((r29+2096)>>>2)&0x3ff];
                    r17 = readPages[(r29+2092)>>>12][((r29+2092)>>>2)&0x3ff];
                    r16 = readPages[(r29+2088)>>>12][((r29+2088)>>>2)&0x3ff];
                    r29 = r29 + 2112;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ad10:
                    r6 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ad90;
                        continue;
                    }
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x3ad30;
                    pc=0x20800;
                    run_20800(); return;
                case 0x3ad30:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ad90;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x3adb8;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + -20304;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r18 = 6 << 16;
                    r2 = 6 << 16;
                    r17 = 6 << 16;
                    r16 = 6 << 16;
                    r2 = r2 + -20302;
                    r18 = r18 + -23400;
                    r17 = r17 + -24424;
                    r16 = r16 + -25448;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r4 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3ac90;
                    continue;
                case 0x3ad90:
                    r31 = readPages[(r29+2108)>>>12][((r29+2108)>>>2)&0x3ff];
                    r20 = readPages[(r29+2104)>>>12][((r29+2104)>>>2)&0x3ff];
                    r19 = readPages[(r29+2100)>>>12][((r29+2100)>>>2)&0x3ff];
                    r18 = readPages[(r29+2096)>>>12][((r29+2096)>>>2)&0x3ff];
                    r17 = readPages[(r29+2092)>>>12][((r29+2092)>>>2)&0x3ff];
                    r16 = readPages[(r29+2088)>>>12][((r29+2088)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 2112;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3adb8:
                    /* Next insn is delay slot */ 
                    r31=0x3adc0;
                    pc=0x3ac00;
                    continue;
                case 0x3adc0:
                    /* Next insn is delay slot */ 
                    pc=0x3acec;
                    continue;
                case 0x3ae00:
                    pc=0x3ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ae00() throws ExecutionException { /* 0x3ae00 - 0x3b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ae00:
                    r4 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ae1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3ae1c;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x3ae1c:
                    r4 = 5 << 16;
                    r5 = 5 << 16;
                    r4 = r4 + 25688;
                    r5 = r5 + 22628;
                    /* Next insn is delay slot */ 
                    r31=0x3ae34;
                    pc=0x22600;
                    run_22600(); return;
                case 0x3ae34:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3b000:
                    pc=0x3b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b000() throws ExecutionException { /* 0x3b000 - 0x3b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b000:
                    r4 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b01c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3b01c;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x3b01c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff] = r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3b200:
                    pc=0x3b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b200() throws ExecutionException { /* 0x3b200 - 0x3b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b200:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x3b220;
                    pc=0x3fa00;
                    run_3fa00(); return;
                case 0x3b220:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r16 = 6 << 16;
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x3b234;
                    pc=0x20400;
                    run_20400(); return;
                case 0x3b234:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r4 = r16 + -30888;
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x3b24c;
                    pc=0x20800;
                    run_20800(); return;
                case 0x3b24c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b2b8;
                        continue;
                    }
                    r4 = r16 + -30888;
                    /* Next insn is delay slot */ 
                    r31=0x3b260;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3b260:
                    r17 = r2 + -1;
                    r16 = r16 + -30888;
                    r3 = r16 + r17;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 10;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3b280;
                        continue;
                    }
                    r17 = r2 + r0;
                case 0x3b280:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r17 = r16 + r17;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x3b298;
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x3b298:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3b2b8:
                    r17 = r0 + r0;
                    r16 = r16 + -30888;
                    /* Next insn is delay slot */ 
                    pc=0x3b280;
                    continue;
                case 0x3b400:
                    pc=0x3b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b400() throws ExecutionException { /* 0x3b400 - 0x3b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b400:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r0 + 128;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r18 = r5 + r0;
                    r17 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b42c;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x3b42c:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b4bc;
                        continue;
                    }
                    r4 = r2 + r0;
                    r5 = r0 + 128;
                    r6 = r18 + r0;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b450;
                    pc=0x4ba00;
                    run_4ba00(); return;
                case 0x3b450:
                    r3 = r2 < 128 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b478;
                        continue;
                    }
                case 0x3b45c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3b478:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = r2 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x3b488;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x3b488:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b4c8;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r18 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = r17 + r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x4be00;
                    run_4be00(); return;
                case 0x3b4bc:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3b45c;
                    continue;
                case 0x3b4c8:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x3b4d4;
                    pc=0x25000;
                    run_25000(); return;
                case 0x3b4d4:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3b45c;
                    continue;
                case 0x3b600:
                    pc=0x3b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b600() throws ExecutionException { /* 0x3b600 - 0x3b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b600:
                    r4 = 5 << 16;
                    r4 = r4 + 25764;
                    /* Next insn is delay slot */ 
                    pc=0x40400;
                    run_40400(); return;
                case 0x3b800:
                    pc=0x3b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b800() throws ExecutionException { /* 0x3b800 - 0x3ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b800:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b8b4;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b8b4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3b838;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3b838:
                    r2 = r2 + -1;
                    r2 = r16 + r2;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b90c;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 47;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3b8e0;
                        continue;
                    }
                    r4 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x3b878;
                    continue;
                case 0x3b868:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3b8e0;
                        continue;
                    }
                case 0x3b878:
                    r2 = r2 + -1;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x3b868;
                        continue;
                    }
                case 0x3b884:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 47;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3b9b4;
                        continue;
                    }
                    r3 = 5 << 16;
                    r3 = r3 + 25776;
                case 0x3b89c:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = 6 << 16;
                    addr=r2+-31912;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -31912;
                    /* Next insn is delay slot */ 
                    pc=0x3b8c4;
                    continue;
                case 0x3b8b4:
                    r2 = 6 << 16;
                    r3 = r0 + 11776;
                    addr=r2+-31912;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -31912;
                case 0x3b8c4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3b8e0:
                    r4 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x3b8fc;
                    continue;
                case 0x3b8ec:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3b90c;
                        continue;
                    }
                case 0x3b8fc:
                    r2 = r2 + -1;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b8ec;
                        continue;
                    }
                case 0x3b90c:
                    r4 = r0 + 47;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x3b930;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3b884;
                    continue;
                case 0x3b920:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3b940;
                        continue;
                    }
                case 0x3b930:
                    r2 = r2 + -1;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b920;
                        continue;
                    }
                case 0x3b940:
                    r2 = r2 - r16;
                    r3 = r2 + 2;
                    r3 = (r3&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b998;
                        continue;
                    }
                    r17 = r2 + 1;
                    r18 = 6 << 16;
                    r4 = r18 + -31912;
                    r5 = r16 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b970;
                    pc=0x46000;
                    run_46000(); return;
                case 0x3b970:
                    r2 = r18 + -31912;
                    r17 = r17 + r2;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3b998:
                    /* Next insn is delay slot */ 
                    r31=0x3b9a0;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3b9a0:
                    r3 = r0 + 91;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b8c4;
                    continue;
                case 0x3b9b4:
                    r3 = 5 << 16;
                    r3 = r3 + 25772;
                    /* Next insn is delay slot */ 
                    pc=0x3b89c;
                    continue;
                case 0x3ba00:
                    pc=0x3ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ba00() throws ExecutionException { /* 0x3ba00 - 0x3bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ba00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bb4c;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bb4c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3ba34;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3ba34:
                    r2 = r2 + -1;
                    r2 = r16 + r2;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bb8c;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 47;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3bae0;
                        continue;
                    }
                    r4 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x3ba74;
                    continue;
                case 0x3ba64:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3bad4;
                        continue;
                    }
                case 0x3ba74:
                    r2 = r2 + -1;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x3ba64;
                        continue;
                    }
                case 0x3ba80:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 47;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3bb74;
                        continue;
                    }
                case 0x3ba90:
                    r5 = r2 + r0;
                    r2 = r0 + r0;
                case 0x3ba98:
                    r16 = r2 + 1;
                    r17 = 5 << 16;
                    r6 = r16 + r0;
                    r4 = r17 + 32600;
                    /* Next insn is delay slot */ 
                    r31=0x3bab0;
                    pc=0x46000;
                    run_46000(); return;
                case 0x3bab0:
                    r2 = r17 + 32600;
                    r16 = r16 + r2;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x3babc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3bad4:
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ba90;
                        continue;
                    }
                case 0x3bae0:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r3 = r0 + 47;
                    r5 = r2 + r0;
                    r4 = r0 + 47;
                    if(r6 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3bb10;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3ba90;
                    continue;
                case 0x3bb00:
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3bb1c;
                        continue;
                    }
                case 0x3bb10:
                    r5 = r5 + -1;
                    if(r5 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x3bb00;
                        continue;
                    }
                case 0x3bb1c:
                    r2 = r2 - r5;
                    r3 = r2 + 2;
                    r3 = (r3&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ba98;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3bb38;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3bb38:
                    r3 = r0 + 91;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3babc;
                    continue;
                case 0x3bb4c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = 5 << 16;
                    r3 = r0 + 11776;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    addr=r2+32600;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + 32600;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3bb74:
                    r2 = 5 << 16;
                    r3 = r0 + 12032;
                    addr=r2+32600;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + 32600;
                    /* Next insn is delay slot */ 
                    pc=0x3babc;
                    continue;
                case 0x3bb8c:
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3ba80;
                        continue;
                    }
                    r5 = r2 + r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ba98;
                    continue;
                case 0x3bc00:
                    pc=0x3bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3bc00() throws ExecutionException { /* 0x3bc00 - 0x3be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3bc00:
                    r29 = r29 + -72;
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + 32;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r31;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    r17 = r4 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x3bc3c;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3bc3c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3bc98;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 25600;
                    /* Next insn is delay slot */ 
                    r31=0x3bc6c;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x3bc6c:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x3bc74:
                    /* Next insn is delay slot */ 
                    r31=0x3bc7c;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3bc7c:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c05c;
                        run_3c000(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3bcd0;
                    continue;
                case 0x3bc98:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3bcc0;
                    pc=0x2fa8c;
                    run_2fa00(); return;
                case 0x3bcc0:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3bc74;
                        continue;
                    }
                case 0x3bccc:
                    r18 = r0 + r0;
                case 0x3bcd0:
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 10;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    addr=r17+31;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x3bcf4;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3bcf4:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3bd50;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 25600;
                    /* Next insn is delay slot */ 
                    r31=0x3bd24;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x3bd24:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x3bd2c:
                    /* Next insn is delay slot */ 
                    r31=0x3bd34;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3bd34:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c070;
                        run_3c000(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3bd84;
                    continue;
                case 0x3bd50:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x3bd78;
                    pc=0x2fa8c;
                    run_2fa00(); return;
                case 0x3bd78:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3bd2c;
                        continue;
                    }
                case 0x3bd84:
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    addr=r17+63;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x3bda8;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3bda8:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3be04;
                        run_3be00(); return;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 25600;
                    /* Next insn is delay slot */ 
                    r31=0x3bdd8;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x3bdd8:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x3bde0:
                    /* Next insn is delay slot */ 
                    r31=0x3bde8;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3bde8:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c084;
                        run_3c000(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3be38;
                    run_3be00(); return;
                case 0x3be00:
                    pc=0x3be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3be00() throws ExecutionException { /* 0x3be00 - 0x3c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3be00:
                case 0x3be04:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + 64;
                    /* Next insn is delay slot */ 
                    r31=0x3be2c;
                    pc=0x2fa8c;
                    run_2fa00(); return;
                case 0x3be2c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3bde0;
                        run_3bc00(); return;
                    }
                case 0x3be38:
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 4;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    addr=r17+95;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x3be5c;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3be5c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r20 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = r17 + 96;
                    r19 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3bebc;
                        continue;
                    }
                    r4 = readPages[(r19+12)>>>12][((r19+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 25600;
                    /* Next insn is delay slot */ 
                    r31=0x3be90;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x3be90:
                    r2 = r0 + 22;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                case 0x3be98:
                    /* Next insn is delay slot */ 
                    r31=0x3bea0;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3bea0:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c098;
                        run_3c000(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3bef0;
                    continue;
                case 0x3bebc:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r19 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3bee4;
                    pc=0x2fa8c;
                    run_2fa00(); return;
                case 0x3bee4:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3be98;
                        continue;
                    }
                case 0x3bef0:
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    addr=r17+127;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r2 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bf60;
                        continue;
                    }
                    r4 = r0 + 32;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3bf24;
                    continue;
                case 0x3bf14:
                    r3 = r3 + -1;
                    r16 = r16 + 1;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x3bf60;
                        continue;
                    }
                case 0x3bf24:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r5 = r5 + -9;
                    r5 = r5 & 255;
                    r5 = (r5&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bf14;
                        continue;
                    }
                    r2 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bfe4;
                        continue;
                    }
                    r3 = r3 + -1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 + 1;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x3bf24;
                        continue;
                    }
                case 0x3bf60:
                    r2 = r0 + 6;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x3bf80;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3bf80:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3bff0;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 25600;
                    /* Next insn is delay slot */ 
                    r31=0x3bfb0;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x3bfb0:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x3bfb8:
                    /* Next insn is delay slot */ 
                    r31=0x3bfc0;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3bfc0:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c050;
                        run_3c000(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3bfd8;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3bfd8:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x3c024;
                    run_3c000(); return;
                case 0x3bfe4:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3bf14;
                    continue;
                case 0x3bff0:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                case 0x3c000:
                    pc=0x3c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c000() throws ExecutionException { /* 0x3c000 - 0x3c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c000:
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + 128;
                    /* Next insn is delay slot */ 
                    r31=0x3c018;
                    pc=0x2fa8c;
                    run_2fa00(); return;
                case 0x3c018:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3bfb8;
                        run_3be00(); return;
                    }
                case 0x3c024:
                    r31 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    addr=r17+159;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r29 = r29 + 72;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3c050:
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3c024;
                    continue;
                case 0x3c05c:
                    /* Next insn is delay slot */ 
                    r31=0x3c064;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3c064:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x3bccc;
                    run_3bc00(); return;
                case 0x3c070:
                    /* Next insn is delay slot */ 
                    r31=0x3c078;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3c078:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x3bd84;
                    run_3bc00(); return;
                case 0x3c084:
                    /* Next insn is delay slot */ 
                    r31=0x3c08c;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3c08c:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x3be38;
                    run_3be00(); return;
                case 0x3c098:
                    /* Next insn is delay slot */ 
                    r31=0x3c0a0;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3c0a0:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    pc=0x3bef0;
                    run_3be00(); return;
                case 0x3c200:
                    pc=0x3c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c200() throws ExecutionException { /* 0x3c200 - 0x3c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c200:
                    r29 = r29 + -56;
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 10;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r4 + r0;
                    r2 = r29 + 40;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3c244;
                    pc=0x2fa8c;
                    run_2fa00(); return;
                case 0x3c244:
                    r2 = r2 + 1;
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r2 = r0 - r2;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3c400:
                    pc=0x3c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c400() throws ExecutionException { /* 0x3c400 - 0x3c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c400:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r17 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r31=0x3c42c;
                    pc=0x49800;
                    run_49800(); return;
                case 0x3c42c:
                    r16 = r2 + r0;
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x3c464;
                        continue;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c488;
                        continue;
                    }
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x3c44c;
                    pc=0x302b4;
                    run_30200(); return;
                case 0x3c44c:
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x3c53c;
                        continue;
                    }
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c518;
                        continue;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c494;
                        continue;
                    }
                case 0x3c464:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3c488:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c494;
                    pc=0x2f000;
                    run_2f000(); return;
                case 0x3c494:
                    r4 = 5 << 16;
                    r4 = r4 + 25780;
                    r5 = r0 + 2;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c4ac;
                    pc=0x49c00;
                    run_49c00(); return;
                case 0x3c4ac:
                    r17 = r2 + r0;
                    r2 = r0 + -1;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c464;
                        continue;
                    }
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c4d0;
                    pc=0x2f490;
                    run_2f400(); return;
                case 0x3c4d0:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x3c4e4;
                    pc=0x2f490;
                    run_2f400(); return;
                case 0x3c4e4:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x3c4f8;
                    pc=0x2f490;
                    run_2f400(); return;
                case 0x3c4f8:
                    r2 = r17 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c464;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c510;
                    pc=0x49600;
                    run_49600(); return;
                case 0x3c510:
                    /* Next insn is delay slot */ 
                    pc=0x3c464;
                    continue;
                case 0x3c518:
                    r5 = 5 << 16;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r5 + 25772;
                    /* Next insn is delay slot */ 
                    r31=0x3c52c;
                    pc=0x2f410;
                    run_2f400(); return;
                case 0x3c52c:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c464;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3c494;
                    continue;
                case 0x3c53c:
                    r16 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3c464;
                    continue;
                case 0x3c600:
                    pc=0x3c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c600() throws ExecutionException { /* 0x3c600 - 0x3c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c600:
                    r29 = r29 + -80;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r31;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r23;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r22;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r21;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r20;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r19;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r18;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r16;
                    r23 = r4 + r0;
                    r22 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c638;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3c638:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r4 = r23 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c650;
                    pc=0x46800;
                    run_46800(); return;
                case 0x3c650:
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c65c;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3c65c:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r18 = r0 + 34;
                    r17 = r29 + 16;
                    r19 = r0 + r0;
                    r20 = r0 + 46;
                    r21 = r0 + 3;
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x3c6f0;
                        continue;
                    }
                case 0x3c67c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r3 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x3c6f0;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c744;
                        continue;
                    }
                    if(r4 != r20) {
                        /* Next insn is delay slot */ 
                        pc=0x3c724;
                        continue;
                    }
                    r17 = r17 + 4;
                    if(r19 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x3c6f0;
                        continue;
                    }
                    r23 = r3 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x3c6bc;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3c6bc:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r4 = r23 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c6d4;
                    pc=0x46800;
                    run_46800(); return;
                case 0x3c6d4:
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3c6e0;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x3c6e0:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r19 = r19 + 1;
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x3c67c;
                        continue;
                    }
                case 0x3c6f0:
                    r2 = r0 + r0;
                case 0x3c6f4:
                    r31 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r23 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r22 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r21 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r20 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r18 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r16 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 80;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3c724:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r4 = r4 & 255;
                    r4 = r2 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c6f0;
                        continue;
                    }
                case 0x3c744:
                    r2 = r0 + 2;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c7e8;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c780;
                        continue;
                    }
                    r2 = r0 + 1;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c838;
                        run_3c800(); return;
                    }
                case 0x3c768:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c86c;
                        run_3c800(); return;
                    }
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r16;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3c6f4;
                    continue;
                case 0x3c780:
                    r2 = (r16&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c6f0;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c6f0;
                        continue;
                    }
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c6f0;
                        continue;
                    }
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = (r3&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c6f0;
                        continue;
                    }
                    r4 = r4 << 16;
                    r2 = r2 << 24;
                    r2 = r4 | r2;
                    r3 = r3 << 8;
                    r2 = r2 | r3;
                    r16 = r2 | r16;
                    /* Next insn is delay slot */ 
                    pc=0x3c768;
                    continue;
                case 0x3c7e8:
                    r2 = 1 << 16;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c6f0;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x3c800:
                    pc=0x3c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c800() throws ExecutionException { /* 0x3c800 - 0x3ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c800:
                    r3 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c6f0;
                        run_3c600(); return;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = (r3&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c6f0;
                        run_3c600(); return;
                    }
                    r3 = r3 << 16;
                    r2 = r2 << 24;
                    r2 = r3 | r2;
                    r16 = r2 | r16;
                    /* Next insn is delay slot */ 
                    pc=0x3c768;
                    run_3c600(); return;
                case 0x3c838:
                    r2 = 256 << 16;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c6f0;
                        run_3c600(); return;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c6f0;
                        run_3c600(); return;
                    }
                    r2 = r2 << 24;
                    r16 = r16 | r2;
                    /* Next insn is delay slot */ 
                    pc=0x3c768;
                    run_3c600(); return;
                case 0x3c86c:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3c6f4;
                    run_3c600(); return;
                case 0x3ca00:
                    pc=0x3ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ca00() throws ExecutionException { /* 0x3ca00 - 0x3cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ca00:
                    r29 = r29 + -32;
                    r5 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3ca14;
                    pc=0x3c600;
                    run_3c600(); return;
                case 0x3ca14:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ca30;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ca30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3cc00:
                    pc=0x3cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3cc00() throws ExecutionException { /* 0x3cc00 - 0x3ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3cc00:
                    r29 = r29 + -56;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    r20 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r5 = r5 & 65535;
                    r2 = r20 < 2 ? 1 : 0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    r19 = r6 + r0;
                    r22 = r7 + r0;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cdcc;
                        continue;
                    }
                    addr=r6+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r0 + 2;
                case 0x3cc54:
                    r4 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc6c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3cc6c;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x3cc6c:
                    r4 = 5 << 16;
                    r5 = 5 << 16;
                    r4 = r4 + 25688;
                    r5 = r5 + 22628;
                    /* Next insn is delay slot */ 
                    r31=0x3cc84;
                    pc=0x22600;
                    run_22600(); return;
                case 0x3cc84:
                    writePages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff] = r2;
                    r21 = r0 + r0;
                case 0x3cc8c:
                    /* Next insn is delay slot */ 
                    r31=0x3cc94;
                    pc=0x3a200;
                    run_3a200(); return;
                case 0x3cc94:
                    r18 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cd6c;
                        continue;
                    }
                case 0x3cca0:
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ccec;
                        continue;
                    }
                    addr=r2+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc8c;
                        continue;
                    }
                    r8 = r19 + 2;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3cce0;
                    continue;
                case 0x3cccc:
                    r8 = r8 + 2;
                    addr=r8+-2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc8c;
                        continue;
                    }
                case 0x3cce0:
                    r3 = r3 + 1;
                    if(r3 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x3cccc;
                        continue;
                    }
                case 0x3ccec:
                    r23 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r4 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc8c;
                        continue;
                    }
                    r23 = r23 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x3cd24;
                    continue;
                case 0x3cd10:
                    r23 = r23 + 4;
                    r4 = readPages[(r23+-4)>>>12][((r23+-4)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc8c;
                        continue;
                    }
                case 0x3cd24:
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3cd30;
                    pc=0x29200;
                    run_29200(); return;
                case 0x3cd30:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cd10;
                        continue;
                    }
                    r2 = r16 < r20 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cdc0;
                        continue;
                    }
                    addr=r18+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r16 << 1;
                    r2 = r19 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x3cd5c;
                    pc=0x3a200;
                    run_3a200(); return;
                case 0x3cd5c:
                    r16 = r16 + 1;
                    r18 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cca0;
                        continue;
                    }
                case 0x3cd6c:
                    r4 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cd84;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3cd84;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x3cd84:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r16;
                    r2 = r21 + r0;
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff] = r0;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3cdc0:
                    r21 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3cc8c;
                    continue;
                case 0x3cdcc:
                    r16 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3cc54;
                    continue;
                case 0x3ce00:
                    pc=0x3ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ce00() throws ExecutionException { /* 0x3ce00 - 0x3d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ce00:
                    r29 = r29 + -96;
                    r6 = r29 + 16;
                    r7 = r29 + 80;
                    r2 = r0 + 32;
                    r5 = r5 & 65535;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x3ce24;
                    pc=0x3cc00;
                    run_3cc00(); return;
                case 0x3ce24:
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r5 = tmp;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x3ce38;
                    pc=0x300e4;
                    run_30000(); return;
                case 0x3ce38:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r29 = r29 + 96;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d000:
                    pc=0x3d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d000() throws ExecutionException { /* 0x3d000 - 0x3d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d000:
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x40a00;
                    run_40a00(); return;
                case 0x3d200:
                    pc=0x3d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d200() throws ExecutionException { /* 0x3d200 - 0x3d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d200:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d330;
                        continue;
                    }
                case 0x3d224:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r8 = r3 < 32 ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d2ac;
                        continue;
                    }
                    r2 = 2 << 16;
                    r2 = r2 + 19968;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d264;
                        continue;
                    }
                case 0x3d248:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d264:
                    r4 = r0 + 400;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x3d27c;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x3d27c:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r7 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d248;
                        continue;
                    }
                    r3 = readPages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    writePages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff] = r2;
                    r3 = r0 + r0;
                    writePages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff] = r0;
                    writePages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff] = r0;
                case 0x3d2ac:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d2e8;
                        continue;
                    }
                case 0x3d2b4:
                    r4 = r3 + 1;
                    r3 = r3 + 2;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d2e8:
                    r4 = r3 << 2;
                    r4 = r2 + r4;
                    writePages[(r4+136)>>>12][((r4+136)>>>2)&0x3ff] = r6;
                    r8 = readPages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r6 = r6 << (r3&0x1f);
                    r8 = r8 | r6;
                    writePages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff] = r8;
                    writePages[(r4+264)>>>12][((r4+264)>>>2)&0x3ff] = r7;
                    r4 = r0 + 2;
                    if(r17 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3d2b4;
                        continue;
                    }
                    r4 = readPages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff];
                    r6 = r4 | r6;
                    writePages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x3d2b4;
                    continue;
                case 0x3d330:
                    r2 = r16 + 332;
                    writePages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x3d224;
                    continue;
                case 0x3d400:
                    pc=0x3d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d400() throws ExecutionException { /* 0x3d400 - 0x3d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d400:
                    r2 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    r2 = r2 + 328;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    r19 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r20 = r0 + 1;
                    r21 = r0 + -1;
                case 0x3d448:
                    r2 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    r23 = readPages[(r2+328)>>>12][((r2+328)>>>2)&0x3ff];
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d4cc;
                        continue;
                    }
                    r30 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x3d464:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d4bc;
                        continue;
                    }
                    r18 = r3 + 1;
                    r17 = r23 + 136;
                    r4 = r16 << 2;
                    r18 = r18 << 2;
                    r17 = r17 + r4;
                    r18 = r23 + r18;
                case 0x3d490:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d500;
                        continue;
                    }
                    r3 = readPages[(r17+128)>>>12][((r17+128)>>>2)&0x3ff];
                    if(r3 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x3d500;
                        continue;
                    }
                case 0x3d4a8:
                    r16 = r16 + -1;
                    r17 = r17 + -4;
                    r18 = r18 + -4;
                    if(r16 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x3d490;
                        continue;
                    }
                case 0x3d4bc:
                    r2 = 2 << 16;
                    r2 = r2 + 20480;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d5b4;
                        continue;
                    }
                case 0x3d4cc:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d500:
                    r4 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r3 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r4 + -1;
                    if(r4 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x3d594;
                        continue;
                    }
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r0;
                case 0x3d518:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d4a8;
                        continue;
                    }
                    r5 = readPages[(r23+392)>>>12][((r23+392)>>>2)&0x3ff];
                    r4 = r20 << (r16&0x1f);
                    r5 = r4 & r5;
                    r22 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d584;
                        continue;
                    }
                    r5 = readPages[(r23+396)>>>12][((r23+396)>>>2)&0x3ff];
                    r4 = r4 & r5;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d5a0;
                        continue;
                    }
                    r4 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r5 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x3d55c;
                    return;
                case 0x3d55c:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r3 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x3d448;
                        continue;
                    }
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    if(r3 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x3d4a8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3d448;
                    continue;
                case 0x3d584:
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x3d58c;
                    return;
                case 0x3d58c:
                    /* Next insn is delay slot */ 
                    pc=0x3d55c;
                    continue;
                case 0x3d594:
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x3d518;
                    continue;
                case 0x3d5a0:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x3d5ac;
                    return;
                case 0x3d5ac:
                    /* Next insn is delay slot */ 
                    pc=0x3d55c;
                    continue;
                case 0x3d5b4:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d5fc;
                        continue;
                    }
                    r3 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d610;
                        run_3d600(); return;
                    }
                    r4 = r23 + r0;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x3d5e4;
                    pc=0x25000;
                    run_25000(); return;
                case 0x3d5e4:
                    r23 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                case 0x3d5ec:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d464;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3d4cc;
                    continue;
                case 0x3d5fc:
                    r3 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                case 0x3d600:
                    pc=0x3d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d600() throws ExecutionException { /* 0x3d600 - 0x3d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d600:
                    r30 = r23 + r0;
                    r23 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3d5ec;
                    run_3d400(); return;
                case 0x3d610:
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3d600;
                    continue;
                case 0x3d800:
                    pc=0x3d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d800() throws ExecutionException { /* 0x3d800 - 0x3da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d800:
                    r29 = r29 + -48;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r2 = r2 < r17 ? 1 : 0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3da74;
                        run_3da00(); return;
                    }
                    r17 = r17 + -1;
                    r12 = r17 << 2;
                    r16 = r5 + 20;
                    r18 = r16 + r12;
                    r19 = r4 + 20;
                    r12 = r19 + r12;
                    r22 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    r22 = r22 + 1;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        if(r22!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                        }
                        pc=0x3d86c;
                        continue;
                    }
                    if(r22!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x3d86c:
                    r22 = lo;
                    r21 = lo;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d968;
                        continue;
                    }
                    r6 = r16 + r0;
                    r3 = r19 + r0;
                    r4 = r0 + r0;
                    r2 = r0 + r0;
                case 0x3d88c:
                    r6 = r6 + 4;
                    r11 = readPages[(r6+-4)>>>12][((r6+-4)>>>2)&0x3ff];
                    r8 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r10 = r11 & 65535;
                    { long hilo = (long)(r22) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = r11 >>> 16;
                    r3 = r3 + 4;
                    r10 = lo;
                    r10 = r4 + r10;
                    r4 = r10 >>> 16;
                    { long hilo = (long)(r22) * ((long)r11); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = r10 & 65535;
                    r7 = r2 - r7;
                    r11 = lo;
                    r9 = r4 + r11;
                    r11 = r8 & 65535;
                    r7 = r7 + r11;
                    r4 = r9 >>> 16;
                    r8 = r8 >>> 16;
                    r9 = r9 & 65535;
                    r2 = r7 >> 16;
                    r8 = r8 - r9;
                    r8 = r8 + r2;
                    r2 = r8 >> 16;
                    r7 = r7 & 65535;
                    r8 = r8 << 16;
                    r7 = r8 | r7;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r7;
                    r7 = ((r18 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d88c;
                        continue;
                    }
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d968;
                        continue;
                    }
                    r2 = r12 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d964;
                        continue;
                    }
                    r3 = readPages[(r12+-4)>>>12][((r12+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d950;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3d964;
                    continue;
                case 0x3d940:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d964;
                        continue;
                    }
                case 0x3d950:
                    r2 = r2 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r17 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d940;
                        continue;
                    }
                case 0x3d964:
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r17;
                case 0x3d968:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3d974;
                    pc=0x43200;
                    run_43200(); return;
                case 0x3d974:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3da44;
                        run_3da00(); return;
                    }
                    r21 = r22 + 1;
                    r3 = r19 + r0;
                    r8 = r0 + r0;
                case 0x3d988:
                    r16 = r16 + 4;
                    r7 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r5 = r7 & 65535;
                    r2 = r6 & 65535;
                    r5 = r8 - r5;
                    r5 = r5 + r2;
                    r6 = r6 >>> 16;
                    r7 = r7 >>> 16;
                    r2 = r5 >> 16;
                    r6 = r6 - r7;
                    r6 = r6 + r2;
                    r8 = r6 >> 16;
                    r5 = r5 & 65535;
                    r6 = r6 << 16;
                    r5 = r6 | r5;
                    r3 = r3 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r5;
                    r5 = ((r18 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d988;
                        continue;
                    }
                    r3 = r17 << 2;
                    r3 = r19 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3da44;
                        run_3da00(); return;
                    }
                    r2 = r3 + -4;
                    r4 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3da40;
                        run_3da00(); return;
                    }
                case 0x3da00:
                    pc=0x3da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3da00() throws ExecutionException { /* 0x3da00 - 0x3dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3da00:
                    r3 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3da2c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3da40;
                    continue;
                case 0x3da1c:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3da40;
                        continue;
                    }
                case 0x3da2c:
                    r2 = r2 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r17 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3da1c;
                        continue;
                    }
                case 0x3da40:
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r17;
                case 0x3da44:
                    r2 = r21 + r0;
                case 0x3da48:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3da74:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3da48;
                    continue;
                case 0x3dc00:
                    pc=0x3dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3dc00() throws ExecutionException { /* 0x3dc00 - 0x3de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3dc00:
                    r5 = readPages[(r4+64)>>>12][((r4+64)>>>2)&0x3ff];
                    r29 = r29 + -128;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r17;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r16;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r30;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r23;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r22;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r21;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r20;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r19;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r18;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = f20;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = f21;
                    r16 = r4 + r0;
                    r17 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dc70;
                        continue;
                    }
                    r2 = readPages[(r4+68)>>>12][((r4+68)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r2 = r3 << (r2&0x1f);
                    writePages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x3dc6c;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x3dc6c:
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r0;
                case 0x3dc70:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dd7c;
                        continue;
                    }
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                case 0x3dc88:
                    r2 = 32752 << 16;
                    r3 = r18 & r2;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3dd24;
                        continue;
                    }
                    f20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f0 = r0;
                    f21 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3dda0;
                        continue;
                    }
                    r9 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e36c;
                        run_3e200(); return;
                    }
                    r2 = 5 << 16;
                    r2 = r2 + 21077;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = r2 + 21076;
                case 0x3dce8:
                    f20 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r30 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r23 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r22 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r21 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r20 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r19 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r18 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r17 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    f21 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r29 = r29 + 128;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3dd24:
                    r8 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r9 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + 9999;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r2;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e30c;
                        run_3e200(); return;
                    }
                case 0x3dd3c:
                    r2 = 5 << 16;
                    r2 = r2 + 25936;
                case 0x3dd44:
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dce8;
                        continue;
                    }
                    addr=r2+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e330;
                        run_3e200(); return;
                    }
                    r3 = r2 + 3;
                case 0x3dd68:
                    r8 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3dce8;
                    continue;
                case 0x3dd7c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = 32767 << 16;
                    r18 = r18 | 65535;
                    r2 = r0 + 1;
                    r18 = r18 & r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x3dc88;
                    continue;
                case 0x3dda0:
                    r2 = r29 + 24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r7 = f20;
                    r2 = r29 + 28;
                    r6 = f21;
                    r4 = r16 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x3ddc4;
                    pc=0x43a00;
                    run_43a00(); return;
                case 0x3ddc4:
                    r4 = r18 >>> 20;
                    r17 = r2 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e33c;
                        run_3e200(); return;
                    }
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r5 + r4;
                    r2 = r4 < -1041 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e9f0;
                        run_3e800(); return;
                    }
                    r2 = r0 + -1010;
                    r2 = r2 - r4;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = r18 << (r2&0x1f);
                case 0x3de00:
                    pc=0x3de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3de00() throws ExecutionException { /* 0x3de00 - 0x3e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3de00:
                    r2 = r4 + 1042;
                    r2 = r6 >>> (r2&0x1f);
                    r18 = r18 | r2;
                case 0x3de0c:
                    f0 = r18;
                    { long l = Double.doubleToLongBits(((double)f0)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r18 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ef98;
                        run_3ee00(); return;
                    }
                case 0x3de20:
                    r2 = f3;
                    r6 = 65040 << 16;
                    r3 = f2;
                    r2 = r6 + r2;
                    r4 = r4 + -1;
                    r19 = r0 + 1;
                case 0x3de38:
                    f4 = r3;
                    f0 = readPages[(r28+-32684)>>>12][((r28+-32684)>>>2)&0x3ff];
                    f5 = r2;
                    f1 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    f6 = r4;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r28+-32676)>>>12][((r28+-32676)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32680)>>>12][((r28+-32680)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r28+-32668)>>>12][((r28+-32668)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32672)>>>12][((r28+-32672)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f0 = readPages[(r28+-32660)>>>12][((r28+-32660)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f6)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = f0;
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3e984;
                        run_3e800(); return;
                    }
                case 0x3dedc:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = (r8&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e94c;
                        run_3e800(); return;
                    }
                    r3 = 5 << 16;
                    r2 = r8 << 3;
                    r3 = r3 + 26040;
                    r2 = r2 + r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3ea08;
                        run_3ea00(); return;
                    }
                    r8 = r8 + -1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                case 0x3df30:
                    r4 = r5 - r4;
                    r23 = r4 + -1;
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e974;
                        run_3e800(); return;
                    }
                    r18 = r0 + r0;
                case 0x3df44:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    if(r8 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e95c;
                        run_3e800(); return;
                    }
                    r23 = r23 + r8;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r8;
                    r22 = r0 + r0;
                case 0x3df60:
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e37c;
                        run_3e200(); return;
                    }
                    r2 = r3 < 6 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3f8;
                        run_3f200(); return;
                    }
                    r3 = r3 + -4;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r3;
                    r8 = r0 + r0;
                case 0x3df8c:
                    r9 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3efb4;
                        run_3ee00(); return;
                    }
                    r2 = r9 < 4 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ee2c;
                        run_3ee00(); return;
                    }
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3ebfc;
                        run_3ea00(); return;
                    }
                    r2 = r0 + 5;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3e380;
                        run_3e200(); return;
                    }
                    r3 = r0 + 1;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r3;
                case 0x3dfcc:
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r9 = r9 + r3;
                    r30 = r9 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r9;
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f018;
                        run_3f000(); return;
                    }
                    r6 = r30 + r0;
                case 0x3dff0:
                    r2 = (r6&0xffffffffL) < (24&0xffffffffL) ? 1 : 0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f404;
                        run_3f400(); return;
                    }
                case 0x3e000:
                    pc=0x3e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e000() throws ExecutionException { /* 0x3e000 - 0x3e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e000:
                    r3 = r0 + 1;
                    r2 = r0 + 4;
                case 0x3e008:
                    r2 = r2 << 1;
                    r4 = r2 + 20;
                    r4 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r5 = r3 + r0;
                    r3 = r3 + 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e008;
                        continue;
                    }
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r5;
                    r21 = r6 + r0;
                case 0x3e02c:
                    r4 = r16 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r8;
                    r21 = (r21&0xffffffffL) < (15&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    r31=0x3e040;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x3e040:
                    r20 = r2 + r0;
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e3b4;
                        run_3e200(); return;
                    }
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e3b4;
                        run_3e200(); return;
                    }
                    f8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    f9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r8 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f02c;
                        run_3f000(); return;
                    }
                    r3 = r8 & 15;
                    r2 = 5 << 16;
                    r3 = r3 << 3;
                    r2 = r2 + 26040;
                    r2 = r3 + r2;
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r8 >> 4;
                    r3 = r2 & 16;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3efe0;
                        run_3ee00(); return;
                    }
                    r3 = 5 << 16;
                    f0 = readPages[(r3+26036)>>>12][((r3+26036)>>>2)&0x3ff];
                    r2 = r2 & 15;
                    f1 = readPages[(r3+26032)>>>12][((r3+26032)>>>2)&0x3ff];
                    r8 = r0 + 3;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x3e0b8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e0f8;
                        continue;
                    }
                    r3 = 5 << 16;
                    r3 = r3 + 26000;
                case 0x3e0c8:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e0e8;
                        continue;
                    }
                    f4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                case 0x3e0e8:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e0c8;
                        continue;
                    }
                case 0x3e0f8:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x3e0fc:
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e12c;
                        continue;
                    }
                    f2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3f2b4;
                        run_3f200(); return;
                    }
                case 0x3e12c:
                    f4 = r8;
                    r2 = 64704 << 16;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32636)>>>12][((r28+-32636)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32640)>>>12][((r28+-32640)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r2 + r8;
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ef00;
                        run_3ee00(); return;
                    }
                    r2 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = r30 + r0;
                case 0x3e16c:
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r5 = r4 + -1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f174;
                        run_3f000(); return;
                    }
                    r3 = 5 << 16;
                    r5 = r5 << 3;
                    r3 = r3 + 26040;
                    r3 = r5 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = readPages[(r28+-32620)>>>12][((r28+-32620)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32624)>>>12][((r28+-32624)>>>2)&0x3ff];
                    r6 = fcsr;
                    r6 = fcsr;
                    r1 = r6 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f6 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f6 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f6 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f6 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r6;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f4 = r9;
                    r7 = f6;
                    f5 = r8;
                    r5 = r7 + 48;
                    r5 = r5 << 24;
                    r5 = r5 >> 24;
                    r3 = r20 + 1;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f6)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3e2c0;
                        run_3e200(); return;
                    }
                case 0x3e200:
                    pc=0x3e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e200() throws ExecutionException { /* 0x3e200 - 0x3e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e200:
                    f10 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    f11 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3f380;
                        run_3f200(); return;
                    }
                    r5 = r4 < 2 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ef68;
                        run_3ee00(); return;
                    }
                    f6 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    r4 = r20 + r4;
                    f7 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3e264;
                    continue;
                case 0x3e248:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3f380;
                        run_3f200(); return;
                    }
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3ef68;
                        run_3ee00(); return;
                    }
                case 0x3e264:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r3 = r3 + 1;
                    r8 = fcsr;
                    r8 = fcsr;
                    r1 = r8 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f12 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f12 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f12 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f12 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r8;
                    { long l = Double.doubleToLongBits(((double)f12)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r9 = f12;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r5 = r9 + 48;
                    r5 = r5 << 24;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    r5 = r5 >> 24;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3e248;
                        continue;
                    }
                case 0x3e2c0:
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                case 0x3e2c4:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x3e2d8;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x3e2d8:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r2 = r8 + 1;
                    r9 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff] = r2;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ee20;
                        run_3ee00(); return;
                    }
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3dce8;
                    run_3dc00(); return;
                case 0x3e30c:
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r18 = r18 & r2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dd3c;
                        run_3dc00(); return;
                    }
                    r2 = 5 << 16;
                    r2 = r2 + 25924;
                    /* Next insn is delay slot */ 
                    pc=0x3dd44;
                    run_3dc00(); return;
                case 0x3e330:
                    r3 = r2 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3dd68;
                    run_3dc00(); return;
                case 0x3e33c:
                    r2 = f21;
                    r6 = 15 << 16;
                    r6 = r6 | 65535;
                    r5 = 16368 << 16;
                    r6 = r2 & r6;
                    r2 = r6 | r5;
                    r3 = f20;
                    r4 = r4 + -1023;
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3de38;
                    run_3de00(); return;
                case 0x3e36c:
                    r2 = 5 << 16;
                    r2 = r2 + 21076;
                    /* Next insn is delay slot */ 
                    pc=0x3dce8;
                    run_3dc00(); return;
                case 0x3e37c:
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r0;
                case 0x3e380:
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3e394;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x3e394:
                    r8 = r0 + -1;
                    r9 = r0 + 1;
                    r20 = r2 + r0;
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r8;
                    r30 = r0 + -1;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r9;
                case 0x3e3b4:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e57c;
                        run_3e400(); return;
                    }
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = r8 < 15 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e57c;
                        run_3e400(); return;
                    }
                    r3 = 5 << 16;
                    r2 = r8 << 3;
                    r3 = r3 + 26040;
                    r2 = r2 + r3;
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r9 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ec28;
                        run_3ec00(); return;
                    }
                case 0x3e3fc:
                    f6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                case 0x3e400:
                    pc=0x3e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e400() throws ExecutionException { /* 0x3e400 - 0x3e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e400:
                    f7 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f10 = (int)(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL))); break; // Round towards zero
                        case 2: f10 = (int)Math.ceil((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    { long l = Double.doubleToLongBits(((double)f10)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = f10;
                    r3 = r20 + 1;
                    r2 = r4 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3e500;
                        continue;
                    }
                    f6 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    f8 = r0;
                    f7 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    f9 = r0;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3e2c4;
                        run_3e200(); return;
                    }
                    r2 = r20 + 2;
                    r30 = r20 + r30;
                    /* Next insn is delay slot */ 
                    pc=0x3e4ac;
                    continue;
                case 0x3e494:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = r2 + 1;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3e2c4;
                        run_3e200(); return;
                    }
                case 0x3e4ac:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r3 = r2 + r0;
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f10 = (int)(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL))); break; // Round towards zero
                        case 2: f10 = (int)Math.ceil((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    { long l = Double.doubleToLongBits(((double)f10)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r5 = f10;
                    r4 = r5 + 48;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r2 != r30) {
                        /* Next insn is delay slot */ 
                        pc=0x3e494;
                        continue;
                    }
                case 0x3e500:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3e538;
                        continue;
                    }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3e2c4;
                        run_3e200(); return;
                    }
                    r4 = f10;
                    r2 = r4 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e2c4;
                        run_3e200(); return;
                    }
                case 0x3e538:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x3e53c:
                    r4 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x3e558;
                    continue;
                case 0x3e548:
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3f0b4;
                        run_3f000(); return;
                    }
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r3 = r2 + r0;
                case 0x3e558:
                    r2 = r3 + -1;
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3e548;
                        continue;
                    }
                    r4 = r5 + 1;
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3e2c4;
                    run_3e200(); return;
                case 0x3e57c:
                    r8 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e9b8;
                        run_3e800(); return;
                    }
                    r9 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r9 = r9 < 2 ? 1 : 0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r9;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ecfc;
                        run_3ec00(); return;
                    }
                    r3 = r30 + -1;
                    r2 = r22 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3efc0;
                        run_3ee00(); return;
                    }
                    r3 = r22 - r3;
                case 0x3e5b8:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f278;
                        run_3f200(); return;
                    }
                    r21 = r18 + r0;
                    r2 = r30 + r0;
                case 0x3e5c8:
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    r18 = r18 + r2;
                    r23 = r23 + r2;
                    /* Next insn is delay slot */ 
                    r31=0x3e5e4;
                    pc=0x42800;
                    run_42800(); return;
                case 0x3e5e4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r19 = r2 + r0;
                case 0x3e5ec:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e618;
                        run_3e600(); return;
                    }
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e618;
                        run_3e600(); return;
                    }
                    r4 = r21 < r23 ? 1 : 0;
                case 0x3e600:
                    pc=0x3e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e600() throws ExecutionException { /* 0x3e600 - 0x3e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e600:
                    r2 = r23 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ebf0;
                        run_3ea00(); return;
                    }
                case 0x3e60c:
                    r18 = r18 - r2;
                    r21 = r21 - r2;
                    r23 = r23 - r2;
                case 0x3e618:
                    if(r22 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e694;
                        continue;
                    }
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ef78;
                        run_3ee00(); return;
                    }
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e688;
                        continue;
                    }
                    r6 = r3 + r0;
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x3e650;
                    pc=0x42e00;
                    run_42e00(); return;
                case 0x3e650:
                    r5 = r2 + r0;
                    r6 = r17 + r0;
                    r4 = r16 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3e668;
                    pc=0x42a00;
                    run_42a00(); return;
                case 0x3e668:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x3e67c;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x3e67c:
                    r2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r17 = r2 + r0;
                case 0x3e688:
                    r6 = r22 - r3;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eca4;
                        run_3ec00(); return;
                    }
                case 0x3e694:
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x3e6a4;
                    pc=0x42800;
                    run_42800(); return;
                case 0x3e6a4:
                    r3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = r2 + r0;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e6cc;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3e6c8;
                    pc=0x42e00;
                    run_42e00(); return;
                case 0x3e6c8:
                    r22 = r2 + r0;
                case 0x3e6cc:
                    r7 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eba0;
                        run_3ea00(); return;
                    }
                case 0x3e6dc:
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                case 0x3e6e0:
                    r7 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3edf0;
                        run_3ec00(); return;
                    }
                    r2 = r0 + 1;
                case 0x3e6f4:
                    r2 = r2 + r23;
                    r2 = r2 & 31;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e9d8;
                        run_3e800(); return;
                    }
                    r3 = r0 + 32;
                    r3 = r3 - r2;
                    r4 = r3 < 5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3dc;
                        run_3f200(); return;
                    }
                    r3 = r0 + 28;
                    r2 = r3 - r2;
                    r18 = r18 + r2;
                    r21 = r21 + r2;
                    r23 = r23 + r2;
                case 0x3e72c:
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e74c;
                        continue;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3e748;
                    pc=0x43000;
                    run_43000(); return;
                case 0x3e748:
                    r17 = r2 + r0;
                case 0x3e74c:
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e76c;
                        continue;
                    }
                    r5 = r22 + r0;
                    r4 = r16 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3e768;
                    pc=0x43000;
                    run_43000(); return;
                case 0x3e768:
                    r22 = r2 + r0;
                case 0x3e76c:
                    r8 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eb48;
                        run_3ea00(); return;
                    }
                case 0x3e77c:
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ee44;
                        run_3ee00(); return;
                    }
                case 0x3e784:
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ea14;
                        run_3ea00(); return;
                    }
                    if(r21 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e7b4;
                        continue;
                    }
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3e7b0;
                    pc=0x43000;
                    run_43000(); return;
                case 0x3e7b0:
                    r19 = r2 + r0;
                case 0x3e7b4:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f0d8;
                        run_3f000(); return;
                    }
                    r21 = r19 + r0;
                case 0x3e7c8:
                    r8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = r20 + r30;
                    r8 = r8 & 1;
                    r18 = r20 + 1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r8;
                case 0x3e7e0:
                    r9 = r18 + -1;
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x3e7f8;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x3e7f8:
                    r4 = r17 + r0;
                    r5 = r19 + r0;
                case 0x3e800:
                    pc=0x3e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e800() throws ExecutionException { /* 0x3e800 - 0x3ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e800:
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r23 = r2 + 48;
                    /* Next insn is delay slot */ 
                    r31=0x3e810;
                    pc=0x43200;
                    run_43200(); return;
                case 0x3e810:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r21 + r0;
                    r30 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3e828;
                    pc=0x43400;
                    run_43400(); return;
                case 0x3e828:
                    r3 = r2 + r0;
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3edd4;
                        run_3ec00(); return;
                    }
                    r5 = r3 + r0;
                    r4 = r17 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x3e850;
                    pc=0x43200;
                    run_43200(); return;
                case 0x3e850:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = r3 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x3e868;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x3e868:
                    r2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e898;
                        continue;
                    }
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e898;
                        continue;
                    }
                    r8 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ed90;
                        run_3ec00(); return;
                    }
                case 0x3e898:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ed24;
                        run_3ec00(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e8c8;
                        continue;
                    }
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e8c8;
                        continue;
                    }
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ed24;
                        run_3ec00(); return;
                    }
                case 0x3e8c8:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f128;
                        run_3f000(); return;
                    }
                    r8 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r18 + r0;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x3f154;
                        run_3f000(); return;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3e8fc;
                    pc=0x42000;
                    run_42000(); return;
                case 0x3e8fc:
                    r17 = r2 + r0;
                    r4 = r16 + r0;
                    r5 = r19 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    if(r19 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x3edb8;
                        run_3ec00(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3e920;
                    pc=0x42000;
                    run_42000(); return;
                case 0x3e920:
                    r5 = r21 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3e93c;
                    pc=0x42000;
                    run_42000(); return;
                case 0x3e93c:
                    r21 = r2 + r0;
                    r18 = r18 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3e7e0;
                    run_3e600(); return;
                case 0x3e94c:
                    r3 = r0 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3df30;
                    run_3de00(); return;
                case 0x3e95c:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    r18 = r18 - r9;
                    r22 = r0 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x3df60;
                    run_3de00(); return;
                case 0x3e974:
                    r18 = r0 - r23;
                    r23 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3df44;
                    run_3de00(); return;
                case 0x3e984:
                    f4 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f4)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3dedc;
                        run_3de00(); return;
                    }
                    r3 = f4;
                    r3 = r3 + -1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3dedc;
                    run_3de00(); return;
                case 0x3e9b8:
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r3 = r22 + r0;
                    r8 = r8 < 2 ? 1 : 0;
                    r21 = r18 + r0;
                    r19 = r0 + r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x3e5ec;
                    run_3e400(); return;
                case 0x3e9d8:
                    r2 = r0 + 28;
                case 0x3e9dc:
                    r18 = r18 + r2;
                    r21 = r21 + r2;
                    r23 = r23 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x3e72c;
                    run_3e600(); return;
                case 0x3e9f0:
                    r18 = r0 + -1042;
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = r18 - r4;
                    r18 = r7 << (r18&0x1f);
                case 0x3ea00:
                    pc=0x3ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ea00() throws ExecutionException { /* 0x3ea00 - 0x3ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ea00:
                    /* Next insn is delay slot */ 
                    pc=0x3de0c;
                    run_3de00(); return;
                case 0x3ea08:
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x3df30;
                    run_3de00(); return;
                case 0x3ea14:
                    r18 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ea3c;
                    continue;
                case 0x3ea20:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ea38;
                    pc=0x42000;
                    run_42000(); return;
                case 0x3ea38:
                    r17 = r2 + r0;
                case 0x3ea3c:
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ea4c;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x3ea4c:
                    r18 = r18 + 1;
                    r23 = r2 + 48;
                    r2 = r18 - r20;
                    r2 = r2 < r30 ? 1 : 0;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ea20;
                        continue;
                    }
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ed18;
                        run_3ec00(); return;
                    }
                case 0x3ea70:
                    r3 = r20 + r30;
                    r18 = r0 + r0;
                case 0x3ea78:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x3ea90;
                    pc=0x43000;
                    run_43000(); return;
                case 0x3ea90:
                    r4 = r2 + r0;
                    r5 = r22 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3eaa4;
                    pc=0x43200;
                    run_43200(); return;
                case 0x3eaa4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ecc0;
                        run_3ec00(); return;
                    }
                case 0x3eab0:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                case 0x3eab4:
                    r5 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x3ead0;
                    continue;
                case 0x3eac0:
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3eeb4;
                        run_3ee00(); return;
                    }
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r2 + r0;
                case 0x3ead0:
                    r2 = r3 + -1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x3eac0;
                        continue;
                    }
                    r4 = r4 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x3eae4:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x3eaf8;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x3eaf8:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e2c4;
                        run_3e200(); return;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eb28;
                        continue;
                    }
                    if(r18 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x3eb28;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3eb24;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x3eb24:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                case 0x3eb28:
                    r4 = r16 + r0;
                    r5 = r19 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x3eb3c;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x3eb3c:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3e2c4;
                    run_3e200(); return;
                case 0x3eb48:
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3eb58;
                    pc=0x43200;
                    run_43200(); return;
                case 0x3eb58:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e77c;
                        run_3e600(); return;
                    }
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r9 = r9 + -1;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x3eb84;
                    pc=0x42000;
                    run_42000(); return;
                case 0x3eb84:
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3a8;
                        run_3f200(); return;
                    }
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3e77c;
                    run_3e600(); return;
                case 0x3eba0:
                    r8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e6dc;
                        run_3e600(); return;
                    }
                    r2 = 15 << 16;
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r2 | 65535;
                    r2 = r2 & r9;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e6dc;
                        run_3e600(); return;
                    }
                    r2 = 32752 << 16;
                    r2 = r2 & r9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e6dc;
                        run_3e600(); return;
                    }
                    r3 = r0 + 1;
                    r18 = r18 + 1;
                    r23 = r23 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3e6e0;
                    run_3e600(); return;
                case 0x3ebf0:
                    r2 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e60c;
                    run_3e600(); return;
                case 0x3ebfc:
                    r9 = r0 + 1;
                case 0x3ec00:
                    pc=0x3ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ec00() throws ExecutionException { /* 0x3ec00 - 0x3ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ec00:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r9;
                case 0x3ec04:
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eff0;
                        run_3ee00(); return;
                    }
                    r6 = r4 + r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    r30 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3dff0;
                    run_3de00(); return;
                case 0x3ec28:
                    if(r30 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e3fc;
                        run_3e200(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ef58;
                        run_3ee00(); return;
                    }
                    f0 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    f1 = readPages[(r28+-32632)>>>12][((r28+-32632)>>>2)&0x3ff];
                    r19 = r0 + r0;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f1 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3ee94;
                        run_3ee00(); return;
                    }
                case 0x3ec6c:
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = r20 + r0;
                    r9 = ~(r0 | r9);
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                case 0x3ec7c:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x3ec90;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x3ec90:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eb28;
                        run_3ea00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3e2c4;
                    run_3e200(); return;
                case 0x3eca4:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ecb4;
                    pc=0x42e00;
                    run_42e00(); return;
                case 0x3ecb4:
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e694;
                    run_3e600(); return;
                case 0x3ecc0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ecd4;
                        continue;
                    }
                    r23 = r23 & 1;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eab0;
                        run_3ea00(); return;
                    }
                case 0x3ecd4:
                    r5 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x3ece4;
                    continue;
                case 0x3ece0:
                    r3 = r4 + r0;
                case 0x3ece4:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r4 = r3 + -1;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x3ece0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3eae4;
                    run_3ea00(); return;
                case 0x3ecfc:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f288;
                        run_3f200(); return;
                    }
                    r2 = r2 + 1075;
                    r3 = r22 + r0;
                    r21 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e5c8;
                    run_3e400(); return;
                case 0x3ed18:
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3ea70;
                    run_3ea00(); return;
                case 0x3ed24:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ed74;
                        continue;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x3ed40;
                    pc=0x43000;
                    run_43000(); return;
                case 0x3ed40:
                    r4 = r2 + r0;
                    r5 = r22 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ed54;
                    pc=0x43200;
                    run_43200(); return;
                case 0x3ed54:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f38c;
                        run_3f200(); return;
                    }
                case 0x3ed5c:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3f31c;
                        run_3f200(); return;
                    }
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r3 + 49;
                case 0x3ed74:
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = r19 + r0;
                    r3 = r7 + 1;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3eae4;
                    run_3ea00(); return;
                case 0x3ed90:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3f31c;
                        run_3f200(); return;
                    }
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ed74;
                        continue;
                    }
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r9 + 49;
                    /* Next insn is delay slot */ 
                    pc=0x3ed74;
                    continue;
                case 0x3edb8:
                    /* Next insn is delay slot */ 
                    r31=0x3edc0;
                    pc=0x42000;
                    run_42000(); return;
                case 0x3edc0:
                    r19 = r2 + r0;
                    r21 = r2 + r0;
                    r18 = r18 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3e7e0;
                    run_3e600(); return;
                case 0x3edd4:
                    r4 = r16 + r0;
                    r5 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ede4;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x3ede4:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3e898;
                    run_3e800(); return;
                case 0x3edf0:
                    r2 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r2 = r2 << 2;
                case 0x3ee00:
                    pc=0x3ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ee00() throws ExecutionException { /* 0x3ee00 - 0x3f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ee00:
                    r2 = r22 + r2;
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x3ee10;
                    pc=0x42400;
                    run_42400(); return;
                case 0x3ee10:
                    r3 = r0 + 32;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x3e6f4;
                    run_3e600(); return;
                case 0x3ee20:
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3dce8;
                    run_3dc00(); return;
                case 0x3ee2c:
                    r2 = r0 + 2;
                    if(r9 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3e380;
                        run_3e200(); return;
                    }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ec04;
                    run_3ec00(); return;
                case 0x3ee44:
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r8 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e784;
                        run_3e600(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ec6c;
                        run_3ec00(); return;
                    }
                    r5 = r22 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 5;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ee78;
                    pc=0x42000;
                    run_42000(); return;
                case 0x3ee78:
                    r5 = r2 + r0;
                    r4 = r17 + r0;
                    r22 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ee8c;
                    pc=0x43200;
                    run_43200(); return;
                case 0x3ee8c:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ec6c;
                        run_3ec00(); return;
                    }
                case 0x3ee94:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 49;
                    r8 = r8 + 1;
                    r3 = r20 + 1;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x3ec7c;
                    run_3ec00(); return;
                case 0x3eeb4:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 49;
                    r9 = r9 + 1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3eae4;
                    run_3ea00(); return;
                case 0x3eed0:
                    f4 = r8;
                    r2 = 64704 << 16;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32636)>>>12][((r28+-32636)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32640)>>>12][((r28+-32640)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r2 + r8;
                case 0x3ef00:
                    f2 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32632)>>>12][((r28+-32632)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f2 = r9;
                    f3 = r8;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3f164;
                        run_3f000(); return;
                    }
                    r4 = 32768 << 16;
                    f2 = r9;
                    r2 = r4 ^ r8;
                    f3 = r2;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3ef68;
                        continue;
                    }
                case 0x3ef58:
                    r22 = r0 + r0;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ec6c;
                    run_3ec00(); return;
                case 0x3ef68:
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = f8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = f9;
                    /* Next insn is delay slot */ 
                    pc=0x3e3b4;
                    run_3e200(); return;
                case 0x3ef78:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ef8c;
                    pc=0x42e00;
                    run_42e00(); return;
                case 0x3ef8c:
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e694;
                    run_3e600(); return;
                case 0x3ef98:
                    f0 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x3de20;
                    run_3de00(); return;
                case 0x3efb4:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x3dfcc;
                    run_3de00(); return;
                case 0x3efc0:
                    r7 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = r3 - r22;
                    r7 = r7 + r22;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r7;
                    r22 = r3 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e5b8;
                    run_3e400(); return;
                case 0x3efe0:
                    f0 = f8;
                    f1 = f9;
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x3e0b8;
                    run_3e000(); return;
                case 0x3eff0:
                    r3 = r0 + 1;
                    r4 = r0 + 1;
                    r21 = r0 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r3;
                case 0x3f000:
                    pc=0x3f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f000() throws ExecutionException { /* 0x3f000 - 0x3f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f000:
                    r30 = r0 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e02c;
                    run_3e000(); return;
                case 0x3f018:
                    r21 = r30 + r0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e02c;
                    run_3e000(); return;
                case 0x3f02c:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 - r9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f2a4;
                        run_3f200(); return;
                    }
                    r4 = r2 & 15;
                    r3 = 5 << 16;
                    r4 = r4 << 3;
                    r3 = r3 + 26040;
                    r3 = r4 + r3;
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 >> 4;
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f3d0;
                        run_3f200(); return;
                    }
                    r3 = 5 << 16;
                    r3 = r3 + 26000;
                    r8 = r0 + 2;
                case 0x3f07c:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f09c;
                        continue;
                    }
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x3f09c:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f07c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3e0fc;
                    run_3e000(); return;
                case 0x3f0b4:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 + 1;
                    r4 = r0 + 49;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3e2c4;
                    run_3e200(); return;
                case 0x3f0d8:
                    r5 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f0e8;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x3f0e8:
                    r6 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r18 = r2 + r0;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r5 = r19 + 12;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x3f108;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x3f108:
                    r4 = r16 + r0;
                    r5 = r18 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x3f11c;
                    pc=0x43000;
                    run_43000(); return;
                case 0x3f11c:
                    r21 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e7c8;
                    run_3e600(); return;
                case 0x3f128:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3f31c;
                        run_3f200(); return;
                    }
                    r9 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r23 = r23 + 1;
                    r18 = r19 + r0;
                    r3 = r9 + 1;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3eae4;
                    run_3ea00(); return;
                case 0x3f154:
                    r18 = r19 + r0;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ea78;
                    run_3ea00(); return;
                case 0x3f164:
                    r22 = r0 + r0;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ee94;
                    run_3ee00(); return;
                case 0x3f174:
                    r3 = 5 << 16;
                    r6 = r5 << 3;
                    r3 = r3 + 26040;
                    r3 = r6 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = r9;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f5 = r8;
                    r3 = r20 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f11 = (int)(l >>> 32); f10 = (int)l; }
                    r6 = fcsr;
                    r6 = fcsr;
                    r1 = r6 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f4 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f4 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r6;
                    r7 = f4;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r6 = r7 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r0 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x3f244;
                        run_3f200(); return;
                    }
                    f6 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    r4 = r20 + r4;
                    f7 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    r6 = r3 + r0;
                case 0x3f1f4:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r6 = r6 + 1;
                    r8 = fcsr;
                case 0x3f200:
                    pc=0x3f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f200() throws ExecutionException { /* 0x3f200 - 0x3f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f200:
                    r8 = fcsr;
                    r1 = r8 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f4 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f4 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r8;
                    r9 = f4;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r10 = r9 + 48;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3f1f4;
                        run_3f000(); return;
                    }
                    r3 = r3 + r5;
                case 0x3f244:
                    f2 = readPages[(r28+-32620)>>>12][((r28+-32620)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32624)>>>12][((r28+-32624)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3f340;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x3e53c;
                    run_3e400(); return;
                case 0x3f278:
                    r21 = r18 - r30;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e5c8;
                    run_3e400(); return;
                case 0x3f288:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r0 + 54;
                    r2 = r3 - r2;
                    r21 = r18 + r0;
                    r3 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e5c8;
                    run_3e400(); return;
                case 0x3f2a4:
                    f0 = f8;
                    f1 = f9;
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x3e0fc;
                    run_3e000(); return;
                case 0x3f2b4:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eed0;
                        run_3ee00(); return;
                    }
                    r9 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ef68;
                        run_3ee00(); return;
                    }
                    f6 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f7 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    f4 = r8;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r3 + -1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32636)>>>12][((r28+-32636)>>>2)&0x3ff];
                    r3 = 64704 << 16;
                    f3 = readPages[(r28+-32640)>>>12][((r28+-32640)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r3 + r8;
                    /* Next insn is delay slot */ 
                    pc=0x3e16c;
                    run_3e000(); return;
                case 0x3f31c:
                    r8 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r0 + 57;
                    r18 = r19 + r0;
                    r3 = r8 + 1;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    r4 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x3eab4;
                    run_3ea00(); return;
                case 0x3f340:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3ef68;
                        run_3ee00(); return;
                    }
                    r6 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x3f364;
                    continue;
                case 0x3f360:
                    r3 = r5 + r0;
                case 0x3f364:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r5 = r3 + -1;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x3f360;
                        continue;
                    }
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x3e2c4;
                    run_3e200(); return;
                case 0x3f380:
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x3e53c;
                    run_3e400(); return;
                case 0x3f38c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ed74;
                        run_3ec00(); return;
                    }
                    r2 = r23 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ed74;
                        run_3ec00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3ed5c;
                    run_3ec00(); return;
                case 0x3f3a8:
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f3c0;
                    pc=0x42000;
                    run_42000(); return;
                case 0x3f3c0:
                    r19 = r2 + r0;
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3e77c;
                    run_3e600(); return;
                case 0x3f3d0:
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x3e0fc;
                    run_3e000(); return;
                case 0x3f3dc:
                    r4 = r0 + 4;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3e72c;
                        run_3e600(); return;
                    }
                    r3 = r0 + 60;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x3e9dc;
                    run_3e800(); return;
                case 0x3f3f8:
                    r8 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3df8c;
                    run_3de00(); return;
                case 0x3f400:
                    pc=0x3f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f400() throws ExecutionException { /* 0x3f400 - 0x3f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f400:
                case 0x3f404:
                    r21 = r6 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e02c;
                    run_3e000(); return;
                case 0x3f600:
                    pc=0x3f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f600() throws ExecutionException { /* 0x3f600 - 0x3f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f600:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 114;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3f698;
                        continue;
                    }
                    r3 = r0 + 119;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3f684;
                        continue;
                    }
                    r3 = r0 + 97;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3f63c;
                        continue;
                    }
                    r2 = r0 + 22;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f63c:
                    r7 = r0 + 520;
                    r4 = r0 + 1;
                    r2 = r0 + 264;
                case 0x3f648:
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f674;
                        continue;
                    }
                    r8 = r0 + 43;
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x3f6ac;
                        continue;
                    }
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x3f6ac;
                        continue;
                    }
                case 0x3f674:
                    r4 = r4 | r7;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f684:
                    r7 = r0 + 1536;
                    r4 = r0 + 1;
                    r2 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3f648;
                    continue;
                case 0x3f698:
                    r7 = r0 + r0;
                    r4 = r0 + r0;
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x3f648;
                    continue;
                case 0x3f6ac:
                    r3 = r0 + -29;
                    r4 = r0 + 2;
                    r2 = r2 & r3;
                    r4 = r4 | r7;
                    r2 = r2 | 16;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f800:
                    pc=0x3f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f800() throws ExecutionException { /* 0x3f800 - 0x3fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f800:
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    r16 = r6 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x3f828;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3f828:
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r29 + 28;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f858;
                        continue;
                    }
                    r2 = readPages[(r17+56)>>>12][((r17+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f8b0;
                        continue;
                    }
                case 0x3f858:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 8192;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f884;
                        continue;
                    }
                    r2 = r2 | 8192;
                    r3 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r3 & r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                case 0x3f884:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x3f898;
                    pc=0x3fc00;
                    run_3fc00(); return;
                case 0x3f898:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r16 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f8b0:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f8bc;
                    pc=0x21400;
                    run_21400(); return;
                case 0x3f8bc:
                    /* Next insn is delay slot */ 
                    pc=0x3f858;
                    continue;
                case 0x3fa00:
                    pc=0x3fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fa00() throws ExecutionException { /* 0x3fa00 - 0x3fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fa00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f800;
                    run_3f800(); return;
                case 0x3fc00:
                    pc=0x3fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fc00() throws ExecutionException { /* 0x3fc00 - 0x3fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fc00:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r19 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fcd4;
                        continue;
                    }
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r21 = r4 + r0;
                    r3 = r2 & 8;
                    r16 = r5 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fd0c;
                        continue;
                    }
                    r3 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fd0c;
                        continue;
                    }
                    r3 = r2 & 2;
                    r17 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fd38;
                        continue;
                    }
                case 0x3fc74:
                    r20 = r0 + r0;
                    r18 = r0 + r0;
                case 0x3fc7c:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fdfc;
                        continue;
                    }
                    r2 = (r18&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r7 = r18 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fc9c;
                        continue;
                    }
                    r7 = r0 + 1024;
                case 0x3fc9c:
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x3fcb0;
                    return;
                case 0x3fcb0:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe3c;
                        run_3fe00(); return;
                    }
                    r3 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r20 = r20 + r2;
                    r18 = r18 - r2;
                    r2 = r3 - r2;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fc7c;
                        continue;
                    }
                case 0x3fcd4:
                    r2 = r0 + r0;
                case 0x3fcd8:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3fd0c:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3fd1c;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x3fd1c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x401ec;
                        run_40000(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r17 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r3 = r2 & 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fc74;
                        continue;
                    }
                case 0x3fd38:
                    r3 = r2 & 1;
                    r22 = r0 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe58;
                        run_3fe00(); return;
                    }
                    r18 = r0 + r0;
                case 0x3fd4c:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fde8;
                        continue;
                    }
                case 0x3fd54:
                    r3 = r2 & 512;
                    r20 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ff38;
                        run_3fe00(); return;
                    }
                    r3 = ((r18 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40000;
                        run_40000(); return;
                    }
                    r3 = r2 & 1152;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40084;
                        run_40000(); return;
                    }
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r23 = r20 + r0;
                    r30 = r20 + r0;
                    r20 = r18 + r0;
                case 0x3fd8c:
                    r5 = r22 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3fd9c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x3fd9c:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r30 = r2 - r30;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r30;
                    r3 = r2 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    r2 = r18 + r0;
                case 0x3fdbc:
                    r22 = r22 + r2;
                    r18 = r18 - r2;
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r20 = r2 - r20;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r20;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fcd4;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fd54;
                        continue;
                    }
                case 0x3fde8:
                    r22 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3fd4c;
                    continue;
                case 0x3fdfc:
                    r20 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                case 0x3fe00:
                    pc=0x3fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fe00() throws ExecutionException { /* 0x3fe00 - 0x40000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fe00:
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3fc7c;
                    run_3fc00(); return;
                case 0x3fe10:
                    /* Next insn is delay slot */ 
                    r31=0x3fe18;
                    pc=0x27000;
                    run_27000(); return;
                case 0x3fe18:
                    r30 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40110;
                        run_40000(); return;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3fe34;
                    pc=0x23800;
                    run_23800(); return;
                case 0x3fe34:
                    r2 = r0 + 12;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                case 0x3fe3c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3fcd8;
                    run_3fc00(); return;
                case 0x3fe58:
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    r18 = r0 + r0;
                case 0x3fe64:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ff20;
                        continue;
                    }
                case 0x3fe6c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40054;
                        run_40000(); return;
                    }
                case 0x3fe74:
                    r2 = ((r18 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe88;
                        continue;
                    }
                    r23 = r18 + r0;
                case 0x3fe88:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r20 = r23 + r0;
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3feb8;
                        continue;
                    }
                    r8 = r6 + r7;
                    r2 = r8 < r23 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4013c;
                        run_40000(); return;
                    }
                case 0x3feb8:
                    r2 = r23 < r7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ffa0;
                        continue;
                    }
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x3fee0;
                    return;
                case 0x3fee0:
                    r20 = r2 + r0;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe3c;
                        continue;
                    }
                case 0x3fef0:
                    r22 = r22 - r20;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ffdc;
                        continue;
                    }
                case 0x3fefc:
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r30 = r30 + r20;
                    r18 = r18 - r20;
                    r20 = r2 - r20;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r20;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fcd4;
                        run_3fc00(); return;
                    }
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe6c;
                        continue;
                    }
                case 0x3ff20:
                    r30 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r3 = r0 + r0;
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3fe64;
                    continue;
                case 0x3ff38:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ff5c;
                        continue;
                    }
                    r2 = ((r20 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40190;
                        run_40000(); return;
                    }
                case 0x3ff5c:
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = ((r18 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40018;
                        run_40000(); return;
                    }
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x3ff88;
                    return;
                case 0x3ff88:
                    r20 = r2 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe3c;
                        continue;
                    }
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3fdbc;
                    run_3fc00(); return;
                case 0x3ffa0:
                    r6 = r23 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x3ffb4;
                    pc=0x26000;
                    run_26000(); return;
                case 0x3ffb4:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r22 = r22 - r20;
                    r2 = r2 - r23;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r23 = r2 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r23;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fefc;
                        continue;
                    }
                case 0x3ffdc:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ffec;
                    pc=0x20200;
                    run_20200(); return;
                case 0x3ffec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe3c;
                        continue;
                    }
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3fefc;
                    continue;
                case 0x40000:
                    pc=0x40000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40000() throws ExecutionException { /* 0x40000 - 0x40200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40000:
                    r30 = r18 + r0;
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r23 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3fd8c;
                    run_3fc00(); return;
                case 0x40018:
                    r5 = r22 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x40028;
                    pc=0x26000;
                    run_26000(); return;
                case 0x40028:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r2 = r2 - r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 + r18;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3fdbc;
                    run_3fc00(); return;
                case 0x40054:
                    r4 = r30 + r0;
                    r5 = r0 + 10;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x40068;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x40068:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x401dc;
                        continue;
                    }
                    r22 = r2 + 1;
                    r22 = r22 - r30;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3fe74;
                    run_3fe00(); return;
                case 0x40084:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r6 = r4 << 1;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r6 + r4;
                    r20 = r4 >>> 31;
                    r23 = r3 - r5;
                    r4 = r20 + r4;
                    r6 = r23 + 1;
                    r20 = r4 >> 1;
                    r6 = r6 + r18;
                    r4 = ((r20 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x401d0;
                        continue;
                    }
                    r20 = r6 + r0;
                case 0x400c0:
                    r2 = r2 & 1024;
                    r4 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe10;
                        run_3fe00(); return;
                    }
                    r5 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x400dc;
                    pc=0x25200;
                    run_25200(); return;
                case 0x400dc:
                    r30 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe34;
                        run_3fe00(); return;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x400fc;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x400fc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + -1153;
                    r2 = r2 & r3;
                    r2 = r2 | 128;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x40110:
                    r4 = r30 + r23;
                    r3 = r20 - r23;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r30;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r4;
                    r30 = r18 + r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    r20 = r18 + r0;
                    r23 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3fd8c;
                    run_3fc00(); return;
                case 0x4013c:
                    r6 = r8 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x40154;
                    pc=0x26000;
                    run_26000(); return;
                case 0x40154:
                    r8 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 + r8;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x40174;
                    pc=0x20200;
                    run_20200(); return;
                case 0x40174:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r8 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe3c;
                        run_3fe00(); return;
                    }
                    r20 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3fef0;
                    run_3fe00(); return;
                case 0x40190:
                    r5 = r22 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x401a0;
                    pc=0x26000;
                    run_26000(); return;
                case 0x401a0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 + r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x401bc;
                    pc=0x20200;
                    run_20200(); return;
                case 0x401bc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe3c;
                        run_3fe00(); return;
                    }
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3fdbc;
                    run_3fc00(); return;
                case 0x401d0:
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x400c0;
                    continue;
                case 0x401dc:
                    r22 = r18 + 1;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3fe74;
                    run_3fe00(); return;
                case 0x401ec:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3fcd8;
                    run_3fc00(); return;
                case 0x40200:
                    pc=0x40200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40200() throws ExecutionException { /* 0x40200 - 0x40400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40200:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x40600;
                    run_40600(); return;
                case 0x40400:
                    pc=0x40400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40400() throws ExecutionException { /* 0x40400 - 0x40600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40400:
                    r29 = r29 + -32;
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4041c;
                    pc=0x40600;
                    run_40600(); return;
                case 0x4041c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40600:
                    pc=0x40600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40600() throws ExecutionException { /* 0x40600 - 0x40800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40600:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r20 = r4 + r0;
                    r18 = r5 + r0;
                    r21 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x40638;
                    pc=0x4c400;
                    run_4c400(); return;
                case 0x40638:
                    r16 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x406f0;
                        continue;
                    }
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40754;
                        continue;
                    }
                    r5 = r0 + 61;
                    r2 = r18 + r0;
                    r4 = r0 + 61;
                    if(r3 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4067c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x406f0;
                    continue;
                case 0x40674:
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x406f0;
                        continue;
                    }
                case 0x4067c:
                    r2 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40674;
                        continue;
                    }
                    r17 = r2 - r18;
                case 0x40694:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x406f0;
                        continue;
                    }
                    r22 = r0 + 61;
                case 0x406a8:
                    r5 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x406b8;
                    pc=0x45e00;
                    run_45e00(); return;
                case 0x406b8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x406dc;
                        continue;
                    }
                    r19 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r19 = r19 + r17;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x4072c;
                        continue;
                    }
                case 0x406dc:
                    r16 = r16 + 4;
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x406a8;
                        continue;
                    }
                case 0x406f0:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x406fc;
                    pc=0x4c600;
                    run_4c600(); return;
                case 0x406fc:
                    r2 = r0 + r0;
                case 0x40700:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4072c:
                    r2 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r16 = r16 - r2;
                    r16 = r16 >> 2;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x40748;
                    pc=0x4c600;
                    run_4c600(); return;
                case 0x40748:
                    r2 = r19 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x40700;
                    continue;
                case 0x40754:
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x40694;
                    continue;
                case 0x40800:
                    pc=0x40800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40800() throws ExecutionException { /* 0x40800 - 0x40a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40800:
                    r29 = r29 + -32;
                    r6 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x40814;
                    pc=0x40600;
                    run_40600(); return;
                case 0x40814:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40a00:
                    pc=0x40a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40a00() throws ExecutionException { /* 0x40a00 - 0x40c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40a00:
                    /* Next insn is delay slot */ 
                    pc=0x4c000;
                    run_4c000(); return;
                case 0x40c00:
                    pc=0x40c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40c00() throws ExecutionException { /* 0x40c00 - 0x40e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40c00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r6 + r0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40c38;
                        continue;
                    }
                    r5 = 5 << 16;
                    r4 = r6 + r0;
                    r5 = r5 + 25940;
                    /* Next insn is delay slot */ 
                    r31=0x40c30;
                    pc=0x29200;
                    run_29200(); return;
                case 0x40c30:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40c5c;
                        continue;
                    }
                case 0x40c38:
                    r17 = 5 << 16;
                case 0x40c3c:
                    r17 = r17 + 22608;
                case 0x40c40:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40c5c:
                    r17 = 5 << 16;
                    r4 = r16 + r0;
                    r5 = r17 + 22608;
                    /* Next insn is delay slot */ 
                    r31=0x40c70;
                    pc=0x29200;
                    run_29200(); return;
                case 0x40c70:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40c3c;
                        continue;
                    }
                    r5 = 5 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + 17636;
                    /* Next insn is delay slot */ 
                    r31=0x40c8c;
                    pc=0x29200;
                    run_29200(); return;
                case 0x40c8c:
                    r17 = r17 + 22608;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40c40;
                        continue;
                    }
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x40c40;
                    continue;
                case 0x40e00:
                    pc=0x40e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40e00() throws ExecutionException { /* 0x40e00 - 0x41000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40e00:
                    r2 = 5 << 16;
                    r2 = r2 + 31440;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41000:
                    pc=0x41000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41000() throws ExecutionException { /* 0x41000 - 0x41200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41000:
                    r2 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41200:
                    pc=0x41200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41200() throws ExecutionException { /* 0x41200 - 0x41400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41200:
                    r2 = 5 << 16;
                    r2 = r2 + 31408;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41400:
                    pc=0x41400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41400() throws ExecutionException { /* 0x41400 - 0x41600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41400:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41600:
                    pc=0x41600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41600() throws ExecutionException { /* 0x41600 - 0x41800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41600:
                    r2 = 5 << 16;
                    r2 = r2 + 31472;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41800:
                    pc=0x41800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41800() throws ExecutionException { /* 0x41800 - 0x41a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x40c00;
                    run_40c00(); return;
                case 0x41a00:
                    pc=0x41a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41a00() throws ExecutionException { /* 0x41a00 - 0x41c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41a00:
                    r2 = 5 << 16;
                    r2 = r2 + 31472;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41c00:
                    pc=0x41c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41c00() throws ExecutionException { /* 0x41c00 - 0x41e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41c00:
                    r2 = readPages[(r4+76)>>>12][((r4+76)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    r17 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41c70;
                        continue;
                    }
                case 0x41c28:
                    r3 = r17 << 2;
                    r3 = r2 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41c98;
                        continue;
                    }
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                case 0x41c4c:
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                case 0x41c54:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41c70:
                    r5 = r0 + 4;
                    r6 = r0 + 33;
                    /* Next insn is delay slot */ 
                    r31=0x41c80;
                    pc=0x4c200;
                    run_4c200(); return;
                case 0x41c80:
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41c28;
                        continue;
                    }
                case 0x41c8c:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41c54;
                    continue;
                case 0x41c98:
                    r18 = r0 + 1;
                    r18 = r18 << (r17&0x1f);
                    r6 = r18 + 5;
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x41cb8;
                    pc=0x4c200;
                    run_4c200(); return;
                case 0x41cb8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41c8c;
                        continue;
                    }
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r17;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x41c4c;
                    continue;
                case 0x41e00:
                    pc=0x41e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41e00() throws ExecutionException { /* 0x41e00 - 0x42000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41e00:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41e28;
                        continue;
                    }
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r3 = readPages[(r4+76)>>>12][((r4+76)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                case 0x41e28:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42000:
                    pc=0x42000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42000() throws ExecutionException { /* 0x42000 - 0x42200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42000:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r18 = r4 + r0;
                    r17 = r5 + r0;
                    r3 = r5 + 20;
                    r8 = r0 + r0;
                case 0x4202c:
                    r11 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    r9 = r11 & 65535;
                    { long hilo = (long)(r9) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = r11 >>> 16;
                    r3 = r3 + 4;
                    r9 = lo;
                    r9 = r9 + r7;
                    r7 = r9 >>> 16;
                    { long hilo = (long)(r11) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r9 = r9 & 65535;
                    r11 = lo;
                    r10 = r7 + r11;
                    r7 = r10 >>> 16;
                    r10 = r10 << 16;
                    r9 = r10 + r9;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r9;
                    r9 = r8 < r16 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4202c;
                        continue;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x420b0;
                        continue;
                    }
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r2 = r16 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x420d4;
                        continue;
                    }
                case 0x42098:
                    r2 = r16 + 4;
                    r2 = r2 << 2;
                    r2 = r17 + r2;
                    r16 = r16 + 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r7;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r16;
                case 0x420b0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x420d4:
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r5 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x420ec;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x420ec:
                    r6 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r5 = r17 + 12;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4210c;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x4210c:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r3 = readPages[(r18+76)>>>12][((r18+76)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    r17 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42098;
                    continue;
                case 0x42200:
                    pc=0x42200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42200() throws ExecutionException { /* 0x42200 - 0x42400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42200:
                    r29 = r29 + -48;
                    r2 = r0 + 9;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r7 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x42220;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x42220:
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r20 = r5 + r0;
                    r18 = r6 + r0;
                    r19 = r7 + r0;
                    r4 = lo;
                    r2 = r4 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4234c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r5 = r0 + r0;
                case 0x4225c:
                    r2 = r2 << 1;
                    r8 = r2 < r4 ? 1 : 0;
                    r5 = r5 + 1;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4225c;
                        continue;
                    }
                case 0x42270:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4227c;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x4227c:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = r18 < 10 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4233c;
                        continue;
                    }
                    r21 = r20 + 9;
                    r16 = r21 + r0;
                    r20 = r20 + r18;
                case 0x422a8:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r4 = r17 + r0;
                    r5 = r2 + r0;
                    r6 = r0 + 10;
                    r7 = r7 + -48;
                    /* Next insn is delay slot */ 
                    r31=0x422c8;
                    pc=0x42000;
                    run_42000(); return;
                case 0x422c8:
                    if(r16 != r20) {
                        /* Next insn is delay slot */ 
                        pc=0x422a8;
                        continue;
                    }
                    r16 = r21 + r18;
                    r16 = r16 + -8;
                case 0x422d8:
                    r3 = r18 < r19 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42314;
                        continue;
                    }
                    r18 = r19 - r18;
                    r18 = r16 + r18;
                case 0x422ec:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r4 = r17 + r0;
                    r5 = r2 + r0;
                    r6 = r0 + 10;
                    r7 = r7 + -48;
                    /* Next insn is delay slot */ 
                    r31=0x4230c;
                    pc=0x42000;
                    run_42000(); return;
                case 0x4230c:
                    if(r16 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x422ec;
                        continue;
                    }
                case 0x42314:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4233c:
                    r16 = r20 + 10;
                    r18 = r0 + 9;
                    /* Next insn is delay slot */ 
                    pc=0x422d8;
                    continue;
                case 0x4234c:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42270;
                    continue;
                case 0x42400:
                    pc=0x42400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42400() throws ExecutionException { /* 0x42400 - 0x42600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42400:
                    r2 = 65535 << 16;
                    r2 = r4 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42484;
                        continue;
                    }
                    r4 = r4 << 16;
                    r2 = r0 + 16;
                case 0x42418:
                    r3 = 65280 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42430;
                        continue;
                    }
                    r2 = r2 + 8;
                    r4 = r4 << 8;
                case 0x42430:
                    r3 = 61440 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42448;
                        continue;
                    }
                    r2 = r2 + 4;
                    r4 = r4 << 4;
                case 0x42448:
                    r3 = 49152 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42460;
                        continue;
                    }
                    r2 = r2 + 2;
                    r4 = r4 << 2;
                case 0x42460:
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4247c;
                        continue;
                    }
                    r3 = 16384 << 16;
                    r4 = r4 & r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42490;
                        continue;
                    }
                    r2 = r0 + 32;
                case 0x4247c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42484:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42418;
                    continue;
                case 0x42490:
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42600:
                    pc=0x42600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42600() throws ExecutionException { /* 0x42600 - 0x42800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42600:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r3 & 7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42640;
                        continue;
                    }
                    r2 = r3 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x426d0;
                        continue;
                    }
                    r2 = r3 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x426dc;
                        continue;
                    }
                    r3 = r3 >>> 2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42640:
                    r2 = r3 & 65535;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x426b0;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x42650:
                    r5 = r3 & 255;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42664;
                        continue;
                    }
                    r2 = r2 + 8;
                    r3 = r3 >>> 8;
                case 0x42664:
                    r5 = r3 & 15;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42678;
                        continue;
                    }
                    r2 = r2 + 4;
                    r3 = r3 >>> 4;
                case 0x42678:
                    r5 = r3 & 3;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4268c;
                        continue;
                    }
                    r2 = r2 + 2;
                    r3 = r3 >>> 2;
                case 0x4268c:
                    r5 = r3 & 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x426c4;
                        continue;
                    }
                    r3 = r3 >>> 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x426c0;
                        continue;
                    }
                    r2 = r0 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x426b0:
                    r3 = r3 >>> 16;
                    r2 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x42650;
                    continue;
                case 0x426c0:
                    r2 = r2 + 1;
                case 0x426c4:
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x426d0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x426dc:
                    r3 = r3 >>> 1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42800:
                    pc=0x42800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42800() throws ExecutionException { /* 0x42800 - 0x42a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4281c;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x4281c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r16;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r4;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42a00:
                    pc=0x42a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42a00() throws ExecutionException { /* 0x42a00 - 0x42c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42a00:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r19 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r2 = r18 < r19 ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r5 + r0;
                    r20 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a4c;
                        continue;
                    }
                    r2 = r18 + r0;
                    r17 = r6 + r0;
                    r18 = r19 + r0;
                    r20 = r5 + r0;
                    r19 = r2 + r0;
                case 0x42a4c:
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r16 = r18 + r19;
                    r2 = r2 < r16 ? 1 : 0;
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a68;
                        continue;
                    }
                    r5 = r5 + 1;
                case 0x42a68:
                    /* Next insn is delay slot */ 
                    r31=0x42a70;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x42a70:
                    r13 = r2 + 20;
                    r14 = r16 << 2;
                    r14 = r13 + r14;
                    r4 = ((r13 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    r3 = r13 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42aa0;
                        continue;
                    }
                case 0x42a8c:
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r3 = r3 + 4;
                    r4 = ((r3 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a8c;
                        continue;
                    }
                case 0x42aa0:
                    r12 = r20 + 20;
                    r15 = r19 << 2;
                    r15 = r12 + r15;
                    r24 = r17 + 20;
                    r11 = r18 << 2;
                    r3 = ((r12 & 0xffffffffL) < (r15 & 0xffffffffL)) ? 1 : 0;
                    r11 = r24 + r11;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42c04;
                        run_42c00(); return;
                    }
                case 0x42ac4:
                    r9 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    r8 = r9 & 65535;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42b60;
                        continue;
                    }
                    r4 = r13 + r0;
                    r3 = r24 + r0;
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42af0;
                    continue;
                case 0x42aec:
                    r4 = r7 + r0;
                case 0x42af0:
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r6 & 65535;
                    { long hilo = (long)(r5) * ((long)r8); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = r6 >>> 16;
                    r10 = r7 & 65535;
                    r7 = r7 >>> 16;
                    r3 = r3 + 4;
                    r5 = lo;
                    r5 = r5 + r10;
                    r5 = r5 + r9;
                    { long hilo = (long)(r6) * ((long)r8); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r9 = r5 >>> 16;
                    r5 = r5 & 65535;
                    r6 = lo;
                    r6 = r6 + r7;
                    r6 = r6 + r9;
                    r9 = r6 >>> 16;
                    r6 = r6 << 16;
                    r5 = r6 | r5;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    r5 = ((r3 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    r7 = r4 + 4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42aec;
                        continue;
                    }
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r9;
                    r9 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                case 0x42b60:
                    r9 = r9 >>> 16;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42bf0;
                        continue;
                    }
                    r4 = readPages[(r13+0)>>>12][((r13+0)>>>2)&0x3ff];
                    r5 = r13 + r0;
                    r7 = r4 + r0;
                    r3 = r24 + r0;
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42b8c;
                    continue;
                case 0x42b88:
                    r5 = r8 + r0;
                case 0x42b8c:
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r6 = tmp;
                    r7 = r7 >>> 16;
                    { long hilo = (long)(r6) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = r4 & 65535;
                    r3 = r3 + 4;
                    r8 = r5 + 4;
                    r6 = lo;
                    r6 = r6 + r7;
                    r6 = r6 + r10;
                    r7 = r6 << 16;
                    r4 = r7 | r4;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r4;
                    addr=r3+-4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r7 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    { long hilo = (long)(r4) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = r7 & 65535;
                    r6 = r6 >>> 16;
                    r4 = lo;
                    r4 = r4 + r10;
                    r4 = r4 + r6;
                    r6 = ((r3 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    r10 = r4 >>> 16;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42b88;
                        continue;
                    }
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r4;
                case 0x42bf0:
                    r12 = r12 + 4;
                    r3 = ((r12 & 0xffffffffL) < (r15 & 0xffffffffL)) ? 1 : 0;
                    r13 = r13 + 4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42ac4;
                        continue;
                    }
                case 0x42c00:
                    pc=0x42c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42c00() throws ExecutionException { /* 0x42c00 - 0x42e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42c00:
                case 0x42c04:
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42c44;
                        continue;
                    }
                    r4 = readPages[(r14+-4)>>>12][((r14+-4)>>>2)&0x3ff];
                    r3 = r14 + -4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42c38;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x42c44;
                    continue;
                case 0x42c24:
                    r3 = r3 + -4;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42c44;
                        continue;
                    }
                case 0x42c38:
                    r16 = r16 + -1;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42c24;
                        continue;
                    }
                case 0x42c44:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42e00:
                    pc=0x42e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42e00() throws ExecutionException { /* 0x42e00 - 0x43000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42e00:
                    r29 = r29 + -40;
                    r2 = r6 & 3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42f24;
                        continue;
                    }
                case 0x42e30:
                    r16 = r16 >> 2;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42ecc;
                        continue;
                    }
                    r17 = readPages[(r19+72)>>>12][((r19+72)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42f54;
                        continue;
                    }
                case 0x42e4c:
                    r3 = r16 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42e84;
                        continue;
                    }
                case 0x42e58:
                    r16 = r16 >> 1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42ecc;
                        continue;
                    }
                case 0x42e64:
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42ef0;
                        continue;
                    }
                    r17 = r2 + r0;
                case 0x42e78:
                    r3 = r16 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42e58;
                        continue;
                    }
                case 0x42e84:
                    r4 = r19 + r0;
                    r5 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x42e98;
                    pc=0x42a00;
                    run_42a00(); return;
                case 0x42e98:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42f18;
                        continue;
                    }
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = readPages[(r19+76)>>>12][((r19+76)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    r3 = r4 + r3;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r16 = r16 >> 1;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r18 = r2 + r0;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42e64;
                        continue;
                    }
                case 0x42ecc:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42ef0:
                    r5 = r17 + r0;
                    r6 = r17 + r0;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x42f04;
                    pc=0x42a00;
                    run_42a00(); return;
                case 0x42f04:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42e78;
                    continue;
                case 0x42f18:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42e58;
                    continue;
                case 0x42f24:
                    r2 = r2 + -1;
                    r3 = 5 << 16;
                    r3 = r3 + 25948;
                    r2 = r2 << 2;
                    r2 = r2 + r3;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x42f48;
                    pc=0x42000;
                    run_42000(); return;
                case 0x42f48:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42e30;
                    continue;
                case 0x42f54:
                    r4 = r19 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x42f64;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x42f64:
                    r17 = r2 + r0;
                    r2 = r0 + 625;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r2;
                    writePages[(r19+72)>>>12][((r19+72)>>>2)&0x3ff] = r17;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x42e4c;
                    continue;
                case 0x43000:
                    pc=0x43000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43000() throws ExecutionException { /* 0x43000 - 0x43200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43000:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = r5 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    r20 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r6 >> 5;
                    r20 = r17 + r20;
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r20 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = r4 + r0;
                    r4 = r2 < r16 ? 1 : 0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r21 = r6 + r0;
                    r5 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43064;
                        continue;
                    }
                case 0x43050:
                    r2 = r2 << 1;
                    r7 = r2 < r16 ? 1 : 0;
                    r5 = r5 + 1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43050;
                        continue;
                    }
                case 0x43064:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43070;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x43070:
                    r7 = r2 + 20;
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x430a0;
                        continue;
                    }
                    r8 = r7 + r0;
                    r3 = r0 + r0;
                case 0x43084:
                    r8 = r8 + 4;
                    r3 = r3 + 1;
                    writePages[(r8+-4)>>>12][((r8+-4)>>>2)&0x3ff] = r0;
                    if(r3 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x43084;
                        continue;
                    }
                    r3 = r3 << 2;
                    r7 = r7 + r3;
                case 0x430a0:
                    r10 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r3 = r18 + 20;
                    r10 = r10 << 2;
                    r6 = r21 & 31;
                    r10 = r3 + r10;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4315c;
                        continue;
                    }
                    r4 = r0 + 32;
                    r4 = r4 - r6;
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x430d4;
                    continue;
                case 0x430d0:
                    r7 = r8 + r0;
                case 0x430d4:
                    r11 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    r11 = r11 << (r6&0x1f);
                    r9 = r9 | r11;
                    writePages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff] = r9;
                    r9 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r11 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    r8 = r7 + 4;
                    r9 = r9 >>> (r4&0x1f);
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x430d0;
                        continue;
                    }
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r9;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43110;
                        continue;
                    }
                    r16 = r20 + 2;
                case 0x43110:
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = readPages[(r19+76)>>>12][((r19+76)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    r3 = r4 + r3;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = r16 + -1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r4;
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4315c:
                    r3 = r3 + 4;
                    r6 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r6;
                    r6 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43110;
                        continue;
                    }
                    r3 = r3 + 4;
                    r6 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r6;
                    r6 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4315c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x43110;
                    continue;
                case 0x43200:
                    pc=0x43200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43200() throws ExecutionException { /* 0x43200 - 0x43400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43200:
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r3 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r2 = r2 - r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43278;
                        continue;
                    }
                    r3 = r3 << 2;
                    r4 = r4 + 20;
                    r5 = r5 + 20;
                    r2 = r4 + r3;
                    r5 = r5 + r3;
                    /* Next insn is delay slot */ 
                    pc=0x43240;
                    continue;
                case 0x43234:
                    r3 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43274;
                        continue;
                    }
                case 0x43240:
                    r2 = r2 + -4;
                    r5 = r5 + -4;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x43234;
                        continue;
                    }
                    r3 = ((r3 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43280;
                        continue;
                    }
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43274:
                    r2 = r0 + r0;
                case 0x43278:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43280:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43400:
                    pc=0x43400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43400() throws ExecutionException { /* 0x43400 - 0x43600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43400:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r16 = r5 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r17 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43434;
                    pc=0x43200;
                    run_43200(); return;
                case 0x43434:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x435a4;
                        continue;
                    }
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4358c;
                        continue;
                    }
                    r19 = r0 + r0;
                case 0x43448:
                    r5 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43458;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x43458:
                    r10 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r13 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r16 + 20;
                    r12 = r10 << 2;
                    r7 = r17 + 20;
                    r13 = r13 << 2;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r19;
                    r12 = r4 + r12;
                    r13 = r7 + r13;
                    r3 = r2 + 20;
                    r5 = r0 + r0;
                case 0x43484:
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r9 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r6 = r8 & 65535;
                    r5 = r6 + r5;
                    r11 = r9 & 65535;
                    r6 = r5 - r11;
                    r8 = r8 >>> 16;
                    r9 = r9 >>> 16;
                    r5 = r6 >> 16;
                    r8 = r8 - r9;
                    r8 = r8 + r5;
                    r7 = r7 + 4;
                    r5 = r8 >> 16;
                    r6 = r6 & 65535;
                    r8 = r8 << 16;
                    r6 = r8 | r6;
                    r3 = r3 + 4;
                    r8 = ((r7 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    r4 = r4 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43484;
                        continue;
                    }
                    r7 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    r9 = r3 + r0;
                    r11 = r4 + r0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43548;
                        continue;
                    }
                case 0x434f0:
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    r6 = r8 & 65535;
                    r6 = r6 + r5;
                    r7 = r6 >> 16;
                    r8 = r8 >>> 16;
                    r7 = r7 + r8;
                    r5 = r7 >> 16;
                    r6 = r6 & 65535;
                    r7 = r7 << 16;
                    r6 = r7 | r6;
                    r3 = r3 + 4;
                    r7 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x434f0;
                        continue;
                    }
                    r3 = ~(r0 | r11);
                    r3 = r3 + r12;
                    r3 = r3 >>> 2;
                    r3 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r9 + r3;
                case 0x43548:
                    r3 = r3 + -4;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43568;
                        continue;
                    }
                case 0x43554:
                    r3 = r3 + -4;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r10 = r10 + -1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43554;
                        continue;
                    }
                case 0x43568:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r10;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4358c:
                    r2 = r16 + r0;
                    r19 = r0 + 1;
                    r16 = r17 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43448;
                    continue;
                case 0x435a4:
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x435b4;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x435b4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43600:
                    pc=0x43600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43600() throws ExecutionException { /* 0x43600 - 0x43800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43600:
                    r2 = f13;
                    r4 = 32752 << 16;
                    r2 = r2 & r4;
                    r3 = 64704 << 16;
                    r4 = r2 + r3;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43634;
                        continue;
                    }
                    r3 = r0 + r0;
                    f0 = r3;
                    r2 = r4 + r0;
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43634:
                    r4 = r0 - r4;
                    r4 = r4 >> 20;
                    r2 = r4 < 20 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43690;
                        continue;
                    }
                    r5 = r4 < 51 ? 1 : 0;
                    r2 = r0 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43680;
                        continue;
                    }
                    r5 = r0 + 51;
                    r4 = r5 - r4;
                    r5 = r0 + 1;
                    r4 = r5 << (r4&0x1f);
                    r3 = r4 + r0;
                case 0x4366c:
                    f0 = r3;
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43680:
                    r4 = r0 + 1;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4366c;
                    continue;
                case 0x43690:
                    r3 = r0 + r0;
                    r5 = 8 << 16;
                    f0 = r3;
                    r2 = r5 >> (r4&0x1f);
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43800:
                    pc=0x43800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43800() throws ExecutionException { /* 0x43800 - 0x43a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43800:
                    r29 = r29 + -40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r16 = r16 << 2;
                    r18 = r4 + 20;
                    r16 = r18 + r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r4 = r17 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r20 = r5 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x43840;
                    pc=0x42400;
                    run_42400(); return;
                case 0x43840:
                    r3 = r0 + 32;
                    r3 = r3 - r2;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r3;
                    r3 = r2 < 11 ? 1 : 0;
                    r19 = r16 + -4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x438c0;
                        continue;
                    }
                    r3 = r0 + 11;
                    r3 = r3 - r2;
                    r5 = r17 >>> (r3&0x1f);
                    r4 = 16368 << 16;
                    r18 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    r6 = r5 | r4;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43944;
                        continue;
                    }
                    r4 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r3 = r4 >>> (r3&0x1f);
                case 0x43888:
                    r2 = r2 + 21;
                    r17 = r17 << (r2&0x1f);
                    r7 = r3 | r17;
                case 0x43894:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f0 = r7;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    f1 = r6;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x438c0:
                    r3 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4391c;
                        continue;
                    }
                    r3 = r2 + -11;
                    r4 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43930;
                        continue;
                    }
                case 0x438dc:
                    r5 = r0 + 43;
                    r2 = r5 - r2;
                    r17 = r17 << (r3&0x1f);
                    r5 = 16368 << 16;
                    r17 = r17 | r5;
                    r18 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    r5 = r4 >>> (r2&0x1f);
                    r6 = r17 | r5;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43950;
                        continue;
                    }
                    r5 = readPages[(r19+-4)>>>12][((r19+-4)>>>2)&0x3ff];
                    r3 = r4 << (r3&0x1f);
                    r2 = r5 >>> (r2&0x1f);
                    r7 = r2 | r3;
                    /* Next insn is delay slot */ 
                    pc=0x43894;
                    continue;
                case 0x4391c:
                    r3 = r2 + -11;
                    r19 = r16 + -8;
                    r4 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x438dc;
                        continue;
                    }
                case 0x43930:
                    r2 = 16368 << 16;
                    r6 = r17 | r2;
                    r7 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43894;
                    continue;
                case 0x43944:
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43888;
                    continue;
                case 0x43950:
                    r2 = r0 + r0;
                    r3 = r4 << (r3&0x1f);
                    r7 = r2 | r3;
                    /* Next insn is delay slot */ 
                    pc=0x43894;
                    continue;
                case 0x43a00:
                    pc=0x43a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43a00() throws ExecutionException { /* 0x43a00 - 0x43c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43a00:
                    r29 = r29 + -48;
                    r5 = r0 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r16 = r6 + r0;
                    r17 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43a2c;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x43a2c:
                    r18 = r2 + r0;
                    r19 = r16 << 1;
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r19 = r19 >>> 21;
                    r2 = r2 & r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43a54;
                        continue;
                    }
                    r3 = 16 << 16;
                    r2 = r2 | r3;
                case 0x43a54:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43af4;
                        continue;
                    }
                    r4 = r29 + 20;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x43a70;
                    pc=0x42600;
                    run_42600(); return;
                case 0x43a70:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43b64;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                case 0x43a84:
                    writePages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff] = r16;
                    r3 = r0 + 2;
                    r16 = (r16&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r16 = r3 - r16;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r16;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43b20;
                        continue;
                    }
                case 0x43aa0:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r2 + -1074;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r16 << 2;
                    r2 = r18 + r2;
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r16 = r16 << 5;
                    /* Next insn is delay slot */ 
                    r31=0x43ac4;
                    pc=0x42400;
                    run_42400(); return;
                case 0x43ac4:
                    r3 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 - r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43af4:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x43b00;
                    pc=0x42600;
                    run_42600(); return;
                case 0x43b00:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r2 + 32;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r3;
                    r16 = r0 + 1;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43aa0;
                        continue;
                    }
                case 0x43b20:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + -1075;
                    r19 = r19 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r19;
                    r3 = r0 + 53;
                    r2 = r3 - r2;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43b64:
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r0 - r2;
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r16 << (r3&0x1f);
                    r3 = r3 | r4;
                    r16 = r16 >>> (r2&0x1f);
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x43a84;
                    continue;
                case 0x43c00:
                    pc=0x43c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43c00() throws ExecutionException { /* 0x43c00 - 0x43e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43c00:
                    r29 = r29 + -56;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r18 = r5 + r0;
                    r5 = r29 + 20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f20;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f21;
                    /* Next insn is delay slot */ 
                    r31=0x43c34;
                    pc=0x43800;
                    run_43800(); return;
                case 0x43c34:
                    r4 = r18 + r0;
                    r5 = r29 + 16;
                    f20 = f0;
                    f21 = f1;
                    r17 = f0;
                    r16 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x43c50;
                    pc=0x43800;
                    run_43800(); return;
                case 0x43c50:
                    r5 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r4 = r5 - r4;
                    r5 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r3 = f0;
                    r5 = r6 - r5;
                    r5 = r5 << 5;
                    r4 = r4 + r5;
                    r2 = f1;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43cc0;
                        continue;
                    }
                    r4 = r4 << 20;
                    f20 = r17;
                    r16 = r4 + r16;
                    f21 = r16;
                case 0x43c94:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    f20 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    f21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43cc0:
                    r4 = r4 << 20;
                    f0 = r3;
                    r2 = r2 - r4;
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=0x43c94;
                    continue;
                case 0x43e00:
                    pc=0x43e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43e00() throws ExecutionException { /* 0x43e00 - 0x44000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43e00:
                    r2 = r4 < 24 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43e34;
                        continue;
                    }
                    f0 = readPages[(r28+-32604)>>>12][((r28+-32604)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32608)>>>12][((r28+-32608)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32600)>>>12][((r28+-32600)>>>2)&0x3ff];
                case 0x43e1c:
                    r4 = r4 + -1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43e1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43e34:
                    r2 = 5 << 16;
                    r2 = r2 + 26040;
                    r4 = r4 << 3;
                    r4 = r4 + r2;
                    f0 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44000:
                    pc=0x44000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44000() throws ExecutionException { /* 0x44000 - 0x44200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44000:
                    r7 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r5 = r5 + -1;
                    r2 = r6 + 20;
                    r8 = r5 >> 5;
                    r7 = r7 << 2;
                    r8 = r8 + 1;
                    r7 = r2 + r7;
                    r8 = r8 << 2;
                    r3 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r8 = r4 + r8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4407c;
                        continue;
                    }
                    r3 = r4 + r0;
                case 0x44034:
                    r2 = r2 + 4;
                    r5 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r5;
                    r5 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44034;
                        continue;
                    }
                    r2 = r7 - r6;
                    r2 = r2 + -21;
                    r2 = r2 >>> 2;
                    r2 = r2 + 1;
                    r2 = r2 << 2;
                    r4 = r4 + r2;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44088;
                        continue;
                    }
                case 0x44074:
                    r4 = r4 + 4;
                    writePages[(r4+-4)>>>12][((r4+-4)>>>2)&0x3ff] = r0;
                case 0x4407c:
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44074;
                        continue;
                    }
                case 0x44088:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44200:
                    pc=0x44200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44200() throws ExecutionException { /* 0x44200 - 0x44400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44200:
                    r3 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r5 >> 5;
                    r6 = r4 + 20;
                    r4 = r3 < r2 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44274;
                        continue;
                    }
                    r3 = r3 << 2;
                    r3 = r6 + r3;
                case 0x44220:
                    r2 = ((r6 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44268;
                        continue;
                    }
                    r2 = r3 + -4;
                    r3 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4425c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x442ac;
                    continue;
                case 0x44248:
                    r2 = r2 + -4;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x442ac;
                        continue;
                    }
                case 0x4425c:
                    r3 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44248;
                        continue;
                    }
                case 0x44268:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44274:
                    r3 = r2 < r3 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x442b8;
                        continue;
                    }
                    r2 = r2 << 2;
                    r5 = r5 & 31;
                    r3 = r6 + r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44220;
                        continue;
                    }
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r2 >>> (r5&0x1f);
                    r5 = r4 << (r5&0x1f);
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x44220;
                        continue;
                    }
                case 0x442ac:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x442b8:
                    r2 = r2 << 2;
                    r3 = r6 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x44220;
                    continue;
                case 0x44400:
                    pc=0x44400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44400() throws ExecutionException { /* 0x44400 - 0x44600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44400:
                    r4 = f13;
                    r3 = 32767 << 16;
                    r3 = r3 | 65535;
                    r3 = r3 & r4;
                    r5 = f12;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44440;
                        continue;
                    }
                    r2 = 65520 << 16;
                    r2 = r3 + r2;
                    r6 = 32736 << 16;
                    r2 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44454;
                        continue;
                    }
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44440:
                    r2 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r3 = r0 + 3;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44454:
                    r2 = 16 << 16;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44470;
                        continue;
                    }
                    r2 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44470:
                    r2 = 32752 << 16;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x44488;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44488:
                    r2 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44600:
                    pc=0x44600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44600() throws ExecutionException { /* 0x44600 - 0x44800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44600:
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44634;
                        continue;
                    }
                case 0x4461c:
                    r2 = r0 + r0;
                case 0x44620:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44634:
                    r5 = r0 + 128;
                    /* Next insn is delay slot */ 
                    r31=0x44640;
                    pc=0x25200;
                    run_25200(); return;
                case 0x44640:
                    writePages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44680;
                        continue;
                    }
                    r3 = r0 + r0;
                    r4 = r0 + 128;
                    /* Next insn is delay slot */ 
                    pc=0x44664;
                    continue;
                case 0x4465c:
                    r2 = readPages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff];
                case 0x44664:
                    r2 = r2 + r3;
                    r3 = r3 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4465c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4461c;
                    continue;
                case 0x44680:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x44620;
                    continue;
                case 0x44800:
                    pc=0x44800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44800() throws ExecutionException { /* 0x44800 - 0x44a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44800:
                    r29 = r29 + -32;
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44850;
                        continue;
                    }
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44870;
                        continue;
                    }
                case 0x4482c:
                    r5 = r5 << 2;
                    r5 = r2 + r5;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r6;
                case 0x4483c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44850:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44870:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x44880;
                    pc=0x44600;
                    run_44600(); return;
                case 0x44880:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4489c;
                        continue;
                    }
                    r2 = readPages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4482c;
                    continue;
                case 0x4489c:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4483c;
                    continue;
                case 0x44a00:
                    pc=0x44a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44a00() throws ExecutionException { /* 0x44a00 - 0x44c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44a00:
                    r29 = r29 + -32;
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44af0;
                        continue;
                    }
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44ac0;
                        continue;
                    }
                    r3 = r5 << 2;
                    r3 = r2 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44ac0;
                        continue;
                    }
                    r4 = r0 + 1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x44ab4;
                        continue;
                    }
                    r4 = r0 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x44a90;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x44a74;
                    return;
                case 0x44a74:
                    r2 = r0 + r0;
                case 0x44a78:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44a90:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44ab4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x44a78;
                    continue;
                case 0x44ac0:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x44acc;
                    pc=0x2f220;
                    run_2f200(); return;
                case 0x44acc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = r2 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2f1e0;
                    run_2f000(); return;
                case 0x44af0:
                    r2 = r0 + 22;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x44a78;
                    continue;
                case 0x44c00:
                    pc=0x44c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44c00() throws ExecutionException { /* 0x44c00 - 0x44e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44c00:
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44ce0;
                        continue;
                    }
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44cbc;
                        continue;
                    }
                case 0x44c28:
                    r3 = r5 << 2;
                    r3 = r2 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44cb0;
                        continue;
                    }
                    r4 = r0 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x44c98;
                        continue;
                    }
                    r4 = r0 + 1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x44c80;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x44c68;
                    return;
                case 0x44c68:
                    r2 = r0 + r0;
                case 0x44c6c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44c80:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44c98:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44cb0:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x44c6c;
                    continue;
                case 0x44cbc:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x44cc8;
                    pc=0x44600;
                    run_44600(); return;
                case 0x44cc8:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44cec;
                        continue;
                    }
                    r2 = readPages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x44c28;
                    continue;
                case 0x44ce0:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44cec:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x44c6c;
                    continue;
                case 0x44e00:
                    pc=0x44e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44e00() throws ExecutionException { /* 0x44e00 - 0x45000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44e00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x44a00;
                    run_44a00(); return;
                case 0x45000:
                    pc=0x45000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45000() throws ExecutionException { /* 0x45000 - 0x45200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x44800;
                    run_44800(); return;
                case 0x45200:
                    pc=0x45200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45200() throws ExecutionException { /* 0x45200 - 0x45400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45200:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x44600;
                    run_44600(); return;
                case 0x45400:
                    pc=0x45400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45400() throws ExecutionException { /* 0x45400 - 0x45600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45400:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x44c00;
                    run_44c00(); return;
                case 0x45600:
                    pc=0x45600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45600() throws ExecutionException { /* 0x45600 - 0x45800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45600:
                    r29 = r29 + -144;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r17;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r16;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r6 + r0;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x456f4;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x456a4;
                        continue;
                    }
                    r2 = r0 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 160;
                    r6 = r7 + r0;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    r7 = r2 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4566c;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x4566c:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x456e4;
                        continue;
                    }
                case 0x45678:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4568c;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4568c:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r17 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r16 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x456a4:
                    r2 = r6 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 160;
                    r6 = r7 + r0;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    r7 = r2 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x456d8;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x456d8:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45678;
                        continue;
                    }
                case 0x456e4:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x45678;
                    continue;
                case 0x456f4:
                    r2 = r0 + 139;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4568c;
                    continue;
                case 0x45800:
                    pc=0x45800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45800() throws ExecutionException { /* 0x45800 - 0x45a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45800:
                    r29 = r29 + -144;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r17;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r16;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r7;
                    r17 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x458e8;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x458a0;
                        continue;
                    }
                    r2 = r0 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x45868;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x45868:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x458d8;
                        continue;
                    }
                case 0x45874:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45888;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x45888:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r17 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r16 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x458a0:
                    r2 = r5 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x458cc;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x458cc:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45874;
                        continue;
                    }
                case 0x458d8:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x45874;
                    continue;
                case 0x458e8:
                    r2 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x45888;
                    continue;
                case 0x45a00:
                    pc=0x45a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45a00() throws ExecutionException { /* 0x45a00 - 0x45c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45a00:
                    r29 = r29 + -136;
                    r3 = r0 + 516;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r6;
                    r16 = r5 + r0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r7;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    r31=0x45a30;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x45a30:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = 3 << 16;
                    r2 = r2 + -30720;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r7 = r29 + 144;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    r6 = r16 + r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r0;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x45a70;
                    pc=0x48000;
                    run_48000(); return;
                case 0x45a70:
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r16 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45c00:
                    pc=0x45c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45c00() throws ExecutionException { /* 0x45c00 - 0x45e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45c00:
                    r29 = r29 + -144;
                    r2 = r0 + 516;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r6;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x45c34;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x45c34:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = 3 << 16;
                    r2 = r2 + -30720;
                    r6 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r16 + r0;
                    r5 = r29 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r0;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x45c74;
                    pc=0x48000;
                    run_48000(); return;
                case 0x45c74:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r16 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45e00:
                    pc=0x45e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45e00() throws ExecutionException { /* 0x45e00 - 0x46000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45e00:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e98;
                        continue;
                    }
                    r2 = r4 | r5;
                    r2 = r2 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45ea4;
                        continue;
                    }
                case 0x45e18:
                    r6 = r6 + -1;
                case 0x45e1c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x45f58;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e98;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e98;
                        continue;
                    }
                    r2 = r4 + 1;
                    r5 = r5 + 1;
                    r4 = r4 + r6;
                    /* Next insn is delay slot */ 
                    pc=0x45e6c;
                    continue;
                case 0x45e54:
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x45e98;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e98;
                        continue;
                    }
                    r2 = r2 + 1;
                    r5 = r5 + 1;
                case 0x45e6c:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x45e54;
                        continue;
                    }
                case 0x45e80:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45e98:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45ea4:
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e18;
                        continue;
                    }
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x45e18;
                        continue;
                    }
                    r2 = r6 + -4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e98;
                        continue;
                    }
                    r8 = 65278 << 16;
                    r8 = r8 | 65279;
                    r6 = r3 + r8;
                    r7 = 32896 << 16;
                    r3 = ~(r0 | r3);
                    r3 = r6 & r3;
                    r7 = r7 | 32896;
                    r3 = r3 & r7;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45f38;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x45e98;
                    continue;
                case 0x45f00:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x45f64;
                        continue;
                    }
                    r2 = r2 + -4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e98;
                        continue;
                    }
                    r6 = r3 + r8;
                    r3 = ~(r0 | r3);
                    r3 = r6 & r3;
                    r3 = r3 & r7;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e98;
                        continue;
                    }
                case 0x45f38:
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 4;
                    r5 = r5 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45f00;
                        continue;
                    }
                    r6 = r2 + -1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e1c;
                        continue;
                    }
                case 0x45f58:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45e80;
                    continue;
                case 0x45f64:
                    r6 = r2 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x45e1c;
                    continue;
                case 0x46000:
                    pc=0x46000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46000() throws ExecutionException { /* 0x46000 - 0x46200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46000:
                    r2 = r4 + r0;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46034;
                    continue;
                case 0x46010:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x461cc;
                        continue;
                    }
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r6 + -1;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x461d4;
                        continue;
                    }
                case 0x46034:
                    r7 = r5 & 3;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46010;
                        continue;
                    }
                    r4 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r12 = r6 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x461f8;
                        continue;
                    }
                    r6 = r6 & 3;
                    r12 = r12 - r6;
                    /* Next insn is delay slot */ 
                    pc=0x46094;
                    continue;
                case 0x46060:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r9&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x460c0;
                        continue;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x460c8;
                        continue;
                    }
                    addr=r3+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r11&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x460d0;
                        continue;
                    }
                    r3 = r3 + 4;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x461f8;
                        continue;
                    }
                    r12 = r7 + r0;
                case 0x46094:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    addr=r5+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r11 = tmp;
                    r7 = r12 + -4;
                    r5 = r5 + 4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46060;
                        continue;
                    }
                    r7 = r12 + -3;
                    r3 = r3 + -1;
                case 0x460c0:
                    r7 = r7 + 1;
                    r3 = r3 + -1;
                case 0x460c8:
                    r7 = r7 + 1;
                    r3 = r3 + -1;
                case 0x460d0:
                    r6 = r7 + r6;
                    r3 = r3 + 4;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x461c4;
                        continue;
                    }
                    r4 = r3 & 3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46100;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4611c;
                    continue;
                case 0x460f4:
                    r5 = r3 & 3;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4611c;
                        continue;
                    }
                case 0x46100:
                    r3 = r3 + 1;
                    r6 = r6 + -1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x460f4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4611c:
                    r4 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46268;
                        run_46200(); return;
                    }
                    r5 = r3 + r0;
                    r7 = r6 + r0;
                case 0x46130:
                    r7 = r7 + -16;
                    r5 = r5 + 16;
                    r8 = (r7&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    writePages[(r5+-16)>>>12][((r5+-16)>>>2)&0x3ff] = r0;
                    writePages[(r5+-12)>>>12][((r5+-12)>>>2)&0x3ff] = r0;
                    writePages[(r5+-8)>>>12][((r5+-8)>>>2)&0x3ff] = r0;
                    writePages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff] = r0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46130;
                        continue;
                    }
                    r5 = r6 + -16;
                    r5 = r5 >>> 4;
                    r5 = r5 + 1;
                    r5 = r5 << 4;
                    r4 = r6 & 15;
                    r3 = r3 + r5;
                case 0x4616c:
                    r5 = (r4&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46188;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r0;
                    r4 = r4 + -8;
                    r3 = r3 + 8;
                case 0x46188:
                    r5 = (r4&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x461a0;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r4 = r4 + -4;
                    r3 = r3 + 4;
                case 0x461a0:
                    r5 = (r4&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x461b8;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r4 + -2;
                    r3 = r3 + 2;
                case 0x461b8:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x461c4;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x461c4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x461cc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x461d4:
                    r6 = r3 + r6;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x461c4;
                        continue;
                    }
                case 0x461e0:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x461e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x461f8:
                    r6 = r3 + r6;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x461c4;
                        continue;
                    }
                case 0x46200:
                    pc=0x46200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46200() throws ExecutionException { /* 0x46200 - 0x46400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46200:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r8 = r5 + 1;
                    r7 = r3 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r8 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46240;
                        continue;
                    }
                case 0x46220:
                    if(r7 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x46260;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r7 = r7 + 1;
                    addr=r7+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46220;
                        continue;
                    }
                case 0x46240:
                    if(r6 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x461c4;
                        run_46000(); return;
                    }
                case 0x46248:
                    r7 = r7 + 1;
                    addr=r7+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r7 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x46248;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x46260:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x46268:
                    r4 = r6 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4616c;
                    run_46000(); return;
                case 0x46400:
                    pc=0x46400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46400() throws ExecutionException { /* 0x46400 - 0x46600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46400:
                    r12 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46414;
                    continue;
                case 0x46410:
                    r2 = r3 + r0;
                case 0x46414:
                    r3 = r2 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r9 = r12 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 8;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46410;
                        continue;
                    }
                    r9 = r0 + 45;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x465cc;
                        continue;
                    }
                    r9 = r0 + 43;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x465e0;
                        continue;
                    }
                    r25 = r0 + r0;
                case 0x46454:
                    r2 = r0 + -17;
                    r2 = r7 & r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4657c;
                        continue;
                    }
                    r24 = r0 + -1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r24 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r24 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x46474;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r24 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r24 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x46474:
                    r15 = r7 + r0;
                    r24 = hi;
                    r13 = lo;
                case 0x46480:
                    r10 = r0 + r0;
                    r2 = r0 + r0;
                    r14 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x464dc;
                    continue;
                case 0x46494:
                    r8 = r8 + -48;
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4651c;
                        continue;
                    }
                case 0x464a4:
                    if(r10 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46558;
                        continue;
                    }
                    r9 = ((r13 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46558;
                        continue;
                    }
                    if(r2 == r13) {
                        /* Next insn is delay slot */ 
                        pc=0x4654c;
                        continue;
                    }
                case 0x464c0:
                    { long hilo = (long)(r2) * ((long)r15); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = r0 + 1;
                    r2 = lo;
                    r2 = r8 + r2;
                case 0x464d0:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                case 0x464dc:
                    r9 = r12 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r11 = r9 & 4;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46494;
                        continue;
                    }
                    r9 = r9 & 3;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4651c;
                        continue;
                    }
                    if(r9 == r14) {
                        /* Next insn is delay slot */ 
                        pc=0x46564;
                        continue;
                    }
                    r9 = r0 + 87;
                    r8 = r8 - r9;
                case 0x46510:
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x464a4;
                        continue;
                    }
                case 0x4651c:
                    if(r10 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x465b8;
                        continue;
                    }
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x465ac;
                        continue;
                    }
                case 0x4652c:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46574;
                        continue;
                    }
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46540;
                        continue;
                    }
                    r5 = r3 + -1;
                case 0x46540:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4654c:
                    r9 = r24 < r8 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x464c0;
                        continue;
                    }
                case 0x46558:
                    r10 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x464d0;
                    continue;
                case 0x46564:
                    r9 = r0 + 55;
                    r8 = r8 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x46510;
                    continue;
                case 0x46574:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4657c:
                    r2 = r0 + 48;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x465f4;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46650;
                        run_46600(); return;
                    }
                    r13 = 6553 << 16;
                    r24 = r0 + 5;
                    r13 = r13 | 39321;
                    r15 = r0 + 10;
                    r7 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x46480;
                    continue;
                case 0x465ac:
                    r2 = r0 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x4652c;
                    continue;
                case 0x465b8:
                    r2 = r0 + 34;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4652c;
                    continue;
                case 0x465cc:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x46454;
                    continue;
                case 0x465e0:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46454;
                    continue;
                case 0x465f4:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r2 = r0 + 88;
                    r9 = r9 & 223;
                case 0x46600:
                    pc=0x46600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46600() throws ExecutionException { /* 0x46600 - 0x46800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46600:
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4662c;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46650;
                        continue;
                    }
                    r13 = 8191 << 16;
                    r24 = r0 + 7;
                    r13 = r13 | 65535;
                    r15 = r0 + 8;
                    r7 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x46480;
                    run_46400(); return;
                case 0x4662c:
                    r13 = 4095 << 16;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r24 = r0 + 15;
                    r3 = r3 + 2;
                    r13 = r13 | 65535;
                    r15 = r0 + 16;
                    r7 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x46480;
                    run_46400(); return;
                case 0x46650:
                    r13 = r0 + -1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x46660;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x46660:
                    r15 = r7 + r0;
                    r24 = hi;
                    r13 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x46480;
                    run_46400(); return;
                case 0x46800:
                    pc=0x46800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46800() throws ExecutionException { /* 0x46800 - 0x46a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46800:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46400;
                    run_46400(); return;
                case 0x46a00:
                    pc=0x46a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46a00() throws ExecutionException { /* 0x46a00 - 0x46c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46a00:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r29 = r29 + -56;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r23 = r6 + r0;
                    r18 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46bfc;
                        continue;
                    }
                    r20 = r4 + r0;
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r4 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r17 = r5 + r0;
                    r30 = r0 + r0;
                    r16 = r0 + r0;
                case 0x46a58:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46ac4;
                        continue;
                    }
                    r2 = ((r16 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    r19 = r3 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46ad8;
                        continue;
                    }
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r2 & 1152;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46ae8;
                        continue;
                    }
                    r22 = r19 + r0;
                case 0x46a88:
                    r5 = r30 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46a98;
                    pc=0x26000;
                    run_26000(); return;
                case 0x46a98:
                    r3 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r2 = readPages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff];
                    r3 = r3 - r19;
                    r4 = r4 + r22;
                    r2 = r2 - r16;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46bfc;
                        continue;
                    }
                case 0x46ac4:
                    r30 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r18 = r18 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x46a58;
                    continue;
                case 0x46ad8:
                    r19 = r16 + r0;
                    r22 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46a88;
                    continue;
                case 0x46ae8:
                    r5 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r6 = r16 + 1;
                    r21 = r4 - r5;
                    r4 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r6 = r6 + r21;
                    r22 = r4 << 1;
                    r4 = r22 + r4;
                    r22 = r4 >>> 31;
                    r22 = r22 + r4;
                    r22 = r22 >> 1;
                    r4 = ((r22 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46b98;
                        continue;
                    }
                    r2 = r2 & 1024;
                    r22 = r6 + r0;
                    r4 = r20 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46bac;
                        continue;
                    }
                case 0x46b30:
                    r5 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46b3c;
                    pc=0x25200;
                    run_25200(); return;
                case 0x46b3c:
                    r19 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46bd0;
                        continue;
                    }
                    r5 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46b5c;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x46b5c:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + -1153;
                    r2 = r2 & r3;
                    r2 = r2 | 128;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x46b70:
                    r4 = r19 + r21;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r22;
                    r22 = r22 - r21;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r19;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r22;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    r19 = r16 + r0;
                    r22 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46a88;
                    continue;
                case 0x46b98:
                    r2 = r2 & 1024;
                    r6 = r22 + r0;
                    r4 = r20 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46b30;
                        continue;
                    }
                case 0x46bac:
                    /* Next insn is delay slot */ 
                    r31=0x46bb4;
                    pc=0x27000;
                    run_27000(); return;
                case 0x46bb4:
                    r19 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46b70;
                        continue;
                    }
                    r5 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46bd0;
                    pc=0x23800;
                    run_23800(); return;
                case 0x46bd0:
                    r2 = r0 + 12;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r0;
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r0;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x46bfc:
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r0;
                case 0x46c00:
                    pc=0x46c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46c00() throws ExecutionException { /* 0x46c00 - 0x46e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46c00:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x46e00:
                    pc=0x46e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46e00() throws ExecutionException { /* 0x46e00 - 0x47000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46e00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r29 = r29 + -224;
                    r2 = r2 & 128;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r17;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r16;
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r31;
                    writePages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff] = r30;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r23;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r22;
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = r21;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r20;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r19;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r18;
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r4;
                    r16 = r5 + r0;
                    r17 = r6 + r0;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46e5c;
                        continue;
                    }
                    r2 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47de4;
                        run_47c00(); return;
                    }
                case 0x46e5c:
                    r5 = r29 + 119;
                    r21 = r29 + 120;
                    r4 = r29 + 16;
                    r2 = 5 << 16;
                    r6 = r21 - r5;
                    r18 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r4;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r0;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r0;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r0;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r0;
                    r3 = r4 + r0;
                    r22 = r2 + 26612;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r5;
                    writePages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff] = r6;
                case 0x46e98:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47898;
                        run_47800(); return;
                    }
                case 0x46ea8:
                    r4 = r0 + 37;
                    r19 = r17 + r0;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x46ec8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x46f28;
                    continue;
                case 0x46ec0:
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x46edc;
                        continue;
                    }
                case 0x46ec8:
                    r19 = r19 + 1;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46ec0;
                        continue;
                    }
                case 0x46edc:
                    r20 = r19 - r17;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46f28;
                        continue;
                    }
                    r2 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    r2 = r2 + r20;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    r2 = r2 + 1;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47adc;
                        run_47a00(); return;
                    }
                    r3 = r3 + 8;
                case 0x46f18:
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r2;
                case 0x46f28:
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47d60;
                        run_47c00(); return;
                    }
                    r2 = r19 + 1;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r0 + r0;
                    r23 = r0 + -1;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r0;
                    r19 = r0 + r0;
                    r7 = r0 + 42;
                    r8 = r0 + r0;
                case 0x46f58:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r17 = r2 + 1;
                case 0x46f60:
                    r2 = r4 + -32;
                    r5 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x474dc;
                        run_47400(); return;
                    }
                case 0x46f70:
                    r5 = 5 << 16;
                    r2 = r2 << 2;
                    r5 = r5 + 26240;
                    r2 = r5 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x46f90:
                    r19 = r19 | 16;
                case 0x46f94:
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46f58;
                    continue;
                case 0x46fa0:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r8 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c3c;
                        run_47c00(); return;
                    }
                    r8 = r0 - r8;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r2;
                case 0x46fc0:
                    r19 = r19 | 4;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46f58;
                    continue;
                case 0x46fd0:
                    r6 = r0 + 43;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46f58;
                    continue;
                case 0x46fe0:
                    r2 = r19 & 16;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47cac;
                        run_47c00(); return;
                    }
                    r19 = r19 & 64;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47d8c;
                        run_47c00(); return;
                    }
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                case 0x47000:
                    pc=0x47000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47000() throws ExecutionException { /* 0x47000 - 0x47200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47000:
                    r4 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r4&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x46e98;
                    run_46e00(); return;
                case 0x4701c:
                    r2 = 5 << 16;
                    r2 = r2 + 20964;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r2;
                case 0x47030:
                    r2 = r19 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47048;
                        continue;
                    }
                    r2 = r19 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c90;
                        run_47c00(); return;
                    }
                case 0x47048:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                case 0x4705c:
                    r5 = r19 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475c8;
                        run_47400(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475c8;
                        run_47400(); return;
                    }
                    r5 = r0 + 48;
                    addr=r29+132;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+133;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r19 | 2;
                    r4 = r0 + 2;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r5 = r0 + r0;
                case 0x47090:
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x470a0;
                        continue;
                    }
                    r6 = r0 + -129;
                    r19 = r19 & r6;
                case 0x470a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4790c;
                        run_47800(); return;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4790c;
                        run_47800(); return;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x470c4;
                        continue;
                    }
                    r2 = r19 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c74;
                        run_47c00(); return;
                    }
                case 0x470c4:
                    r30 = r21 + r0;
                case 0x470c8:
                    r6 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r2 = r6 < r23 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x470e4;
                        continue;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r23;
                case 0x470e4:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4718c;
                        continue;
                    }
                    r2 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4718c;
                    continue;
                case 0x47104:
                    r19 = r19 | 64;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46f58;
                    run_46e00(); return;
                case 0x47114:
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47454;
                        run_47400(); return;
                    }
                case 0x47128:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                case 0x4713c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4747c;
                        run_47400(); return;
                    }
                case 0x47144:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x47090;
                    continue;
                case 0x47158:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r6;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    r30 = r29 + 80;
                case 0x47188:
                    r23 = r0 + r0;
                case 0x4718c:
                    r4 = r19 & 2;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x471ac;
                        continue;
                    }
                    r5 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r5;
                case 0x471ac:
                    r6 = r19 & 132;
                    writePages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff] = r6;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475d4;
                        run_47400(); return;
                    }
                    r2 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r2 - r4;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x475d4;
                        run_47400(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e48;
                        run_47e00(); return;
                    }
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    r9 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4720c;
                    run_47200(); return;
                case 0x471f8:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                case 0x47200:
                    pc=0x47200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47200() throws ExecutionException { /* 0x47200 - 0x47400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47200:
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47270;
                        continue;
                    }
                case 0x4720c:
                    r2 = r2 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x471f8;
                        run_47000(); return;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x47248;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47248:
                    r9 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478c0;
                        run_47800(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4720c;
                        continue;
                    }
                case 0x47270:
                    r2 = r2 + 1;
                    r6 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    r5 = r20 + r5;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r6;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47be0;
                        run_47a00(); return;
                    }
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x475dc;
                    run_47400(); return;
                case 0x472a4:
                    r19 = r19 | 16;
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x473a0;
                        continue;
                    }
                case 0x472b8:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                case 0x472d0:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47090;
                    run_47000(); return;
                case 0x472e4:
                    r2 = 5 << 16;
                    r2 = r2 + 20944;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x47030;
                    run_47000(); return;
                case 0x47300:
                    r19 = r19 | 16;
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475a0;
                        run_47400(); return;
                    }
                case 0x47314:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x472d0;
                    continue;
                case 0x47334:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    addr=r29+132;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r0 + 120;
                    addr=r29+133;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = 5 << 16;
                    r4 = r4 + 20964;
                    r5 = r5 + 4;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r4;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    r19 = r19 | 2;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x472d0;
                    continue;
                case 0x47378:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46f94;
                        run_46e00(); return;
                    }
                    r6 = r0 + 32;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46f58;
                    run_46e00(); return;
                case 0x47390:
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x472b8;
                        continue;
                    }
                case 0x473a0:
                    r2 = r19 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ce8;
                        run_47c00(); return;
                    }
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x472d0;
                    continue;
                case 0x473c8:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    r30 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r6 + 4;
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e10;
                        run_47e00(); return;
                    }
                    r4 = r30 + r0;
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47dac;
                        run_47c00(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r23 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x47404;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x47400:
                    pc=0x47400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47400() throws ExecutionException { /* 0x47400 - 0x47600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47400:
                case 0x47404:
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e78;
                        run_47e00(); return;
                    }
                    r2 = r2 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    r2 = r23 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47428;
                        continue;
                    }
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                case 0x47428:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r23 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x470c8;
                    run_47000(); return;
                case 0x4743c:
                    r19 = r19 | 16;
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47128;
                        run_47000(); return;
                    }
                case 0x47454:
                    r2 = r19 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ccc;
                        run_47c00(); return;
                    }
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47144;
                        run_47000(); return;
                    }
                case 0x4747c:
                    r4 = r0 + 45;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r5 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x47090;
                    run_47000(); return;
                case 0x4749c:
                    r8 = r0 + r0;
                    r2 = r4 + -48;
                case 0x474a4:
                    r4 = r8 << 1;
                    r17 = r17 + 1;
                    r8 = r8 << 3;
                    r8 = r4 + r8;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r8 = r8 + r2;
                    r2 = r4 + -48;
                    r5 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x474a4;
                        continue;
                    }
                    r2 = r4 + -32;
                    r5 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46f70;
                        run_46e00(); return;
                    }
                case 0x474dc:
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47d60;
                        run_47c00(); return;
                    }
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    r4 = r0 + 1;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r4;
                    r30 = r29 + 80;
                    /* Next insn is delay slot */ 
                    pc=0x47188;
                    run_47000(); return;
                case 0x47510:
                    r19 = r19 | 128;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46f58;
                    run_46e00(); return;
                case 0x47520:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r5 = r17 + 1;
                    if(r4 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x47e9c;
                        run_47e00(); return;
                    }
                    r2 = r4 + -48;
                    r9 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r23 = r0 + r0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47574;
                        continue;
                    }
                case 0x47544:
                    r4 = r23 << 1;
                    r5 = r5 + 1;
                    r23 = r23 << 3;
                    r23 = r4 + r23;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r23 = r2 + r23;
                    r2 = r4 + -48;
                    r9 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47544;
                        continue;
                    }
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47dd4;
                        run_47c00(); return;
                    }
                case 0x47574:
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46f60;
                    run_46e00(); return;
                case 0x47580:
                    r19 = r19 | 1;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46f58;
                    run_46e00(); return;
                case 0x47590:
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47314;
                        run_47200(); return;
                    }
                case 0x475a0:
                    r2 = r19 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47d04;
                        run_47c00(); return;
                    }
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x472d0;
                    run_47200(); return;
                case 0x475c8:
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x472d0;
                    run_47200(); return;
                case 0x475d4:
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                case 0x475dc:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4761c;
                        run_47600(); return;
                    }
                    r4 = r29 + 134;
                    r2 = r2 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                case 0x47600:
                    pc=0x47600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47600() throws ExecutionException { /* 0x47600 - 0x47800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47600:
                    r5 = r5 + 1;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47b80;
                        run_47a00(); return;
                    }
                    r3 = r3 + 8;
                case 0x4761c:
                    r4 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4765c;
                        continue;
                    }
                    r4 = r29 + 132;
                    r2 = r2 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    r5 = r5 + 2;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47bb0;
                        run_47a00(); return;
                    }
                    r3 = r3 + 8;
                case 0x4765c:
                    r6 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r4 = r0 + 128;
                    if(r6 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x479ac;
                        run_47800(); return;
                    }
                case 0x4766c:
                    r4 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r23 = r23 - r4;
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47740;
                        continue;
                    }
                    r4 = r23 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47d50;
                        run_47c00(); return;
                    }
                    r4 = 5 << 16;
                    r20 = r4 + 26596;
                    r9 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x476b4;
                    continue;
                case 0x476a0:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47718;
                        continue;
                    }
                case 0x476b4:
                    r2 = r2 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r20;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x476a0;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x476f0;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x476f0:
                    r9 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478c0;
                        run_47800(); return;
                    }
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x476b4;
                        continue;
                    }
                case 0x47718:
                    r2 = r2 + 1;
                    r5 = r5 + r23;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r20;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r23;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47b04;
                        run_47a00(); return;
                    }
                    r3 = r3 + 8;
                case 0x47740:
                    r6 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r5 = r6 + r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r30;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r6;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47aa4;
                        run_47a00(); return;
                    }
                    r3 = r3 + 8;
                case 0x4776c:
                    r19 = r19 & 4;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47850;
                        run_47800(); return;
                    }
                    r2 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r19 = r2 - r4;
                    if(r19 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47850;
                        run_47800(); return;
                    }
                    r2 = r19 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e58;
                        run_47e00(); return;
                    }
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    r23 = r0 + 16;
                    r6 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x477c8;
                    continue;
                case 0x477b4:
                    r19 = r19 + -16;
                    r4 = r19 < 17 ? 1 : 0;
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47824;
                        run_47800(); return;
                    }
                case 0x477c8:
                    r2 = r2 + 1;
                    r6 = r6 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r23;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r6;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x477b4;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47800;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47800:
                    pc=0x47800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47800() throws ExecutionException { /* 0x47800 - 0x47a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47800:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478c0;
                        continue;
                    }
                    r19 = r19 + -16;
                    r4 = r19 < 17 ? 1 : 0;
                    r6 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x477c8;
                        run_47600(); return;
                    }
                case 0x47824:
                    r5 = r6 + r0;
                case 0x47828:
                    r2 = r2 + 1;
                    r6 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    r5 = r5 + r19;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r6;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c4c;
                        run_47c00(); return;
                    }
                case 0x47850:
                    r2 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r4 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r3 = r2 < r4 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4786c;
                        continue;
                    }
                    r2 = r4 + r0;
                case 0x4786c:
                    r3 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r3;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478a4;
                        continue;
                    }
                case 0x47884:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r0;
                    r3 = r29 + 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46ea8;
                        run_46e00(); return;
                    }
                case 0x47898:
                    r19 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46f28;
                    run_46e00(); return;
                case 0x478a4:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x478b8;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x478b8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47884;
                        continue;
                    }
                case 0x478c0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ad0;
                        run_47a00(); return;
                    }
                    r2 = r0 + -1;
                case 0x478d8:
                    r31 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r30 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r23 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r22 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r21 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r20 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r19 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r18 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r17 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r16 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r29 = r29 + 224;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4790c:
                    r6 = r0 + 1;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x47b34;
                        run_47a00(); return;
                    }
                    r6 = r0 + 2;
                    r30 = r21 + r0;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4795c;
                        continue;
                    }
                    r6 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                case 0x4792c:
                    r4 = r2 & 15;
                    r4 = r6 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r30 = r30 + -1;
                    r2 = r2 >>> 4;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4792c;
                        continue;
                    }
                    r4 = r21 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x470c8;
                    run_47000(); return;
                case 0x4795c:
                    r4 = r2 & 7;
                    r30 = r30 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4795c;
                        continue;
                    }
                    r2 = r19 & 1;
                    r6 = r30 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c2c;
                        run_47c00(); return;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x47b70;
                        run_47a00(); return;
                    }
                    r30 = r30 + -1;
                    r4 = r21 - r30;
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x470c8;
                    run_47000(); return;
                case 0x479ac:
                    r4 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r6 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r9 = r4 - r6;
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4766c;
                        run_47600(); return;
                    }
                    r4 = r9 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e68;
                        run_47e00(); return;
                    }
                    r6 = 5 << 16;
                    r20 = r6 + 26596;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r17;
                    r10 = r0 + 16;
                    r17 = r20 + r0;
                    r20 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47a04;
                    run_47a00(); return;
                case 0x479f0:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47a68;
                        run_47a00(); return;
                    }
                case 0x47a00:
                    pc=0x47a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47a00() throws ExecutionException { /* 0x47a00 - 0x47c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47a00:
                case 0x47a04:
                    r2 = r2 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r10;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x479f0;
                        run_47800(); return;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x47a40;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47a40:
                    r10 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478c0;
                        run_47800(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47a04;
                        continue;
                    }
                case 0x47a68:
                    r9 = r20 + r0;
                    r20 = r17 + r0;
                    r17 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                case 0x47a74:
                    r2 = r2 + 1;
                    r5 = r5 + r9;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r20;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47d20;
                        run_47c00(); return;
                    }
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4766c;
                    run_47600(); return;
                case 0x47aa4:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47ab8;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47ab8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478c0;
                        run_47800(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4776c;
                    run_47600(); return;
                case 0x47ad0:
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x478d8;
                    run_47800(); return;
                case 0x47adc:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47af0;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47af0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478c0;
                        run_47800(); return;
                    }
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x46f18;
                    run_46e00(); return;
                case 0x47b04:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47b18;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47b18:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478c0;
                        run_47800(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x47740;
                    run_47600(); return;
                case 0x47b34:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c10;
                        run_47c00(); return;
                    }
                    r30 = r21 + r0;
                    r4 = r0 + 10;
                case 0x47b48:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x47b54;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x47b54:
                    r30 = r30 + -1;
                    r6 = hi;
                    r6 = r6 + 48;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47b48;
                        continue;
                    }
                case 0x47b70:
                    r2 = r21 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x470c8;
                    run_47000(); return;
                case 0x47b80:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47b94;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47b94:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478c0;
                        run_47800(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4761c;
                    run_47600(); return;
                case 0x47bb0:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47bc4;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47bc4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478c0;
                        run_47800(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4765c;
                    run_47600(); return;
                case 0x47be0:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47bf4;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47bf4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478c0;
                        run_47800(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                case 0x47c00:
                    pc=0x47c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47c00() throws ExecutionException { /* 0x47c00 - 0x47e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47c00:
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x475dc;
                    run_47400(); return;
                case 0x47c10:
                    r6 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r2 = r2 + 48;
                    addr=r29+119;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r6;
                    r30 = r29 + 119;
                    /* Next insn is delay slot */ 
                    pc=0x470c8;
                    run_47000(); return;
                case 0x47c2c:
                    r6 = r21 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x470c8;
                    run_47000(); return;
                case 0x47c3c:
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r2;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46f58;
                    run_46e00(); return;
                case 0x47c4c:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47c60;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47c60:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478c0;
                        run_47800(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x47850;
                    run_47800(); return;
                case 0x47c74:
                    r6 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r2 = r0 + 48;
                    addr=r29+119;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r6;
                    r30 = r29 + 119;
                    /* Next insn is delay slot */ 
                    pc=0x470c8;
                    run_47000(); return;
                case 0x47c90:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    addr=r6+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x4705c;
                    run_47000(); return;
                case 0x47cac:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r5 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x46e98;
                    run_46e00(); return;
                case 0x47ccc:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x4713c;
                    run_47000(); return;
                case 0x47ce8:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x472d0;
                    run_47200(); return;
                case 0x47d04:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x472d0;
                    run_47200(); return;
                case 0x47d20:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47d34;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47d34:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478c0;
                        run_47800(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4766c;
                    run_47600(); return;
                case 0x47d50:
                    r6 = 5 << 16;
                    r20 = r6 + 26596;
                    /* Next insn is delay slot */ 
                    pc=0x47718;
                    run_47600(); return;
                case 0x47d60:
                    r2 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478c0;
                        run_47800(); return;
                    }
                    r4 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r6 = r29 + 120;
                    /* Next insn is delay slot */ 
                    r31=0x47d84;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47d84:
                    /* Next insn is delay slot */ 
                    pc=0x478c0;
                    run_47800(); return;
                case 0x47d8c:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r6 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r6;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x46e98;
                    run_46e00(); return;
                case 0x47dac:
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x47db8;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x47db8:
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r23 = r0 + r0;
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x470c8;
                    run_47000(); return;
                case 0x47dd4:
                    r23 = r0 + -1;
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46f60;
                    run_46e00(); return;
                case 0x47de4:
                    r5 = r0 + 64;
                    /* Next insn is delay slot */ 
                    r31=0x47df0;
                    pc=0x25200;
                    run_25200(); return;
                case 0x47df0:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ec8;
                        run_47e00(); return;
                    }
                case 0x47e00:
                    pc=0x47e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47e00() throws ExecutionException { /* 0x47e00 - 0x48000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47e00:
                    r2 = r0 + 64;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x46e5c;
                    run_46e00(); return;
                case 0x47e10:
                    r2 = (r23&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e20;
                        continue;
                    }
                    r23 = r0 + 6;
                case 0x47e20:
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r2 = r23 + r0;
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e90;
                        continue;
                    }
                case 0x47e30:
                    r8 = 5 << 16;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r30 = r8 + 24776;
                    /* Next insn is delay slot */ 
                    pc=0x47188;
                    run_47000(); return;
                case 0x47e48:
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    /* Next insn is delay slot */ 
                    pc=0x47270;
                    run_47200(); return;
                case 0x47e58:
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    /* Next insn is delay slot */ 
                    pc=0x47828;
                    run_47800(); return;
                case 0x47e68:
                    r4 = 5 << 16;
                    r20 = r4 + 26596;
                    /* Next insn is delay slot */ 
                    pc=0x47a74;
                    run_47a00(); return;
                case 0x47e78:
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r23 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x470c8;
                    run_47000(); return;
                case 0x47e90:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47e30;
                    continue;
                case 0x47e9c:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r17 = r5 + r0;
                    r23 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r23 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c3c;
                        run_47c00(); return;
                    }
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r2;
                    r23 = r0 + -1;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46f58;
                    run_46e00(); return;
                case 0x47ec8:
                    r3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x478d8;
                    run_47800(); return;
                case 0x48000:
                    pc=0x48000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48000() throws ExecutionException { /* 0x48000 - 0x48200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48000:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -752;
                    writePages[(r29+708)>>>12][((r29+708)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r2 & 8192;
                    writePages[(r29+736)>>>12][((r29+736)>>>2)&0x3ff] = r30;
                    writePages[(r29+720)>>>12][((r29+720)>>>2)&0x3ff] = r20;
                    writePages[(r29+704)>>>12][((r29+704)>>>2)&0x3ff] = r16;
                    writePages[(r29+740)>>>12][((r29+740)>>>2)&0x3ff] = r31;
                    writePages[(r29+732)>>>12][((r29+732)>>>2)&0x3ff] = r23;
                    writePages[(r29+728)>>>12][((r29+728)>>>2)&0x3ff] = r22;
                    writePages[(r29+724)>>>12][((r29+724)>>>2)&0x3ff] = r21;
                    writePages[(r29+716)>>>12][((r29+716)>>>2)&0x3ff] = r19;
                    writePages[(r29+712)>>>12][((r29+712)>>>2)&0x3ff] = r18;
                    writePages[(r29+748)>>>12][((r29+748)>>>2)&0x3ff] = f20;
                    writePages[(r29+744)>>>12][((r29+744)>>>2)&0x3ff] = f21;
                    r30 = r5 + r0;
                    r16 = r6 + r0;
                    r20 = r7 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4806c;
                        continue;
                    }
                    r2 = r2 | 8192;
                    r4 = readPages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff];
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r4 & r2;
                    writePages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff] = r2;
                case 0x4806c:
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r0;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r0;
                    r21 = r0 + r0;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r0;
                case 0x4807c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 1;
                    writePages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48340;
                        run_48200(); return;
                    }
                case 0x48090:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r3 = r4 + r2;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4812c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x48108;
                        continue;
                    }
                case 0x480c0:
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r4 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4807c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = r2 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x480c0;
                        continue;
                    }
                case 0x48108:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48118;
                    pc=0x50400;
                    run_50400(); return;
                case 0x48118:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4807c;
                        continue;
                    }
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x480c0;
                    continue;
                case 0x4812c:
                    r3 = r0 + 37;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x482ec;
                        run_48200(); return;
                    }
                    r18 = r0 + r0;
                    r23 = r0 + r0;
                case 0x48140:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 255;
                    r5 = (r2&0xffffffffL) < (121&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4817c;
                        continue;
                    }
                    r5 = 5 << 16;
                    r2 = r2 << 2;
                    r5 = r5 + 26636;
                    r2 = r5 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x4817c:
                    r3 = r4 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + 1;
                    r3 = r3 & 3;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x48198;
                        continue;
                    }
                case 0x48194:
                    r18 = r18 | 1;
                case 0x48198:
                    r2 = 5 << 16;
                    r2 = r2 + -1024;
                    r3 = r0 + 10;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                case 0x481b0:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x48374;
                        run_48200(); return;
                    }
                case 0x481c0:
                    r2 = r18 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48294;
                        run_48200(); return;
                    }
                case 0x481cc:
                    r2 = r0 + 2;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x484b8;
                        run_48400(); return;
                    }
                    r2 = r19 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x483f0;
                        run_48200(); return;
                    }
                    r2 = r0 + 3;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x485ec;
                        run_48400(); return;
                    }
                    r2 = r0 + 4;
                    if(r19 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x48558;
                        run_48400(); return;
                    }
                    r2 = r23 + -1;
                case 0x48200:
                    pc=0x48200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48200() throws ExecutionException { /* 0x48200 - 0x48400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48200:
                    r2 = (r2&0xffffffffL) < (349&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48d08;
                        run_48c00(); return;
                    }
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r0;
                case 0x48210:
                    r10 = r29 + 24;
                    r19 = r18 | 1920;
                    r3 = r0 + r0;
                    r18 = r0 + r0;
                    writePages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff] = r0;
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r0;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r0;
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r0;
                    r22 = r10 + r0;
                    r11 = r0 + -1921;
                case 0x48238:
                    r6 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r5 + -43;
                    r2 = r2 & 255;
                    r7 = (r2&0xffffffffL) < (79&0xffffffffL) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x486b4;
                        run_48600(); return;
                    }
                    r4 = 5 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + 27120;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x4827c:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4828c;
                    pc=0x50400;
                    run_50400(); return;
                case 0x4828c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4838c;
                        continue;
                    }
                case 0x48294:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x482ac;
                    continue;
                case 0x482a4:
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                case 0x482ac:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r4 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x481cc;
                        run_48000(); return;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x482a4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4827c;
                    continue;
                case 0x482ec:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4935c;
                        run_49200(); return;
                    }
                case 0x482fc:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x48340;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r21 = r21 + 1;
                    writePages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff] = r2;
                    r16 = r16 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48090;
                        run_48000(); return;
                    }
                case 0x48340:
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x483b4;
                    continue;
                case 0x4834c:
                    r18 = r18 | 1;
                case 0x48350:
                    r2 = 4 << 16;
                    r2 = r2 + 25600;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r0 + 8;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x481c0;
                        run_48000(); return;
                    }
                case 0x48374:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48384;
                    pc=0x50400;
                    run_50400(); return;
                case 0x48384:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x481c0;
                        run_48000(); return;
                    }
                case 0x4838c:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x483b0;
                        continue;
                    }
                    addr=r30+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48340;
                        continue;
                    }
                case 0x483b0:
                    r2 = r0 + -1;
                case 0x483b4:
                    f20 = readPages[(r29+748)>>>12][((r29+748)>>>2)&0x3ff];
                    r31 = readPages[(r29+740)>>>12][((r29+740)>>>2)&0x3ff];
                    r30 = readPages[(r29+736)>>>12][((r29+736)>>>2)&0x3ff];
                    r23 = readPages[(r29+732)>>>12][((r29+732)>>>2)&0x3ff];
                    r22 = readPages[(r29+728)>>>12][((r29+728)>>>2)&0x3ff];
                    r21 = readPages[(r29+724)>>>12][((r29+724)>>>2)&0x3ff];
                    r20 = readPages[(r29+720)>>>12][((r29+720)>>>2)&0x3ff];
                    r19 = readPages[(r29+716)>>>12][((r29+716)>>>2)&0x3ff];
                    r18 = readPages[(r29+712)>>>12][((r29+712)>>>2)&0x3ff];
                    r17 = readPages[(r29+708)>>>12][((r29+708)>>>2)&0x3ff];
                    r16 = readPages[(r29+704)>>>12][((r29+704)>>>2)&0x3ff];
                    f21 = readPages[(r29+744)>>>12][((r29+744)>>>2)&0x3ff];
                    r29 = r29 + 752;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x483f0:
                    r2 = r0 + 1;
                    if(r19 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x48558;
                        run_48400(); return;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48408;
                        run_48400(); return;
                    }
                case 0x48400:
                    pc=0x48400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48400() throws ExecutionException { /* 0x48400 - 0x48600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48400:
                    r23 = r0 + -1;
                case 0x48408:
                    r18 = r18 & 16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48c48;
                        run_48c00(); return;
                    }
                    r10 = r29 + 24;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r0 + r0;
                    r19 = r10 + r0;
                case 0x48424:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r19 + r3;
                    addr=r3+352;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x484a4;
                        continue;
                    }
                case 0x48440:
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    r18 = r18 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r23 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x484ac;
                        continue;
                    }
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x48424;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48478;
                    pc=0x50400;
                    run_50400(); return;
                case 0x48478:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x484ac;
                        continue;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r19 + r3;
                    addr=r3+352;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48440;
                        continue;
                    }
                case 0x484a4:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48340;
                        run_48200(); return;
                    }
                case 0x484ac:
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x4807c;
                    run_48000(); return;
                case 0x484b8:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x484c4;
                        continue;
                    }
                    r23 = r0 + -1;
                case 0x484c4:
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48f5c;
                        run_48e00(); return;
                    }
                    r18 = r18 & 16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48ffc;
                        run_48e00(); return;
                    }
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r0 + r0;
                case 0x484e8:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r4 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x484ac;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    r18 = r18 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r23 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x484ac;
                        continue;
                    }
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x484e8;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48540;
                    pc=0x50400;
                    run_50400(); return;
                case 0x48540:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x484ac;
                        continue;
                    }
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x484e8;
                    continue;
                case 0x48558:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48564;
                        continue;
                    }
                    r23 = r0 + 1;
                case 0x48564:
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48e4c;
                        run_48e00(); return;
                    }
                    r18 = r18 & 16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49318;
                        run_49200(); return;
                    }
                    r18 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x485b4;
                    continue;
                case 0x48588:
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r18 + r2;
                    r23 = r23 - r2;
                    r2 = r3 + r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x485ac;
                    pc=0x50400;
                    run_50400(); return;
                case 0x485ac:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49304;
                        run_49200(); return;
                    }
                case 0x485b4:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r2 < r23 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48588;
                        continue;
                    }
                    r2 = r2 - r23;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r18 + r23;
                    r8 = r2 + r23;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r8;
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x4807c;
                    run_48000(); return;
                case 0x485ec:
                    r2 = r23 + -1;
                    r2 = (r2&0xffffffffL) < (349&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48c38;
                        run_48c00(); return;
                    }
                    r6 = r0 + r0;
                case 0x48600:
                    pc=0x48600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48600() throws ExecutionException { /* 0x48600 - 0x48800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48600:
                    r10 = r29 + 24;
                    r4 = 5 << 16;
                    r11 = r20 + r0;
                    r20 = r16 + r0;
                    r16 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    r18 = r18 | 3456;
                    r8 = r0 + r0;
                    r19 = r10 + r0;
                    r7 = r0 + 512;
                    r22 = r4 + 27748;
                case 0x48628:
                    r5 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r3 + -43;
                    r2 = r2 & 255;
                    r9 = (r2&0xffffffffL) < (78&0xffffffffL) ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48acc;
                        run_48a00(); return;
                    }
                    r4 = 5 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + 27436;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x4866c:
                    r2 = r3 + r18;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x486b4;
                        continue;
                    }
                    r2 = r0 + -385;
                    r19 = r19 & r2;
                case 0x48680:
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r22 = r22 + 1;
                case 0x48688:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r23 = r23 + -1;
                    r2 = r2 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x488b4;
                        run_48800(); return;
                    }
                case 0x486a4:
                    r6 = r6 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r6;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48238;
                        run_48200(); return;
                    }
                case 0x486b4:
                    r4 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x488f4;
                        run_48800(); return;
                    }
                case 0x486c4:
                    r2 = r3 + -1;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49560;
                        run_49400(); return;
                    }
                    r2 = r18 + -1;
                    r2 = (r2&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4875c;
                        continue;
                    }
                    r2 = r18 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x494e0;
                        run_49400(); return;
                    }
                    r2 = r0 + 3;
                    r7 = r18 & 255;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4875c;
                        continue;
                    }
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r16;
                    r23 = r22 + r0;
                    r16 = r7 + r0;
                    r18 = r10 + r0;
                case 0x48710:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48728;
                    pc=0x50200;
                    run_50200(); return;
                case 0x48728:
                    r3 = r16 + -1;
                    r2 = r23 + r21;
                    r16 = r3 & 255;
                    r4 = r2 - r22;
                    r2 = r16 << 24;
                    r2 = r2 >> 24;
                    r2 = r2 < 4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48710;
                        continue;
                    }
                    r16 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                    r10 = r18 + r0;
                    r21 = r4 + r0;
                    r22 = r23 + r0;
                case 0x4875c:
                    r2 = r19 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x487e4;
                        continue;
                    }
                    r2 = r19 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49520;
                        run_49400(); return;
                    }
                    addr=r22+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r2 = r0 + 101;
                    r23 = r22 + -1;
                    r7 = r21 + -1;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x487bc;
                        continue;
                    }
                    r2 = r0 + 69;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x487bc;
                        continue;
                    }
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x487ac;
                    pc=0x50200;
                    run_50200(); return;
                case 0x487ac:
                    addr=r22+-2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r23 = r22 + -2;
                    r7 = r21 + -2;
                case 0x487bc:
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff] = r7;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x487d4;
                    pc=0x50200;
                    run_50200(); return;
                case 0x487d4:
                    r7 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r21 = r7 + r0;
                    r22 = r23 + r0;
                case 0x487e4:
                    r2 = r19 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4807c;
                        run_48000(); return;
                    }
                    r4 = r19 & 1536;
                    r2 = r0 + 1024;
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4937c;
                        run_49200(); return;
                    }
                case 0x48800:
                    pc=0x48800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48800() throws ExecutionException { /* 0x48800 - 0x48a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48800:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49254;
                        run_49200(); return;
                    }
                case 0x48814:
                    r4 = r17 + r0;
                    r5 = r10 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48828;
                    pc=0x4dc00;
                    run_4dc00(); return;
                case 0x48828:
                    r2 = r19 & 1;
                    f20 = f0;
                    f21 = f1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49144;
                        run_49000(); return;
                    }
                case 0x48838:
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f20;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f21;
                case 0x48848:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4807c;
                    run_48000(); return;
                case 0x48860:
                    r2 = r19 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4866c;
                        run_48600(); return;
                    }
                    r2 = r0 + -129;
                    r5 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r19 = r19 & r2;
                    r2 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                    r5 = r5 + 1;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48688;
                        run_48600(); return;
                    }
                    r2 = r2 + -1;
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r23 = r23 + 1;
                    r2 = r2 + -1;
                    r23 = r23 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x486a4;
                        run_48600(); return;
                    }
                case 0x488b4:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff] = r3;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    writePages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff] = r11;
                    /* Next insn is delay slot */ 
                    r31=0x488d0;
                    pc=0x50400;
                    run_50400(); return;
                case 0x488d0:
                    r3 = readPages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r11 = readPages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x486b4;
                        run_48600(); return;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48238;
                        run_48200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x486b4;
                    run_48600(); return;
                case 0x488f4:
                    r2 = r0 + -257;
                    r19 = r19 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x486c4;
                    run_48600(); return;
                case 0x48904:
                    r2 = r19 & 512;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x486b4;
                        run_48600(); return;
                    }
                    r2 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r4 = r0 + -641;
                    r19 = r19 & r4;
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x48680;
                    run_48600(); return;
                case 0x48928:
                    r2 = r19 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x486b4;
                        run_48600(); return;
                    }
                    r2 = r0 + -129;
                    r19 = r19 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x48680;
                    run_48600(); return;
                case 0x48944:
                    r2 = r0 + 7;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x486b4;
                        run_48600(); return;
                    }
                    r18 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x48680;
                    run_48600(); return;
                case 0x4895c:
                    r2 = r0 + 6;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x486b4;
                        run_48600(); return;
                    }
                    r18 = r0 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x48680;
                    run_48600(); return;
                case 0x48974:
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x490ac;
                        run_49000(); return;
                    }
                    r4 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49190;
                        run_49000(); return;
                    }
                case 0x4898c:
                    r2 = r0 + 1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x489a4;
                        continue;
                    }
                    r2 = r0 + 4;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x486b4;
                        run_48600(); return;
                    }
                case 0x489a4:
                    r18 = r18 + 1;
                    r18 = r18 << 24;
                    r18 = r18 >> 24;
                    /* Next insn is delay slot */ 
                    pc=0x48680;
                    run_48600(); return;
                case 0x489b8:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x490c4;
                        run_49000(); return;
                    }
                    r2 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x488f4;
                        continue;
                    }
                    r4 = r19 & 1792;
                    r2 = r0 + 1792;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x486c4;
                        run_48600(); return;
                    }
                    r19 = r19 & r11;
                    r18 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x48680;
                    run_48600(); return;
                case 0x489f0:
                    r2 = r0 + 2;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x486b4;
                        run_48600(); return;
                    }
                    r18 = r0 + 3;
                case 0x48a00:
                    pc=0x48a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48a00() throws ExecutionException { /* 0x48a00 - 0x48c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48a00:
                    /* Next insn is delay slot */ 
                    pc=0x48680;
                    run_48600(); return;
                case 0x48a08:
                    r2 = r19 & 1280;
                    r4 = r0 + 1024;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x48a34;
                        continue;
                    }
                    r2 = r19 & 1024;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x486b4;
                        run_48600(); return;
                    }
                    r2 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x486c4;
                        run_48600(); return;
                    }
                case 0x48a34:
                    r2 = r19 & 512;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48a54;
                        continue;
                    }
                    r4 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r2 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    writePages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff] = r22;
                    r4 = r4 - r2;
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r4;
                case 0x48a54:
                    r19 = r19 & r11;
                    r19 = r19 | 384;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x48680;
                    run_48600(); return;
                case 0x48a68:
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x486b4;
                        run_48600(); return;
                    }
                    r3 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x48680;
                    run_48600(); return;
                case 0x48a80:
                    r2 = r18 & 1536;
                    if(r2 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x48acc;
                        continue;
                    }
                    r2 = r0 + -513;
                    r18 = r18 & r2;
                    r18 = r18 | 1280;
                    r16 = r0 + 16;
                case 0x48a9c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -1;
                    r19 = r19 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x48bc4;
                        continue;
                    }
                case 0x48ab8:
                    r5 = r5 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r5;
                case 0x48ac0:
                    r23 = r23 + -1;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48628;
                        run_48600(); return;
                    }
                case 0x48acc:
                    r2 = r18 & 256;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r16;
                    r16 = r20 + r0;
                    r20 = r11 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48af8;
                        continue;
                    }
                    r2 = ((r10 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49220;
                        run_49200(); return;
                    }
                case 0x48af0:
                    if(r10 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x48340;
                        run_48200(); return;
                    }
                case 0x48af8:
                    r2 = r18 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x490e4;
                        run_49000(); return;
                    }
                case 0x48b04:
                    r10 = r19 - r10;
                    r23 = r10 + r8;
                    r21 = r21 + r23;
                    /* Next insn is delay slot */ 
                    pc=0x4807c;
                    run_48000(); return;
                case 0x48b18:
                    r2 = r16 < 11 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48acc;
                        continue;
                    }
                    r2 = r0 + -2945;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x48a9c;
                    continue;
                case 0x48b34:
                    r2 = r18 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48acc;
                        continue;
                    }
                    r2 = r0 + -129;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x48a9c;
                    continue;
                case 0x48b50:
                    r2 = r16 << 1;
                    r2 = r2 + r22;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r16 = tmp;
                    r2 = r0 + -2945;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x48a9c;
                    continue;
                case 0x48b6c:
                    r2 = r18 & 2048;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48a9c;
                        continue;
                    }
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48b88;
                        continue;
                    }
                    r18 = r18 | 512;
                    r16 = r0 + 8;
                case 0x48b88:
                    r2 = r18 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49180;
                        run_49000(); return;
                    }
                    r2 = r0 + -897;
                    r18 = r18 & r2;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48bac;
                        continue;
                    }
                    r6 = r6 + -1;
                    r23 = r23 + 1;
                case 0x48bac:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    r2 = r2 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x48ab8;
                        continue;
                    }
                case 0x48bc4:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff] = r6;
                    writePages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff] = r7;
                    writePages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff] = r8;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    writePages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff] = r11;
                    /* Next insn is delay slot */ 
                    r31=0x48be8;
                    pc=0x50400;
                    run_50400(); return;
                case 0x48be8:
                    r6 = readPages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff];
                    r7 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    r8 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r11 = readPages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48ac0;
                        continue;
                    }
                case 0x48c00:
                    pc=0x48c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48c00() throws ExecutionException { /* 0x48c00 - 0x48e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48c00:
                    /* Next insn is delay slot */ 
                    pc=0x48acc;
                    run_48a00(); return;
                case 0x48c0c:
                    r2 = r16 << 1;
                    r2 = r2 + r22;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r16 = tmp;
                    r2 = r16 < 9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48acc;
                        run_48a00(); return;
                    }
                    r2 = r0 + -2945;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x48a9c;
                    run_48a00(); return;
                case 0x48c38:
                    r6 = r23 + -349;
                    r23 = r0 + 349;
                    /* Next insn is delay slot */ 
                    pc=0x48600;
                    run_48600(); return;
                case 0x48c48:
                    r18 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r10 = r29 + 24;
                    r19 = r20 + 4;
                    r22 = r10 + r0;
                    r20 = r18 + r0;
                case 0x48c5c:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r22 + r3;
                    addr=r3+352;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48cdc;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r20 = r20 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    r3 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r23 + -1;
                    addr=r20+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48cdc;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x48c5c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48ccc;
                    pc=0x50400;
                    run_50400(); return;
                case 0x48ccc:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48c5c;
                        continue;
                    }
                    if(r18 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x4838c;
                        run_48200(); return;
                    }
                case 0x48cdc:
                    r18 = r20 - r18;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48340;
                        run_48200(); return;
                    }
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    r20 = r19 + r0;
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x4807c;
                    run_48000(); return;
                case 0x48d08:
                    r23 = r23 + -349;
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r23;
                    r23 = r0 + 349;
                    /* Next insn is delay slot */ 
                    pc=0x48210;
                    run_48200(); return;
                case 0x48d1c:
                    r2 = 5 << 16;
                    r2 = r2 + -1024;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r0;
                    r19 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x481b0;
                    run_48000(); return;
                case 0x48d38:
                    r18 = r18 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x48140;
                    run_48000(); return;
                case 0x48d44:
                    r18 = r18 | 4;
                    /* Next insn is delay slot */ 
                    pc=0x48140;
                    run_48000(); return;
                case 0x48d50:
                    r18 = r18 | 64;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x481b0;
                    run_48000(); return;
                case 0x48d60:
                    r5 = r16 + r0;
                    r4 = r29 + 376;
                    /* Next insn is delay slot */ 
                    r31=0x48d70;
                    pc=0x4d800;
                    run_4d800(); return;
                case 0x48d70:
                    r16 = r2 + r0;
                    r18 = r18 | 64;
                    r19 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x481b0;
                    run_48000(); return;
                case 0x48d84:
                    r18 = r18 | 512;
                case 0x48d88:
                    r2 = 4 << 16;
                    r2 = r2 + 25600;
                    r3 = r0 + 16;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x481b0;
                    run_48000(); return;
                case 0x48da8:
                    r18 = r18 | 2;
                    /* Next insn is delay slot */ 
                    pc=0x48140;
                    run_48000(); return;
                case 0x48db4:
                    r19 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x481b0;
                    run_48000(); return;
                case 0x48dc0:
                    r2 = r23 << 1;
                    r23 = r23 << 3;
                    r2 = r2 + r23;
                    r3 = r3 + -48;
                    r23 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x48140;
                    run_48000(); return;
                case 0x48ddc:
                    r18 = r18 | 16;
                    /* Next insn is delay slot */ 
                    pc=0x48140;
                    run_48000(); return;
                case 0x48de8:
                    r2 = 4 << 16;
                    r2 = r2 + 25600;
                    r3 = r0 + 10;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                case 0x48e00:
                    pc=0x48e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48e00() throws ExecutionException { /* 0x48e00 - 0x49000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48e00:
                    /* Next insn is delay slot */ 
                    pc=0x481b0;
                    run_48000(); return;
                case 0x48e08:
                    r19 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x481b0;
                    run_48000(); return;
                case 0x48e14:
                    r18 = r18 | 544;
                    /* Next insn is delay slot */ 
                    pc=0x48d88;
                    run_48c00(); return;
                case 0x48e20:
                    r2 = r18 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4807c;
                        run_48000(); return;
                    }
                    r2 = r18 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x493a0;
                        run_49200(); return;
                    }
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r21&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x4807c;
                    run_48000(); return;
                case 0x48e4c:
                    r3 = r29 + 632;
                    r4 = r3 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r18 = r18 & 16;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x48e6c;
                    pc=0x2f7ec;
                    run_2f600(); return;
                case 0x48e6c:
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r18;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x491e4;
                        run_49000(); return;
                    }
                    r18 = r0 + r0;
                case 0x48e7c:
                    r22 = r0 + r0;
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r16;
                    r19 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    r16 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r20;
                    r20 = r22 + r0;
                case 0x48e94:
                    /* Next insn is delay slot */ 
                    r31=0x48e9c;
                    pc=0x41000;
                    run_41000(); return;
                case 0x48e9c:
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x4838c;
                        run_48200(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r4 = r29 + 24;
                    r3 = r4 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r22 = r20 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r5 = r18 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r4 = r17 + r0;
                    r6 = r29 + 24;
                    r7 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48eec;
                    pc=0x4d000;
                    run_4d000(); return;
                case 0x48eec:
                    r5 = r0 + -1;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4838c;
                        run_48200(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x492e0;
                        run_49200(); return;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48f0c;
                        continue;
                    }
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r0;
                case 0x48f0c:
                    r21 = r21 + r22;
                    r23 = r23 + -1;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x492f8;
                        run_49200(); return;
                    }
                    r18 = r18 + 4;
                    r20 = r0 + r0;
                case 0x48f24:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x491b0;
                        run_49000(); return;
                    }
                case 0x48f34:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48e94;
                        continue;
                    }
                    r16 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r20 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                case 0x48f44:
                    r3 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48848;
                        run_48800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4807c;
                    run_48000(); return;
                case 0x48f5c:
                    r3 = r29 + 632;
                    r4 = r3 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r18 = r18 & 16;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x48f7c;
                    pc=0x2f7ec;
                    run_2f600(); return;
                case 0x48f7c:
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r18;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x491f4;
                        run_49000(); return;
                    }
                    r19 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                case 0x48f90:
                    r6 = r0 + r0;
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r16;
                    r22 = r0 + -2;
                    r16 = r6 + r0;
                case 0x48fa0:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r3 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48fd0;
                        continue;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x493b4;
                        run_49200(); return;
                    }
                case 0x48fd0:
                    r16 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                case 0x48fd4:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4807c;
                        run_48000(); return;
                    }
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4807c;
                    run_48000(); return;
                case 0x48ffc:
                    r19 = r20 + 4;
                case 0x49000:
                    pc=0x49000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49000() throws ExecutionException { /* 0x49000 - 0x49200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49000:
                    r20 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r18 = r20 + r0;
                case 0x4900c:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r5 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49088;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r18 = r18 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    r3 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r23 + -1;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49088;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4900c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x49080;
                    pc=0x50400;
                    run_50400(); return;
                case 0x49080:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4900c;
                        continue;
                    }
                case 0x49088:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    r18 = r18 - r20;
                    r21 = r21 + r18;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    r20 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4807c;
                    run_48000(); return;
                case 0x490ac:
                    r2 = r0 + 2;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4898c;
                        run_48800(); return;
                    }
                    r3 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x48680;
                    run_48600(); return;
                case 0x490c4:
                    r2 = r0 + 3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x489a4;
                        run_48800(); return;
                    }
                    r2 = r0 + 5;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x489a4;
                        run_48800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x486b4;
                    run_48600(); return;
                case 0x490e4:
                    r3 = readPages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff];
                    r7 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r10 + r0;
                    writePages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff] = r8;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x4910c;
                    return;
                case 0x4910c:
                    r3 = r18 & 32;
                    r8 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49200;
                        run_49200(); return;
                    }
                case 0x49120:
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x4912c:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x48b04;
                    run_48a00(); return;
                case 0x49144:
                    r9 = r19 & 2;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48838;
                        run_48800(); return;
                    }
                    f12 = f0;
                    f13 = f1;
                    r18 = r20 + 4;
                    r19 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x49164;
                    pc=0x44400;
                    run_44400(); return;
                case 0x49164:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49478;
                        run_49400(); return;
                    }
                    f20=Float.floatToRawIntBits((float)(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL))));
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = f20;
                    r20 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48848;
                    run_48800(); return;
                case 0x49180:
                    r2 = r0 + -1409;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x48a9c;
                    run_48a00(); return;
                case 0x49190:
                    r4 = r19 & 1792;
                    r2 = r0 + 1792;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4898c;
                        run_48800(); return;
                    }
                    r19 = r19 & r11;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x48680;
                    run_48600(); return;
                case 0x491b0:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x491c0;
                    pc=0x50400;
                    run_50400(); return;
                case 0x491c0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48f34;
                        run_48e00(); return;
                    }
                    r22 = r20 + r0;
                    r16 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r20 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48f44;
                        run_48e00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4838c;
                    run_48200(); return;
                case 0x491e4:
                    r18 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x48e7c;
                    run_48e00(); return;
                case 0x491f4:
                    r19 = r29 + 640;
                    /* Next insn is delay slot */ 
                    pc=0x48f90;
                    run_48e00(); return;
                case 0x49200:
                    pc=0x49200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49200() throws ExecutionException { /* 0x49200 - 0x49400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49200:
                    r3 = r18 & 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49120;
                        run_49000(); return;
                    }
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x4912c;
                    run_49000(); return;
                case 0x49220:
                    addr=r19+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r22 = r19 + -1;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff] = r8;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x49244;
                    pc=0x50200;
                    run_50200(); return;
                case 0x49244:
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r8 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x48af0;
                    run_48a00(); return;
                case 0x49254:
                    r3 = readPages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r5 = r3 + 1;
                    r4 = r17 + r0;
                    r7 = r0 + 10;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x49274;
                    pc=0x4fc00;
                    run_4fc00(); return;
                case 0x49274:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r22 = readPages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r6 = r2 - r3;
                case 0x49284:
                    r2 = r29 + 363;
                    r2 = ((r22 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49298;
                        continue;
                    }
                    r22 = r29 + 362;
                case 0x49298:
                    r2 = 5 << 16;
                    r4 = r22 + r0;
                    r5 = r2 + 26628;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x492b0;
                    pc=0x28400;
                    run_28400(); return;
                case 0x492b0:
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r10 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x492c8;
                    pc=0x4dc00;
                    run_4dc00(); return;
                case 0x492c8:
                    r2 = r19 & 1;
                    f20 = f0;
                    f21 = f1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49144;
                        run_49000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x48838;
                    run_48800(); return;
                case 0x492e0:
                    r3 = r0 + -2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x48f0c;
                        run_48e00(); return;
                    }
                    r20 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48f24;
                    run_48e00(); return;
                case 0x492f8:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48f24;
                    run_48e00(); return;
                case 0x49304:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4838c;
                        run_48200(); return;
                    }
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x4807c;
                    run_48000(); return;
                case 0x49318:
                    r5 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r6 = r0 + 1;
                    r7 = r23 + r0;
                    r18 = r20 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x49338;
                    pc=0x50600;
                    run_50600(); return;
                case 0x49338:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4838c;
                        run_48200(); return;
                    }
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    r21 = r2 + r21;
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    r20 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4807c;
                    run_48000(); return;
                case 0x4935c:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4936c;
                    pc=0x50400;
                    run_50400(); return;
                case 0x4936c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x482fc;
                        run_48200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4838c;
                    run_48200(); return;
                case 0x4937c:
                    r3 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r4 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    r18 = r3 - r4;
                    r6 = r0 - r18;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49284;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x48814;
                    run_48800(); return;
                case 0x493a0:
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r21;
                    /* Next insn is delay slot */ 
                    pc=0x4807c;
                    run_48000(); return;
                case 0x493b4:
                    /* Next insn is delay slot */ 
                    r31=0x493bc;
                    pc=0x41000;
                    run_41000(); return;
                case 0x493bc:
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x4838c;
                        run_48200(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r4 = r29 + 24;
                    r18 = r16 + 1;
                    r16 = r4 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r5 = r19 + r0;
                case 0x49400:
                    pc=0x49400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49400() throws ExecutionException { /* 0x49400 - 0x49600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49400:
                    r6 = r29 + 24;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x49410;
                    pc=0x4d000;
                    run_4d000(); return;
                case 0x49410:
                    r4 = r0 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4838c;
                        run_48200(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49494;
                        continue;
                    }
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    r4 = r0 + r0;
                case 0x4942c:
                    /* Next insn is delay slot */ 
                    r31=0x49434;
                    pc=0x4ce00;
                    run_4ce00(); return;
                case 0x49434:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x495a0;
                        continue;
                    }
                    r16 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48fd4;
                        run_48e00(); return;
                    }
                case 0x49448:
                    r18 = r18 + -1;
                    r5 = r29 + 24;
                    r2 = r5 + r18;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x49468;
                    pc=0x50200;
                    run_50200(); return;
                case 0x49468:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49448;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x48fd4;
                    run_48e00(); return;
                case 0x49478:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x49484;
                    pc=0x4da00;
                    run_4da00(); return;
                case 0x49484:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = f0;
                    r20 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48848;
                    run_48800(); return;
                case 0x49494:
                    if(r2 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x495c4;
                        continue;
                    }
                    r16 = r18 + r0;
                case 0x494a0:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x48fa0;
                        run_48e00(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x494c0;
                    pc=0x50400;
                    run_50400(); return;
                case 0x494c0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48fa0;
                        run_48e00(); return;
                    }
                    r6 = r16 + r0;
                    r16 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4838c;
                        run_48200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x48fd4;
                    run_48e00(); return;
                case 0x494e0:
                    r2 = ((r10 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    r16 = r10 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48340;
                        run_48200(); return;
                    }
                case 0x494f4:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4950c;
                    pc=0x50200;
                    run_50200(); return;
                case 0x4950c:
                    if(r23 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x494f4;
                        continue;
                    }
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x483b4;
                    run_48200(); return;
                case 0x49520:
                    r2 = ((r10 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48340;
                        run_48200(); return;
                    }
                    r16 = r10 + r0;
                case 0x49534:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4954c;
                    pc=0x50200;
                    run_50200(); return;
                case 0x4954c:
                    if(r23 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x49534;
                        continue;
                    }
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x483b4;
                    run_48200(); return;
                case 0x49560:
                    r2 = ((r10 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48340;
                        run_48200(); return;
                    }
                    r16 = r10 + r0;
                case 0x49574:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4958c;
                    pc=0x50200;
                    run_50200(); return;
                case 0x4958c:
                    if(r23 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x49574;
                        continue;
                    }
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x483b4;
                    run_48200(); return;
                case 0x495a0:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r21 = r21 + r18;
                    r23 = r23 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x495d0;
                        continue;
                    }
                    r19 = r19 + 4;
                    r16 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x494a0;
                    continue;
                case 0x495c4:
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4942c;
                    continue;
                case 0x495d0:
                    r16 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x494a0;
                    continue;
                case 0x49600:
                    pc=0x49600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49600() throws ExecutionException { /* 0x49600 - 0x49800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49600:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2f060;
                    run_2f000(); return;
                case 0x49800:
                    pc=0x49800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49800() throws ExecutionException { /* 0x49800 - 0x49a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49800:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2f4d0;
                    run_2f400(); return;
                case 0x49a00:
                    pc=0x49a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49a00() throws ExecutionException { /* 0x49a00 - 0x49c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49a00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2f160;
                    run_2f000(); return;
                case 0x49c00:
                    pc=0x49c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49c00() throws ExecutionException { /* 0x49c00 - 0x49e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49c00:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = r29 + 40;
                    r3 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r5 = r2 + r0;
                    r7 = r6 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x49c38;
                    pc=0x2f020;
                    run_2f000(); return;
                case 0x49c38:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49e00:
                    pc=0x49e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49e00() throws ExecutionException { /* 0x49e00 - 0x4a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49e00:
                    r2 = readPages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff];
                    r29 = r29 + -56;
                    r2 = r2 & 8192;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r5 + r0;
                    r22 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49f08;
                        continue;
                    }
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r23 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r21 = r0 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49efc;
                        continue;
                    }
                case 0x49e58:
                    r18 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r16 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    r18 = r18 >>> 2;
                    r17 = r0 + r0;
                    if(r18 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x49e88;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x49ee4;
                    continue;
                case 0x49e78:
                    r17 = r17 + 1;
                    r16 = r16 + 4;
                    if(r18 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x49ee0;
                        continue;
                    }
                case 0x49e88:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x49e9c;
                    pc=0x4c800;
                    run_4c800(); return;
                case 0x49e9c:
                    if(r2 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x49e78;
                        continue;
                    }
                    r2 = r0 + -1;
                case 0x49ea8:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r0;
                    writePages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff] = r0;
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49ee0:
                    r2 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                case 0x49ee4:
                    r18 = r18 << 2;
                    r2 = r2 - r18;
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r23 = r23 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49e58;
                        continue;
                    }
                case 0x49efc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49ea8;
                    continue;
                case 0x49f08:
                    /* Next insn is delay slot */ 
                    r31=0x49f10;
                    pc=0x3fc00;
                    run_3fc00(); return;
                case 0x49f10:
                    /* Next insn is delay slot */ 
                    pc=0x49ea8;
                    continue;
                case 0x4a000:
                    pc=0x4a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a000() throws ExecutionException { /* 0x4a000 - 0x4a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a000:
                    r3 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a018;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x4a018:
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a200:
                    pc=0x4a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a200() throws ExecutionException { /* 0x4a200 - 0x4a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a200:
                    r29 = r29 + -1248;
                    writePages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff] = r23;
                    writePages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff] = r20;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r18;
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r31;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r30;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r22;
                    writePages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff] = r21;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r19;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r17;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r23 = r5 + r0;
                    r20 = r6 + r0;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r7;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a254;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ad4c;
                        run_4ac00(); return;
                    }
                case 0x4a254:
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a288;
                        continue;
                    }
                    r4 = readPages[(r23+100)>>>12][((r23+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r23+100)>>>12][((r23+100)>>>2)&0x3ff] = r2;
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x4a288:
                    r4 = r2 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4abd4;
                        run_4aa00(); return;
                    }
                    r4 = readPages[(r23+16)>>>12][((r23+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4abd4;
                        run_4aa00(); return;
                    }
                    r2 = r2 & 26;
                    r4 = r0 + 10;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4ac04;
                        run_4ac00(); return;
                    }
                case 0x4a2b4:
                    r3 = r29 + 1080;
                    writePages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff] = r3;
                    r4 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r3 = r29 + 1079;
                    r21 = r29 + 16;
                    r10 = 5 << 16;
                    writePages[(r29+1164)>>>12][((r29+1164)>>>2)&0x3ff] = r3;
                    r3 = r4 - r3;
                    writePages[(r29+1192)>>>12][((r29+1192)>>>2)&0x3ff] = r3;
                    writePages[(r29+1144)>>>12][((r29+1144)>>>2)&0x3ff] = r21;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r0;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r0;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r0;
                    r22 = r10 + 28156;
                    r3 = r21 + r0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r18;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r23;
                    r16 = r20 + r0;
                case 0x4a300:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b328;
                        run_4b200(); return;
                    }
                    r4 = r0 + 37;
                    r17 = r16 + r0;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4a330;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4a398;
                    continue;
                case 0x4a328:
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4a344;
                        continue;
                    }
                case 0x4a330:
                    r17 = r17 + 1;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a328;
                        continue;
                    }
                case 0x4a344:
                    r19 = r17 - r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a398;
                        continue;
                    }
                    r2 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r4 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r19 + r4;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a3fc;
                        continue;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b240;
                        run_4b200(); return;
                    }
                    r5 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r5 = r5 + r19;
                    r3 = r21 + r0;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r5;
                case 0x4a398:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b3a0;
                        run_4b200(); return;
                    }
                    r2 = r17 + 1;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r0 + r0;
                    r30 = r0 + -1;
                    r17 = r0 + r0;
                    r23 = r0 + r0;
                    r7 = r0 + 42;
                case 0x4a3c4:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r16 = r2 + 1;
                case 0x4a3cc:
                    r2 = r4 + -32;
                    r5 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b17c;
                        run_4b000(); return;
                    }
                    r5 = 5 << 16;
                    r2 = r2 << 2;
                    r5 = r5 + 27784;
                    r2 = r5 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x4a3fc:
                    r3 = r3 + 8;
                case 0x4a400:
                    pc=0x4a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a400() throws ExecutionException { /* 0x4a400 - 0x4a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a400:
                    r5 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r5 = r5 + r19;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x4a398;
                    run_4a200(); return;
                case 0x4a418:
                    r23 = r23 | 16;
                case 0x4a41c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a3c4;
                    run_4a200(); return;
                case 0x4a428:
                    r23 = r23 | 16;
                case 0x4a42c:
                    r2 = r23 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a868;
                        run_4a800(); return;
                    }
                    r2 = r23 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a868;
                        run_4a800(); return;
                    }
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x4a484;
                    continue;
                case 0x4a460:
                    r23 = r23 | 16;
                case 0x4a464:
                    r2 = r23 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aee8;
                        run_4ae00(); return;
                    }
                case 0x4a470:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x4a484:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r30 + r0;
                    r5 = r0 + r0;
                case 0x4a490:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a4a0;
                        continue;
                    }
                    r6 = r0 + -129;
                    r23 = r23 & r6;
                case 0x4a4a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a950;
                        run_4a800(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a950;
                        run_4a800(); return;
                    }
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ad78;
                        run_4ac00(); return;
                    }
                case 0x4a4b8:
                    r18 = r29 + 1080;
                case 0x4a4bc:
                    r2 = r19 < r30 ? 1 : 0;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r19;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a4d0;
                        continue;
                    }
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r30;
                case 0x4a4d0:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a4e8;
                        continue;
                    }
                    r2 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r2;
                case 0x4a4e8:
                    r15 = r23 & 2;
                    if(r15 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a504;
                        continue;
                    }
                    r4 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r4 = r4 + 2;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r4;
                case 0x4a504:
                    r20 = r23 & 132;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a8c4;
                        run_4a800(); return;
                    }
                    r5 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r9 = r17 - r5;
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a8c4;
                        run_4a800(); return;
                    }
                    r2 = r9 < 17 ? 1 : 0;
                    r8 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b454;
                        run_4b400(); return;
                    }
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r16;
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r25 = r0 + 16;
                    writePages[(r29+1196)>>>12][((r29+1196)>>>2)&0x3ff] = r15;
                    r16 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a570;
                    continue;
                case 0x4a554:
                    r7 = r4 + 2;
                    r3 = r3 + 8;
                    r4 = r2 + r0;
                case 0x4a560:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a5b8;
                        continue;
                    }
                case 0x4a570:
                    r2 = r4 + 1;
                    r8 = r8 + 16;
                    r5 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r25;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r8;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a554;
                        continue;
                    }
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a888;
                        run_4a800(); return;
                    }
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    r4 = r0 + r0;
                    r7 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a570;
                        continue;
                    }
                case 0x4a5b8:
                    r9 = r16 + r0;
                    r15 = readPages[(r29+1196)>>>12][((r29+1196)>>>2)&0x3ff];
                    r16 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                case 0x4a5c4:
                    r2 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                    r5 = r9 + r8;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r7 < 8 ? 1 : 0;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ad5c;
                        run_4ac00(); return;
                    }
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r3 + 8;
                    r4 = r7 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a8e0;
                        run_4a800(); return;
                    }
                case 0x4a5fc:
                    if(r15 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a638;
                        run_4a600(); return;
                    }
                case 0x4a600:
                    pc=0x4a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a600() throws ExecutionException { /* 0x4a600 - 0x4a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a600:
                    r2 = r29 + 1156;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r5 = r5 + 2;
                    r2 = r4 < 8 ? 1 : 0;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ace0;
                        run_4ac00(); return;
                    }
                    r7 = r4 + r0;
                    r3 = r3 + 8;
                    r4 = r4 + 1;
                case 0x4a638:
                    r2 = r0 + 128;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4aabc;
                        run_4aa00(); return;
                    }
                case 0x4a644:
                    r20 = r30 - r19;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a70c;
                        continue;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b390;
                        run_4b200(); return;
                    }
                    r4 = 5 << 16;
                    r8 = r4 + 28140;
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r16;
                    r30 = r0 + 16;
                    r16 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a694;
                    continue;
                case 0x4a678:
                    r4 = r7 + 2;
                    r3 = r3 + 8;
                    r7 = r2 + r0;
                case 0x4a684:
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a6dc;
                        continue;
                    }
                case 0x4a694:
                    r2 = r7 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a678;
                        continue;
                    }
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a91c;
                        run_4a800(); return;
                    }
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a694;
                        continue;
                    }
                case 0x4a6dc:
                    r8 = r16 + r0;
                    r16 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                case 0x4a6e4:
                    r5 = r5 + r20;
                    r2 = r4 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r8;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aa80;
                        run_4aa00(); return;
                    }
                    r3 = r3 + 8;
                    r4 = r4 + 1;
                case 0x4a70c:
                    r14 = r19 + r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r14;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aaa4;
                        run_4aa00(); return;
                    }
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b214;
                        run_4b200(); return;
                    }
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r3 = r21 + r0;
                case 0x4a73c:
                    r12 = r23 & 4;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a80c;
                        run_4a800(); return;
                    }
                    r5 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r18 = r17 - r5;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a80c;
                        run_4a800(); return;
                    }
                    r2 = r18 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4a8;
                        run_4b400(); return;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r19 = r0 + 16;
                    r20 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r23 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4a7a0;
                    continue;
                case 0x4a784:
                    r5 = r4 + 2;
                    r3 = r3 + 8;
                    r4 = r2 + r0;
                case 0x4a790:
                    r18 = r18 + -16;
                    r2 = r18 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a7e8;
                        continue;
                    }
                case 0x4a7a0:
                    r2 = r4 + 1;
                    r14 = r14 + 16;
                    r5 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r14;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a784;
                        continue;
                    }
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aa4c;
                        run_4aa00(); return;
                    }
                    r18 = r18 + -16;
                    r2 = r18 < 17 ? 1 : 0;
                    r4 = r0 + r0;
                    r5 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a7a0;
                        continue;
                    }
                case 0x4a7e8:
                    r2 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                    r14 = r14 + r18;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r5;
                    r5 = r5 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r18;
                case 0x4a800:
                    pc=0x4a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a800() throws ExecutionException { /* 0x4a800 - 0x4aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a800:
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r14;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b11c;
                        run_4b000(); return;
                    }
                case 0x4a80c:
                    r19 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r2 = r19 < r17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a824;
                        continue;
                    }
                    r19 = r17 + r0;
                case 0x4a824:
                    r3 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = r3 + r19;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r3;
                    if(r14 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a858;
                        continue;
                    }
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x4a850;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x4a850:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a9f8;
                        continue;
                    }
                case 0x4a858:
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a300;
                    run_4a200(); return;
                case 0x4a868:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4a484;
                    run_4a400(); return;
                case 0x4a888:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r25;
                    /* Next insn is delay slot */ 
                    r31=0x4a8a0;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x4a8a0:
                    r25 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a9f8;
                        continue;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r8 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r7 = r4 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a560;
                    run_4a400(); return;
                case 0x4a8c4:
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                case 0x4a8d0:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a5fc;
                        run_4a400(); return;
                    }
                case 0x4a8e0:
                    r2 = r29 + 1158;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r5 = r5 + 1;
                    r2 = r4 < 8 ? 1 : 0;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4acc4;
                        run_4ac00(); return;
                    }
                    r7 = r4 + r0;
                    r3 = r3 + 8;
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4a5fc;
                    run_4a400(); return;
                case 0x4a91c:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x4a930;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x4a930:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a9f8;
                        continue;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a684;
                    run_4a600(); return;
                case 0x4a950:
                    r6 = r0 + 1;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4acfc;
                        run_4ac00(); return;
                    }
                    r6 = r0 + 2;
                    r18 = r29 + 1080;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4a9a4;
                        continue;
                    }
                    r6 = readPages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff];
                case 0x4a970:
                    r4 = r2 & 15;
                    r4 = r6 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r18 = r18 + -1;
                    r2 = r2 >>> 4;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a970;
                        continue;
                    }
                case 0x4a990:
                    r4 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r19 = r4 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x4a4bc;
                    run_4a400(); return;
                case 0x4a9a4:
                    r4 = r2 & 7;
                    r18 = r18 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a9a4;
                        continue;
                    }
                    r2 = r23 & 1;
                    r6 = r18 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a9e4;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4a990;
                        continue;
                    }
                    r18 = r18 + -1;
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4a9e4:
                    r2 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r19 = r2 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x4a4bc;
                    run_4a400(); return;
                case 0x4a9f8:
                    r23 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                case 0x4aa00:
                    pc=0x4aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4aa00() throws ExecutionException { /* 0x4aa00 - 0x4ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4aa00:
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aab0;
                        continue;
                    }
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                case 0x4aa18:
                    r31 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r30 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r23 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r22 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r21 = readPages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff];
                    r20 = readPages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff];
                    r19 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r18 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r17 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r16 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r29 = r29 + 1248;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4aa4c:
                    r4 = r20 + r0;
                    r5 = r23 + r0;
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x4aa60;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x4aa60:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aa00;
                        continue;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r14 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a790;
                    run_4a600(); return;
                case 0x4aa80:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b2f4;
                        run_4b200(); return;
                    }
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r19;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    r14 = r19 + r0;
                    r3 = r21 + r0;
                case 0x4aaa4:
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4a73c;
                    run_4a600(); return;
                case 0x4aab0:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4aa18;
                    continue;
                case 0x4aabc:
                    r2 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r20 = r17 - r2;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a644;
                        run_4a600(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4d4;
                        run_4b400(); return;
                    }
                    r4 = 5 << 16;
                    r8 = r4 + 28140;
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r16;
                    r9 = r0 + 16;
                    r16 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ab14;
                    continue;
                case 0x4aaf8:
                    r6 = r7 + 2;
                    r3 = r3 + 8;
                    r7 = r2 + r0;
                case 0x4ab04:
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ab5c;
                        continue;
                    }
                case 0x4ab14:
                    r2 = r7 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aaf8;
                        continue;
                    }
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ab98;
                        continue;
                    }
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    r7 = r0 + r0;
                    r6 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ab14;
                        continue;
                    }
                case 0x4ab5c:
                    r8 = r16 + r0;
                    r16 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                case 0x4ab64:
                    r5 = r5 + r20;
                    r2 = r6 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r8;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b2d8;
                        run_4b200(); return;
                    }
                    r3 = r3 + 8;
                    r4 = r6 + 1;
                    r7 = r6 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a644;
                    run_4a600(); return;
                case 0x4ab98:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x4abb0;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x4abb0:
                    r9 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a9f8;
                        run_4a800(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r6 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ab04;
                    continue;
                case 0x4abd4:
                    r4 = r18 + r0;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4abe4;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x4abe4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aab0;
                        continue;
                    }
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 10;
                    r2 = r3 & 65535;
                    r2 = r2 & 26;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4a2b4;
                        run_4a200(); return;
                    }
                case 0x4ac00:
                    pc=0x4ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ac00() throws ExecutionException { /* 0x4ac00 - 0x4ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ac00:
                case 0x4ac04:
                    addr=r23+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a2b4;
                        run_4a200(); return;
                    }
                    addr=r29+1054;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r23+28)>>>12][((r23+28)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r23+36)>>>12][((r23+36)>>>2)&0x3ff];
                    r3 = r3 & r4;
                    addr=r29+1052;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r23+100)>>>12][((r23+100)>>>2)&0x3ff];
                    r2 = r29 + 16;
                    r7 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    writePages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff] = r2;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r2;
                    r4 = r18 + r0;
                    r2 = r0 + 1024;
                    r5 = r29 + 1040;
                    r6 = r20 + r0;
                    writePages[(r29+1140)>>>12][((r29+1140)>>>2)&0x3ff] = r3;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r2;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r2;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ac70;
                    pc=0x4a200;
                    run_4a200(); return;
                case 0x4ac70:
                    r21 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ac94;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r29 + 1040;
                    /* Next insn is delay slot */ 
                    r31=0x4ac8c;
                    pc=0x20200;
                    run_20200(); return;
                case 0x4ac8c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b520;
                        run_4b400(); return;
                    }
                case 0x4ac94:
                    addr=r29+1052;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4acb8;
                        continue;
                    }
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4acb8:
                    r2 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4aa18;
                    run_4aa00(); return;
                case 0x4acc4:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b268;
                        run_4b200(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a5fc;
                    run_4a400(); return;
                case 0x4ace0:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b2a4;
                        run_4b200(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a638;
                    run_4a600(); return;
                case 0x4acfc:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b154;
                        run_4b000(); return;
                    }
                    r18 = r29 + 1080;
                    r4 = r0 + 10;
                case 0x4ad10:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x4ad1c;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x4ad1c:
                    r18 = r18 + -1;
                    r6 = hi;
                    r6 = r6 + 48;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ad10;
                        continue;
                    }
                    r2 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r19 = r2 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x4a4bc;
                    run_4a400(); return;
                case 0x4ad4c:
                    /* Next insn is delay slot */ 
                    r31=0x4ad54;
                    pc=0x21400;
                    run_21400(); return;
                case 0x4ad54:
                    /* Next insn is delay slot */ 
                    pc=0x4a254;
                    run_4a200(); return;
                case 0x4ad5c:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b1ac;
                        run_4b000(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a8d0;
                    run_4a800(); return;
                case 0x4ad78:
                    r2 = r23 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a4b8;
                        run_4a400(); return;
                    }
                    r2 = r0 + 48;
                    addr=r29+1079;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+1192)>>>12][((r29+1192)>>>2)&0x3ff];
                    r18 = r29 + 1079;
                    /* Next insn is delay slot */ 
                    pc=0x4a4bc;
                    run_4a400(); return;
                case 0x4ad9c:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b16c;
                        run_4b000(); return;
                    }
                    r17 = r0 - r17;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r2;
                case 0x4adbc:
                    r23 = r23 | 4;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a3c4;
                    run_4a200(); return;
                case 0x4adcc:
                    r6 = r0 + 43;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a3c4;
                    run_4a200(); return;
                case 0x4addc:
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b1e8;
                        run_4b000(); return;
                    }
                    r12 = r23 & 64;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b1e8;
                        run_4b000(); return;
                    }
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                case 0x4ae00:
                    pc=0x4ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ae00() throws ExecutionException { /* 0x4ae00 - 0x4b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ae00:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r4&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x4a300;
                    run_4a200(); return;
                case 0x4ae18:
                    r2 = 5 << 16;
                    r2 = r2 + 20964;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r2;
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4afc8;
                        continue;
                    }
                case 0x4ae34:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x4ae48:
                    r5 = r23 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b208;
                        run_4b200(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b208;
                        run_4b200(); return;
                    }
                    r5 = r0 + 48;
                    addr=r29+1157;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1156;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 | 2;
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x4a484;
                    run_4a400(); return;
                case 0x4ae78:
                    r23 = r23 | 64;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a3c4;
                    run_4a200(); return;
                case 0x4ae88:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r5 = r16 + 1;
                    if(r4 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4f4;
                        run_4b400(); return;
                    }
                    r2 = r4 + -48;
                    r8 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r30 = r0 + r0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aedc;
                        continue;
                    }
                case 0x4aeac:
                    r4 = r30 << 1;
                    r5 = r5 + 1;
                    r30 = r30 << 3;
                    r30 = r4 + r30;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r30 = r2 + r30;
                    r2 = r4 + -48;
                    r8 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aeac;
                        continue;
                    }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b380;
                        run_4b200(); return;
                    }
                case 0x4aedc:
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a3cc;
                    run_4a200(); return;
                case 0x4aee8:
                    r2 = r23 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a470;
                        run_4a400(); return;
                    }
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r4 = r4 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a484;
                    run_4a400(); return;
                case 0x4af14:
                    r23 = r23 | 128;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a3c4;
                    run_4a200(); return;
                case 0x4af24:
                    r17 = r0 + r0;
                    r2 = r4 + -48;
                case 0x4af2c:
                    r4 = r17 << 1;
                    r16 = r16 + 1;
                    r17 = r17 << 3;
                    r17 = r4 + r17;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r17 = r17 + r2;
                    r2 = r4 + -48;
                    r5 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4af2c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4a3cc;
                    run_4a200(); return;
                case 0x4af5c:
                    r23 = r23 | 16;
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b030;
                        run_4b000(); return;
                    }
                case 0x4af70:
                    r2 = r23 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b030;
                        run_4b000(); return;
                    }
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x4af90:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b334;
                        run_4b200(); return;
                    }
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r19 = r30 + r0;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4a490;
                    run_4a400(); return;
                case 0x4afac:
                    r2 = 5 << 16;
                    r2 = r2 + 20944;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r2;
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ae34;
                        continue;
                    }
                case 0x4afc8:
                    r2 = r23 & 64;
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b354;
                        run_4b200(); return;
                    }
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x4ae48;
                    continue;
                case 0x4afec:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    addr=r29+1040;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4b000:
                    pc=0x4b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b000() throws ExecutionException { /* 0x4b000 - 0x4b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b000:
                    r2 = r0 + 1;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r2;
                    r19 = r0 + 1;
                    r18 = r29 + 1040;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a4e8;
                    run_4a400(); return;
                case 0x4b020:
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4af70;
                        run_4ae00(); return;
                    }
                case 0x4b030:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x4af90;
                    run_4ae00(); return;
                case 0x4b04c:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a41c;
                        run_4a400(); return;
                    }
                    r6 = r0 + 32;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a3c4;
                    run_4a200(); return;
                case 0x4b064:
                    r23 = r23 | 1;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a3c4;
                    run_4a200(); return;
                case 0x4b074:
                    r2 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r18 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r20 = r2 + 4;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b468;
                        run_4b400(); return;
                    }
                    r4 = r18 + r0;
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b3f8;
                        run_4b200(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x4b0ac;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x4b0ac:
                    r3 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4bc;
                        run_4b400(); return;
                    }
                    r19 = r2 - r18;
                    r2 = r30 < r19 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b374;
                        run_4b200(); return;
                    }
                case 0x4b0c8:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a4bc;
                    run_4a400(); return;
                case 0x4b0dc:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    addr=r29+1156;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r0 + 120;
                    addr=r29+1157;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = 5 << 16;
                    r4 = r4 + 20964;
                    r5 = r5 + 4;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r4;
                    r23 = r23 | 2;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x4a484;
                    run_4a400(); return;
                case 0x4b11c:
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b3d0;
                        run_4b200(); return;
                    }
                    r19 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r2 = r19 < r17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b368;
                        run_4b200(); return;
                    }
                case 0x4b138:
                    r3 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r3 = r3 + r19;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r3;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a300;
                    run_4a200(); return;
                case 0x4b154:
                    r2 = r2 + 48;
                    addr=r29+1079;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+1192)>>>12][((r29+1192)>>>2)&0x3ff];
                    r18 = r29 + 1079;
                    /* Next insn is delay slot */ 
                    pc=0x4a4bc;
                    run_4a400(); return;
                case 0x4b16c:
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r2;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a3c4;
                    run_4a200(); return;
                case 0x4b17c:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b3a0;
                        run_4b200(); return;
                    }
                    r5 = r0 + 1;
                    addr=r29+1040;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r5;
                    r19 = r0 + 1;
                    r18 = r29 + 1040;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a4e8;
                    run_4a400(); return;
                case 0x4b1ac:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r15;
                    /* Next insn is delay slot */ 
                    r31=0x4b1c4;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x4b1c4:
                    r15 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a9f8;
                        run_4a800(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a8d0;
                    run_4a800(); return;
                case 0x4b1e8:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x4b200:
                    pc=0x4b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b200() throws ExecutionException { /* 0x4b200 - 0x4b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b200:
                    /* Next insn is delay slot */ 
                    pc=0x4a300;
                    run_4a200(); return;
                case 0x4b208:
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x4a484;
                    run_4a400(); return;
                case 0x4b214:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x4b228;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x4b228:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a9f8;
                        run_4a800(); return;
                    }
                    r14 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a73c;
                    run_4a600(); return;
                case 0x4b240:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x4b254;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x4b254:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a9f8;
                        run_4a800(); return;
                    }
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a400;
                    run_4a400(); return;
                case 0x4b268:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r15;
                    /* Next insn is delay slot */ 
                    r31=0x4b280;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x4b280:
                    r15 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a9f8;
                        run_4a800(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a5fc;
                    run_4a400(); return;
                case 0x4b2a4:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x4b2b8;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x4b2b8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a9f8;
                        run_4a800(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a638;
                    run_4a600(); return;
                case 0x4b2d8:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b420;
                        run_4b400(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a644;
                    run_4a600(); return;
                case 0x4b2f4:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x4b308;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x4b308:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a9f8;
                        run_4a800(); return;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a70c;
                    run_4a600(); return;
                case 0x4b328:
                    r17 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a398;
                    run_4a200(); return;
                case 0x4b334:
                    r4 = r0 + 45;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    r19 = r30 + r0;
                    r5 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4a490;
                    run_4a400(); return;
                case 0x4b354:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x4ae48;
                    run_4ae00(); return;
                case 0x4b368:
                    r19 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4b138;
                    run_4b000(); return;
                case 0x4b374:
                    r19 = r30 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4b0c8;
                    run_4b000(); return;
                case 0x4b380:
                    r30 = r0 + -1;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a3cc;
                    run_4a200(); return;
                case 0x4b390:
                    r2 = 5 << 16;
                    r8 = r2 + 28140;
                    /* Next insn is delay slot */ 
                    pc=0x4a6e4;
                    run_4a600(); return;
                case 0x4b3a0:
                    r2 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r18 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r23 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aa00;
                        run_4aa00(); return;
                    }
                    r4 = r18 + r0;
                    r5 = r23 + r0;
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x4b3c8;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x4b3c8:
                    /* Next insn is delay slot */ 
                    pc=0x4aa00;
                    run_4aa00(); return;
                case 0x4b3d0:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x4b3e4;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x4b3e4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a9f8;
                        run_4a800(); return;
                    }
                    r14 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4a80c;
                    run_4a800(); return;
                case 0x4b3f8:
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x4b404;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4b400:
                    pc=0x4b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b400() throws ExecutionException { /* 0x4b400 - 0x4b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b400:
                case 0x4b404:
                    r19 = r2 + r0;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    r3 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4a4bc;
                    run_4a400(); return;
                case 0x4b420:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x4b434;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x4b434:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a9f8;
                        run_4a800(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a644;
                    run_4a600(); return;
                case 0x4b454:
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r7 = r7 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4a5c4;
                    run_4a400(); return;
                case 0x4b468:
                    r2 = (r30&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r13 = r30 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b47c;
                        continue;
                    }
                    r13 = r0 + 6;
                case 0x4b47c:
                    r19 = r13 + r0;
                    r2 = r13 + r0;
                    if(r13 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4e8;
                        continue;
                    }
                case 0x4b48c:
                    r10 = 5 << 16;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r2;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r18 = r10 + 24776;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a4e8;
                    run_4a400(); return;
                case 0x4b4a8:
                    r5 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r5 = r5 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4a7e8;
                    run_4a600(); return;
                case 0x4b4bc:
                    r19 = r30 + r0;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a4bc;
                    run_4a400(); return;
                case 0x4b4d4:
                    r2 = 5 << 16;
                    r6 = r4 + r0;
                    r8 = r2 + 28140;
                    /* Next insn is delay slot */ 
                    pc=0x4ab64;
                    run_4aa00(); return;
                case 0x4b4e8:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4b48c;
                    continue;
                case 0x4b4f4:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r16 = r5 + r0;
                    r30 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b16c;
                        run_4b000(); return;
                    }
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r2;
                    r30 = r0 + -1;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a3c4;
                    run_4a200(); return;
                case 0x4b520:
                    r21 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4ac94;
                    run_4ac00(); return;
                case 0x4b600:
                    pc=0x4b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b600() throws ExecutionException { /* 0x4b600 - 0x4b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b600:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a200;
                    run_4a200(); return;
                case 0x4b800:
                    pc=0x4b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b800() throws ExecutionException { /* 0x4b800 - 0x4ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b800:
                    r29 = r29 + -136;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r17;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r6 + r0;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b8e4;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b89c;
                        continue;
                    }
                    r2 = r0 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x4b864;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x4b864:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b8d4;
                        continue;
                    }
                case 0x4b870:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b884;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4b884:
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r17 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r16 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4b89c:
                    r2 = r6 + -1;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x4b8c8;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x4b8c8:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b870;
                        continue;
                    }
                case 0x4b8d4:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4b870;
                    continue;
                case 0x4b8e4:
                    r2 = r0 + 139;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4b884;
                    continue;
                case 0x4ba00:
                    pc=0x4ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ba00() throws ExecutionException { /* 0x4ba00 - 0x4bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ba00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4ba30;
                    pc=0x4b800;
                    run_4b800(); return;
                case 0x4ba30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4bc00:
                    pc=0x4bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4bc00() throws ExecutionException { /* 0x4bc00 - 0x4be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4bc00:
                    r29 = r29 + -128;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r5 = r29 + 16;
                    r2 = r0 + -1;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r31;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x4bc3c;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x4bc3c:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r29 = r29 + 128;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4be00:
                    pc=0x4be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4be00() throws ExecutionException { /* 0x4be00 - 0x4c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4be00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4bc00;
                    run_4bc00(); return;
                case 0x4c000:
                    pc=0x4c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c000() throws ExecutionException { /* 0x4c000 - 0x4c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c000:
                    r29 = r29 + -88;
                    r5 = r29 + 16;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4c014;
                    pc=0x49a00;
                    run_49a00(); return;
                case 0x4c014:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c068;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 8192;
                    r3 = r3 & 61440;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4c054;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x4c038;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x4c038:
                    r3 = r0 + 25;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                case 0x4c044:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c054:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c068:
                    /* Next insn is delay slot */ 
                    r31=0x4c070;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x4c070:
                    r3 = r0 + 9;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4c044;
                    continue;
                case 0x4c200:
                    pc=0x4c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c200() throws ExecutionException { /* 0x4c200 - 0x4c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c200:
                    { long hilo = (long)(r5) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    r5 = lo;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x4c234;
                    pc=0x26200;
                    run_26200(); return;
                case 0x4c234:
                    r2 = 5 << 16;
                    r18 = readPages[(r2+30384)>>>12][((r2+30384)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r20 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4c250;
                    pc=0x25200;
                    run_25200(); return;
                case 0x4c250:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c37c;
                        continue;
                    }
                    r19 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r16 + -8;
                    r2 = r0 + -4;
                    r19 = r19 & r2;
                    if(r18 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4c34c;
                        continue;
                    }
                case 0x4c274:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4c280;
                    pc=0x26400;
                    run_26400(); return;
                case 0x4c280:
                    r6 = r19 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c308;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c2d4;
                        continue;
                    }
                    r2 = r16 + r0;
                case 0x4c2a0:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x4c2b0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c2d4:
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c340;
                        continue;
                    }
                    r2 = r0 + 36;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r0;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4c368;
                        continue;
                    }
                    r2 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4c2a0;
                    continue;
                case 0x4c308:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4c318;
                    pc=0x2f7ec;
                    run_2f600(); return;
                case 0x4c318:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c340:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4c2a0;
                    continue;
                case 0x4c34c:
                    r2 = r20 & r2;
                    r3 = ((r2 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c274;
                        continue;
                    }
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4c274;
                    continue;
                case 0x4c368:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    r2 = r16 + 24;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4c2a0;
                    continue;
                case 0x4c37c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4c388;
                    pc=0x26400;
                    run_26400(); return;
                case 0x4c388:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4c2b0;
                    continue;
                case 0x4c400:
                    pc=0x4c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c400() throws ExecutionException { /* 0x4c400 - 0x4c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c400:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c600:
                    pc=0x4c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c600() throws ExecutionException { /* 0x4c600 - 0x4c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c600:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c800:
                    pc=0x4c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c800() throws ExecutionException { /* 0x4c800 - 0x4ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c800:
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -56;
                    r3 = r2 & 8192;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c854;
                        continue;
                    }
                    r2 = r2 | 8192;
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+100)>>>12][((r6+100)>>>2)&0x3ff];
                    r2 = r2 | 8192;
                    writePages[(r6+100)>>>12][((r6+100)>>>2)&0x3ff] = r2;
                case 0x4c854:
                    /* Next insn is delay slot */ 
                    r31=0x4c85c;
                    pc=0x41000;
                    run_41000(); return;
                case 0x4c85c:
                    r3 = r0 + 1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4c9c4;
                        continue;
                    }
                case 0x4c868:
                    r4 = r19 + r0;
                    r5 = r29 + 16;
                    r6 = r18 + r0;
                    r7 = r16 + 92;
                    /* Next insn is delay slot */ 
                    r31=0x4c880;
                    pc=0x52000;
                    run_52000(); return;
                case 0x4c880:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4c958;
                        continue;
                    }
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c94c;
                        continue;
                    }
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x4c89c:
                    r17 = r0 + r0;
                    r21 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x4c8e4;
                    continue;
                case 0x4c8ac:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                case 0x4c8c8:
                    r17 = r17 + 1;
                    r3 = ((r17 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c94c;
                        continue;
                    }
                case 0x4c8d8:
                    r2 = r29 + 16;
                    r3 = r2 + r17;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x4c8e4:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c8ac;
                        continue;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r3 = r3 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c994;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x4c9ec;
                        continue;
                    }
                    r17 = r17 + 1;
                    r2 = r2 + 1;
                    r3 = ((r17 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c8d8;
                        continue;
                    }
                case 0x4c94c:
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4c96c;
                    continue;
                case 0x4c958:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                case 0x4c96c:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c994:
                    r4 = r19 + r0;
                    r5 = r5 & 255;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4c9a8;
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x4c9a8:
                    r2 = r2 + 1;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                case 0x4c9b0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c8c8;
                        continue;
                    }
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4c96c;
                    continue;
                case 0x4c9c4:
                    r2 = r18 + -1;
                    r2 = (r2&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c868;
                        continue;
                    }
                    r5 = r18 << 24;
                    r5 = r5 >> 24;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4c89c;
                    continue;
                case 0x4c9ec:
                    r4 = r19 + r0;
                    r5 = r0 + 10;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ca00;
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x4ca00:
                    pc=0x4ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ca00() throws ExecutionException { /* 0x4ca00 - 0x4cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ca00:
                    r2 = r2 + 1;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=0x4c9b0;
                    run_4c800(); return;
                case 0x4cc00:
                    pc=0x4cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4cc00() throws ExecutionException { /* 0x4cc00 - 0x4ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4cc00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r6 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cc5c;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cc44;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x4cc3c;
                    pc=0x21400;
                    run_21400(); return;
                case 0x4cc3c:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x4cc44:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x4c800;
                    run_4c800(); return;
                case 0x4cc5c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x4c800;
                    run_4c800(); return;
                case 0x4ce00:
                    pc=0x4ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ce00() throws ExecutionException { /* 0x4ce00 - 0x4d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ce00:
                    r2 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ce30;
                        continue;
                    }
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    r2 = r2 & 255;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ce30:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d000:
                    pc=0x4d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d000() throws ExecutionException { /* 0x4d000 - 0x4d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d000:
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r17 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r18 = readPages[(r28+-32592)>>>12][((r28+-32592)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d094;
                        continue;
                    }
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r5;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r6;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x4d03c;
                    pc=0x40e00;
                    run_40e00(); return;
                case 0x4d03c:
                    r5 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r7 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x4d05c;
                    return;
                case 0x4d05c:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4d078;
                        continue;
                    }
                    r2 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                case 0x4d078:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d094:
                    /* Next insn is delay slot */ 
                    r31=0x4d09c;
                    pc=0x40e00;
                    run_40e00(); return;
                case 0x4d09c:
                    r6 = 5 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    r6 = r6 + 17636;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x4d0c0;
                    return;
                case 0x4d0c0:
                    /* Next insn is delay slot */ 
                    pc=0x4d05c;
                    continue;
                case 0x4d200:
                    pc=0x4d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d200() throws ExecutionException { /* 0x4d200 - 0x4d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d200:
                    r29 = r29 + -56;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r16 = r5 + r0;
                    r17 = r7 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d2b0;
                        continue;
                    }
                    r21 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r19 = r4 + r0;
                    r18 = r6 + r0;
                    r20 = readPages[(r28+-32592)>>>12][((r28+-32592)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4d248;
                    pc=0x40e00;
                    run_40e00(); return;
                case 0x4d248:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r21 + r0;
                    r5 = r19 + r0;
                    r6 = r16 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r20;
                    r31=0x4d268;
                    return;
                case 0x4d268:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4d288;
                        continue;
                    }
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r3 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + -1;
                case 0x4d288:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d2b0:
                    r18 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32592)>>>12][((r28+-32592)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4d2c0;
                    pc=0x40e00;
                    run_40e00(); return;
                case 0x4d2c0:
                    r6 = 5 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    r6 = r6 + 17636;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x4d2e4;
                    return;
                case 0x4d2e4:
                    /* Next insn is delay slot */ 
                    pc=0x4d268;
                    continue;
                case 0x4d400:
                    pc=0x4d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d400() throws ExecutionException { /* 0x4d400 - 0x4d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d400:
                    r29 = r29 + -8;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d440;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d44c;
                        continue;
                    }
                case 0x4d414:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d45c;
                        continue;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                case 0x4d434:
                    r29 = r29 + 8;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d440:
                    r5 = r29 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d414;
                        continue;
                    }
                case 0x4d44c:
                    r2 = r0 + r0;
                    r29 = r29 + 8;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d45c:
                    r2 = r0 + -2;
                    /* Next insn is delay slot */ 
                    pc=0x4d434;
                    continue;
                case 0x4d600:
                    pc=0x4d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d600() throws ExecutionException { /* 0x4d600 - 0x4d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d600:
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r16 = readPages[(r28+-32592)>>>12][((r28+-32592)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x4d628;
                    pc=0x40e00;
                    run_40e00(); return;
                case 0x4d628:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r6 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x4d64c;
                    return;
                case 0x4d64c:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d800:
                    pc=0x4d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d800() throws ExecutionException { /* 0x4d800 - 0x4da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d800:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r2 = r0 + 94;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4d8e8;
                        continue;
                    }
                    r2 = r5 + 1;
                    r7 = r0 + r0;
                    r9 = r0 + r0;
                case 0x4d81c:
                    r3 = r0 + r0;
                    r6 = r0 + 256;
                case 0x4d824:
                    r5 = r4 + r3;
                    r3 = r3 + 1;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4d824;
                        continue;
                    }
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d890;
                        continue;
                    }
                    r5 = r0 + 1;
                    r5 = r5 - r9;
                    r10 = r0 + 45;
                    r9 = r0 + 93;
                case 0x4d850:
                    r3 = r4 + r8;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4d858:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r7 = r2 + 1;
                    if(r3 == r10) {
                        /* Next insn is delay slot */ 
                        pc=0x4d8a8;
                        continue;
                    }
                    if(r3 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x4d89c;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d888;
                        continue;
                    }
                    r8 = r3 + r0;
                    r2 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d850;
                    continue;
                case 0x4d888:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d890:
                    r2 = r2 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d89c:
                    r2 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d8a8:
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r6 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x4d900;
                        continue;
                    }
                    r3 = r6 < r8 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d900;
                        continue;
                    }
                    r2 = r2 + 2;
                case 0x4d8c8:
                    r8 = r8 + 1;
                    r3 = r4 + r8;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r8 < r6 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d8c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4d858;
                    continue;
                case 0x4d8e8:
                    r2 = r5 + 2;
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r7 = r0 + 1;
                    r9 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4d81c;
                    continue;
                case 0x4d900:
                    r8 = r0 + 45;
                    r2 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d850;
                    continue;
                case 0x4da00:
                    pc=0x4da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4da00() throws ExecutionException { /* 0x4da00 - 0x4dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4da00:
                    f0 = readPages[(r28+-32588)>>>12][((r28+-32588)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4dc00:
                    pc=0x4dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4dc00() throws ExecutionException { /* 0x4dc00 - 0x4de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4dc00:
                    r29 = r29 + -216;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r22;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r18;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r16;
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r31;
                    writePages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff] = r30;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r23;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r21;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r20;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r19;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r17;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = f30;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = f31;
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = f28;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = f29;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = f26;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = f27;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = f24;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = f25;
                    writePages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff] = f22;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = f23;
                    writePages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff] = f20;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = f21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    r16 = r5 + r0;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r18 = r4 + r0;
                    r2 = r21 & 255;
                    r4 = 5 << 16;
                    r3 = (r2&0xffffffffL) < (46&0xffffffffL) ? 1 : 0;
                    r22 = r5 + r0;
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r6;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                    r4 = r4 + 28188;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e000;
                        run_4e000(); return;
                    }
                case 0x4dc94:
                    r2 = r2 << 2;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x4dcac:
                    r7 = r0 + r0;
                    r3 = r0 + r0;
                    r9 = r0 + 1;
                case 0x4dcb8:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e160;
                        run_4e000(); return;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e160;
                        run_4e000(); return;
                    }
                case 0x4dcc8:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                case 0x4dcd8:
                    r3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dcf4;
                        continue;
                    }
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x4dcf4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e074;
                        run_4e000(); return;
                    }
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                case 0x4dd0c:
                    f30 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    f28 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    f26 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    f24 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    f22 = readPages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff];
                    f20 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r31 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    f0 = r3;
                    r30 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r23 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r22 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r21 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r19 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r18 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r17 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r16 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    f31 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    f29 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    f27 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    f25 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    f23 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    f21 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    f1 = r2;
                    r29 = r29 + 216;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4dd78:
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                case 0x4dd7c:
                    r2 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dcc8;
                        continue;
                    }
                    r16 = r2 + r0;
                    r2 = r0 + 48;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4e010;
                        run_4e000(); return;
                    }
                case 0x4dda4:
                    r19 = r0 + r0;
                case 0x4dda8:
                    r2 = r21 + -48;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f294;
                        run_4f200(); return;
                    }
                    r2 = r16 + 1;
                    r30 = r0 + r0;
                    r23 = r0 + r0;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4de10;
                    run_4de00(); return;
                case 0x4ddd4:
                    r3 = r23 << 1;
                    r23 = r23 << 3;
                    r23 = r3 + r23;
                    r21 = r23 + r21;
                    r23 = r21 + -48;
                case 0x4dde8:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r17 = r2 + r0;
                    r3 = r21 + -48;
                    r3 = r3 & 255;
                    r3 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                case 0x4de00:
                    pc=0x4de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4de00() throws ExecutionException { /* 0x4de00 - 0x4e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4de00:
                    r20 = r20 + 1;
                    r2 = r2 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4de64;
                        continue;
                    }
                case 0x4de10:
                    r3 = r20 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dde8;
                        run_4dc00(); return;
                    }
                    r3 = r20 < 9 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ddd4;
                        run_4dc00(); return;
                    }
                    r3 = r30 << 1;
                    r30 = r30 << 3;
                    r30 = r3 + r30;
                    r21 = r30 + r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r30 = r21 + -48;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r17 = r2 + r0;
                    r3 = r21 + -48;
                    r3 = r3 & 255;
                    r3 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r20 = r20 + 1;
                    r2 = r2 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4de10;
                        continue;
                    }
                case 0x4de64:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4de70;
                    pc=0x41600;
                    run_41600(); return;
                case 0x4de70:
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x4de84;
                    pc=0x41600;
                    run_41600(); return;
                case 0x4de84:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4de90;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4de90:
                    r5 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4dea4;
                    pc=0x45e00;
                    run_45e00(); return;
                case 0x4dea4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e2e4;
                        run_4e200(); return;
                    }
                    r7 = r20 + r0;
                    r5 = r0 + r0;
                    r3 = r0 + r0;
                    r9 = r0 + r0;
                case 0x4debc:
                    r4 = r0 + -33;
                    r4 = r21 & r4;
                    r2 = r0 + 69;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4e158;
                        run_4e000(); return;
                    }
                case 0x4ded0:
                    r4 = r0 + r0;
                case 0x4ded4:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e0bc;
                        run_4e000(); return;
                    }
                case 0x4dedc:
                    r3 = r4 - r3;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r3;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4def0;
                        continue;
                    }
                    r20 = r7 + r0;
                case 0x4def0:
                    r3 = r7 < 17 ? 1 : 0;
                    r2 = r7 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4df04;
                        continue;
                    }
                    r2 = r0 + 16;
                case 0x4df04:
                    f2 = r23;
                    { long l = Double.doubleToLongBits(((double)f2)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eed8;
                        run_4ee00(); return;
                    }
                case 0x4df18:
                    r3 = r2 < 10 ? 1 : 0;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4df6c;
                        continue;
                    }
                    r4 = r2 + -9;
                    r3 = 5 << 16;
                    r4 = r4 << 3;
                    r3 = r3 + 26040;
                    r3 = r4 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = r30;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f2ac;
                        run_4f200(); return;
                    }
                case 0x4df60:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f4;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f5;
                case 0x4df6c:
                    r3 = r7 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e354;
                        run_4e200(); return;
                    }
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e2c4;
                        run_4e200(); return;
                    }
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f45c;
                        run_4f400(); return;
                    }
                    r3 = r3 < 23 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f2c8;
                        run_4f200(); return;
                    }
                    r4 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r2 = 5 << 16;
                    r3 = r4 << 3;
                    r2 = r2 + 26040;
                    r2 = r3 + r2;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x4dcd8;
                    run_4dc00(); return;
                case 0x4dfe0:
                    r16 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r2 = r21 & 255;
                    r3 = (r2&0xffffffffL) < (46&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dc94;
                        run_4dc00(); return;
                    }
                case 0x4e000:
                    pc=0x4e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e000() throws ExecutionException { /* 0x4e000 - 0x4e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e000:
                    r2 = r0 + 48;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4dda4;
                        run_4dc00(); return;
                    }
                case 0x4e010:
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 88;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee68;
                        run_4ee00(); return;
                    }
                    r3 = r0 + 120;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee68;
                        run_4ee00(); return;
                    }
                    r2 = r16 + 1;
                    r3 = r0 + 48;
                case 0x4e034:
                    r16 = r2 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r2 = r2 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    if(r21 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4e034;
                        continue;
                    }
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e28c;
                        run_4e200(); return;
                    }
                    r19 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4dda8;
                    run_4dc00(); return;
                case 0x4e064:
                    r3 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4dd7c;
                    run_4dc00(); return;
                case 0x4e074:
                    r5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r4 = 32768 << 16;
                    r2 = r5 ^ r4;
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4dd0c;
                    run_4dc00(); return;
                case 0x4e08c:
                    r3 = r0 + r0;
                case 0x4e090:
                    r2 = r21 + -49;
                    r2 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee08;
                        run_4ee00(); return;
                    }
                    r4 = r0 + -33;
                    r4 = r21 & r4;
                    r2 = r0 + 69;
                    r5 = r3 + r0;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4dcac;
                        run_4dc00(); return;
                    }
                    r9 = r0 + 1;
                case 0x4e0bc:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e28c;
                        run_4e200(); return;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e28c;
                        run_4e200(); return;
                    }
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dcc8;
                        run_4dc00(); return;
                    }
                    r2 = r0 + 78;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4e104;
                        continue;
                    }
                    r2 = r21 < 79 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f518;
                        run_4f400(); return;
                    }
                    r2 = r0 + 105;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4f524;
                        run_4f400(); return;
                    }
                    r2 = r0 + 110;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4dcc8;
                        run_4dc00(); return;
                    }
                case 0x4e104:
                    r3 = 5 << 16;
                    r4 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r3 = r3 + 28184;
                case 0x4e110:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f68c;
                        run_4f600(); return;
                    }
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r6 = r2 + -65;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e148;
                        continue;
                    }
                    r2 = r2 + 32;
                case 0x4e148:
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4e110;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4dcc8;
                    run_4dc00(); return;
                case 0x4e158:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dcb8;
                        run_4dc00(); return;
                    }
                case 0x4e160:
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r22 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r22+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r2 = r0 + 43;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4eca8;
                        run_4ec00(); return;
                    }
                    r2 = r0 + 45;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec9c;
                        run_4ec00(); return;
                    }
                    r10 = r0 + 1;
                case 0x4e190:
                    r2 = r22 + 2;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r22+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                case 0x4e1a0:
                    r2 = r21 + -48;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ebc8;
                        run_4ea00(); return;
                    }
                    r2 = r0 + 48;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4e1dc;
                        continue;
                    }
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    r2 = r2 + 1;
                case 0x4e1c8:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r2 = r2 + 1;
                    if(r21 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4e1c8;
                        continue;
                    }
                case 0x4e1dc:
                    r2 = r21 + -49;
                    r2 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ded0;
                        run_4de00(); return;
                    }
                    r11 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r21 + -48;
                    r8 = r11 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r8;
                    addr=r11+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                case 0x4e200:
                    pc=0x4e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e200() throws ExecutionException { /* 0x4e200 - 0x4e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e200:
                    r2 = r21 + -48;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e254;
                        continue;
                    }
                    r2 = r11 + 2;
                case 0x4e21c:
                    r6 = r4 << 1;
                    r4 = r4 << 3;
                    r4 = r6 + r4;
                    r21 = r4 + r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r4 = r21 + -48;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r8 = r2 + r0;
                    r6 = r21 + -48;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r2 = r2 + 1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e21c;
                        continue;
                    }
                case 0x4e254:
                    r2 = r8 - r11;
                    r2 = r2 < 9 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee5c;
                        run_4ee00(); return;
                    }
                    r2 = r4 < 20000 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee5c;
                        run_4ee00(); return;
                    }
                case 0x4e270:
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ded4;
                        run_4de00(); return;
                    }
                    r4 = r0 - r4;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dedc;
                        run_4de00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4e0bc;
                    run_4e000(); return;
                case 0x4e28c:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4dcd8;
                    run_4dc00(); return;
                case 0x4e29c:
                    r4 = 32752 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r4;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                case 0x4e2a8:
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e2c4;
                        continue;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r2 = r2 | r3;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                case 0x4e2c4:
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4dcd8;
                    run_4dc00(); return;
                case 0x4e2e4:
                    r4 = r18 + r0;
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4e2f4;
                    pc=0x41600;
                    run_41600(); return;
                case 0x4e2f4:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4e300;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4e300:
                    r2 = r17 + r2;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ebe0;
                        run_4ea00(); return;
                    }
                    r3 = r0 + 48;
                    if(r21 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4e08c;
                        run_4e000(); return;
                    }
                    r3 = r0 + r0;
                    r5 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x4e334;
                    continue;
                case 0x4e330:
                    r2 = r4 + r0;
                case 0x4e334:
                    r4 = r2 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r3 = r3 + 1;
                    if(r21 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4e330;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4e090;
                    run_4e000(); return;
                case 0x4e354:
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r2 = r7 - r2;
                    r2 = r3 + r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f110;
                        run_4f000(); return;
                    }
                    r3 = r2 & 15;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e3a4;
                        continue;
                    }
                    r4 = 5 << 16;
                    r3 = r3 << 3;
                    r4 = r4 + 26040;
                    r3 = r3 + r4;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                case 0x4e3a4:
                    r3 = r0 + -16;
                    r2 = r2 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ecfc;
                        run_4ec00(); return;
                    }
                case 0x4e3b4:
                    f4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    f5 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f4;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f5;
                case 0x4e3cc:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r23;
                    r5 = r16 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e3e4;
                    pc=0x42200;
                    run_42200(); return;
                case 0x4e3e4:
                    r3 = r2 + 12;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r23 = r2 + r0;
                    f24 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    r2 = r0 - r3;
                    r3 = r3 >> 31;
                case 0x4e400:
                    pc=0x4e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e400() throws ExecutionException { /* 0x4e400 - 0x4e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e400:
                    r16 = r3 & r2;
                    f20 = readPages[(r28+-32548)>>>12][((r28+-32548)>>>2)&0x3ff];
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    f22 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    f25 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    r3 = r0 < r3 ? 1 : 0;
                    f21 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    f23 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r3;
                    f26 = f24;
                    f27 = f25;
                case 0x4e428:
                    r5 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e438;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x4e438:
                    r6 = readPages[(r23+16)>>>12][((r23+16)>>>2)&0x3ff];
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r6 = r6 << 2;
                    r21 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e458;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x4e458:
                    r5 = r29 + 24;
                    r7 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r4 = r29 + 32;
                    r6 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e47c;
                    pc=0x43a00;
                    run_43a00(); return;
                case 0x4e47c:
                    r4 = r18 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4e490;
                    pc=0x42800;
                    run_42800(); return;
                case 0x4e490:
                    r3 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r19 = r2 + r0;
                    r7 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e4a8;
                        continue;
                    }
                    r7 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                case 0x4e4a8:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e920;
                        run_4e800(); return;
                    }
                    r20 = r16 + r2;
                    r3 = r7 + r0;
                case 0x4e4c0:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 - r22;
                    r5 = r2 + r4;
                    r5 = r5 < -1021 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e81c;
                        run_4e800(); return;
                    }
                    r2 = r2 + 1075;
                case 0x4e4dc:
                    r30 = r20 + r2;
                    r4 = r20 < r30 ? 1 : 0;
                    r2 = r3 + r2;
                    r17 = r2 + r22;
                    r2 = r30 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e4fc;
                        continue;
                    }
                    r2 = r20 + r0;
                case 0x4e4fc:
                    r4 = r17 < r2 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e50c;
                        continue;
                    }
                    r2 = r17 + r0;
                case 0x4e50c:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e520;
                        continue;
                    }
                    r30 = r30 - r2;
                    r17 = r17 - r2;
                    r20 = r20 - r2;
                case 0x4e520:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e578;
                        continue;
                    }
                    r5 = r19 + r0;
                    r4 = r18 + r0;
                    r6 = r16 + r0;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x4e540;
                    pc=0x42e00;
                    run_42e00(); return;
                case 0x4e540:
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e558;
                    pc=0x42a00;
                    run_42a00(); return;
                case 0x4e558:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4e56c;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x4e56c:
                    r2 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r7 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                case 0x4e578:
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e5a0;
                        continue;
                    }
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x4e598;
                    pc=0x43000;
                    run_43000(); return;
                case 0x4e598:
                    r7 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                case 0x4e5a0:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e5c0;
                        continue;
                    }
                    r5 = r21 + r0;
                    r4 = r18 + r0;
                    r6 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e5bc;
                    pc=0x42e00;
                    run_42e00(); return;
                case 0x4e5bc:
                    r21 = r2 + r0;
                case 0x4e5c0:
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e5e0;
                        continue;
                    }
                    r5 = r21 + r0;
                    r4 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e5dc;
                    pc=0x43000;
                    run_43000(); return;
                case 0x4e5dc:
                    r21 = r2 + r0;
                case 0x4e5e0:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e600;
                        run_4e600(); return;
                    }
                    r5 = r19 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e5fc;
                    pc=0x43000;
                    run_43000(); return;
                case 0x4e5fc:
                    r19 = r2 + r0;
                case 0x4e600:
                    pc=0x4e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e600() throws ExecutionException { /* 0x4e600 - 0x4e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e600:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e614;
                    pc=0x43400;
                    run_43400(); return;
                case 0x4e614:
                    r30 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                    r5 = r19 + r0;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e630;
                    pc=0x43200;
                    run_43200(); return;
                case 0x4e630:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eef4;
                        run_4ee00(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4efe8;
                        run_4ee00(); return;
                    }
                    r4 = r20 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e650;
                    pc=0x43c00;
                    run_43c00(); return;
                case 0x4e650:
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4e82c;
                        run_4e800(); return;
                    }
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e930;
                        run_4e800(); return;
                    }
                    r3 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f26;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f27;
                case 0x4e67c:
                    r5 = 32752 << 16;
                    r17 = r6 & r5;
                    r7 = 32736 << 16;
                    if(r17 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x4e878;
                        run_4e800(); return;
                    }
                case 0x4e690:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e778;
                        continue;
                    }
                    r5 = 1696 << 16;
                    r5 = r5 + 1;
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e778;
                        continue;
                    }
                    f0 = readPages[(r28+-32532)>>>12][((r28+-32532)>>>2)&0x3ff];
                    f2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32536)>>>12][((r28+-32536)>>>2)&0x3ff];
                    f3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<=(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4e76c;
                        continue;
                    }
                    f0 = readPages[(r28+-32524)>>>12][((r28+-32524)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32528)>>>12][((r28+-32528)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb58;
                        run_4ea00(); return;
                    }
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    r2 = f0;
                case 0x4e720:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb38;
                        run_4ea00(); return;
                    }
                    f4 = r2;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee38;
                        run_4ee00(); return;
                    }
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f3;
                case 0x4e744:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eba8;
                        run_4ea00(); return;
                    }
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r2;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r4;
                case 0x4e764:
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                case 0x4e76c:
                    r5 = 1712 << 16;
                    r5 = r2 + r5;
                    r2 = r5 - r17;
                case 0x4e778:
                    f12 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f28 = r3;
                    f13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f29 = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4e790;
                    pc=0x43600;
                    run_43600(); return;
                case 0x4e790:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f29&0xffffffffL) << 32) | (f28&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                case 0x4e7bc:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e7d4;
                        continue;
                    }
                    r3 = 32752 << 16;
                    r3 = r2 & r3;
                    if(r17 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4e9f4;
                        run_4e800(); return;
                    }
                case 0x4e7d4:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e7e4;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x4e7e4:
                    r4 = r18 + r0;
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e7f4;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x4e7f4:
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e804;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x4e800:
                    pc=0x4e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e800() throws ExecutionException { /* 0x4e800 - 0x4ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e800:
                case 0x4e804:
                    r4 = r18 + r0;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e814;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x4e814:
                    /* Next insn is delay slot */ 
                    pc=0x4e428;
                    run_4e400(); return;
                case 0x4e81c:
                    r2 = r0 + 54;
                    r2 = r2 - r4;
                    /* Next insn is delay slot */ 
                    pc=0x4e4dc;
                    run_4e400(); return;
                case 0x4e82c:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f23&0xffffffffL) << 32) | (f22&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f3;
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e9b8;
                        continue;
                    }
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r2;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r4;
                case 0x4e858:
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r5 = 32752 << 16;
                    r17 = r6 & r5;
                    r7 = 32736 << 16;
                    r3 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    if(r17 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x4e690;
                        run_4e600(); return;
                    }
                case 0x4e878:
                    r7 = 64688 << 16;
                    r7 = r6 + r7;
                    f28 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r7;
                    f30 = r3;
                    f29 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f31 = r2;
                    f12 = f28;
                    f13 = f29;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r5;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = f2;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    r31=0x4e8b4;
                    pc=0x43600;
                    run_43600(); return;
                case 0x4e8b4:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f31&0xffffffffL) << 32) | (f30&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r5 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f29&0xffffffffL) << 32) | (f28&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f5;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f4;
                    r3 = r5 & r2;
                    r2 = 31904 << 16;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb0c;
                        run_4ea00(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r5 = r5 + -1;
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4f0b4;
                        run_4f000(); return;
                    }
                case 0x4e8f0:
                    r5 = r0 + -1;
                    r2 = 32751 << 16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    r2 = r2 | 65535;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4e7d4;
                    run_4e600(); return;
                case 0x4e920:
                    r3 = r7 - r2;
                    r20 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e4c0;
                    run_4e400(); return;
                case 0x4e930:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eae4;
                        run_4ea00(); return;
                    }
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r2 = r2 & r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e9d8;
                        continue;
                    }
                    f2 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4f26c;
                        run_4f200(); return;
                    }
                    f4 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    f5 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f5;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f4;
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r4 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r2;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r4;
                case 0x4e9a8:
                    r3 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r2 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4e67c;
                    run_4e600(); return;
                case 0x4e9b8:
                    f0 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f1 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = f0;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4e858;
                    continue;
                case 0x4e9d8:
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                case 0x4e9dc:
                    r3 = readPages[(r28+-32540)>>>12][((r28+-32540)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32544)>>>12][((r28+-32544)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f24;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f25;
                    /* Next insn is delay slot */ 
                    pc=0x4e67c;
                    run_4e600(); return;
                case 0x4e9f4:
                    f2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                case 0x4ea00:
                    pc=0x4ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ea00() throws ExecutionException { /* 0x4ea00 - 0x4ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ea00:
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    { long l = Double.doubleToLongBits(((double)f0)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea4c;
                        continue;
                    }
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ecb4;
                        run_4ec00(); return;
                    }
                case 0x4ea4c:
                    f0 = readPages[(r28+-32516)>>>12][((r28+-32516)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32520)>>>12][((r28+-32520)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea8c;
                        continue;
                    }
                    f0 = readPages[(r28+-32508)>>>12][((r28+-32508)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32512)>>>12][((r28+-32512)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4e7d4;
                        run_4e600(); return;
                    }
                case 0x4ea8c:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ea9c;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x4ea9c:
                    r4 = r18 + r0;
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4eaac;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x4eaac:
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4eabc;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x4eabc:
                    r4 = r18 + r0;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4eacc;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x4eacc:
                    r4 = r18 + r0;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4eadc;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x4eadc:
                    /* Next insn is delay slot */ 
                    pc=0x4dcd8;
                    run_4dc00(); return;
                case 0x4eae4:
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4e9d8;
                        run_4e800(); return;
                    }
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4efd0;
                        run_4ee00(); return;
                    }
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e9dc;
                    run_4e800(); return;
                case 0x4eb0c:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 848 << 16;
                    r2 = r2 + r3;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4e7bc;
                    run_4e600(); return;
                case 0x4eb38:
                    f0 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4e744;
                    run_4e600(); return;
                case 0x4eb58:
                    f2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r3 = 32768 << 16;
                    f3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f2 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f2 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f2 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f2 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    r2 = f2;
                    r2 = r2 | r3;
                    /* Next insn is delay slot */ 
                    pc=0x4e720;
                    run_4e600(); return;
                case 0x4eba8:
                    f0 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f1 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = f0;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4e764;
                    run_4e600(); return;
                case 0x4ebc8:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    r4 = r0 + r0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dedc;
                        run_4de00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4e0bc;
                    run_4e000(); return;
                case 0x4ebe0:
                    r7 = r20 + r0;
                    r5 = r0 + r0;
                    r3 = r0 + r0;
                case 0x4ebec:
                    r2 = r21 + -48;
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ecf0;
                        run_4ec00(); return;
                    }
                    r5 = r5 + 1;
                case 0x4ec00:
                    pc=0x4ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ec00() throws ExecutionException { /* 0x4ec00 - 0x4ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ec00:
                    r9 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee24;
                        run_4ee00(); return;
                    }
                    r2 = r0 + 1;
                    r4 = r5 + r0;
                    r6 = r7 < 17 ? 1 : 0;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec60;
                        continue;
                    }
                    r2 = r7 + 1;
                    r8 = r5 + r7;
                    r6 = r7 < 17 ? 1 : 0;
                case 0x4ec30:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec50;
                        continue;
                    }
                    r4 = r2 < 10 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eec4;
                        run_4ee00(); return;
                    }
                    r4 = r23 << 1;
                    r23 = r23 << 3;
                    r23 = r4 + r23;
                case 0x4ec50:
                    r2 = r2 + 1;
                    r4 = r5 + r0;
                    if(r2 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec30;
                        continue;
                    }
                case 0x4ec60:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f50c;
                        run_4f400(); return;
                    }
                case 0x4ec68:
                    r2 = r7 + r5;
                    r2 = r2 < 10 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f674;
                        run_4f600(); return;
                    }
                    r2 = r23 << 1;
                    r23 = r23 << 3;
                    r23 = r2 + r23;
                    r23 = r23 + r21;
                case 0x4ec88:
                    r3 = r3 + r4;
                    r7 = r7 + r4;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ee24;
                    run_4ee00(); return;
                case 0x4ec9c:
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e1a0;
                    run_4e000(); return;
                case 0x4eca8:
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e190;
                    run_4e000(); return;
                case 0x4ecb4:
                    r3 = 15 << 16;
                    r3 = r3 | 65535;
                    r2 = r2 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea4c;
                        run_4ea00(); return;
                    }
                    f0 = readPages[(r28+-32500)>>>12][((r28+-32500)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32504)>>>12][((r28+-32504)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4e7d4;
                        run_4e600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4ea8c;
                    run_4ea00(); return;
                case 0x4ecf0:
                    r9 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4debc;
                    run_4de00(); return;
                case 0x4ecfc:
                    r3 = r2 < 309 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f0f4;
                        run_4f000(); return;
                    }
                    r2 = r2 >> 4;
                    r3 = r2 < 2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f708;
                        run_4f600(); return;
                    }
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r6 = 5 << 16;
                    r6 = r6 + 26000;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r6 + r0;
                    r4 = r0 + r0;
                case 0x4ed30:
                    r5 = r2 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ed50;
                        continue;
                    }
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x4ed50:
                    r2 = r2 >> 1;
                    r5 = r2 < 2 ? 1 : 0;
                    r4 = r4 + 1;
                    r3 = r3 + 8;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ed30;
                        continue;
                    }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                case 0x4ed70:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r4 = r4 << 3;
                    r6 = r6 + r4;
                    r2 = 64688 << 16;
                    r2 = r2 + r3;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f0 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f1 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r2 = 32752 << 16;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r4 = 31904 << 16;
                    r4 = r4 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                    r5 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                    r3 = r2 & r5;
                    r4 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f0f4;
                        run_4f000(); return;
                    }
                    r4 = 31888 << 16;
                    r4 = r4 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f578;
                        run_4f400(); return;
                    }
                    r2 = r2 + -1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                case 0x4ee00:
                    pc=0x4ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ee00() throws ExecutionException { /* 0x4ee00 - 0x4f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ee00:
                    /* Next insn is delay slot */ 
                    pc=0x4e3cc;
                    run_4e200(); return;
                case 0x4ee08:
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = r21 + -48;
                    r9 = r16 + r0;
                    r7 = r0 + r0;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f370;
                        run_4f200(); return;
                    }
                    r5 = r0 + 1;
                case 0x4ee24:
                    r2 = r9 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x4ebec;
                    run_4ea00(); return;
                case 0x4ee38:
                    f0 = readPages[(r28+-32556)>>>12][((r28+-32556)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32560)>>>12][((r28+-32560)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x4e744;
                    run_4e600(); return;
                case 0x4ee5c:
                    r4 = r0 + 19999;
                    /* Next insn is delay slot */ 
                    pc=0x4e270;
                    run_4e200(); return;
                case 0x4ee68:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r2 = r29 + 36;
                    r19 = 5 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r18 + r0;
                    r5 = r29 + 40;
                    r6 = r19 + 31548;
                    r7 = r29 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x4ee94;
                    pc=0x52c00;
                    run_52c00(); return;
                case 0x4ee94:
                    r17 = r2 & 7;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e28c;
                        run_4e200(); return;
                    }
                    r3 = r0 + 6;
                    if(r17 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4f380;
                        run_4f200(); return;
                    }
                    r16 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4dcd8;
                    run_4dc00(); return;
                case 0x4eec4:
                    r4 = r30 << 1;
                    r30 = r30 << 3;
                    r30 = r4 + r30;
                    /* Next insn is delay slot */ 
                    pc=0x4ec50;
                    run_4ec00(); return;
                case 0x4eed8:
                    f2 = readPages[(r28+-32556)>>>12][((r28+-32556)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32560)>>>12][((r28+-32560)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x4df18;
                    run_4de00(); return;
                case 0x4eef4:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f04c;
                        run_4f000(); return;
                    }
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f04c;
                        run_4f000(); return;
                    }
                    r16 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r2 = r2 & r16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f04c;
                        run_4f000(); return;
                    }
                    r3 = 32752 << 16;
                    r2 = 1712 << 16;
                    r3 = r3 & r16;
                    r2 = r2 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f04c;
                        run_4f000(); return;
                    }
                    r2 = readPages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ef64;
                        continue;
                    }
                    r2 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f04c;
                        run_4f000(); return;
                    }
                case 0x4ef64:
                    r5 = r20 + r0;
                    r4 = r18 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x4ef78;
                    pc=0x43000;
                    run_43000(); return;
                case 0x4ef78:
                    r4 = r2 + r0;
                    r5 = r19 + r0;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ef8c;
                    pc=0x43200;
                    run_43200(); return;
                case 0x4ef8c:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f04c;
                        run_4f000(); return;
                    }
                    r2 = r16 + r0;
                case 0x4ef98:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f6b8;
                        run_4f600(); return;
                    }
                    r3 = 32752 << 16;
                    r4 = 1712 << 16;
                    r3 = r2 & r3;
                    r4 = r4 + 1;
                    r4 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f6b8;
                        run_4f600(); return;
                    }
                    r2 = 880 << 16;
                    r2 = r2 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f054;
                        run_4f000(); return;
                    }
                case 0x4efd0:
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ea8c;
                    run_4ea00(); return;
                case 0x4efe8:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f33c;
                        run_4f200(); return;
                    }
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r3 = r2 & r4;
                case 0x4f000:
                    pc=0x4f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f000() throws ExecutionException { /* 0x4f000 - 0x4f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f000:
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4f5a0;
                        run_4f400(); return;
                    }
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                case 0x4f010:
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f04c;
                        continue;
                    }
                    f12 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4f030;
                    pc=0x43600;
                    run_43600(); return;
                case 0x4f030:
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                case 0x4f04c:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea8c;
                        run_4ea00(); return;
                    }
                case 0x4f054:
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r0;
                    f0 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r4 = 14672 << 16;
                    f2 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r4;
                    f1 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea8c;
                        run_4ea00(); return;
                    }
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea8c;
                        run_4ea00(); return;
                    }
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4ea8c;
                    run_4ea00(); return;
                case 0x4f0b4:
                    r4 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4e8f0;
                        run_4e800(); return;
                    }
                    r2 = r0 + 34;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = 32752 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4ea8c;
                    run_4ea00(); return;
                case 0x4f0f4:
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                case 0x4f0fc:
                    r2 = 32752 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e2c4;
                    run_4e200(); return;
                case 0x4f110:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e3b4;
                        run_4e200(); return;
                    }
                    r2 = r0 - r2;
                    r3 = r2 & 15;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f158;
                        continue;
                    }
                    r4 = 5 << 16;
                    r3 = r3 << 3;
                    r4 = r4 + 26040;
                    r3 = r3 + r4;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                case 0x4f158:
                    r2 = r2 >> 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e3b4;
                        run_4e200(); return;
                    }
                    r3 = r2 < 32 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f254;
                        run_4f200(); return;
                    }
                    r3 = r2 & 16;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f71c;
                        run_4f600(); return;
                    }
                    r22 = r0 + r0;
                case 0x4f180:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f1d0;
                        continue;
                    }
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r3 = 5 << 16;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r3 + 28400;
                case 0x4f198:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f1b8;
                        continue;
                    }
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x4f1b8:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f198;
                        continue;
                    }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                case 0x4f1d0:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f218;
                        run_4f200(); return;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r4 = r0 + 107;
                    r2 = r3 << 1;
                    r2 = r2 >>> 21;
                    r2 = r4 - r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f218;
                        run_4f200(); return;
                    }
                    r4 = r2 < 32 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f76c;
                        run_4f600(); return;
                    }
                case 0x4f200:
                    pc=0x4f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f200() throws ExecutionException { /* 0x4f200 - 0x4f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f200:
                    r4 = r2 < 53 ? 1 : 0;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f78c;
                        run_4f600(); return;
                    }
                    r2 = 880 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                case 0x4f218:
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f0 = r0;
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4e3cc;
                        run_4e200(); return;
                    }
                case 0x4f254:
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4dcd8;
                    run_4dc00(); return;
                case 0x4f26c:
                    f2 = readPages[(r28+-32580)>>>12][((r28+-32580)>>>2)&0x3ff];
                    f4 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32584)>>>12][((r28+-32584)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = f2;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = f3;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f4;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f5;
                    /* Next insn is delay slot */ 
                    pc=0x4e9a8;
                    run_4e800(); return;
                case 0x4f294:
                    r17 = r16 + r0;
                    r30 = r0 + r0;
                    r23 = r0 + r0;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4de64;
                    run_4de00(); return;
                case 0x4f2ac:
                    f4 = readPages[(r28+-32556)>>>12][((r28+-32556)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32560)>>>12][((r28+-32560)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x4df60;
                    run_4de00(); return;
                case 0x4f2c8:
                    r3 = r0 + 37;
                    r4 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r3 = r3 - r7;
                    r3 = r3 < r4 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e354;
                        run_4e200(); return;
                    }
                    r2 = r0 + 15;
                    r7 = r2 - r7;
                    r2 = 5 << 16;
                    r2 = r2 + 26040;
                    r3 = r7 << 3;
                    r3 = r3 + r2;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r4 - r7;
                    r3 = r3 << 3;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = r3 + r2;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f4;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f5;
                    /* Next insn is delay slot */ 
                    pc=0x4dcd8;
                    run_4dc00(); return;
                case 0x4f33c:
                    r2 = 15 << 16;
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r2 | 65535;
                    r2 = r2 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f4a8;
                        run_4f400(); return;
                    }
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f4a8;
                        run_4f400(); return;
                    }
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ef98;
                    run_4ee00(); return;
                case 0x4f370:
                    r4 = r0 + 1;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4ec68;
                    run_4ec00(); return;
                case 0x4f380:
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f3b8;
                        continue;
                    }
                    r5 = readPages[(r19+31548)>>>12][((r19+31548)>>>2)&0x3ff];
                    r4 = r29 + 24;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4f3a4;
                    pc=0x44000;
                    run_44000(); return;
                case 0x4f3a4:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4f3b4;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x4f3b4:
                    r2 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                case 0x4f3b8:
                    r3 = (r17&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r4 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e2a8;
                        run_4e200(); return;
                    }
                    r3 = 5 << 16;
                    r17 = r17 << 2;
                    r3 = r3 + 28372;
                    r3 = r3 + r17;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x4f3e8:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r4;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x4e2a8;
                    run_4e200(); return;
                case 0x4f400:
                    pc=0x4f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f400() throws ExecutionException { /* 0x4f400 - 0x4f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f400:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    r3 = 65519 << 16;
                    r4 = r4 + 1075;
                    r3 = r3 | 65535;
                    r4 = r4 << 20;
                    r3 = r5 & r3;
                    r3 = r4 | r3;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4e2a8;
                    run_4e200(); return;
                case 0x4f430:
                    r3 = 32767 << 16;
                    r3 = r3 | 65535;
                    r5 = r0 + -1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x4e2a8;
                    run_4e200(); return;
                case 0x4f44c:
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e2a8;
                    run_4e200(); return;
                case 0x4f45c:
                    r4 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r3 = r4 < -22 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e354;
                        run_4e200(); return;
                    }
                    r3 = 5 << 16;
                    r2 = r4 << 3;
                    r3 = r3 + 26040;
                    r2 = r3 - r2;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x4dcd8;
                    run_4dc00(); return;
                case 0x4f4a8:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f04c;
                        run_4f000(); return;
                    }
                    f12 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4f4d0;
                    pc=0x43600;
                    run_43600(); return;
                case 0x4f4d0:
                    f4 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f0 = r0;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f4;
                    f1 = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f5;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4efd0;
                        run_4ee00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4f04c;
                    run_4f000(); return;
                case 0x4f50c:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ee24;
                    run_4ee00(); return;
                case 0x4f518:
                    r2 = r0 + 73;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4dcc8;
                        run_4dc00(); return;
                    }
                case 0x4f524:
                    r4 = 5 << 16;
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r4 + 28172;
                case 0x4f530:
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f618;
                        run_4f600(); return;
                    }
                    r2 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r6 = r3 + -65;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f568;
                        continue;
                    }
                    r3 = r3 + 32;
                case 0x4f568:
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4f530;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4dcc8;
                    run_4dc00(); return;
                case 0x4f578:
                    r2 = 848 << 16;
                    r2 = r5 + r2;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x4e3cc;
                    run_4e200(); return;
                case 0x4f5a0:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f6fc;
                        run_4f600(); return;
                    }
                    r3 = 32752 << 16;
                    r5 = 1696 << 16;
                    r3 = r4 & r3;
                    r5 = r5 + 1;
                    r5 = ((r3 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f6fc;
                        run_4f600(); return;
                    }
                    r5 = r0 + 107;
                    r3 = r3 >>> 20;
                    r3 = r5 - r3;
                    r5 = r0 + -1;
                    r3 = r5 << (r3&0x1f);
                case 0x4f5dc:
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4f010;
                        run_4f000(); return;
                    }
                    r2 = 32752 << 16;
                    r4 = r4 & r2;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    r2 = 16 << 16;
                    r2 = r4 + r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                case 0x4f600:
                    pc=0x4f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f600() throws ExecutionException { /* 0x4f600 - 0x4f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f600:
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4f04c;
                    run_4f000(); return;
                case 0x4f618:
                    r4 = 5 << 16;
                    r7 = r2 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r4 = r4 + 28176;
                case 0x4f628:
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r2 = r2 + 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f668;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r6 = r3 + -65;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f65c;
                        continue;
                    }
                    r3 = r3 + 32;
                case 0x4f65c:
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4f628;
                        continue;
                    }
                    r2 = r7 + 1;
                case 0x4f668:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4f0fc;
                    run_4f000(); return;
                case 0x4f674:
                    r2 = r30 << 1;
                    r30 = r30 << 3;
                    r30 = r2 + r30;
                    r30 = r30 + r21;
                    /* Next insn is delay slot */ 
                    pc=0x4ec88;
                    run_4ec00(); return;
                case 0x4f68c:
                    r2 = r4 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 40;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4f728;
                        continue;
                    }
                case 0x4f6a4:
                    r4 = 32760 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r4;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e2c4;
                    run_4e200(); return;
                case 0x4f6b8:
                    r3 = 32752 << 16;
                    r2 = r2 & r3;
                    r3 = 65520 << 16;
                    r3 = r2 + r3;
                    r5 = r0 + -1;
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    r2 = r3 | r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4f04c;
                    run_4f000(); return;
                case 0x4f6fc:
                    r3 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4f5dc;
                    run_4f400(); return;
                case 0x4f708:
                    r6 = 5 << 16;
                    r4 = r0 + r0;
                    r6 = r6 + 26000;
                    /* Next insn is delay slot */ 
                    pc=0x4ed70;
                    run_4ec00(); return;
                case 0x4f71c:
                    r22 = r0 + 106;
                    /* Next insn is delay slot */ 
                    pc=0x4f180;
                    run_4f000(); return;
                case 0x4f728:
                    r5 = 5 << 16;
                    r4 = r29 + 40;
                    r5 = r5 + 31528;
                    r6 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r31=0x4f740;
                    pc=0x53800;
                    run_53800(); return;
                case 0x4f740:
                    r3 = r0 + 5;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4f6a4;
                        continue;
                    }
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = 32752 << 16;
                    r2 = r3 | r2;
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4e2c4;
                    run_4e200(); return;
                case 0x4f76c:
                    r3 = r0 + -1;
                    r2 = r3 << (r2&0x1f);
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 & r3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4f218;
                    run_4f200(); return;
                case 0x4f78c:
                    r4 = r0 + -1;
                    r2 = r4 << (r2&0x1f);
                    r2 = r2 & r3;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4f218;
                    run_4f200(); return;
                case 0x4f800:
                    pc=0x4f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f800() throws ExecutionException { /* 0x4f800 - 0x4fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4dc00;
                    run_4dc00(); return;
                case 0x4fa00:
                    pc=0x4fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4fa00() throws ExecutionException { /* 0x4fa00 - 0x4fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4fa00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = f21;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = f20;
                    /* Next insn is delay slot */ 
                    r31=0x4fa28;
                    pc=0x4dc00;
                    run_4dc00(); return;
                case 0x4fa28:
                    f12 = f0;
                    f13 = f1;
                    f20 = f0;
                    f21 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x4fa38;
                    pc=0x44400;
                    run_44400(); return;
                case 0x4fa38:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fa60;
                        continue;
                    }
                    f0=Float.floatToRawIntBits((float)(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL))));
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    f20 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    f21 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4fa60:
                    f20 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    f21 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x4da00;
                    run_4da00(); return;
                case 0x4fc00:
                    pc=0x4fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4fc00() throws ExecutionException { /* 0x4fc00 - 0x4fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4fc00:
                    r29 = r29 + -8;
                    r11 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x4fc1c;
                    continue;
                case 0x4fc18:
                    r2 = r3 + r0;
                case 0x4fc1c:
                    r3 = r2 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r9 = r11 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 8;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fc18;
                        continue;
                    }
                    r9 = r0 + 45;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x4fe18;
                        run_4fe00(); return;
                    }
                    r9 = r0 + 43;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x4fe2c;
                        run_4fe00(); return;
                    }
                    r25 = r0 + r0;
                case 0x4fc5c:
                    r2 = r0 + -17;
                    r2 = r7 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fd9c;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4fd80;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fd9c;
                        continue;
                    }
                    r24 = r0 + 10;
                    r7 = r0 + 10;
                case 0x4fc88:
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fda8;
                        continue;
                    }
                case 0x4fc90:
                    r13 = 32768 << 16;
                case 0x4fc94:
                    if(r24 != r0) {
                        /* Next insn is delay slot */ 
                        if(r24!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r24 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r24 & 0xffffffffL));
                        }
                        pc=0x4fca0;
                        continue;
                    }
                    if(r24!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r24 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r24 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x4fca0:
                    r12 = r0 + r0;
                    r2 = r0 + r0;
                    r15 = r0 + 1;
                    r14 = r0 + -1;
                    r16 = hi;
                    r13 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x4fd08;
                    continue;
                case 0x4fcc0:
                    r8 = r8 + -48;
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fd48;
                        continue;
                    }
                case 0x4fcd0:
                    if(r12 == r14) {
                        /* Next insn is delay slot */ 
                        pc=0x4fcfc;
                        continue;
                    }
                    r9 = ((r13 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fdc4;
                        continue;
                    }
                    if(r2 == r13) {
                        /* Next insn is delay slot */ 
                        pc=0x4fdb8;
                        continue;
                    }
                case 0x4fcec:
                    { long hilo = (long)(r2) * ((long)r24); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r12 = r0 + 1;
                    r2 = lo;
                    r2 = r8 + r2;
                case 0x4fcfc:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                case 0x4fd08:
                    r9 = r11 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r10 = r9 & 4;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fcc0;
                        continue;
                    }
                    r9 = r9 & 3;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fd48;
                        continue;
                    }
                    if(r9 == r15) {
                        /* Next insn is delay slot */ 
                        pc=0x4fdd0;
                        continue;
                    }
                    r9 = r0 + 87;
                    r8 = r8 - r9;
                case 0x4fd3c:
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fcd0;
                        continue;
                    }
                case 0x4fd48:
                    r7 = r0 + -1;
                    if(r12 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x4fde0;
                        continue;
                    }
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fe0c;
                        run_4fe00(); return;
                    }
                case 0x4fd5c:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fd70;
                        continue;
                    }
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fe00;
                        run_4fe00(); return;
                    }
                case 0x4fd6c:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r5;
                case 0x4fd70:
                    r16 = readPages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff];
                    r29 = r29 + 8;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4fd80:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r2 = r0 + 88;
                    r9 = r9 & 223;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4fe4c;
                        run_4fe00(); return;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fe64;
                        run_4fe00(); return;
                    }
                case 0x4fd9c:
                    r24 = r7 + r0;
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fc90;
                        continue;
                    }
                case 0x4fda8:
                    r13 = 32767 << 16;
                    r13 = r13 | 65535;
                    /* Next insn is delay slot */ 
                    pc=0x4fc94;
                    continue;
                case 0x4fdb8:
                    r9 = r16 < r8 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fcec;
                        continue;
                    }
                case 0x4fdc4:
                    r12 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4fcfc;
                    continue;
                case 0x4fdd0:
                    r9 = r0 + 55;
                    r8 = r8 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x4fd3c;
                    continue;
                case 0x4fde0:
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fe40;
                        run_4fe00(); return;
                    }
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                case 0x4fdf0:
                    r5 = r0 + 34;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fd70;
                        continue;
                    }
                case 0x4fe00:
                    pc=0x4fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4fe00() throws ExecutionException { /* 0x4fe00 - 0x50000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4fe00:
                    r5 = r3 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4fd6c;
                    run_4fc00(); return;
                case 0x4fe0c:
                    r2 = r0 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x4fd5c;
                    run_4fc00(); return;
                case 0x4fe18:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4fc5c;
                    run_4fc00(); return;
                case 0x4fe2c:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4fc5c;
                    run_4fc00(); return;
                case 0x4fe40:
                    r2 = 32768 << 16;
                    /* Next insn is delay slot */ 
                    pc=0x4fdf0;
                    run_4fc00(); return;
                case 0x4fe4c:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r24 = r0 + 16;
                    r3 = r3 + 2;
                    r7 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4fc88;
                    run_4fc00(); return;
                case 0x4fe64:
                    r24 = r0 + 8;
                    r7 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4fc88;
                    run_4fc00(); return;
                case 0x50000:
                    pc=0x50000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50000() throws ExecutionException { /* 0x50000 - 0x50200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50000:
                    r3 = r4 + r0;
                case 0x50004:
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4fc00;
                    run_4fc00(); return;
                case 0x50200:
                    pc=0x50200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50200() throws ExecutionException { /* 0x50200 - 0x50400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50200:
                    r2 = r0 + -1;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x50324;
                        continue;
                    }
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r29 = r29 + -32;
                    r2 = r2 & 65503;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+48)>>>12][((r6+48)>>>2)&0x3ff];
                    r16 = r5 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x502b0;
                        continue;
                    }
                    r3 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r2 = readPages[(r6+52)>>>12][((r6+52)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50288;
                        continue;
                    }
                case 0x5024c:
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r3;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r2;
                    r2 = r16 + r0;
                case 0x50274:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50288:
                    r5 = r6 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x50298;
                    pc=0x51800;
                    run_51800(); return;
                case 0x50298:
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5024c;
                        continue;
                    }
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x50274;
                    continue;
                case 0x502b0:
                    r2 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r3 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x502dc;
                        continue;
                    }
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x502dc;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x50330;
                        continue;
                    }
                case 0x502dc:
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    addr=r6+66;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r6+60)>>>12][((r6+60)>>>2)&0x3ff] = r2;
                    r2 = r6 + 64;
                    writePages[(r6+48)>>>12][((r6+48)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    writePages[(r6+52)>>>12][((r6+52)>>>2)&0x3ff] = r2;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r6 + 66;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r2;
                    writePages[(r6+56)>>>12][((r6+56)>>>2)&0x3ff] = r3;
                    r2 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50324:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50330:
                    r3 = r3 + -1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x50274;
                    continue;
                case 0x50400:
                    pc=0x50400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50400() throws ExecutionException { /* 0x50400 - 0x50600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50400:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = readPages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50468;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x50430;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x50430;
                    pc=0x23800;
                    run_23800(); return;
                case 0x50430:
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50468;
                        continue;
                    }
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                case 0x50454:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50468:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 32;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x50454;
                    continue;
                case 0x50600:
                    pc=0x50600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50600() throws ExecutionException { /* 0x50600 - 0x50800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50600:
                    { long hilo = (long)(r7) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -56;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r22 = r6 + r0;
                    r21 = lo;
                    r23 = r7 + r0;
                    r16 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5070c;
                        continue;
                    }
                    r20 = r4 + r0;
                    r19 = r5 + r0;
                    r18 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x50694;
                    continue;
                case 0x50658:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x50664;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x50664:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    r2 = r2 + r17;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    r19 = r19 + r17;
                    r18 = r18 - r17;
                    /* Next insn is delay slot */ 
                    r31=0x5068c;
                    pc=0x50400;
                    run_50400(); return;
                case 0x5068c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50718;
                        continue;
                    }
                case 0x50694:
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r3 = ((r17 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50658;
                        continue;
                    }
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x506b8;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x506b8:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 - r18;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r18 = r2 + r18;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r18;
                    r2 = r23 + r0;
                case 0x506dc:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5070c:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x506dc;
                    continue;
                case 0x50718:
                    r2 = r21 - r18;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        if(r22!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                        }
                        pc=0x50728;
                        continue;
                    }
                    if(r22!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x50728:
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x506dc;
                    continue;
                case 0x50800:
                    pc=0x50800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50800() throws ExecutionException { /* 0x50800 - 0x50a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50800:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -416;
                    writePages[(r29+380)>>>12][((r29+380)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r2 & 8192;
                    writePages[(r29+408)>>>12][((r29+408)>>>2)&0x3ff] = r30;
                    writePages[(r29+376)>>>12][((r29+376)>>>2)&0x3ff] = r16;
                    writePages[(r29+412)>>>12][((r29+412)>>>2)&0x3ff] = r31;
                    writePages[(r29+404)>>>12][((r29+404)>>>2)&0x3ff] = r23;
                    writePages[(r29+400)>>>12][((r29+400)>>>2)&0x3ff] = r22;
                    writePages[(r29+396)>>>12][((r29+396)>>>2)&0x3ff] = r21;
                    writePages[(r29+392)>>>12][((r29+392)>>>2)&0x3ff] = r20;
                    writePages[(r29+388)>>>12][((r29+388)>>>2)&0x3ff] = r19;
                    writePages[(r29+384)>>>12][((r29+384)>>>2)&0x3ff] = r18;
                    r30 = r5 + r0;
                    r16 = r6 + r0;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r7;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50864;
                        continue;
                    }
                    r2 = r2 | 8192;
                    r4 = readPages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff];
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r4 & r2;
                    writePages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff] = r2;
                case 0x50864:
                    r19 = 5 << 16;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r0;
                    r18 = r0 + r0;
                    r23 = r0 + r0;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r0;
                    r19 = r19 + 28440;
                case 0x5087c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 1;
                    writePages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50a84;
                        run_50a00(); return;
                    }
                case 0x50890:
                    r5 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r4 = r5 + r2;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5092c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50908;
                        continue;
                    }
                case 0x508c0:
                    r4 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r5 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5087c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r2 = r2 + -1;
                    r23 = r23 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x508c0;
                        continue;
                    }
                case 0x50908:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x50918;
                    pc=0x50400;
                    run_50400(); return;
                case 0x50918:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5087c;
                        continue;
                    }
                    r5 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x508c0;
                    continue;
                case 0x5092c:
                    r4 = r0 + 37;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x50b00;
                        run_50a00(); return;
                    }
                    r21 = r0 + r0;
                    r22 = r0 + r0;
                case 0x50940:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r2 = r4 & 255;
                    r6 = (r2&0xffffffffL) < (121&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50974;
                        continue;
                    }
                    r2 = r2 << 2;
                    r2 = r19 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x50974:
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 1;
                    r4 = r4 & 3;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x50990;
                        continue;
                    }
                case 0x5098c:
                    r21 = r21 | 1;
                case 0x50990:
                    r3 = 5 << 16;
                    r3 = r3 + -1024;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 10;
                    r20 = r0 + 3;
                case 0x509a4:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50b6c;
                        run_50a00(); return;
                    }
                case 0x509b4:
                    r2 = r21 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50aa8;
                        run_50a00(); return;
                    }
                case 0x509c0:
                    r2 = r0 + 2;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x50d14;
                        run_50c00(); return;
                    }
                    r2 = r0 + 3;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x50ca0;
                        run_50c00(); return;
                    }
                    r2 = r0 + 1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x50be0;
                        run_50a00(); return;
                    }
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x509f0;
                        continue;
                    }
                    r22 = r0 + 1;
                case 0x509f0:
                    r2 = r21 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x512d8;
                        run_51200(); return;
                    }
                    r21 = r21 & 16;
                case 0x50a00:
                    pc=0x50a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50a00() throws ExecutionException { /* 0x50a00 - 0x50c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50a00:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51478;
                        run_51400(); return;
                    }
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x50a40;
                    continue;
                case 0x50a14:
                    r4 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r21 + r2;
                    r22 = r22 - r2;
                    r2 = r4 + r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x50a38;
                    pc=0x50400;
                    run_50400(); return;
                case 0x50a38:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x515a4;
                        run_51400(); return;
                    }
                case 0x50a40:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = r2 < r22 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50a14;
                        continue;
                    }
                    r2 = r2 - r22;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r21 + r22;
                    r9 = r2 + r22;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r9;
                case 0x50a6c:
                    r23 = r23 + r21;
                case 0x50a70:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 1;
                    writePages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50890;
                        run_50800(); return;
                    }
                case 0x50a84:
                    r2 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x50bac;
                    continue;
                case 0x50a90:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x50aa0;
                    pc=0x50400;
                    run_50400(); return;
                case 0x50aa0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50b84;
                        continue;
                    }
                case 0x50aa8:
                    r5 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x50ac0;
                    continue;
                case 0x50ab8:
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                case 0x50ac0:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x509c0;
                        run_50800(); return;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r23 = r23 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    if(r4 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50ab8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x50a90;
                    continue;
                case 0x50b00:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x515b8;
                        run_51400(); return;
                    }
                case 0x50b10:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x50a84;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r23 = r23 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5087c;
                    run_50800(); return;
                case 0x50b48:
                    r21 = r21 | 1;
                case 0x50b4c:
                    r3 = 4 << 16;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r3 + 25600;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 8;
                    r20 = r0 + 3;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x509b4;
                        run_50800(); return;
                    }
                case 0x50b6c:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x50b7c;
                    pc=0x50400;
                    run_50400(); return;
                case 0x50b7c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x509b4;
                        run_50800(); return;
                    }
                case 0x50b84:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50ba8;
                        continue;
                    }
                    addr=r30+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50a84;
                        continue;
                    }
                case 0x50ba8:
                    r2 = r0 + -1;
                case 0x50bac:
                    r31 = readPages[(r29+412)>>>12][((r29+412)>>>2)&0x3ff];
                    r30 = readPages[(r29+408)>>>12][((r29+408)>>>2)&0x3ff];
                    r23 = readPages[(r29+404)>>>12][((r29+404)>>>2)&0x3ff];
                    r22 = readPages[(r29+400)>>>12][((r29+400)>>>2)&0x3ff];
                    r21 = readPages[(r29+396)>>>12][((r29+396)>>>2)&0x3ff];
                    r20 = readPages[(r29+392)>>>12][((r29+392)>>>2)&0x3ff];
                    r19 = readPages[(r29+388)>>>12][((r29+388)>>>2)&0x3ff];
                    r18 = readPages[(r29+384)>>>12][((r29+384)>>>2)&0x3ff];
                    r17 = readPages[(r29+380)>>>12][((r29+380)>>>2)&0x3ff];
                    r16 = readPages[(r29+376)>>>12][((r29+376)>>>2)&0x3ff];
                    r29 = r29 + 416;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50be0:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50bec;
                        continue;
                    }
                    r22 = r0 + -1;
                case 0x50bec:
                    r21 = r21 & 16;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51010;
                        run_51000(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r0 + r0;
                case 0x50c00:
                    pc=0x50c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50c00() throws ExecutionException { /* 0x50c00 - 0x50e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50c00:
                    r10 = r29 + 24;
                case 0x50c04:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r10 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50c8c;
                        continue;
                    }
                case 0x50c20:
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r22 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x50a6c;
                        run_50a00(); return;
                    }
                    if(r4 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50c04;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x50c5c;
                    pc=0x50400;
                    run_50400(); return;
                case 0x50c5c:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50a6c;
                        run_50a00(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r10 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50c20;
                        continue;
                    }
                case 0x50c8c:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50a84;
                        run_50a00(); return;
                    }
                    r23 = r23 + r21;
                    /* Next insn is delay slot */ 
                    pc=0x50a70;
                    run_50a00(); return;
                case 0x50ca0:
                    r2 = r22 + -1;
                    r2 = (r2&0xffffffffL) < (39&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51000;
                        run_51000(); return;
                    }
                    r13 = r0 + r0;
                case 0x50cb4:
                    r11 = r29 + 280;
                    r2 = 5 << 16;
                    r10 = r21 | 3456;
                    r12 = r0 + r0;
                    r21 = r11 + r0;
                    r14 = r0 + 512;
                    r7 = r2 + 29236;
                case 0x50cd0:
                    r6 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r4 + -43;
                    r2 = r2 & 255;
                    r5 = (r2&0xffffffffL) < (78&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e98;
                        run_50e00(); return;
                    }
                    r3 = 5 << 16;
                    r2 = r2 << 2;
                    r3 = r3 + 28924;
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x50d14:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50db0;
                        continue;
                    }
                    r2 = r21 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50dc0;
                        continue;
                    }
                case 0x50d28:
                    r21 = r21 & 16;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51210;
                        run_51200(); return;
                    }
                    r5 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r0 + r0;
                case 0x50d40:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50a6c;
                        run_50a00(); return;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r22 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x50a6c;
                        run_50a00(); return;
                    }
                    if(r4 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50d40;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x50d98;
                    pc=0x50400;
                    run_50400(); return;
                case 0x50d98:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50a6c;
                        run_50a00(); return;
                    }
                    r5 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x50d40;
                    continue;
                case 0x50db0:
                    r2 = r21 & 1;
                    r22 = r0 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50d28;
                        continue;
                    }
                case 0x50dc0:
                    r4 = r29 + 320;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r20 = r21 & 16;
                    /* Next insn is delay slot */ 
                    r31=0x50dd8;
                    pc=0x2f7ec;
                    run_2f600(); return;
                case 0x50dd8:
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x514d0;
                        run_51400(); return;
                    }
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r21 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                case 0x50df4:
                    r6 = r0 + r0;
                case 0x50df8:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                case 0x50e00:
                    pc=0x50e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50e00() throws ExecutionException { /* 0x50e00 - 0x51000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50e00:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r4 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e28;
                        continue;
                    }
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x515f0;
                        run_51400(); return;
                    }
                case 0x50e28:
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5087c;
                        run_50800(); return;
                    }
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r0;
                case 0x50e34:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x5087c;
                    run_50800(); return;
                case 0x50e4c:
                    r2 = r10 & 1536;
                    if(r2 != r14) {
                        /* Next insn is delay slot */ 
                        pc=0x50e98;
                        continue;
                    }
                    r2 = r0 + -513;
                    r10 = r10 & r2;
                    r10 = r10 | 1280;
                    r18 = r0 + 16;
                case 0x50e68:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50f94;
                        continue;
                    }
                case 0x50e84:
                    r6 = r6 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r6;
                case 0x50e8c:
                    r22 = r22 + -1;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50cd0;
                        run_50c00(); return;
                    }
                case 0x50e98:
                    r2 = r10 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50eb8;
                        continue;
                    }
                    r2 = ((r11 & 0xffffffffL) < (r21 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5153c;
                        run_51400(); return;
                    }
                case 0x50eb0:
                    if(r21 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x50a84;
                        run_50a00(); return;
                    }
                case 0x50eb8:
                    r2 = r10 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51404;
                        run_51400(); return;
                    }
                case 0x50ec4:
                    r11 = r21 - r11;
                    r12 = r11 + r12;
                    r23 = r23 + r12;
                    /* Next insn is delay slot */ 
                    pc=0x5087c;
                    run_50800(); return;
                case 0x50ed8:
                    r2 = r18 < 11 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e98;
                        continue;
                    }
                    r2 = r0 + -2945;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x50e68;
                    continue;
                case 0x50ef4:
                    r2 = r18 << 1;
                    r2 = r2 + r7;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r18 = tmp;
                    r2 = r18 < 9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e98;
                        continue;
                    }
                    r2 = r0 + -2945;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x50e68;
                    continue;
                case 0x50f20:
                    r2 = r18 << 1;
                    r2 = r2 + r7;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r18 = tmp;
                    r2 = r0 + -2945;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x50e68;
                    continue;
                case 0x50f3c:
                    r2 = r10 & 2048;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e68;
                        continue;
                    }
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50f58;
                        continue;
                    }
                    r10 = r10 | 512;
                    r18 = r0 + 8;
                case 0x50f58:
                    r2 = r10 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x514c0;
                        run_51400(); return;
                    }
                    r2 = r0 + -897;
                    r10 = r10 & r2;
                    if(r13 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50f7c;
                        continue;
                    }
                    r13 = r13 + -1;
                    r22 = r22 + 1;
                case 0x50f7c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r12 = r12 + 1;
                    r2 = r2 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e84;
                        continue;
                    }
                case 0x50f94:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff] = r7;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    writePages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff] = r11;
                    writePages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff] = r12;
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r13;
                    writePages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff] = r14;
                    /* Next insn is delay slot */ 
                    r31=0x50fbc;
                    pc=0x50400;
                    run_50400(); return;
                case 0x50fbc:
                    r7 = readPages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff];
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    r11 = readPages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff];
                    r12 = readPages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff];
                    r13 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                    r14 = readPages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e8c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x50e98;
                    continue;
                case 0x50fe4:
                    r2 = r10 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e98;
                        continue;
                    }
                    r2 = r0 + -129;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x50e68;
                    continue;
                case 0x51000:
                    pc=0x51000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51000() throws ExecutionException { /* 0x51000 - 0x51200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51000:
                    r13 = r22 + -39;
                    r22 = r0 + 39;
                    /* Next insn is delay slot */ 
                    pc=0x50cb4;
                    run_50c00(); return;
                case 0x51010:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r10 = r29 + 24;
                    r3 = r3 + 4;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r21 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r20 = r21 + r0;
                case 0x51034:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r10 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x510bc;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r20 = r20 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r4 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r22 + -1;
                    addr=r20+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x510bc;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x51034;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x510a8;
                    pc=0x50400;
                    run_50400(); return;
                case 0x510a8:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51034;
                        continue;
                    }
                    if(r21 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x50b84;
                        run_50a00(); return;
                    }
                case 0x510bc:
                    r21 = r20 - r21;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50a84;
                        run_50a00(); return;
                    }
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    r23 = r23 + r21;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x50a70;
                    run_50a00(); return;
                case 0x510ec:
                    r3 = 4 << 16;
                    r3 = r3 + 25600;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 10;
                    r20 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x509a4;
                    run_50800(); return;
                case 0x51108:
                    r20 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x509a4;
                    run_50800(); return;
                case 0x51114:
                    r21 = r21 | 544;
                case 0x51118:
                    r3 = 4 << 16;
                    r3 = r3 + 25600;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 16;
                    r20 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x509a4;
                    run_50800(); return;
                case 0x51134:
                    r2 = r21 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5087c;
                        run_50800(); return;
                    }
                    r2 = r21 & 4;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x515d8;
                        run_51400(); return;
                    }
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r23&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x5087c;
                    run_50800(); return;
                case 0x51168:
                    r21 = r21 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x50940;
                    run_50800(); return;
                case 0x51174:
                    r3 = 5 << 16;
                    r3 = r3 + -1024;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + r0;
                    r20 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x509a4;
                    run_50800(); return;
                case 0x51190:
                    r21 = r21 | 4;
                    /* Next insn is delay slot */ 
                    pc=0x50940;
                    run_50800(); return;
                case 0x5119c:
                    r21 = r21 | 64;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x509a4;
                    run_50800(); return;
                case 0x511ac:
                    r5 = r16 + r0;
                    r4 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r31=0x511bc;
                    pc=0x4d800;
                    run_4d800(); return;
                case 0x511bc:
                    r16 = r2 + r0;
                    r21 = r21 | 64;
                    r20 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x509a4;
                    run_50800(); return;
                case 0x511d0:
                    r21 = r21 | 512;
                    /* Next insn is delay slot */ 
                    pc=0x51118;
                    continue;
                case 0x511dc:
                    r21 = r21 | 2;
                    /* Next insn is delay slot */ 
                    pc=0x50940;
                    run_50800(); return;
                case 0x511e8:
                    r21 = r21 | 16;
                    /* Next insn is delay slot */ 
                    pc=0x50940;
                    run_50800(); return;
                case 0x511f4:
                    r2 = r22 << 1;
                    r9 = r22 << 3;
                    r2 = r2 + r9;
                case 0x51200:
                    pc=0x51200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51200() throws ExecutionException { /* 0x51200 - 0x51400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51200:
                    r4 = r4 + -48;
                    r22 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x50940;
                    run_50800(); return;
                case 0x51210:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r20 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r21 = r20 + r0;
                case 0x51234:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x512b0;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r4 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r22 + -1;
                    addr=r21+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x512b0;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x51234;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x512a8;
                    pc=0x50400;
                    run_50400(); return;
                case 0x512a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51234;
                        continue;
                    }
                case 0x512b0:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r6 = r21 - r20;
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 + r6;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x5087c;
                    run_50800(); return;
                case 0x512d8:
                    r4 = r29 + 320;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r21 = r21 & 16;
                    /* Next insn is delay slot */ 
                    r31=0x512f0;
                    pc=0x2f7ec;
                    run_2f600(); return;
                case 0x512f0:
                    writePages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff] = r21;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51508;
                        run_51400(); return;
                    }
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                case 0x51320:
                    r21 = r0 + r0;
                case 0x51324:
                    /* Next insn is delay slot */ 
                    r31=0x5132c;
                    pc=0x41000;
                    run_41000(); return;
                case 0x5132c:
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x50b84;
                        run_50a00(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = r29 + 24;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r6 = r3 + r21;
                    addr=r6+256;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r4 + -1;
                    r2 = r29 + 320;
                    r20 = r21 + 1;
                    r5 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r6 = r29 + 280;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51380;
                    pc=0x4d000;
                    run_4d000(); return;
                case 0x51380:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x50b84;
                        run_50a00(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51580;
                        run_51400(); return;
                    }
                    r3 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x513b0;
                        continue;
                    }
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                case 0x513b0:
                    r3 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    r23 = r23 + r20;
                    r22 = r22 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51598;
                        run_51400(); return;
                    }
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    r21 = r0 + r0;
                    r3 = r3 + 4;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                case 0x513d4:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x51514;
                        run_51400(); return;
                    }
                case 0x513e4:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51324;
                        continue;
                    }
                case 0x513ec:
                    r3 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e34;
                        run_50e00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5087c;
                    run_50800(); return;
                case 0x51400:
                    pc=0x51400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51400() throws ExecutionException { /* 0x51400 - 0x51600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51400:
                case 0x51404:
                    r3 = readPages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff];
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r17 + r0;
                    r5 = r11 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    writePages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff] = r11;
                    writePages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff] = r12;
                    r6 = r0 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x51430;
                    return;
                case 0x51430:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    r11 = readPages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff];
                    r4 = r10 & 32;
                    r12 = readPages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x514dc;
                        continue;
                    }
                case 0x51448:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                case 0x51460:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x50ec4;
                    run_50e00(); return;
                case 0x51478:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r7 = r22 + r0;
                    r21 = r3 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x5149c;
                    pc=0x50600;
                    run_50600(); return;
                case 0x5149c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50b84;
                        run_50a00(); return;
                    }
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r23 = r2 + r23;
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r21;
                    /* Next insn is delay slot */ 
                    pc=0x5087c;
                    run_50800(); return;
                case 0x514c0:
                    r2 = r0 + -1409;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x50e68;
                    run_50e00(); return;
                case 0x514d0:
                    r21 = r29 + 328;
                    /* Next insn is delay slot */ 
                    pc=0x50df4;
                    run_50c00(); return;
                case 0x514dc:
                    r4 = r10 & 4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51448;
                        continue;
                    }
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x51460;
                    continue;
                case 0x51508:
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x51320;
                    run_51200(); return;
                case 0x51514:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51524;
                    pc=0x50400;
                    run_50400(); return;
                case 0x51524:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x513e4;
                        run_51200(); return;
                    }
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x513ec;
                        run_51200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x50b84;
                    run_50a00(); return;
                case 0x5153c:
                    addr=r21+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r7 = r21 + -1;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff] = r7;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    writePages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff] = r11;
                    writePages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff] = r12;
                    /* Next insn is delay slot */ 
                    r31=0x51564;
                    pc=0x50200;
                    run_50200(); return;
                case 0x51564:
                    r7 = readPages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff];
                    r12 = readPages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff];
                    r21 = r7 + r0;
                    r11 = readPages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff];
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x50eb0;
                    run_50e00(); return;
                case 0x51580:
                    r3 = r0 + -2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x513b0;
                        run_51200(); return;
                    }
                    r21 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x513d4;
                    run_51200(); return;
                case 0x51598:
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x513d4;
                    run_51200(); return;
                case 0x515a4:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50b84;
                        run_50a00(); return;
                    }
                    r23 = r23 + r21;
                    /* Next insn is delay slot */ 
                    pc=0x50a70;
                    run_50a00(); return;
                case 0x515b8:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x515c8;
                    pc=0x50400;
                    run_50400(); return;
                case 0x515c8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50b10;
                        run_50a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x50b84;
                    run_50a00(); return;
                case 0x515d8:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r23;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x5087c;
                    run_50800(); return;
                case 0x515f0:
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x515fc;
                    pc=0x41000;
                    run_41000(); return;
                case 0x515fc:
                    r6 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                case 0x51600:
                    pc=0x51600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51600() throws ExecutionException { /* 0x51600 - 0x51800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51600:
                    if(r2 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x50b84;
                        run_50a00(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = r29 + 24;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r10 = r6 + 1;
                    r6 = r3 + r6;
                    addr=r6+256;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r4 + -1;
                    r2 = r29 + 320;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r7 = r10 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r21 + r0;
                    r6 = r29 + 280;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x5165c;
                    pc=0x4d000;
                    run_4d000(); return;
                case 0x5165c:
                    r3 = r0 + -1;
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x50b84;
                        run_50a00(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x516c4;
                        continue;
                    }
                    r3 = r0 + -2;
                    r6 = r10 + r0;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x51754;
                        continue;
                    }
                case 0x51684:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50df8;
                        run_50c00(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x516a8;
                    pc=0x50400;
                    run_50400(); return;
                case 0x516a8:
                    r6 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50df8;
                        run_50c00(); return;
                    }
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50b84;
                        run_50a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x50e28;
                    run_50e00(); return;
                case 0x516c4:
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r0;
                    r4 = r0 + r0;
                case 0x516cc:
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x516d8;
                    pc=0x4ce00;
                    run_4ce00(); return;
                case 0x516d8:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51728;
                        continue;
                    }
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e28;
                        run_50e00(); return;
                    }
                case 0x516ec:
                    r10 = r10 + -1;
                    r3 = r29 + 280;
                    r2 = r3 + r10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x51710;
                    pc=0x50200;
                    run_50200(); return;
                case 0x51710:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x516ec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x50e28;
                    run_50e00(); return;
                case 0x51728:
                    r23 = r23 + r10;
                    r22 = r22 + -1;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51748;
                        continue;
                    }
                    r21 = r21 + 4;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51684;
                    continue;
                case 0x51748:
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51684;
                    continue;
                case 0x51754:
                    r4 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x516cc;
                    continue;
                case 0x51800:
                    pc=0x51800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51800() throws ExecutionException { /* 0x51800 - 0x51a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51800:
                    r29 = r29 + -40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = readPages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff];
                    r2 = r16 + 64;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x518a0;
                        continue;
                    }
                    r18 = readPages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff];
                    r19 = r18 << 1;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51848;
                    pc=0x27000;
                    run_27000(); return;
                case 0x51848:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5190c;
                        continue;
                    }
                    r20 = r2 + r18;
                    r4 = r20 + r0;
                    r5 = r2 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5186c;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x5186c:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r20;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r17;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r19;
                    r2 = r0 + r0;
                case 0x5187c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x518a0:
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x518ac;
                    pc=0x25200;
                    run_25200(); return;
                case 0x518ac:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5190c;
                        continue;
                    }
                    r3 = r0 + 1024;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r3;
                    addr=r16+66;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r2;
                    addr=r2+1023;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r16+65;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 + 1021;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r16+64;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5190c:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5187c;
                    continue;
                case 0x51a00:
                    pc=0x51a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51a00() throws ExecutionException { /* 0x51a00 - 0x51c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51a00:
                    r29 = r29 + -32;
                    r2 = r0 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r5 + r0;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x51b2c;
                        continue;
                    }
                    r17 = r4 + r0;
                    r16 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51a44;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51b38;
                        continue;
                    }
                case 0x51a44:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 8192;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51a6c;
                        continue;
                    }
                    r4 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r3 = r0 + -8193;
                    r3 = r4 & r3;
                    r2 = r2 | 8192;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r3;
                case 0x51a6c:
                    r3 = r0 + -33;
                    r2 = r2 & r3;
                    r3 = r2 & 65535;
                    r4 = r3 & 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51aa8;
                        continue;
                    }
                    r4 = r3 & 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51b2c;
                        continue;
                    }
                    r3 = r3 & 8;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51b48;
                        continue;
                    }
                    r2 = r2 | 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x51aa8:
                    r2 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r18 = r18 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51b88;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51b14;
                        continue;
                    }
                case 0x51ad0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = r18 + r0;
                case 0x51af8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51b14:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51b24;
                    pc=0x51800;
                    run_51800(); return;
                case 0x51b24:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51ad0;
                        continue;
                    }
                case 0x51b2c:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x51af8;
                    continue;
                case 0x51b38:
                    /* Next insn is delay slot */ 
                    r31=0x51b40;
                    pc=0x21400;
                    run_21400(); return;
                case 0x51b40:
                    /* Next insn is delay slot */ 
                    pc=0x51a44;
                    continue;
                case 0x51b48:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51b58;
                    pc=0x20200;
                    run_20200(); return;
                case 0x51b58:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51b2c;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r2 = r2 & 65527;
                    r2 = r2 << 16;
                    r2 = r2 >> 16;
                    r2 = r2 | 4;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x51aa8;
                    continue;
                case 0x51b88:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51bb4;
                        continue;
                    }
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51bb4;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x51c04;
                        run_51c00(); return;
                    }
                case 0x51bb4:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    addr=r16+66;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff] = r2;
                    r2 = r16 + 64;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r2;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + 66;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff] = r3;
                    r2 = r18 + r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51c00:
                    pc=0x51c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51c00() throws ExecutionException { /* 0x51c00 - 0x51e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51c00:
                case 0x51c04:
                    r3 = r3 + -1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x51af8;
                    run_51a00(); return;
                case 0x51e00:
                    pc=0x51e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51e00() throws ExecutionException { /* 0x51e00 - 0x52000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51e00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51a00;
                    run_51a00(); return;
                case 0x52000:
                    pc=0x52000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52000() throws ExecutionException { /* 0x52000 - 0x52200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52000:
                    r29 = r29 + -64;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r17 = r7 + r0;
                    r18 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5208c;
                        continue;
                    }
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x52038;
                    pc=0x40e00;
                    run_40e00(); return;
                case 0x52038:
                    r5 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r6 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x52054;
                    return;
                case 0x52054:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x52070;
                        continue;
                    }
                    r2 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                case 0x52070:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5208c:
                    /* Next insn is delay slot */ 
                    r31=0x52094;
                    pc=0x40e00;
                    run_40e00(); return;
                case 0x52094:
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r5 = r29 + 24;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x520b0;
                    return;
                case 0x520b0:
                    /* Next insn is delay slot */ 
                    pc=0x52054;
                    continue;
                case 0x52200:
                    pc=0x52200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52200() throws ExecutionException { /* 0x52200 - 0x52400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52200:
                    r29 = r29 + -64;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    r17 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x522a0;
                        continue;
                    }
                    r20 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r18 = r5 + r0;
                    r19 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x52240;
                    pc=0x40e00;
                    run_40e00(); return;
                case 0x52240:
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x5225c;
                    return;
                case 0x5225c:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5227c;
                        continue;
                    }
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r3 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + -1;
                case 0x5227c:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x522a0:
                    r18 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x522b0;
                    pc=0x40e00;
                    run_40e00(); return;
                case 0x522b0:
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r18 + r0;
                    r5 = r29 + 24;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x522cc;
                    return;
                case 0x522cc:
                    /* Next insn is delay slot */ 
                    pc=0x5225c;
                    continue;
                case 0x52400:
                    pc=0x52400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52400() throws ExecutionException { /* 0x52400 - 0x52600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52400:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52424;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52430;
                        continue;
                    }
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52424:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52430:
                    r2 = r0 + 138;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52600:
                    pc=0x52600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52600() throws ExecutionException { /* 0x52600 - 0x52800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52600:
                    r29 = r29 + -56;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r16;
                    r17 = r7 + r0;
                    r16 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x5262c;
                    pc=0x40e00;
                    run_40e00(); return;
                case 0x5262c:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r6 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x52648;
                    return;
                case 0x52648:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r16 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52800:
                    pc=0x52800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52800() throws ExecutionException { /* 0x52800 - 0x52a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52800:
                    r7 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r5 >> 5;
                    r6 = r2 < r7 ? 1 : 0;
                    r3 = r4 + 20;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x528bc;
                        continue;
                    }
                    r7 = r7 << 2;
                    r2 = r2 << 2;
                    r5 = r5 & 31;
                    r7 = r3 + r7;
                    r11 = r3 + r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x528cc;
                        continue;
                    }
                    r2 = r11 + 4;
                    r8 = readPages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff];
                    r10 = r0 + 32;
                    r6 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r10 = r10 - r5;
                    r8 = r8 >>> (r5&0x1f);
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52924;
                        continue;
                    }
                    r6 = r3 + r0;
                case 0x52858:
                    r9 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    r9 = r9 << (r10&0x1f);
                    r8 = r8 | r9;
                    r2 = r2 + 4;
                    writePages[(r6+-4)>>>12][((r6+-4)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r9 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r8 = r8 >>> (r5&0x1f);
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52858;
                        continue;
                    }
                    r2 = r7 - r11;
                    r2 = r2 + -5;
                    r2 = r2 >>> 2;
                    r2 = r2 + 1;
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                case 0x5289c:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r8;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x528ac;
                        continue;
                    }
                    r2 = r2 + 4;
                case 0x528ac:
                    r3 = r2 - r3;
                    r3 = r3 >> 2;
                    /* Next insn is delay slot */ 
                    pc=0x52910;
                    continue;
                case 0x528bc:
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r0;
                case 0x528c0:
                    writePages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x528cc:
                    r2 = ((r11 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x528bc;
                        continue;
                    }
                    r2 = r11 + r0;
                case 0x528dc:
                    r2 = r2 + 4;
                    r5 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r5;
                    r5 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x528dc;
                        continue;
                    }
                    r3 = ~(r0 | r11);
                    r3 = r3 + r7;
                    r3 = r3 >>> 2;
                    r3 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r3 >> 2;
                case 0x52910:
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x528c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52924:
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5289c;
                    continue;
                case 0x52a00:
                    pc=0x52a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52a00() throws ExecutionException { /* 0x52a00 - 0x52c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52a00:
                    r5 = 5 << 16;
                    r2 = 6 << 16;
                    r5 = r5 + 29289;
                    r4 = r0 + 16;
                    r3 = r0 + 48;
                    r2 = r2 + -20284;
                case 0x52a18:
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r4 + 1;
                    r4 = r4 & 255;
                    r5 = r5 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52a18;
                        continue;
                    }
                    r5 = 5 << 16;
                    r5 = r5 + 29281;
                    r4 = r0 + 26;
                    r3 = r0 + 97;
                case 0x52a48:
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r4 + 1;
                    r4 = r4 & 255;
                    r5 = r5 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52a48;
                        continue;
                    }
                    r5 = 5 << 16;
                    r5 = r5 + 29273;
                    r4 = r0 + 26;
                    r3 = r0 + 65;
                case 0x52a78:
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r4 + 1;
                    r4 = r4 & 255;
                    r5 = r5 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52a78;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52c00:
                    pc=0x52c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52c00() throws ExecutionException { /* 0x52c00 - 0x52e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52c00:
                    r29 = r29 + -88;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r21;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r4;
                    r19 = r5 + r0;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r6;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r7;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r30;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r23;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r22;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x52c44;
                    pc=0x41600;
                    run_41600(); return;
                case 0x52c44:
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x52c58;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x52c58:
                    r9 = 6 << 16;
                    r18 = r2 + r0;
                    r20 = r9 + -20284;
                    r2 = r17 + r2;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r21 = tmp;
                    addr=r20+48;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53130;
                        run_53000(); return;
                    }
                case 0x52c7c:
                    r3 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r2 = r0 + 48;
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r23 = r3 + 2;
                    if(r8 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x53430;
                        run_53400(); return;
                    }
                    r3 = r3 + 3;
                    r22 = r0 + r0;
                case 0x52c9c:
                    r23 = r3 + r0;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r22 = r22 + 1;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x52c9c;
                        continue;
                    }
                case 0x52cb4:
                    r8 = r20 + r8;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x530ac;
                        run_53000(); return;
                    }
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r0 + r0;
                    r2 = r2 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r30 = r0 + r0;
                case 0x52cdc:
                    r16 = r23 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52d08;
                        continue;
                    }
                case 0x52ce8:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52ce8;
                        continue;
                    }
                case 0x52d08:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x52d20;
                    pc=0x45e00;
                    run_45e00(); return;
                case 0x52d20:
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52da8;
                        continue;
                    }
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5346c;
                        run_53400(); return;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x52d38:
                    r30 = r30 - r16;
                    r30 = r30 << 2;
                case 0x52d40:
                    r3 = r0 + 80;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x52dc0;
                        continue;
                    }
                case 0x52d4c:
                    r3 = r0 + 112;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x52dc0;
                        continue;
                    }
                case 0x52d58:
                    r2 = r16 + r0;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52e68;
                        run_52e00(); return;
                    }
                case 0x52d68:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53374;
                        run_53200(); return;
                    }
                    r2 = r0 + 6;
                case 0x52d74:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r30 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r23 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r22 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52da8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52d38;
                        continue;
                    }
                    r3 = r0 + 80;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x52d4c;
                        continue;
                    }
                case 0x52dc0:
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r0 + 43;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x53380;
                        run_53200(); return;
                    }
                    r3 = r0 + 45;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x532fc;
                        run_53200(); return;
                    }
                    r4 = r16 + 1;
                    r6 = r0 + r0;
                case 0x52de4:
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r3 + -1;
                    r2 = (r2&0xffffffffL) < (25&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52d58;
                        continue;
                    }
                case 0x52e00:
                    pc=0x52e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52e00() throws ExecutionException { /* 0x52e00 - 0x53000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52e00:
                    r2 = r4 + 1;
                    r3 = r3 + -16;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x52e30;
                    continue;
                case 0x52e14:
                    r5 = r3 << 1;
                    r3 = r3 << 3;
                    r3 = r5 + r3;
                    r2 = r2 + 1;
                    r3 = r3 + r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r3 + -16;
                case 0x52e30:
                    r4 = r4 + r20;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r5 = r4 + -1;
                    r5 = (r5&0xffffffffL) < (25&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52e14;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52e58;
                        continue;
                    }
                    r3 = r0 - r3;
                case 0x52e58:
                    r30 = r30 + r3;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52d68;
                        run_52c00(); return;
                    }
                case 0x52e68:
                    r2 = r16 - r23;
                    r2 = r2 + -1;
                    r3 = r2 < 8 ? 1 : 0;
                    r5 = r0 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52e94;
                        continue;
                    }
                case 0x52e80:
                    r2 = r2 >> 1;
                    r3 = r2 < 8 ? 1 : 0;
                    r5 = r5 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52e80;
                        continue;
                    }
                case 0x52e94:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x52ea0;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x52ea0:
                    r19 = r2 + 20;
                    r22 = r2 + r0;
                    r2 = ((r23 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    r11 = r19 + r0;
                    r8 = r0 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52fa0;
                        continue;
                    }
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r14 = r0 + 1;
                    r3 = r0 + r0;
                    r14 = r14 - r18;
                    r12 = r0 + 32;
                    r7 = r16 + -1;
                    if(r6 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x52f2c;
                        continue;
                    }
                case 0x52edc:
                    if(r3 == r12) {
                        /* Next insn is delay slot */ 
                        pc=0x53090;
                        run_53000(); return;
                    }
                    r2 = r3 + r0;
                    r3 = r3 + 4;
                case 0x52eec:
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r20 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r6 = r6 & 15;
                    r6 = r6 << (r2&0x1f);
                    r8 = r8 | r6;
                    r6 = ((r23 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52fa0;
                        continue;
                    }
                case 0x52f18:
                    r16 = r7 + r0;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r7 = r16 + -1;
                    if(r6 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x52edc;
                        continue;
                    }
                case 0x52f2c:
                    r15 = r7 + r14;
                    r2 = ((r15 & 0xffffffffL) < (r23 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52edc;
                        continue;
                    }
                    r4 = r15 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r8;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r11;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r12;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r14;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r15;
                    /* Next insn is delay slot */ 
                    r31=0x52f6c;
                    pc=0x45e00;
                    run_45e00(); return;
                case 0x52f6c:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r8 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r11 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r12 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r14 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r15 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52edc;
                        continue;
                    }
                    r7 = r15 + r0;
                    r6 = ((r23 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52f18;
                        continue;
                    }
                case 0x52fa0:
                    r2 = r11 + 4;
                    r2 = r2 - r19;
                    r2 = r2 >> 2;
                    writePages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff] = r8;
                    r4 = r8 + r0;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r16 = r2 << 5;
                    /* Next insn is delay slot */ 
                    r31=0x52fc4;
                    pc=0x42400;
                    run_42400(); return;
                case 0x52fc4:
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = r16 - r2;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r16 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5338c;
                        run_53200(); return;
                    }
                    r3 = r2 < r16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53400;
                        run_53400(); return;
                    }
                    r17 = r0 + r0;
                case 0x52ff0:
                    r4 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                case 0x53000:
                    pc=0x53000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53000() throws ExecutionException { /* 0x53000 - 0x53200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53000:
                    r3 = r3 < r30 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x532d4;
                        run_53200(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r3 = r30 < r2 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53328;
                        run_53200(); return;
                    }
                    r30 = r2 - r30;
                    r3 = r30 < r16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53140;
                        continue;
                    }
                    r4 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r4 = r0 + 2;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5351c;
                        run_53400(); return;
                    }
                    r4 = r0 + 3;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x534cc;
                        run_53400(); return;
                    }
                    r4 = r0 + 1;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x53534;
                        run_53400(); return;
                    }
                case 0x53068:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53078;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x53078:
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r2 = r0 + 80;
                    /* Next insn is delay slot */ 
                    pc=0x52d74;
                    run_52c00(); return;
                case 0x53090:
                    writePages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff] = r8;
                    r3 = r0 + 4;
                    r11 = r11 + 4;
                    r8 = r0 + r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52eec;
                    run_52e00(); return;
                case 0x530ac:
                    r4 = r23 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x530c0;
                    pc=0x45e00;
                    run_45e00(); return;
                case 0x530c0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53310;
                        run_53200(); return;
                    }
                    r16 = r23 + r18;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r2 + r20;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5343c;
                        run_53400(); return;
                    }
                    r4 = r0 + 48;
                    r23 = r16 + r0;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5311c;
                        continue;
                    }
                    r3 = r0 + 48;
                case 0x530fc:
                    r23 = r23 + 1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x530fc;
                        continue;
                    }
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                case 0x5311c:
                    r7 = (r3&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r30 = r16 + r0;
                    r22 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x52cdc;
                    run_52c00(); return;
                case 0x53130:
                    /* Next insn is delay slot */ 
                    r31=0x53138;
                    pc=0x52a00;
                    run_52a00(); return;
                case 0x53138:
                    /* Next insn is delay slot */ 
                    pc=0x52c7c;
                    run_52c00(); return;
                case 0x53140:
                    r18 = r30 + -1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x534c0;
                        run_53400(); return;
                    }
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x53168;
                        continue;
                    }
                    r4 = r22 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53164;
                    pc=0x44200;
                    run_44200(); return;
                case 0x53164:
                    r17 = r2 + r0;
                case 0x53168:
                    r2 = r18 >> 5;
                    r2 = r2 << 2;
                    r2 = r19 + r2;
                    r3 = r0 + 1;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r18 = r3 << (r18&0x1f);
                    r2 = r18 & r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53190;
                        continue;
                    }
                    r17 = r17 | 2;
                case 0x53190:
                    r5 = r30 + r0;
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x531a0;
                    pc=0x52800;
                    run_52800(); return;
                case 0x531a0:
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r16 = r16 - r30;
                    r30 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r18 = r0 + 2;
                case 0x531b0:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53358;
                        run_53200(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r3 = r0 + 2;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x53334;
                        run_53200(); return;
                    }
                    r3 = r0 + 3;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x53344;
                        run_53200(); return;
                    }
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x53354;
                        run_53200(); return;
                    }
                    r2 = r17 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53354;
                        run_53200(); return;
                    }
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r2 = r17 | r2;
                case 0x53200:
                    pc=0x53200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53200() throws ExecutionException { /* 0x53200 - 0x53400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53200:
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53354;
                        continue;
                    }
                case 0x5320c:
                    r17 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r3 = r19 + r0;
                    r23 = r17 << 2;
                    r5 = r19 + r23;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5323c;
                    continue;
                case 0x53228:
                    r3 = r3 + 4;
                    r4 = ((r3 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53574;
                        run_53400(); return;
                    }
                case 0x5323c:
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x53228;
                        continue;
                    }
                    r4 = r4 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    r2 = r19 + r0;
                case 0x53258:
                    r3 = r0 + 2;
                    if(r18 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x535b4;
                        run_53400(); return;
                    }
                    r3 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r17 = r17 < r3 ? 1 : 0;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x532a8;
                        continue;
                    }
                    r16 = r16 & 31;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53504;
                        run_53400(); return;
                    }
                    r2 = r2 + r23;
                    r4 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x53294;
                    pc=0x42400;
                    run_42400(); return;
                case 0x53294:
                    r3 = r0 + 32;
                    r16 = r3 - r16;
                    r2 = r2 < r16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53504;
                        run_53400(); return;
                    }
                case 0x532a8:
                    r4 = r22 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x532b8;
                    pc=0x52800;
                    run_52800(); return;
                case 0x532b8:
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r30 = r30 + 1;
                    r2 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    r2 = r2 < r30 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53504;
                        run_53400(); return;
                    }
                case 0x532d4:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x532e4;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x532e4:
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r2 = r0 + 163;
                    /* Next insn is delay slot */ 
                    pc=0x52d74;
                    run_52c00(); return;
                case 0x532fc:
                    r6 = r0 + 1;
                case 0x53300:
                    r4 = r16 + 2;
                    addr=r16+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x52de4;
                    run_52c00(); return;
                case 0x53310:
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = r23 + r0;
                    r30 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x52d40;
                    run_52c00(); return;
                case 0x53328:
                    r18 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x531b0;
                    run_53000(); return;
                case 0x53334:
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r4 = r2 - r4;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r4;
                case 0x53344:
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5320c;
                        continue;
                    }
                case 0x53354:
                    r18 = r18 | 16;
                case 0x53358:
                    r4 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r3 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r22;
                    r2 = r18 + r0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r30;
                    /* Next insn is delay slot */ 
                    pc=0x52d74;
                    run_52c00(); return;
                case 0x53374:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52d74;
                    run_52c00(); return;
                case 0x53380:
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x53300;
                    continue;
                case 0x5338c:
                    r18 = r2 - r16;
                    r4 = r22 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x533a0;
                    pc=0x44200;
                    run_44200(); return;
                case 0x533a0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5344c;
                        run_53400(); return;
                    }
                    r2 = r18 + -1;
                    r3 = r2 >> 5;
                    r3 = r3 << 2;
                    r3 = r19 + r3;
                    r4 = r0 + 1;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r4 << (r2&0x1f);
                    r3 = r4 & r3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x534b4;
                        run_53400(); return;
                    }
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53510;
                        run_53400(); return;
                    }
                    r4 = r22 + r0;
                    r5 = r18 + -2;
                    /* Next insn is delay slot */ 
                    r31=0x533ec;
                    pc=0x44200;
                    run_44200(); return;
                case 0x533ec:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53510;
                        run_53400(); return;
                    }
                    r17 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x53450;
                    run_53400(); return;
                case 0x53400:
                    pc=0x53400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53400() throws ExecutionException { /* 0x53400 - 0x53600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53400:
                    r17 = r16 - r2;
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53418;
                    pc=0x43000;
                    run_43000(); return;
                case 0x53418:
                    r30 = r30 - r17;
                    r22 = r2 + r0;
                    r19 = r2 + 20;
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52ff0;
                    run_52e00(); return;
                case 0x53430:
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52cb4;
                    run_52c00(); return;
                case 0x5343c:
                    r30 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x52d40;
                    run_52c00(); return;
                case 0x5344c:
                    r17 = r0 + r0;
                case 0x53450:
                    r4 = r22 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53460;
                    pc=0x52800;
                    run_52800(); return;
                case 0x53460:
                    r30 = r30 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x52ff0;
                    run_52e00(); return;
                case 0x5346c:
                    r30 = r16 + r18;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = r30 + r0;
                    r3 = r20 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52d38;
                        run_52c00(); return;
                    }
                case 0x5348c:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r20 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5348c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x52d38;
                    run_52c00(); return;
                case 0x534b4:
                    r17 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x53450;
                    continue;
                case 0x534c0:
                    r17 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x53168;
                    run_53000(); return;
                case 0x534cc:
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53068;
                        run_53000(); return;
                    }
                case 0x534dc:
                    r3 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r4 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r22;
                    r2 = r0 + 98;
                    /* Next insn is delay slot */ 
                    pc=0x52d74;
                    run_52c00(); return;
                case 0x53504:
                    r18 = r0 + 33;
                    /* Next insn is delay slot */ 
                    pc=0x53358;
                    run_53200(); return;
                case 0x53510:
                    r17 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x53450;
                    continue;
                case 0x5351c:
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x534dc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x53068;
                    run_53000(); return;
                case 0x53534:
                    if(r30 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x53068;
                        run_53000(); return;
                    }
                    r3 = r16 < 2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x534dc;
                        continue;
                    }
                    r4 = r22 + r0;
                    r5 = r16 + -1;
                    /* Next insn is delay slot */ 
                    r31=0x53558;
                    pc=0x44200;
                    run_44200(); return;
                case 0x53558:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53068;
                        run_53000(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x534dc;
                    continue;
                case 0x53574:
                    r2 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r2 = r17 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x535dc;
                        continue;
                    }
                    r2 = r19 + r0;
                    r3 = r17 + r0;
                case 0x53590:
                    r4 = r3 + 1;
                    r3 = r3 + 4;
                    r3 = r3 << 2;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r4;
                    r3 = r22 + r3;
                    r4 = r0 + 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x53258;
                    run_53200(); return;
                case 0x535b4:
                    r4 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    if(r3 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x53634;
                        run_53600(); return;
                    }
                    r18 = r0 + 34;
                    /* Next insn is delay slot */ 
                    pc=0x53358;
                    run_53200(); return;
                case 0x535dc:
                    r5 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r5 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x535f0;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x535f0:
                    r6 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r5 = r22 + 12;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                case 0x53600:
                    pc=0x53600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53600() throws ExecutionException { /* 0x53600 - 0x53800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53600:
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53610;
                    pc=0x2f7dc;
                    run_2f600(); return;
                case 0x53610:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53620;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x53620:
                    r22 = r19 + r0;
                    r3 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r2 = r19 + 20;
                    /* Next insn is delay slot */ 
                    pc=0x53590;
                    run_53400(); return;
                case 0x53634:
                    r3 = r16 >> 5;
                    r3 = r3 << 2;
                    r2 = r2 + r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    r16 = r3 << (r16&0x1f);
                    r18 = r16 & r2;
                    r18 = ((r0 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r2 = r0 + 34;
                    r18 = r2 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x53358;
                    run_53200(); return;
                case 0x53800:
                    pc=0x53800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53800() throws ExecutionException { /* 0x53800 - 0x53a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53800:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + -20284;
                    addr=r16+48;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53ad8;
                        run_53a00(); return;
                    }
                case 0x53828:
                    r24 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r15 = r24 >> 5;
                    r15 = r15 << 2;
                    r24 = r24 & 31;
                    r15 = r6 + r15;
                    if(r24 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5384c;
                        continue;
                    }
                    r15 = r15 + 4;
                case 0x5384c:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff] = r0;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r10 = r15 + -4;
                    r12 = r10 + r0;
                    r5 = r10 + r0;
                    r8 = r0 + r0;
                    r14 = r0 + r0;
                    r11 = r0 + r0;
                    r17 = r0 + 8;
                    r25 = r0 + 32;
                    r9 = r3 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53934;
                        continue;
                    }
                case 0x53884:
                    r7 = r16 + r2;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53a30;
                        run_53a00(); return;
                    }
                    r7 = (r2&0xffffffffL) < (33&0xffffffffL) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53aac;
                        run_53a00(); return;
                    }
                    r2 = r14 < r11 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53920;
                        continue;
                    }
                    r2 = ((r5 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53910;
                        continue;
                    }
                    r2 = r8 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53910;
                        continue;
                    }
                    r8 = r17 - r8;
                    r8 = r8 << 2;
                    r18 = r25 - r8;
                    r7 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x538e8;
                    continue;
                case 0x538e4:
                    r7 = r3 + r0;
                case 0x538e8:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r13 = r3 << (r18&0x1f);
                    r7 = r7 | r13;
                    r3 = r3 >>> (r8&0x1f);
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r7;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r7 = ((r2 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x538e4;
                        continue;
                    }
                case 0x53910:
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53a8c;
                        run_53a00(); return;
                    }
                    r8 = r0 + 8;
                case 0x53920:
                    r3 = r9 + r0;
                case 0x53924:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r9 = r3 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53884;
                        continue;
                    }
                case 0x53934:
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53ab8;
                        run_53a00(); return;
                    }
                case 0x5393c:
                    r2 = ((r5 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x539a4;
                        continue;
                    }
                    r2 = r8 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x539a4;
                        continue;
                    }
                    r2 = r0 + 8;
                    r8 = r2 - r8;
                    r8 = r8 << 2;
                    r9 = r0 + 32;
                    r9 = r9 - r8;
                    r7 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5397c;
                    continue;
                case 0x53978:
                    r7 = r3 + r0;
                case 0x5397c:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r4 = r3 << (r9&0x1f);
                    r4 = r7 | r4;
                    r3 = r3 >>> (r8&0x1f);
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r4 = ((r2 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53978;
                        continue;
                    }
                case 0x539a4:
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53b00;
                        run_53a00(); return;
                    }
                    r2 = r6 + r0;
                case 0x539b4:
                    r5 = r5 + 4;
                    r3 = readPages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r3;
                    r3 = ((r10 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x539b4;
                        continue;
                    }
                case 0x539d0:
                    r2 = r2 + 4;
                    r3 = ((r10 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x539d0;
                        continue;
                    }
                case 0x539e4:
                    r2 = readPages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff];
                case 0x539ec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53a10;
                        run_53a00(); return;
                    }
                case 0x539f4:
                    if(r6 == r10) {
                        /* Next insn is delay slot */ 
                        pc=0x53b28;
                        run_53a00(); return;
                    }
                    r10 = r10 + -4;
                case 0x53a00:
                    pc=0x53a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53a00() throws ExecutionException { /* 0x53a00 - 0x53c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53a00:
                    r2 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x539f4;
                        run_53800(); return;
                    }
                case 0x53a10:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53a30:
                    r8 = r8 + 1;
                    r2 = r8 < 9 ? 1 : 0;
                    r11 = r11 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53a68;
                        continue;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r2 << 4;
                case 0x53a50:
                    r7 = r7 & 15;
                    r7 = r2 | r7;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r7;
                    r3 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x53924;
                    run_53800(); return;
                case 0x53a68:
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53920;
                        run_53800(); return;
                    }
                    writePages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    r5 = r5 + -4;
                    r8 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x53a50;
                    continue;
                case 0x53a8c:
                    r12 = r5 + -4;
                    writePages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff] = r0;
                    r14 = r11 + r0;
                    r5 = r12 + r0;
                    r8 = r0 + r0;
                    r3 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x53924;
                    run_53800(); return;
                case 0x53aac:
                    r7 = r0 + 41;
                    if(r2 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x53b50;
                        continue;
                    }
                case 0x53ab8:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53ad8:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x53aec;
                    pc=0x52a00;
                    run_52a00(); return;
                case 0x53aec:
                    r6 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x53828;
                    run_53800(); return;
                case 0x53b00:
                    if(r24 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x539e4;
                        run_53800(); return;
                    }
                    r2 = readPages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff];
                    r24 = r0 - r24;
                    r3 = r0 + -1;
                    r3 = r3 >>> (r24&0x1f);
                    r2 = r3 & r2;
                    writePages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x539ec;
                    run_53800(); return;
                case 0x53b28:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff] = r2;
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53b50:
                    r3 = r3 + 2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5393c;
                        run_53800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x53ab8;
                    continue;
                case 0x53bfc:
                case 0x53c00:
                    pc=0x53c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }

    private static final int[] _data1 = decodeData("\177\177\177\177x\000\000\000\000\000 \020\010\004\002\001",0x2);
    private static final int[] _data2 = decodeData("\177\177\177\177x\000\000\000\000\000 \020\010\004\002\001",0x2);
    private static final int[] _data3 = decodeData("$[LF+`@<\020\020eSr\r^u7\035\000\000\000\000\000c7[-V{8^c7[\rBs \000\000\000\022-W\003=dt\020\032-f#\025p 7].B\003=L 9\030-f;\024@(4[N\007+P@f4[\014R\003\r^r9\035.\007!$\000\000\022\\dR[1H\000\000\024LVc=Fa:\032-vq\001de3\031.&+9Fe9H\014\026q\001Rm8\033n'!\001nh4Xm\002\003%f 7\033nB\003\005Xl7]lV!\001Pe9\031 \000\000\001\006a7\033Mw!\001Pa7\031\rF)\001hh4\\d\007\033\025Nm2[NB\003IJf2\\LVs\rJ 4[D\007\023\025Xo1H\014VsQdy\000\021Mw+9H +Sj$!\001de6\033l6\013QRo7\013\004\006\023Uh 7\033nB\003\025\\o:Ym\002\003\011rt2\\d\006c\025Lt\000\000\000\000\000$\\w7\\L@I\025f\n\000\000\001\022s\011rt2B'bA\025f)\005\000\000\000\000$\\b<]\014PIpP%9J! \000\000\000F7]-f!\001&E#P(D\"H@r2[\rv\033\005hi7[EB\003\011jt\020\033Mw!\001Jn7],vA\001Dy:\031.2\0031Jf:\000\001\022s\031Br0Y\014G\020$Js\005\000\000\000\002\rBn7\033nB\003!Bn2\033\014R\003IJl7Xl\027#%^n\020\035\017\027\003\024@%2\010\014\027!\000Jl:@\001\022s\011rt2B$B)@dX\005\000\000\000\003=\\\000\000\033lf0\001\006a7\033Mw!\001Fo7\035LW\023P@o\033\r$\0063%Xe9H\rv1\001hh4\\d\007#e`e\000\000\000\005\033%te\020\033lb\003QJx:\010\0166+\035Ze7\035\007\"\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\024jl:B@\000\000\001&i=\031$\006{\030@d0]\014\022\003MJg6Y-g!h@ \020\010\004\002\001\000@ \020\010\004\002\001\000@%\032[\016PP\000\000\000)Z/&)\001^f\020\030N7\031\001fe3[,VsPt \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\011&VcT\024\000\000\000\n6KiJ 7YD\007S\025do8\030,v)\001fe3[,VsPt \020\010\004\002\001\000@ \020\010\004\002)UXu\005\000\000\000\0029jm1\031.\"\003=L 4[.\006{Ihs\035\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000J5:B@\000\000\000\000N:[,&+H@o3\010\014WCA^r:\034g\"\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \022M.PP\000\000\000\000\023NVk\011Jr\020\033lb\003QJx:\010\0166+\035Ze7\035\004\007\023\025Xo1X.FK=\\s\035\010\004S+T\024\000\000\000\000\004sUZb2\\D\006{\030@d0]\014\022\003MJg6Y-g!\001de6\033l6\013QRo7\034g\"\001\024ju\005\000\000\000\000\001\0366\032H\014fK1Jn0[,R\003=`t4[mcQ\000@ \020\010\004\002\001\000@`\022\\dpP\000\000O8\031.&\013QRn3H\0167KMhe6H\rw\003QRo7\010\016vKQPo:]\004\006#\005ha\020\031Mw+9H\000\000\023fc)\001^p2\\L\027#%\\g\020\034o\027\033QJm\020\033n\007#%^n\035\010\014\002+LN\n\000\000\nw\023=\\g\020\033fc)\001Zo2\031-B\003\031^r\020\032-g\003Uh 3\032-F)\001fp2Xm\0263%Jd\000\000\000\000\002<l5\020\030.7\033\025Zb6\031.\"\003=`t4[mcQ\000@ \020\010\004\002\001\001@%9Ia \000\001\0366\032H\014\027+QPo9\010\rw\003QRo7\016D\002\001\000@ \020\010\004\002\001\000@`\022\\dpP\000\000O\033\r$\007#%Ze9]\014\026k@@o8\035\r\026{8t \020\010\004\002\001\000@ 0\011.28(\000\000#\033nVs\020@u7\032mf{]\\ 7\\\016FK=\\,\020\035\017\027\003\024@%2\013\004\006c\025\\g:\032\004\002+\020\000\000\000\000\016p\000\000\000C0[Mf{P@o8\031-b\003\000Js\023ND\002+L\000\000\000\000\0070Ql@F4[\014R\003\035Jn2\\L\027#\025H 1\036$\006\033<l5\020\035D\002+L@u9Z-f9\001Zo2\031-B\003\000Js\023BG0P\000\\p\034\014&`P\000\000.3\033n\007 $\022c7[.\006K1Jr\026\010L6yXj ;\010\004W\031\010\024\000\000\000\000\002s\031^p:\002!\026\013Uhh7\\EB\001\010Js\021\002@\000\000\000\000.1X.6($\022o7\002@\000\0019He1\035,vK9Lo\004I.0P\000\000.2^\016\006{Ih\011\004I.0P\000\000\000\000\020J5\030\001\006O\"\021 \000\000\000\000D U\010\020\000\000\000\000-\021*$zA\002G\"@\000\000\000\000\\i6\\\rw\023P\022%9B@\002+L@=\020\011.0P\000\000\000\000\013LWCA^r:\002$W\030(\000;\005\016d\004\032=\010E\020\024hT:5\nN*\002G0Q9fe3[,VsP\022\"\022\\d Q\025f:\005\000\000\000\001l\024;\020\021\010\025\"\004@S\"QiT*9(\n\035BEg\033\025Nm2[N@I\010Js\021\002DW\031h\024\000\000\000\0070Ql@B)Td\005\032\025\016M\"SJ@Ql\024.9Y,vk\025\\t\004HDW\031\010\024%9NA \000\000\000\000\004KN&+L\022%6\035! \000\000v\n\035H\013$*I\036P QhR\002M\nG&Q)e (v\n\000\013M\026kA^r:\002+uzi _)U\010\025\022Q>_\004B'2\0021Rn5Y.\"\003\035Jn2\\L\027#\025H 9^-V\023=X\n\000\000\000\000\001\025f \036H\013uzi _)U\010\025\022Q>_\005\000\000\002sMJg6Y-g $D%9HG\"\003iJr7\\\014\026;\024\024%9NA \000\000\000\000\027\031-f (\000\000\000\000\000\021&\000\000\001\nJ\000\000\010UP\000\000E5@\000\004(8\000\000\"G`\000\002\037\014\000\000\021t`\000\001\017\030\000\000\010vx\000\000Gj\000\000\004ID\000\000$I@\000\002$4\000\000\022!`\000\001\021\017\000\000\011\023(%9ND\005;\005dn4[LsQ\000\000\000\000\011.3Q\001\nr9\033n#Q\000\000%9ND\004K9he9\033L\026a\001Jr9\033n#Q\000\000\000\000\000\n&+\005H 2\\N&{H@(3\032-F)\001Fo9\034NW\003P~)\000\000\nW\033\005Ne\035\010\004W\031\0016o8\035\r\026{9f]\020\031M\026c\024\024S4\033n'!\001^p:\032-vsLt\n\020\010\005U0$\022\011(\034M\026sP@t4\031$\0073\025ds4[mb\0039jm1\031. Q\000@-3B!\020J\005Hd\020\031\014V\023UN 4[Lfy\001ho\020\033l&S\025Ft\020\031M\026c\024\024 \020\013-\000H$\022H2[\016\002\001!hh4\\d\007#\025pt\024BD\002\0015Z 6[lF+0\022\011']LW\023IRd2H\016FC\024@o\033\r$\006k=He6\002D\002\0015\\\011\004B(F{8Nt\020\031lVs\025da:\031$\006\0138@o:]\016\007+P@f4[\014PQ\000@-7H\rf\0135J\011\004SL\026k\024@t4\031$\006{Uhp:]\004\0063%Xe\005\010\004\002kX\022\011\004R-f\033IJa9Y$\0073\025db7\\m\027#d\024\n&\033mf9\001^p:\032-vsLt\n\020\010\005Rk\011fs\026[\014\026\023\025X 7\030-V(%\010e3\032-f)\001Bn2\010\014WCA^r:\010\014\022\002\011&S\020\034lV;5Jn:\010\rF\013\011Jl\005\010\004\002i5Ds9K-f\0135J 9Y,pJMJt\020\035\r\006)\001\\a6Y$\006{\030@t4\031$\004\022M& 9Y,vk\025\\t\005\010\004\002i5Fo2\031%Vc\005De6\010\rf\0135J\011\"\031,fK9J 0[LB\003\025pp7\\NB\003\004@C'Q\010R\003MJg6Y-g!\001Xa1\031-@Q\000@-\026Xmv#\024Zn0[,R\003MJg\004TlW!\001hh2H\rf\0135J 7YD\007#!J !ShD)\001fe3[,VsP\024 \020\013%V#\005ha\026[\014\026\023\025X 7\030-V(%\010e3\032-f)\001Bn2\010\014WCA^r:\010\014\022\002\021\002T H\0166+\035Ze7\035\004\006c\005De6\002D\002\0014Zd0]\014\022k9Bm2H\0166+\034\022S2]\004\007#!J 7\030-V)\001^f\020\035\r\006)\001\010A*\020$\007\033\025Nm2[N@Q\000@-\026Y\014V\023UN-4[Lfx$\022A2\031\004\006#\025Du3H\r\026s\031^ :\033d\006{\011Te1]\004\0063%Xe\005\010\004\002i5Pe6\034\001\020J!Jl8\010\005\007#!Rs\020\035\014WCPR\n\020\010\005Rk9^-7].G\003Uh\011\004Q\rvq\035h 3Y-f+IBt2H\014\026q\001^u:\034\016W!\001Li6\031!\"\001\000Z-7MFRk5^d2[\004\006k=He6\002)w3\025dr4Y\014R\003QPe\020\033fc)\001Zo2\031-@Q\000@-\026]LW\023\011^s2B!\024K9Fr2X.6)\001le9\030Mw\033%hy\005\010\004\002i5le9\034m\026{8\022\011(\034M\026sP@t4\031$\0073\025ds4[mb\0039jm1\031. Q\000@-\026^LW\023=`a3Y%Vc\005De6\010\rf\0135J\011\"\031,fK9J 0[LB\003\025pp7\\NB\003\004@Z\"TIu\002\005\016E\020\034lV;5Jn:\010\rF\013\011Jl\005\010\004\002i5te9\033n\006\013\035J-7\030-V)\001fe3B*6+P@t4\031$\006s\005Ze\020\033lb\003QPe\020\026HU\022= A#Q$\007\033\025Nm2[N@P\000\000\000*[M6s=nn\020\033fc)\001Zo2\031-B\003\000Js\023@\000\002+L@V\022\\a \002MJg6Y-g!\001\\a6Y$\006\001\025f'\020\032.2\003%\\v0[\r\026 \000\000\000\000\023\014\026\023\025X 7\030-V)\001@%9Id\006KL@i7\035L\026c%H\000\000\030ms1T\000\000\000\000\010F{8Nt\020\032mf{\\@w4\030.B\003Q^ 2\033d\007;%hh\020\030\004W\031\034\000N7H\r\026sAjt\020\031M\026c\024\000\000\000\013%V\023Mf-6\030,&+0\000-\026XN7\0315\\a6Y \000\0014Zc7Y\014Rk1Bb2[\000\000\000\000\000-\026Xmv#\024Zn0[,P\0014Zd0]\014\022k1Bb2[\000\000\000\000\000-\026Y\014\027#\004Zn0[,P\0014Zd2XNV8\000Z-2\031,'+\034Zi7\031Mp\000\000\000\000\026K-\006+1`\000\000\013%Vs<Zo:]\016\007+P\000-\026[fc)5Zo2\031-@\0014Zv2\\L&{MJ\000\000\000\005RkYJr9Z-vp\000\000\000\026K/&+I^p0YlRk1Bb2[\000\000\000\000\000-\026^LW\023=`a3Y%Vs\005Ze\000\000\000\025<@\000\001+l\000\000\n^`\000\000Uv\000\000\005/0\000\000*{\000\000\002WX\000\000\025=@\000\001+l\000\000\n^`\000\000Uv\000\000\005/0\000\000*{\000\000\002WX\000\000\025=@\000\001+l\000\000\n^`\000\000Uv\000\000\005/0\000\000*{\000\000\002WX\000\000\025=@\000\001+l\000\000\n^`\000\000Uv\000\000\005/0\000\000*{\000\000\002WX\000\000\025=@\000\001+l\000\000\n^`\000\000Uv\000\000\005/0\000\000*{\000\000\002WX\000\000\025=@\000\001+l\000\000\n^`\000\000Uv\000\000\005/0\000\000*{\000\000\002W@\000\000\025=@\000\001+l\000\000\n^`\000\000Uv\000\000\005/0\000\000*{\000\000\002WX\000\000\025=@\000\001+l\000\000\n^`\000\000Uv\000\000\005/0\000\000*{\000\000\002WX\000\000\025=@\000\001+l\000\000\n]`\000\000Ul\000\000\005/0\000\000*{\000\000\002WX\000\000\025=@\000\001+M\000\000\n\\H\000\000U`@\000\005/0\000\000*{\000\000\002WX\000\000\025=@\000\001+l\000\000\n^`\000\000U]@\000\025\026h\000\000\000\000\010\000\002H\000\000\000T[P\000\000\000\000 \000\n\030\000\000\002Rp\000\000\000\000\001\000\000*@\000\000\nKH\000\000\000\000\004\000\001'\000\000\000*.8\000\000\000\000\020\000\005$\000\000\001):`\000\000\000\000@\000\024`\000\000\005%n\000\000\000\000\000\000\000N\000\000\000\025\027@\000\000\000\000\000\000\002:\000\000\000T^@\000\000\000\000\000\000\n\000\000\000\002R{\000\000\000\000\000\000\000'@\000\000\nKr\000\000\000\000\004\000\001!\000\000\000*/`\000\000\000\000\000\000\004|\000\000\001)?`\000\000\000\000\000\000\024 \000\000\005&\002\000\000\000\000\002\000\000T\000\000\000\025\030\034\000\000\000\000\010\000\002J\000\023fc)\001\032o2\031-B\001\025H 7\033nB\003\031^u7\031\000\000\0039^n2@\000\000\000\001^s\027X&c(\000\000l:[M\027@\000\000\0001Xfc)5Zo2\035-F(\000\000\005'\010\000\000*8P\000\002SF\000\000\025\0348$[.\006{Ihe2\010\r\026#\025\\t4YM\026+H@e<\030lV+\021f 6X/\006K5jm\020\034m\027S\024@(\022]%\020\000\000\000E<\034\rw\023QJd\020\032,F+9hi3\032,W\021\001Jx1Y,V#L@m0^\r\026kUZ 9Z/&)\000P%:J \000\000\001\022n;\030-FK\020@s4^LR\003\031Re6\031\004\0073\005Xu2H\r\026q\001^6\032H\r\006+\005He9\000\000\007\023\010\000\000'\033nB\003\005\\ 7MFR\003=Dj2XnB\003\031Rl2ND\004K9la6\032,B\0035Br5Y.\"\001\024`2,\010\004S\001I0\000\000\000\000\004s=h 0[D\006yXj 7XM&+\rh 3\032-F)h@I7\035L\026c%H 6X,vK\014@%\030\014K\002\001\024`2,\010\004S\001I0\000\000\000\000\004K9la6\032,B\003<l5\020\035LW\023MRo7\010\rg+5De9\016D\002)@dX\000\000\000\000\002\031^u7\031\004\006{Ahi7[D\007;%hh\020\033\014Vs\035hh\020\017\004\003\021\000Pi7\034\016W!\001Li6\031$\006\033=dr:\\\016BH\000\000\000:[M6s=nn\000\036\004S\001I0\000\000\000\011u\031=\0026\032@\000\004cU\\i<\000\000\000\003\rF6\032H\rV{\021jl2@\000\000\013?(\000\000[w@\000\005_$\000\000-x`\000\002ov\000\000\026y`\000\005'm\000\000*>x\000\002SxB+LJs\026\010\014fK1J 0\011.290@l4[LR\001\025j\000\000\000\000\005\003I^g9\030-R\003\005Do9\035\014V!h@\000\000\000\0106C\025Fk\020\031L\026K1Jd\035\010\000\000\002Ade1[mf#%hi7[D\0073%^l0]\014V!h@\000!X-fs=h 7\\\014Vq\000D%9HG\"\001\025f\000\000\000\000\005+9Vn7]mb\003=`t4[mcQ\000Js\000\000\011w\003QRo7\010\016&+Eji9\031.2\003\005\\ 0\\Lw+5Jn:\016D\002+L\000I7\035L\026c%H 0\\Lw+5Jn:\010\014f{H@%9ND\006\001\025f'\000\000\000\004K9la6\032,B\003\021Jf4[M\027#%^n\035\010\014\002+LN\000\000\000\000\004K9He<\010\007Ci\001\006-\037\020mw+9h\000\000\000\0146{5Zo7\013l6{1X.1@\000\000\002%\\d2^\004\003qt@0\000\000\n7#\005dt\020\017\004\004\0314|C7]-g!\000L&\020\024nF\013Ih \025H\0106{U\\t\020\017\007R\002\014Z>![nVsP@&\023\010\nF\013INe:\010\007Ci\001\006-\037\020mw+9h\000'\033nB\003Mjp8\033n'#\025H\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022]%b+T\000\000\000\023nW!\001^f\020\033,Vk=dy\020\013$\007\023\025bu2\\nF+\020@b6\033l6Y\001fi=\031$\003i\000Jl:@\000\004{Uh 7YD\006k\025Zo9\036$\006K8@r2X-Fc=F \026H\016&+Eje9]\014V!\001Dl7Xm2\003MRz2H\007R\001\025Xu\000\000\000\003\001Dd3\032\r&c9`rA!\020hD*\030\000\000\000\000\006\003\011Hf4\032MFsAeBb1Y\014V0\000\000\000\000\022-g3\005Xi2\010\016GKAJ 9Z/&)\001Rn\020\023LWCQ*V0[\000\000\000\001Fo6[-vq=ps8\034M\026sQL.1@\000\000\002%\\v0[\r\026!\001hy8\031$\007\033%te\020\032-b\0029Jx:\022*f\0130\000\000\000\024j\007#H@!\036H\006\000\000\000\000S\020\010'R\001@\000\000$[Nf\0131Rd\020\034m\027S\024@m7Y\r\0263%Jr\020\031Mw\021\000Jn\020\031Mw\0235Bt\020\034n\006+\014@i7\010\017\0073M\\p9\032-g#\030\000\000$[Nf\0131Rd\020\031Mw\0235Bt\020\034n\006+\rRf4Y.\"\003%\\ <\035N6sAdi7\035\014`\000\001$e9H\007ci\000` \023\011D\002CU\\s4Ymf+\020R \024\024LW\031,b)\020\017\004\004\023ULS4^LP\000\000\000\000\000\000;k@\000\003^&\000\000\035q0\000\001o\013\000\000\016yX\000\000wE@\000\007=\024\000\000<-\000\000\003br\000\000\036\027\020\000\001q/\000\000\017\013H\000\000x\\@\000\007Ed\000\000<. \000\003br\000\000\036\027\020\000\001q9\000\000\017\nP\000\000x\\@\000\007E\024\000\000<. \000\003br\000\000\036\0130\000\001r\033\000\000\017\011 \000\000xJ\000\000\007DP\000\000<%\000\000\003b(\000\000\036\022@\000\001q\024\000\000\017\011 \000\000xJ\000\000\007DP\000\000<%\000\000\003b(\000\000\036\022@\000\001q\024\000\000\017\011 \000\000xJ\000\000\007DP\000\000<%\000\000\003b(\000\000\036\022@\000\001q\024\000\000\017\011 \000\000xJ\000\000\007DP\000\000<%\000\000\003b(\000\000\036\022@\000\001r\021\000\000\017\011 \000\000y\005\000\000\007DP\000\000<@\000\000\003b(\000\000\036\022@\000\001q\024\000\000\017\011 \000\000xJ\000\000\007DP\000\000<%\000\000\003cr\000\000\036\022@\000\001q\024\000\000\017\011 \000\000xJ\000\000\007DP\000\000<6`\000\003dD\000\000\0367P\000\001s=\000\000\017\033h\000\000y^@\000\007Mt\000\000<o \000\003fz\000\000\0367P\000\001s=\000\000\017\033h\000\000yT\000\000\007K \000\000<o \000\003fz\000\000\0367P\000\001s=\000\000\017\026@\000\000y^@\000\007Mt\000\000<o \000\003e2\000\000\036+P\000\001s#\000\000\017\0308\000\000y^@\000\007Mt\000\000<^ \000\003fz\000\000\036.@\000\001s=\000\000\017\033h\000\000y\022\000\000\007R\034\000\000=\017 \000\003hf\000\000\036E\020\000\001t\034\000\000\017\035@\000\000z\023\000\000\007S$\000\000=\030 \000\003gv\000\000\036?0\000\001tP\000\000\017%P\000\000y}B+Lt \000\000\000\000\000\000\002\002\001\000`0\030\014\010\004\002\001\000@ \020\010\005\002A P(\024\n\005\002A P(\024\n\005\002A@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\000\004\002\001\000@ \020\010\004\002\001 P(\024\nn\005\002A\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\"\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\000 \020\010\004\002\001\000@ \020\010\020\010\004\002\001\000@ A P(\024\n`\000\000\001&u1XlW\033L\000N7]\004\006{]\\e9\000\000\000\0029^ 9],6A\001Li6\031$\006{H@d4\\LV\033Q^r<@\000\000\0029^ 9],6A\001`r7XlW\033L\000I7\035\014W\023Ijp:\031,B\003Mrs:\031-R\003\rBl6\000\011\022z<@e9\034Mw\020\000\000\000'\033d\007\033UFh\020\031\014W3%Fe\020\033n\"\003\005Hd9\031.7\030\000\000\000 \\Lr\0031Rs:\010\016F{<@l7[Lp\000\000\000E<\031,2\003\031^r6X.B\003\025dr7\\@\000\000\001&o1ZlW!\001Bl9\031,\026#d@c7[Mf+\rhe2\000\000\000\000\001\004a2\010\014fK1J 7\035-V\023\025d\000'\033d\006\033!Rl2\034LVp\001\010e9]\r\026s\005hi7[D\006\013\021Hr2\\n2\003IJq:Z.&+\020\000\000\000\000\011fy\001Zo9\031$\007\003I^c2\\n6+L\000\000\000\023Mw!\001Jn7],vA\001fp0XlP\000\000\000\000(\031.&k%fs4[mb\003\021Jn4Y,@\000\000\000B0Y\004\006\013\021Hr2\\n0\002\021Jv4XlR\003=d 9\031.6{Udc2H\014'+Mr\000#\032-F)\001Jx4\\nG\030\001\006r7\\n2k\021Jv4XlR\0031Rn5@\000\000\0029^ 9],6A\001He;\032,6(\000\000N7]\004\006\011\001Hi9\031,7#=dy\000\022\rw\033P@i9H\014F{]\\\000\000\000\000\004\033=\\n2XnFK=\\ 0[\016&+\005Hy\020\032-b\003Ado3\\LW\033L\000\000$\\d\006\011\001Hi9\031,7#=dy\000\000\011\026sYBl4Y\004\006\013INu6Y-g \000\000\000\000\023LW#]^r5H\r\026sQJr3\030,6)\001Rs\020\033Mw!\001Fo7\031M\026;Ude2\000\nF{<@m0[O\022\003=`e7\010\014fK1Js\020\032-b\003Mrs:\031-P\000\000\000T7[d\006k\005\\y\020\033n\006+8@f4[\014W\030\001\034o:\010\014\022\003\rPa9\030,7#\025d 2\031.fK\rJ\000\000\025\014WCP@f4[\014R\003\011js<@\000\0043%Xe\020\035\rvy\001Xa9\031lP\000\001\020o9]\004\006KL@u7\034LV\013\rPa1\033\014P\0029^ 9\\\014\026\033\024@l2YNB\003=\\ 2\031.fK\rJ\000$[\rF+\035Bl\020\034lV+,\000\000\000\000\n&+\005H-7[MGI\001Li6\031$\007\033eft2[ \000\000\001(o7H\rV\0139r 6\032-f[L\000\000!\034Mv[\025\\ 8\032.\006(\001\032a:\032\004\006\013INu6Y-g \000\000\000)\031.7+1h :\033mr\0031Br3Y \000\000\000\000N7H\rV+Mfa3Y$\006{\030@d2\\m\027\023\025H :\036.\006(\000\000I2\031-g#%Li2\\D\007\023\025Zo;\031,@\000\001\010e0Y\rF{\rV\000\000\000\000\004s\025hw7\\M2\003%f :[N&+\005Fh0XMF(\000\000N7H\rF{\rV\000'\033nB\003\004@s:\034LV\0134\000\000\000\000\n7#IJa6H\r\026{\rhl\020\035\r\026k\025^u:\000\000\000\000\001\034o\020\034nG\023\025Bm\020\034LW\033=jr1Y.0\002YRr:\035,\026a\001Fi9\030nVKP@i9H\014v{9J\000(\034Mw#=Fo6\010\014W\023I^r\000\000\nVs-\\o;[D\007\003I^t7Xmv`\000\000\000\000\023.VcQRh7\\\004\006\013Qhe6\\\016F+\020\000\000!\030,B\0035Js9X,v(\001\014u7\030nFK=\\ 7\033nB\003%Zp6\031-V+9he2\000\000\000\000\001\010i9\031,7#=dy\020\033Mw!\001Jm8\035\017\020\002\031Rl2H\rw\021\001`a:\032\004\006s\005Ze\020\035\rvy\001Xo7\031`\000\002Q^o\020\033,\026sd@s<[,&{1Rc\020\033\r\026s-f\000'\033d\006\023ULf2\\D\007\033ABc2H\014\0273\005Rl0XMF(\000\000\000 Y\014G\023\025fs\020\031L\026k%Xy\020\033Mw!\001fu8\034\rw\023QJd\020\030O\022\003Ado:\033l6{0@f0[-\026cd\000P9\033nF{\r^l\020\035n&{9N :\036.\006)\001Lo9\010\0166{\rVe:\000\000\005\033=Fk2]\004\006{AJr0]\r\026{8@o7\010\rf{8Zs7Xm6+P\000\000(\034Mw#=Fo6\010\rf{P@a;\030-\026c\005Dl2@\000\004\033=\\n2XnFK=\\ 9\031,g+MJd\000\000\010\026#\021de9\\d\006\0131de0Y\017\022\003%\\ :\\lP\000\001&o3\035\016v\013IJ 1X.W\033\025H 1[mfs\025Ft4[mb\003\005Do9\035\000\000\000\000\000S7Xm6+P@i9H\rf{P@c7[Mf+\rhe2\000\n6{\rVe:\010\r\027\031\001Bl9\031,\026#d@c7[Mf+\rhe2\000\011w\003\025da:\032-vq\001Fa7\030lVc\025H\000\000\024nF\013QJ 7\033nB\003IJc7]LW\023\005Dl2@\000\000\002Ade;\032-w+L@o;[LW\021\001Hi2Y\000\004{AJr0]\r\026{8@n7]\004\007\033U`p7\\NF+\020@o7\010\0166{\rVe:\000\000\000\0025Js9X,v)\001ho7H\rF{9N\000\000\000\000\004\033=\\n2XnFK=\\ :\032-V+\020@o:]\000\000\000\000\000\000\001%I@\000\n,4\000\000S,`\000\005\032^\000\000)U0\000\002M'\000\000\024j\030\000\001&O@\000\n4l\000\000S%`\000\005\032&\000\000)Qp\000\002M\013\000\000\024h8\000\001&A@\000\n5\\\000\000S\037`\000\005\031v\000\000)Np\000\002Ls\000\000\024fx\000\001&5@\000\n3\034\000\000S\030`\000\005\031>\000\000)K0\000\002LW\000\000\024e\030\000\001&'@\000\n2,\000\000S\021`\000\005\031\006\000\000)Gp\000\002L;\000\000\024c8\000\001&\031@\000\n1<\000\000S-`\000\005\032n\000\000)Vp\000\002M7\000\000\024k8\000\001&[@\000\n5\\\000\000S-`\000\005\030V\000\000)Dp\000\002M7\000\000\024k8\000\001&[@\000\n5\\\000\000S-`\000\005\032n\000\000)Vp\000\002M7\000\000\024k8\000\001&[@\000\n5\\\000\000S-`\000\005\032n\000\000)D0\000\002M7\000\000\024ax\000\001&\r@\000\n5\\\000\000S-`\000\005\032n\000\000)Bp\000\002M7\000\000\024k8\000\001&[@\000\n0L\000\000S-`\000\005\032n\000\000)Ap\000\002M7\000\000\024k8\000\001&\005@\000\n5\\\000\000S-`\000\005\032n\000\000)Vp\000\002M7\000\000\024k8\000\001&[@\000\n5\\\000\000S-`\000\005\032n\000\000)@p\000\002M7\000\000\024`\030\000\001%\177@\000\n/l\000\000S-`\000\005\032n\000\000)>p\000\002M7\000\000\024k8\000\001&[@\000\n5\\\000\000S-`\000\005\032n\000\000)Vp\000\002M7\000\000\024k8\000\001%y@\000\n/<\000\000Rz`\000\005\027N\000\000)<0\000\002M7\000\000\024]x\000\001%m@\000\n.\\\000\000Rt`\000\005\027\036\000\000)90\000\002KG\000\000\024\\\030\000\001%_@\000\n-l\000\000Rm`\000\005\026f\000\000)5p\000\002M7\000\000\024k8\000\001&[@\000\n-,\000\000Ri`\000\005\032n\000\000)Vp\000\002M7\000\000\024k8\000\001&[@\000\n-\014\000\000S-`\000\005\032n\000\000)Vp\000\002M7\000\000\024k8\000\001%O@\000\n,l\000\000Reb%\034F\000\032-f0\001\034A'\000\rf\0138\000(7\035-Fa$\000\000\000\000T[\000\000\005+\026\000\000*Y0\000\002T\027\000\000\025,X\000\001*e@\000\nV,\000\000U2`\000\005+\026\000\000*Y0\000\002Ou\000\000\025\002P\000\001*e@\000\n?t\000\000T\\@\000\005+\026\000\000*1 \000\002S\016\000\000\025\030p\000\001)G\000\000\nL8\000\000Tc@\000\005&\034\000\000*1`\000\002S\016\000\000\025\030p\000\001*e@\000\nV,\000\000U2`\000\005+\026\000\000*Y0\000\002UK\000\000\025,X\000\001*e@\000\nV,\000\000U2`\000\005)\010\000\000*MP\000\002UK\000\000\025&h\000\001*e@\000\nV,\000\000U2`\000\005+\026\000\000*T\020\000\002UK\000\000\025,X\000\001)N\000\000\nV,\000\000U2`\000\005+\026\000\000*Y0\000\002UK\000\000\025\034(\000\001*e@\000\nV,\000\000Tu\000\000\005+\026\000\000*Y0\000\002UK\000\000\025,X\000\001*e@\000\nV,\000\000U2`\000\005+\026\000\000*Y0\000\002UK\000\000\025 (\000\001)x\000\000\nS4\000\000U\033 \000\005)Z\000\000*@\020\000\002Sp\000\000\025,X\000\001*e@\000\n?D\000\000U2`\000\005(6\000\000*V`\000\002T/\000\000\024\177\010\000\001*e@\000\nA8\000\000U2`\000\005*J\000\000*Y0\000\002UK\000\000\025%X0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\000\000\013\0310\000\000Z!\000\000\005R\010\000\000,f \000\002i\004\000\000\026H \000\0014B\000\000\013$\020\000\000Z!\000\000\005R\010\000\000,1 \000\002d\000\000\000\026H \000\0011I\000\000\013\031X\000\000Z!\000\000\005NR\000\000,p`\000\002g\006\000\000\02680\000\0013C\000\000\013\034\030\000\000Ya@\000\005N\014\000\000,p`\000\002g\006\000\000\026H \000\0014B\000\000\013$\020\000\000Z!\000\000\005R\010\000\000-\020@\000\002i\004\000\000\026H \000\0014B\000\000\013$\020\000\000Z\n\000\000\005O\004\000\000-\020@\000\002gB\000\000\026H \000\0014B\000\000\013$\020\000\000Z!\000\000\005Ol\000\000-\020@\000\002i\004\000\000\0264p\000\0014B\000\000\013$\020\000\000Z!\000\000\005R\010\000\000-\020@\000\002fw\000\000\026H \000\0014B\000\000\013\037h\000\000Z!\000\000\005R\010\000\000-\020@\000\002i\004\000\000\026H \000\0014B\000\000\013$\020\000\000Z!\000\000\005R\010\000\000-\020@\000\002h\026\000\000\0269 \000\0013a\000\000\013\036\010\000\000Yp@\000\005NJ\000\000,r@\000\002i\004\000\000\026H \000\0011C\000\000\013$\020\000\000Z\022@\000\005Q<\000\000,uP\000\002c\006\000\000\026H \000\0012\002\000\000\013$\020\000\000Z\033`\000\005R\010\000\000-\020@\000\002h8\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@W TIdJ9\016:\020\034\014\027#!Fo7\031G\"\002U\\k7\033nvq\000Dn0[,R\021h@%2\002@\000\002]\002R'\022)d9h@s<\\l7#0t *[M6s=nn\020\033L\026k\024t \022Y\001 \000\000^d2]Ev\033=\\s7[\014P\000\000\000\000\022]%b+T\\%:KDW(\001*n5[Mw;8@E9\034Mw\020\000\000\000\022\\g\"\001\025f\n\000\013lW#\014^g9\033nW\000\000\000%-WG%ihJ[/\016KSQ\025Pu\000\013lW#\014^p0\\n7;\020\000%-WG%ihJ[/\016KSQ\025H:\022Y\007\"*m<:.NDUZxt]\035\011.0P\000\000\000*ThU\020\000\000\000\000\013`\000\000\000\\\000\000\000\005v#\025l/7\035-F`\000\000\000'\033d\004+Ido9\000\000\000\000\001*n5[Mw;8@h7\\n@\000\000\000\000$\033n7!\001\\a6Y$\006c=^k:\\\004\0063\005Rl:\\LP\000\000\000\000*[M6s=nn\020\034lW\023YJr\020\031.'\023=d\000\000\000\000\004s<@a2\031\016&+Mf 0\\n6{\rRa:\031,B\003]Rt4\010\rf\0135J\000\000\001,L\000\000\ndf\000\000V&p\000\0052>\000\000+\024 I7\031M\026s%hy\000\000\000\000\0029BN\000\024\011u\032%0\000\000\000\000\000\000\000\n\000\000\000\003\020\000\000\000}\036'\032+\024_1\011^\016)\0371\017+(SLf*(?zDz)gR*nt\010gc\022yh+\020\006\024\031\025Fz\r\006Aa^&~\004\000\000FIn\026[(\025\\\027&N\011p\037$\177yzVP':#r0\016LNQ*?:\1779ogC\177@\000\000\000\000\000\000\002\000H\000\000\000\000\000\000\001\000Y\000\000\000\000\000\000\000@GP\000\000\000\000\000\000 0q\000\000\000\000\000\000\020\037\006P\000\000\000\000\000\010\022t\022\000\000\000\000\000\004\013\014%P\000\000\000\000\002\006/WB\000\000\000\000\001\003MfY \000\000\000\000B\001(\013r\000\000\000\000!\ri\0077 \000\000\000\020MQTRD\000\000\000\010*\021B9e \000\000\004\026ZyD\017$\000\000\002\014\030kzIF@\000\001\006Aa^&~\004\000\000C;\r\nx.b@\000!jx\026k\035\035H\000\020|\025G\021A\021\036@\010A-<:xZc\010\004\",5dk8]u\002\022\001pgAI],I\0115\026@X~\n+lDu\036\0107Nf;4\000\001\0167@\000\010tn\000\000G&p\000\004:`\000\000#S8\000\002\035\033@\000\021i\\\000\001\016M`\000\010tn\000\000G&p\000\0047h\000\000#? \000\002\035\033@\000\021_@\000\001\016R\000\000\010tn\000\000G(@\000\004:'\000\000#R8\000\002\035\023@\000\021i\034\000\001\016I`\000\010tN\000\000G$p\000\004:'\000\000#R8\000\002\035\033@\000\021i\\\000\001\016M`\000\010tn\000\000G&p\000\004:7\000\000#S8\000\002\035\033@\000\021i\\\000\001\016M`\000\010t\036\000\000G&p\000\004:7\000\000#S8\000\002\035\033@\000\021i\\\000\001\016M`\000\010tn\000\000G&p\000\004:7\000\000#S8\000\002\034`\000\000\021i\\\000\001\016M`\000\010tn\000\000G&p\000\004:7\000\000#JH\000\002\035\033@\000\021i\\\000\001\016. \000\010tn\000\000G&p\000\004:7\000\000#S8\000\002\035\033@\000\021i\\\000\001\016M`\000\010tn\000\000G&p\000\004:7\000\000#E0\000\002\034\"@\000\021i\\\000\001\016M`\000\010tn\000\000G\010\020\000\0048E\000\000#S8\000\002\035\033@\000\021_\020\000\001\016M`\000\010op\000\000G,@\000\0049M\000\000#> \000\002\035\033@\000\021gH\000\001\016M`\000\010sH\000\000G&p\000\004:7\000\000#@80\030\014\006\003\001@`0\030\014\006\003\001@`0\030\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\006)\025Xd\000\000\000\000\000\000\011\003X\000\000H\013p\000\004@_\000\000$\005x\000\002 /@\000\022\002|\000\001\020\027`\000\011\001>\000\000H\013p\000\004@_\000\000$\005x\000\002 /@\000\022\002|\000\001\020\027`\000\011\001>\000\000H\013p\000\004@_\000\000$\005x\000\002 /@\000\022\002|\000\001\020\027`\000\011\001>\000\000H\013p\000\004@_\000\000$\005x\000\002 /@\000\022\002|\000\001\020\027`\000\011\001>\000\000H\013p\000\004@_\000\000$\005x\000\002 /@\000\022\002|\000\001\020\027`\000\011\001>\000\000H\013p\000\004A;\000\000$\005x\000\002 /@\000\022\002|\000\001\020\027`\000\011\rn\000\000H\013p\000\004@_\000\000$\005x\000\002 /@\000\022\002|\000\001\021\\\000\000\011\r`\000\000Hn\000\000\004Fp\000\000$7\000\000\002#8\000\000\022\033@\000\001\021\\\000\000\011\r`\000\000Hn\000\000\004@_\000\000$\005x\000\002 /@\000\022\002|\000\001\020\027`\000\011\001>\000\000H\013p\000\004@_\000\000$\005x\000\002 /@\000\022\003\024\000\001\021[ \000\011\001>\000\000HmP\000\004@_\000\000$\005x\000\002 /@\000\022\002|\000\001\021Z@\000\011\001>\000\000H\013p\000\004AS\000\000$\005x\000\002 /@\000\022\002|\000\001\020\027`\000\011\001>\000\000H\013p\000\004@_\000\000$\005x\000\002#0@\000\022\002|\000\001\020\027`\000\011\r0\000\000H\013p\000\004@_\000\000$\005x\000\002 /@\000\022\002|\000\001\020\027`\000\011\001>\000\000Hj@\000\004@f\000\000$6h\000\002#6@\000\022\0334\000\001\021T \000\011\r\016\000\000H\013p\000\004@_\000\000$4p\000\002 /@\000\022\034 \000\001\0205\000\000\011\016\n\000\000H\013p\000\004@_\000\000$8\020\000\002 /@\000\022\033h\000\001\020\027`\000\011\001>\000\000Hl\020\000\004DJ\000\000$\032h\000\002\"%\000\000\022\022\004\000\001\020k \000\011\0100\000\000H30\000\004C\033\000\000$\031X\000\002!M@\000\022\014l\000\001\020f`\000\011\0066\000\000H30\000\004C\033\000\000$\032h\000\002!V@\000\022\r4\000\001\020k \000\011\006Z\000\000H5P\000\004C-\000\000$)P\000\002!V@\000\022\r4\000\001\020k \000\011\n\004\000\000HO@\000\004C-\000\000$\032h\000\002\"7\000\000\022\r4\000\001\020k \000\011\006Z\000\000H5P\000\004D]\000\000$\032h\000\002!V@\000\022\r4\000\001\020k \000\011\006Z\000\000HJp\000\004C-\000\000$\032h\000\002!V@\000\022\r4\000\001\021\024 \000\011\006Z\000\000H5P\000\004C-\000\000$\032h\000\002!V@\000\022\r4\000\001\020k \000\011\n4\000\000H5P\000\004C-\000\000$\032h\000\002\"A\000\000\022\023p\000\001\020k \000\011\006Z\000\000HM`\000\004C-\000\000$\032h\000\002!V@\000\022\r4\000\001\021\027 \000\011\006Z\000\000H5P\000\004C-\000\000$\032h\000\002!V@\000\022\022\\\000\001\020k \000\011\006Z\000\000H5P\000\004C-\000\000$%\010\000\002\"f@\000\022\025L\000\001\0213 \000\011\nf\000\000HV0\000\004E[\000\000$- \000\002\"j\000\000\022\026P\000\001\0215\000\000\011\013(\000\000HZ@\000\004ET\000\000$0\030\000\002#\001@\000\022\025L\000\001\021,`\000\011\nf\000\000HV0\000\004E3\000\000$+\030\000\002\"Y@\000\022\026\030\000\001\0211@\000\011\013\014\000\000HX`\000\004EF\000\000$,0\000\002\"Y@\000\022\025L\000\001\021,`\000\011\nf\000\000HV0\000\004E3\000\000$+\030\000\002\"Y@\000\022\025L\000\001\021,`\000\011\nf\000\000HV0\000\004E3\000\000$+\030\000\002\"Y@\000\022\025L\000\001\021,`\000\011\n@\000\000HV0\000\004E3\000\000$+\030\000\002\"Y@\000\022\025L\000\001\021,`\000\011\nf\000\000HV0\000\004EF\000\000$,0\000\002\"c\000\000\022\026\030\000\001\0211@\000\011\013\014\000\000HV0\000\004E3\000\000$+\030\000\002\"Y@\000\022\025L\000\001\021,`\000\011\nf\000\000HV0\000\004E3\000\000$+\030\000\002\"Y@\000\022\025L\000\001\021,`\000\011\nf\000\000HV0\000\004E3\000\000$+\030\000\002\"P\000\000(\000\001\000\000@\000\030\000\010\000\002@\000`\000\034\000\010\000\002 \000P\000\026\000\006\000\001P\0008\000\017\000\004\000\000\000\000\0110&\000\000K\013p\000\004X_\000\000%AH\000\002,/@\000\022b|\000\001\026\027`\000\0111>\000\000K\013p\000\004X_\000\000%68\000\002+9@\000\022b|\000\001\025[`\000\011.D\000\000K\013p\000\004WE\000\000%<H\000\002+d@\000\022^$\000\001\025r \000\011/\022\000\000Jy\020\000\004WI\000\000%<H\000\002+d@\000\022b|\000\001\026\027`\000\0111>\000\000K\013p\000\004X_\000\000%Ex\000\002,/@\000\022b|\000\001\026\027`\000\0111>\000\000Jzp\000\004X_\000\000%Ex\000\002,/@\000\022b|\000\001\026\027`\000\0111>\000\000K\013p\000\004X_\000\000%Ex\000\002,/@\000\022H`\000\001\026\027`\000\0111>\000\000K\013p\000\004X_\000\000%Ex\000\002)\005\000\000\022b|\000\001\026\027`\000\011/V\000\000K\013p\000\004X_\000\000%Ex\000\002,/@\000\022b|\000\001\026\027`\000\0111>\000\000K\013p\000\004X_\000\000%Ex\000\002+}@\000\022` \000\001\026\027`\000\0111>\000\000K\013p\000\004W\036\000\000%@@\000\002,/@\000\022b|\000\001\024A@\000\0111>\000\000Jnp\000\004R\031\000\000%C8\000\002)\003\000\000\022b|\000\001\026\007 \000\0111>\000\000J!0\000\004X_\000\000%Ex\000\002+C\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ 7\031@\000\003%\\i:\036 \000\000\001Bn\000\000\000\000&s\020\000\0028\000\000\000\023@\000\000\001\034\000\000\000\011`\000\000\000N\000\000\000\004p\000\000\000'\000\000\000\0028\000\000\000\023?`\000\001\033~\000\000\011_p\000\000M\177\000\000\004ox\000\000'\000\000\000\0028\000\000\000\023@\000\000\001\034\000\000\000\011`\000\000\000N\000\000\000\004p\000\000\000'\000\000\000\0028\000\000\000\023@\000\000\001\034\000\000\000\011`\000\000\000N\000\000\000\004p\000\000\000'\000\000\000\0028\000\000\000\023@\000\000\001\034\000\000\000\011_p\000\000N\000\000\000\004p\000\000\000'\000\000\000\0028\000\000\000\023@\000\000\001\034\000\000\000\011`\000\000\000N\000\000\000\004p\000\000\000'\000\000\000\0027/\000\000\023@\000\000\001\034\006 \000\011t&\000\000O \000\000\004yz\000\000'\n8\000\002=\006\000\000\023h\000\000\001\036Dar9RY%{\010MprI{\010zZE\034f2RC\177T'RN=\022Vw F>\031\027NCC\0001!I,7P`\000(.P\000\002B.@\000\024\022t\000\001!\027 \000\n\011:\000\000PKP\000\005\004]\000\000(%h\000\002B.@\000\024\022t\000\001!\027 \000\n\011:\000\000PKP\000\005\004]\000\000(%h\000\002B.@\000\024\022t\000\001!\027 \000\n\011:\000\000PKP\000\005\004]\000\000(%h\000\002B.@\000\024\022t\000\001!\027 \000\n\011:\000\000PKP\000\005\004]\000\000(%h\000\002B.@\000\024\022t\000\001!\027 \000\n\011:\000\000PKP\000\005\004]\000\000(%h\000\002B.@\000\024\026\000\000\001!\027 \000\n\011:\000\000PKP\000\005\004]\000\000(GP\000\002B.@\000\024\022t\000\001!\027 \000\n\011:\000\000PKP\000\005\010}\000\000(Gh\000\002D>@\000\024#t\000\001\"\037 \000\n\021z\000\000Q\017P\000\005\010}\000\000(Gh\000\002D>@\000\024\022t\000\001!\027 \000\n\011:\000\000PKP\000\005\004]\000\000(%h\000\002B.@\000\024\022t\000\001!\027 \000\n\011:\000\000PL0\000\005\004]\000\000(%h\000\002B.@\000\024\022t\000\001!\027 \000\n\011:\000\000PKP\000\005\010w\000\000(%h\000\002B.@\000\024\026H\000\001!\027 \000\n\011:\000\000PKP\000\005\004]\000\000(%h\000\002B.@\000\024\022t\000\001!\027 \000\n\021h\000\000PKP\000\005\004]\000\000(FX\000\002B.@\000\024\022t\000\001!\027 \000\n\011:\000\000PKP\000\005\004]\000\000(%h\000\002D3@\000\024\023\020\000\001!\027 \000\n\011:\000\000PKP\000\005\010d\000\000(Eh\000\002B.@\000\024\022t\000\001\"\026@\000\n\011:\000\000Q\011P\000\005\005S\000\000(D(\000\002B.@\000\024\022t\000\001\"\020@\000\n\011:\000\000Q\0070\000\005\004]\000\000(%h\000\002D:\000\000\024\037d\000\001!i@\000\n\017r\000\000Pt`\000\005\007&\000\000(<x\000\002Cd\000\000\024\036 \000\001!r\000\000\n\017\020\000\000Py\000\000\005\007H\000\000(<@\000\002C^@\000\024\035t\000\001!i@\000\n\016L\000\000Pt`\000\005\007&\000\000(:0\000\002CS\000\000\024\035\030\000\001!m@\000\n\016l\000\000Pv`\000\005\0076\000\000(;0\000\002C[\000\000\024\035\030\000\001!i@\000\n\016L\000\000Pt`\000\005\007&\000\000(:0\000\002CS\000\000\024\035\030\000\001!i@\000\n\016L\000\000Pt`\000\005\007&\000\000(:0\000\002CS\000\000\024\035\030\000\001!i@\000\n\016L\000\000Pr0\000\005\007&\000\000(:0\000\002CS\000\000\024\035\030\000\001!i@\000\n\016L\000\000Pt`\000\005\007&\000\000(;0\000\002C[\000\000\024\035X\000\001!m@\000\n\016l\000\000Pv`\000\005\007&\000\000(:0\000\002CS\000\000\024\035\030\000\001!i@\000\n\016L\000\000Pt`\000\005\007&\000\000(:0\000\002CS\000\000\024\035\030\000\001!i@\000\n\016L\000\000Pt`\000\005\007&\000\000(:0\000\002CS\000\000\024\034L\000\002@\000\010\000\004\000\001@\000@\000\024\000\006\000\001`\000@\000\022\000\005\000\0010\0000\000\r\000\003@\000x\000 \000\000\020($\032\021\nF\000\000\014\026\023\rHe3\000\000\003\001Dd3\032\r&c9`r\000\000\000\000\000\000\000\000\000\000\000\000\020\010\004\002\001",0xc9f);
    private static final int[] _data4 = decodeData("\000\000\000\000\000\000\nuaj^4$4s\033;n`\000\n`\000\002]V\000\000\025m8\000\001.k@\000\nv`\000\000W6\000\000\005;2\000\000+[\020\000\002]Z\000\000\025mP\000\001.m@\000\nvl\000\000W7\000\000\005;8\000\000+[P\000\002]]\000\000\025mp\000\001.o\000\000\nv|\000\000W7`\000\005;@\000\000+\\\000\000\002]a\000\000\025n\010\000\001.q\000\000\nw\010\000\000W8`\000\005;F\000\000+\\@\000\002]d\000\000\025n(\000\001.r@\000\nw\030\000\000W9@\000\005;N\000\000+\\p\000\002]h\000\000\025n@\000\001.t@\000\nw$\000\000W:@\000\005;T\000\000+]0\000\002]k\000\000\025n`\000\001.v\000\000\nw4\000\000W; \000\005;\\\000\000+]`\000\002]o\000\000\025nx\000\001.x\000\000\nw@\000\000W< \000\005;b\000\000+^ \000\002]r\000\000\025o\030\000\001.y@\000\nwP\000\000W=\000\000\005;j\000\000+^P\000\002]v\000\000\025o0\000\001.{@\000\nw\\\000\000W>\000\000\005;p\000\000+_\020\000\002]y\000\000\025oP\000\001.}\000\000\nwl\000\000W>`\000\005;x\000\000+_@\000\002]}\000\000\025oh\000\001.\177\000\000\nwx\000\000W?`\000\005;~\000\000+`\000\000\002^\000\000\000\025p\010\000\001/\000@\000\nx\010\000\000W@@\000\005<\006\000\000+`0\000\002^\004\000\000\025p \000\001/\002@\000\nx\024\000\000WA@\000\005<\014\000\000+`p\000\002^\007\000\000\025p@\000\001/\004\000\000\nx$\000\000WB \000\005<\024\000\000+a \000\002^\013\000\000\025pX\000\001/\006\000\000\nx0\000\000WC \000\005<\032\000\000+a`\000\002^\016\000\000\025px\000\001/\007@\000\nx@\000\000WD\000\000\005<\"\000\000+b\020\000\002^\022\000\000\025q\020\000\001/\011@\000\nxL\000\000WE\000\000\005<(\000\000+bP\000\002^\025\000\000\025q0\000\001/\013\000\000\nx\\\000\000WE`\000\005<0\000\000+c\000\000\002^\031\000\000\025qH\000\001/\r\000\000\nxh\000\000WF`\000\005<6\000\000+c@\000\002^\034\000\000\025qh\000\001/\016@\000\nxx\000\000WG@\000\005<>\000\000+cp\000\002^ \000\000\025r\000\000\001/\020@\000\ny\004\000\000WH@\000\005<D\000\000+d0\000\002^#\000\000\025r \000\001/\022\000\000\ny\024\000\000WI \000\005<L\000\000+d`\000\002^'\000\000\025r8\000\001/\024\000\000\ny \000\000WJ \000\005<R\000\000+e \000\002^*\000\000\025rX\000\001/\025@\000\ny0\000\000WK\000\000\005<Z\000\000+eP\000\002^.\000\000\025rp\000\001/\027@\000\ny<\000\000WL\000\000\005<`\000\000+f\020\000\002^1\000\000\025s\020\000\001/\031\000\000\nyL\000\000WL`\000\005<h\000\000+f@\000\002^5\000\000\025s(\000\001/\033\000\000\nyX\000\000WM`\000\005<n\000\000+g\000\000\002^8\000\000\025sH\000\001/\034@\000\nyh\000\000WN@\000\005<v\000\000+g0\000\002^<\000\000\025s`\000\001/\036@\000\nyt\000\000WO@\000\005<|\000\000+gp\000\002^?\000\000\025t\000\000\001/ \000\000\nz\004\000\000WP \000\005=\004\000\000+h \000\002^C\000\000\025t\030\000\001/\"\000\000\nz\020\000\000WQ \000\005=\n\000\000+h`\000\002^F\000\000\025t8\000\001/#@\000\nz \000\000WR\000\000\005=\022\000\000+i\020\000\002^J\000\000\025tP\000\001/%@\000\nz,\000\000WS\000\000\005=\030\000\000+iP\000\002^M\000\000\025tp\000\001/'\000\000\nz<\000\000WS`\000\005= \000\000+j\000\000\002^Q\000\000\025u\010\000\001/)\000\000\nzH\000\000WT`\000\005=&\000\000+j@\000\002^T\004\nM\006I$@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 Th4J$\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\ndX\000\000T'\020\000\005\"9\000\000*\023H\000\002Q\034@\000\025\011d\000\001(N \000\nDr\000\000T'\020\000\005\"9\017w{}~\177?_ow{}~\177?_`\000\000\000\000\000\032?\177\177^8\000\000\001r`\000\000\000\002\000\000\000\000\000\000\000\0005\177\177\177<p\000\000\003e@\000\000\000\004\000\000\000\000\000\020\010\004\002\001",0x234);
    private static final int[] _data5 = decodeData("\000\000\000\000\000\000\nE \000\000T)0\000\005\"N\000\000*\024`.9@\000\006yXj\000\000\0001 \000\000\nP\010\000\000U\001\020\000\005(\r\000\000*\033@\000\002Uip\000\025y\024\000\001.(\000\000\nr@?\177\177\177|\000\002\000\000\010\037\000\000\000\000\000\000\000\003\177`\000\000\000\000\000\000\001\177%\007SXmt\033\004\177FE\n\0216\006\"f?iQ\0025\004}s{\037|\000\000\000\000\000\000\000\020\004@\000\000\000\000\000\000\010\001`\000\000\000\000\000\000\004\000P\000\000\000\000\000\000\001\177@\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000?x\000\000\000\000\000\000\000 \011\000\000\000\000\000\000\000\000\000M \001\177@\000\000\027~\000\000\000\000\000\000\000\003\177\000\000\000\000\000\000\000\001\177`\000\000\000\000\000\000\001\003p\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000_|\000\000\000\000\000\000\000\020;\177\177\177\177@\000\000\010\036\000\000\000\000\000\000\000\003~\177\177\177J(\006Y)\177@\000\000\r5~)T\177O\177\177rJ\001V*\000\002I\000\000\010\004\002\001",0x45);


    private final void trampoline() throws ExecutionException {
        while(state == RUNNING) {
            switch(pc>>>9) {
                case 0x80: run_10000(); break; 
                case 0x81: run_10200(); break; 
                case 0x82: run_10400(); break; 
                case 0x83: run_10600(); break; 
                case 0x84: run_10800(); break; 
                case 0x85: run_10a00(); break; 
                case 0x86: run_10c00(); break; 
                case 0x87: run_10e00(); break; 
                case 0x88: run_11000(); break; 
                case 0x89: run_11200(); break; 
                case 0x8a: run_11400(); break; 
                case 0x8b: run_11600(); break; 
                case 0x8c: run_11800(); break; 
                case 0x8d: run_11a00(); break; 
                case 0x8e: run_11c00(); break; 
                case 0x8f: run_11e00(); break; 
                case 0x90: run_12000(); break; 
                case 0x91: run_12200(); break; 
                case 0x92: run_12400(); break; 
                case 0x93: run_12600(); break; 
                case 0x94: run_12800(); break; 
                case 0x95: run_12a00(); break; 
                case 0x96: run_12c00(); break; 
                case 0x97: run_12e00(); break; 
                case 0x98: run_13000(); break; 
                case 0x99: run_13200(); break; 
                case 0x9a: run_13400(); break; 
                case 0x9b: run_13600(); break; 
                case 0x9c: run_13800(); break; 
                case 0x9d: run_13a00(); break; 
                case 0x9e: run_13c00(); break; 
                case 0x9f: run_13e00(); break; 
                case 0xa0: run_14000(); break; 
                case 0xa1: run_14200(); break; 
                case 0xa2: run_14400(); break; 
                case 0xa3: run_14600(); break; 
                case 0xa4: run_14800(); break; 
                case 0xa5: run_14a00(); break; 
                case 0xa6: run_14c00(); break; 
                case 0xa7: run_14e00(); break; 
                case 0xa8: run_15000(); break; 
                case 0xa9: run_15200(); break; 
                case 0xaa: run_15400(); break; 
                case 0xab: run_15600(); break; 
                case 0xac: run_15800(); break; 
                case 0xad: run_15a00(); break; 
                case 0xae: run_15c00(); break; 
                case 0xaf: run_15e00(); break; 
                case 0xb0: run_16000(); break; 
                case 0xb1: run_16200(); break; 
                case 0xb2: run_16400(); break; 
                case 0xb3: run_16600(); break; 
                case 0xb4: run_16800(); break; 
                case 0xb5: run_16a00(); break; 
                case 0xb6: run_16c00(); break; 
                case 0xb7: run_16e00(); break; 
                case 0xb8: run_17000(); break; 
                case 0xb9: run_17200(); break; 
                case 0xba: run_17400(); break; 
                case 0xbb: run_17600(); break; 
                case 0xbc: run_17800(); break; 
                case 0xbd: run_17a00(); break; 
                case 0xbe: run_17c00(); break; 
                case 0xbf: run_17e00(); break; 
                case 0xc0: run_18000(); break; 
                case 0xc1: run_18200(); break; 
                case 0xc2: run_18400(); break; 
                case 0xc3: run_18600(); break; 
                case 0xc4: run_18800(); break; 
                case 0xc5: run_18a00(); break; 
                case 0xc6: run_18c00(); break; 
                case 0xc7: run_18e00(); break; 
                case 0xc8: run_19000(); break; 
                case 0xc9: run_19200(); break; 
                case 0xca: run_19400(); break; 
                case 0xcb: run_19600(); break; 
                case 0xcc: run_19800(); break; 
                case 0xcd: run_19a00(); break; 
                case 0xce: run_19c00(); break; 
                case 0xcf: run_19e00(); break; 
                case 0xd0: run_1a000(); break; 
                case 0xd1: run_1a200(); break; 
                case 0xd2: run_1a400(); break; 
                case 0xd3: run_1a600(); break; 
                case 0xd4: run_1a800(); break; 
                case 0xd5: run_1aa00(); break; 
                case 0xd6: run_1ac00(); break; 
                case 0xd7: run_1ae00(); break; 
                case 0xd8: run_1b000(); break; 
                case 0xd9: run_1b200(); break; 
                case 0xda: run_1b400(); break; 
                case 0xdb: run_1b600(); break; 
                case 0xdc: run_1b800(); break; 
                case 0xdd: run_1ba00(); break; 
                case 0xde: run_1bc00(); break; 
                case 0xdf: run_1be00(); break; 
                case 0xe0: run_1c000(); break; 
                case 0xe1: run_1c200(); break; 
                case 0xe2: run_1c400(); break; 
                case 0xe3: run_1c600(); break; 
                case 0xe4: run_1c800(); break; 
                case 0xe5: run_1ca00(); break; 
                case 0xe6: run_1cc00(); break; 
                case 0xe7: run_1ce00(); break; 
                case 0xe8: run_1d000(); break; 
                case 0xe9: run_1d200(); break; 
                case 0xea: run_1d400(); break; 
                case 0xeb: run_1d600(); break; 
                case 0xec: run_1d800(); break; 
                case 0xed: run_1da00(); break; 
                case 0xee: run_1dc00(); break; 
                case 0xef: run_1de00(); break; 
                case 0xf0: run_1e000(); break; 
                case 0xf1: run_1e200(); break; 
                case 0xf2: run_1e400(); break; 
                case 0xf3: run_1e600(); break; 
                case 0xf4: run_1e800(); break; 
                case 0xf5: run_1ea00(); break; 
                case 0xf6: run_1ec00(); break; 
                case 0xf7: run_1ee00(); break; 
                case 0xf8: run_1f000(); break; 
                case 0xf9: run_1f200(); break; 
                case 0xfa: run_1f400(); break; 
                case 0xfb: run_1f600(); break; 
                case 0xfc: run_1f800(); break; 
                case 0xfd: run_1fa00(); break; 
                case 0xfe: run_1fc00(); break; 
                case 0xff: run_1fe00(); break; 
                case 0x100: run_20000(); break; 
                case 0x101: run_20200(); break; 
                case 0x102: run_20400(); break; 
                case 0x103: run_20600(); break; 
                case 0x104: run_20800(); break; 
                case 0x105: run_20a00(); break; 
                case 0x106: run_20c00(); break; 
                case 0x107: run_20e00(); break; 
                case 0x108: run_21000(); break; 
                case 0x109: run_21200(); break; 
                case 0x10a: run_21400(); break; 
                case 0x10b: run_21600(); break; 
                case 0x10c: run_21800(); break; 
                case 0x10d: run_21a00(); break; 
                case 0x10e: run_21c00(); break; 
                case 0x10f: run_21e00(); break; 
                case 0x110: run_22000(); break; 
                case 0x111: run_22200(); break; 
                case 0x112: run_22400(); break; 
                case 0x113: run_22600(); break; 
                case 0x114: run_22800(); break; 
                case 0x115: run_22a00(); break; 
                case 0x116: run_22c00(); break; 
                case 0x117: run_22e00(); break; 
                case 0x118: run_23000(); break; 
                case 0x119: run_23200(); break; 
                case 0x11a: run_23400(); break; 
                case 0x11b: run_23600(); break; 
                case 0x11c: run_23800(); break; 
                case 0x11d: run_23a00(); break; 
                case 0x11e: run_23c00(); break; 
                case 0x11f: run_23e00(); break; 
                case 0x120: run_24000(); break; 
                case 0x121: run_24200(); break; 
                case 0x122: run_24400(); break; 
                case 0x123: run_24600(); break; 
                case 0x124: run_24800(); break; 
                case 0x125: run_24a00(); break; 
                case 0x126: run_24c00(); break; 
                case 0x127: run_24e00(); break; 
                case 0x128: run_25000(); break; 
                case 0x129: run_25200(); break; 
                case 0x12a: run_25400(); break; 
                case 0x12b: run_25600(); break; 
                case 0x12c: run_25800(); break; 
                case 0x12d: run_25a00(); break; 
                case 0x12e: run_25c00(); break; 
                case 0x12f: run_25e00(); break; 
                case 0x130: run_26000(); break; 
                case 0x131: run_26200(); break; 
                case 0x132: run_26400(); break; 
                case 0x133: run_26600(); break; 
                case 0x134: run_26800(); break; 
                case 0x135: run_26a00(); break; 
                case 0x136: run_26c00(); break; 
                case 0x137: run_26e00(); break; 
                case 0x138: run_27000(); break; 
                case 0x139: run_27200(); break; 
                case 0x13a: run_27400(); break; 
                case 0x13b: run_27600(); break; 
                case 0x13c: run_27800(); break; 
                case 0x13d: run_27a00(); break; 
                case 0x13e: run_27c00(); break; 
                case 0x13f: run_27e00(); break; 
                case 0x140: run_28000(); break; 
                case 0x141: run_28200(); break; 
                case 0x142: run_28400(); break; 
                case 0x143: run_28600(); break; 
                case 0x144: run_28800(); break; 
                case 0x145: run_28a00(); break; 
                case 0x146: run_28c00(); break; 
                case 0x147: run_28e00(); break; 
                case 0x148: run_29000(); break; 
                case 0x149: run_29200(); break; 
                case 0x14a: run_29400(); break; 
                case 0x14b: run_29600(); break; 
                case 0x14c: run_29800(); break; 
                case 0x14d: run_29a00(); break; 
                case 0x14e: run_29c00(); break; 
                case 0x14f: run_29e00(); break; 
                case 0x150: run_2a000(); break; 
                case 0x151: run_2a200(); break; 
                case 0x152: run_2a400(); break; 
                case 0x153: run_2a600(); break; 
                case 0x154: run_2a800(); break; 
                case 0x155: run_2aa00(); break; 
                case 0x156: run_2ac00(); break; 
                case 0x157: run_2ae00(); break; 
                case 0x158: run_2b000(); break; 
                case 0x159: run_2b200(); break; 
                case 0x15a: run_2b400(); break; 
                case 0x15b: run_2b600(); break; 
                case 0x15c: run_2b800(); break; 
                case 0x15d: run_2ba00(); break; 
                case 0x15e: run_2bc00(); break; 
                case 0x15f: run_2be00(); break; 
                case 0x160: run_2c000(); break; 
                case 0x161: run_2c200(); break; 
                case 0x162: run_2c400(); break; 
                case 0x163: run_2c600(); break; 
                case 0x164: run_2c800(); break; 
                case 0x165: run_2ca00(); break; 
                case 0x166: run_2cc00(); break; 
                case 0x167: run_2ce00(); break; 
                case 0x168: run_2d000(); break; 
                case 0x169: run_2d200(); break; 
                case 0x16a: run_2d400(); break; 
                case 0x16b: run_2d600(); break; 
                case 0x16c: run_2d800(); break; 
                case 0x16d: run_2da00(); break; 
                case 0x16e: run_2dc00(); break; 
                case 0x16f: run_2de00(); break; 
                case 0x170: run_2e000(); break; 
                case 0x171: run_2e200(); break; 
                case 0x172: run_2e400(); break; 
                case 0x173: run_2e600(); break; 
                case 0x174: run_2e800(); break; 
                case 0x175: run_2ea00(); break; 
                case 0x176: run_2ec00(); break; 
                case 0x177: run_2ee00(); break; 
                case 0x178: run_2f000(); break; 
                case 0x179: run_2f200(); break; 
                case 0x17a: run_2f400(); break; 
                case 0x17b: run_2f600(); break; 
                case 0x17c: run_2f800(); break; 
                case 0x17d: run_2fa00(); break; 
                case 0x17e: run_2fc00(); break; 
                case 0x17f: run_2fe00(); break; 
                case 0x180: run_30000(); break; 
                case 0x181: run_30200(); break; 
                case 0x182: run_30400(); break; 
                case 0x183: run_30600(); break; 
                case 0x184: run_30800(); break; 
                case 0x185: run_30a00(); break; 
                case 0x186: run_30c00(); break; 
                case 0x187: run_30e00(); break; 
                case 0x188: run_31000(); break; 
                case 0x189: run_31200(); break; 
                case 0x18a: run_31400(); break; 
                case 0x18b: run_31600(); break; 
                case 0x18c: run_31800(); break; 
                case 0x18d: run_31a00(); break; 
                case 0x18e: run_31c00(); break; 
                case 0x18f: run_31e00(); break; 
                case 0x190: run_32000(); break; 
                case 0x191: run_32200(); break; 
                case 0x192: run_32400(); break; 
                case 0x193: run_32600(); break; 
                case 0x194: run_32800(); break; 
                case 0x195: run_32a00(); break; 
                case 0x196: run_32c00(); break; 
                case 0x197: run_32e00(); break; 
                case 0x198: run_33000(); break; 
                case 0x199: run_33200(); break; 
                case 0x19a: run_33400(); break; 
                case 0x19b: run_33600(); break; 
                case 0x19c: run_33800(); break; 
                case 0x19d: run_33a00(); break; 
                case 0x19e: run_33c00(); break; 
                case 0x19f: run_33e00(); break; 
                case 0x1a0: run_34000(); break; 
                case 0x1a1: run_34200(); break; 
                case 0x1a2: run_34400(); break; 
                case 0x1a3: run_34600(); break; 
                case 0x1a4: run_34800(); break; 
                case 0x1a5: run_34a00(); break; 
                case 0x1a6: run_34c00(); break; 
                case 0x1a7: run_34e00(); break; 
                case 0x1a8: run_35000(); break; 
                case 0x1a9: run_35200(); break; 
                case 0x1aa: run_35400(); break; 
                case 0x1ab: run_35600(); break; 
                case 0x1ac: run_35800(); break; 
                case 0x1ad: run_35a00(); break; 
                case 0x1ae: run_35c00(); break; 
                case 0x1af: run_35e00(); break; 
                case 0x1b0: run_36000(); break; 
                case 0x1b1: run_36200(); break; 
                case 0x1b2: run_36400(); break; 
                case 0x1b3: run_36600(); break; 
                case 0x1b4: run_36800(); break; 
                case 0x1b5: run_36a00(); break; 
                case 0x1b6: run_36c00(); break; 
                case 0x1b7: run_36e00(); break; 
                case 0x1b8: run_37000(); break; 
                case 0x1b9: run_37200(); break; 
                case 0x1ba: run_37400(); break; 
                case 0x1bb: run_37600(); break; 
                case 0x1bc: run_37800(); break; 
                case 0x1bd: run_37a00(); break; 
                case 0x1be: run_37c00(); break; 
                case 0x1bf: run_37e00(); break; 
                case 0x1c0: run_38000(); break; 
                case 0x1c1: run_38200(); break; 
                case 0x1c2: run_38400(); break; 
                case 0x1c3: run_38600(); break; 
                case 0x1c4: run_38800(); break; 
                case 0x1c5: run_38a00(); break; 
                case 0x1c6: run_38c00(); break; 
                case 0x1c7: run_38e00(); break; 
                case 0x1c8: run_39000(); break; 
                case 0x1c9: run_39200(); break; 
                case 0x1ca: run_39400(); break; 
                case 0x1cb: run_39600(); break; 
                case 0x1cc: run_39800(); break; 
                case 0x1cd: run_39a00(); break; 
                case 0x1ce: run_39c00(); break; 
                case 0x1cf: run_39e00(); break; 
                case 0x1d0: run_3a000(); break; 
                case 0x1d1: run_3a200(); break; 
                case 0x1d2: run_3a400(); break; 
                case 0x1d3: run_3a600(); break; 
                case 0x1d4: run_3a800(); break; 
                case 0x1d5: run_3aa00(); break; 
                case 0x1d6: run_3ac00(); break; 
                case 0x1d7: run_3ae00(); break; 
                case 0x1d8: run_3b000(); break; 
                case 0x1d9: run_3b200(); break; 
                case 0x1da: run_3b400(); break; 
                case 0x1db: run_3b600(); break; 
                case 0x1dc: run_3b800(); break; 
                case 0x1dd: run_3ba00(); break; 
                case 0x1de: run_3bc00(); break; 
                case 0x1df: run_3be00(); break; 
                case 0x1e0: run_3c000(); break; 
                case 0x1e1: run_3c200(); break; 
                case 0x1e2: run_3c400(); break; 
                case 0x1e3: run_3c600(); break; 
                case 0x1e4: run_3c800(); break; 
                case 0x1e5: run_3ca00(); break; 
                case 0x1e6: run_3cc00(); break; 
                case 0x1e7: run_3ce00(); break; 
                case 0x1e8: run_3d000(); break; 
                case 0x1e9: run_3d200(); break; 
                case 0x1ea: run_3d400(); break; 
                case 0x1eb: run_3d600(); break; 
                case 0x1ec: run_3d800(); break; 
                case 0x1ed: run_3da00(); break; 
                case 0x1ee: run_3dc00(); break; 
                case 0x1ef: run_3de00(); break; 
                case 0x1f0: run_3e000(); break; 
                case 0x1f1: run_3e200(); break; 
                case 0x1f2: run_3e400(); break; 
                case 0x1f3: run_3e600(); break; 
                case 0x1f4: run_3e800(); break; 
                case 0x1f5: run_3ea00(); break; 
                case 0x1f6: run_3ec00(); break; 
                case 0x1f7: run_3ee00(); break; 
                case 0x1f8: run_3f000(); break; 
                case 0x1f9: run_3f200(); break; 
                case 0x1fa: run_3f400(); break; 
                case 0x1fb: run_3f600(); break; 
                case 0x1fc: run_3f800(); break; 
                case 0x1fd: run_3fa00(); break; 
                case 0x1fe: run_3fc00(); break; 
                case 0x1ff: run_3fe00(); break; 
                case 0x200: run_40000(); break; 
                case 0x201: run_40200(); break; 
                case 0x202: run_40400(); break; 
                case 0x203: run_40600(); break; 
                case 0x204: run_40800(); break; 
                case 0x205: run_40a00(); break; 
                case 0x206: run_40c00(); break; 
                case 0x207: run_40e00(); break; 
                case 0x208: run_41000(); break; 
                case 0x209: run_41200(); break; 
                case 0x20a: run_41400(); break; 
                case 0x20b: run_41600(); break; 
                case 0x20c: run_41800(); break; 
                case 0x20d: run_41a00(); break; 
                case 0x20e: run_41c00(); break; 
                case 0x20f: run_41e00(); break; 
                case 0x210: run_42000(); break; 
                case 0x211: run_42200(); break; 
                case 0x212: run_42400(); break; 
                case 0x213: run_42600(); break; 
                case 0x214: run_42800(); break; 
                case 0x215: run_42a00(); break; 
                case 0x216: run_42c00(); break; 
                case 0x217: run_42e00(); break; 
                case 0x218: run_43000(); break; 
                case 0x219: run_43200(); break; 
                case 0x21a: run_43400(); break; 
                case 0x21b: run_43600(); break; 
                case 0x21c: run_43800(); break; 
                case 0x21d: run_43a00(); break; 
                case 0x21e: run_43c00(); break; 
                case 0x21f: run_43e00(); break; 
                case 0x220: run_44000(); break; 
                case 0x221: run_44200(); break; 
                case 0x222: run_44400(); break; 
                case 0x223: run_44600(); break; 
                case 0x224: run_44800(); break; 
                case 0x225: run_44a00(); break; 
                case 0x226: run_44c00(); break; 
                case 0x227: run_44e00(); break; 
                case 0x228: run_45000(); break; 
                case 0x229: run_45200(); break; 
                case 0x22a: run_45400(); break; 
                case 0x22b: run_45600(); break; 
                case 0x22c: run_45800(); break; 
                case 0x22d: run_45a00(); break; 
                case 0x22e: run_45c00(); break; 
                case 0x22f: run_45e00(); break; 
                case 0x230: run_46000(); break; 
                case 0x231: run_46200(); break; 
                case 0x232: run_46400(); break; 
                case 0x233: run_46600(); break; 
                case 0x234: run_46800(); break; 
                case 0x235: run_46a00(); break; 
                case 0x236: run_46c00(); break; 
                case 0x237: run_46e00(); break; 
                case 0x238: run_47000(); break; 
                case 0x239: run_47200(); break; 
                case 0x23a: run_47400(); break; 
                case 0x23b: run_47600(); break; 
                case 0x23c: run_47800(); break; 
                case 0x23d: run_47a00(); break; 
                case 0x23e: run_47c00(); break; 
                case 0x23f: run_47e00(); break; 
                case 0x240: run_48000(); break; 
                case 0x241: run_48200(); break; 
                case 0x242: run_48400(); break; 
                case 0x243: run_48600(); break; 
                case 0x244: run_48800(); break; 
                case 0x245: run_48a00(); break; 
                case 0x246: run_48c00(); break; 
                case 0x247: run_48e00(); break; 
                case 0x248: run_49000(); break; 
                case 0x249: run_49200(); break; 
                case 0x24a: run_49400(); break; 
                case 0x24b: run_49600(); break; 
                case 0x24c: run_49800(); break; 
                case 0x24d: run_49a00(); break; 
                case 0x24e: run_49c00(); break; 
                case 0x24f: run_49e00(); break; 
                case 0x250: run_4a000(); break; 
                case 0x251: run_4a200(); break; 
                case 0x252: run_4a400(); break; 
                case 0x253: run_4a600(); break; 
                case 0x254: run_4a800(); break; 
                case 0x255: run_4aa00(); break; 
                case 0x256: run_4ac00(); break; 
                case 0x257: run_4ae00(); break; 
                case 0x258: run_4b000(); break; 
                case 0x259: run_4b200(); break; 
                case 0x25a: run_4b400(); break; 
                case 0x25b: run_4b600(); break; 
                case 0x25c: run_4b800(); break; 
                case 0x25d: run_4ba00(); break; 
                case 0x25e: run_4bc00(); break; 
                case 0x25f: run_4be00(); break; 
                case 0x260: run_4c000(); break; 
                case 0x261: run_4c200(); break; 
                case 0x262: run_4c400(); break; 
                case 0x263: run_4c600(); break; 
                case 0x264: run_4c800(); break; 
                case 0x265: run_4ca00(); break; 
                case 0x266: run_4cc00(); break; 
                case 0x267: run_4ce00(); break; 
                case 0x268: run_4d000(); break; 
                case 0x269: run_4d200(); break; 
                case 0x26a: run_4d400(); break; 
                case 0x26b: run_4d600(); break; 
                case 0x26c: run_4d800(); break; 
                case 0x26d: run_4da00(); break; 
                case 0x26e: run_4dc00(); break; 
                case 0x26f: run_4de00(); break; 
                case 0x270: run_4e000(); break; 
                case 0x271: run_4e200(); break; 
                case 0x272: run_4e400(); break; 
                case 0x273: run_4e600(); break; 
                case 0x274: run_4e800(); break; 
                case 0x275: run_4ea00(); break; 
                case 0x276: run_4ec00(); break; 
                case 0x277: run_4ee00(); break; 
                case 0x278: run_4f000(); break; 
                case 0x279: run_4f200(); break; 
                case 0x27a: run_4f400(); break; 
                case 0x27b: run_4f600(); break; 
                case 0x27c: run_4f800(); break; 
                case 0x27d: run_4fa00(); break; 
                case 0x27e: run_4fc00(); break; 
                case 0x27f: run_4fe00(); break; 
                case 0x280: run_50000(); break; 
                case 0x281: run_50200(); break; 
                case 0x282: run_50400(); break; 
                case 0x283: run_50600(); break; 
                case 0x284: run_50800(); break; 
                case 0x285: run_50a00(); break; 
                case 0x286: run_50c00(); break; 
                case 0x287: run_50e00(); break; 
                case 0x288: run_51000(); break; 
                case 0x289: run_51200(); break; 
                case 0x28a: run_51400(); break; 
                case 0x28b: run_51600(); break; 
                case 0x28c: run_51800(); break; 
                case 0x28d: run_51a00(); break; 
                case 0x28e: run_51c00(); break; 
                case 0x28f: run_51e00(); break; 
                case 0x290: run_52000(); break; 
                case 0x291: run_52200(); break; 
                case 0x292: run_52400(); break; 
                case 0x293: run_52600(); break; 
                case 0x294: run_52800(); break; 
                case 0x295: run_52a00(); break; 
                case 0x296: run_52c00(); break; 
                case 0x297: run_52e00(); break; 
                case 0x298: run_53000(); break; 
                case 0x299: run_53200(); break; 
                case 0x29a: run_53400(); break; 
                case 0x29b: run_53600(); break; 
                case 0x29c: run_53800(); break; 
                case 0x29d: run_53a00(); break; 
                default: throw new ExecutionException("invalid address 0x" + Long.toString(this.pc&0xffffffffL,16) + ": r2: " + r2);
            }
        }
    }

    public co65() {
        super(4096,65536);
        initPages(_data1,0x53c00,false);
        initPages(_data2,0x53c08,false);
        initPages(_data3,0x54000,true);
        initPages(_data4,0x57280,false);
        initPages(_data5,0x57b50,false);
        clearPages(0x57c64,0x1c);
        clearPages(0x57cd4,0xd3c);
    }

    protected int entryPoint() { return 0x11000; }
    protected int heapStart() { return 0x5b1c4; }
    protected int gp() { return 0x5fb50; }
    public static void main(String[] args) throws Exception {
        co65 me = new co65();
        int status = me.run("org.badvision.co65",args);
        System.exit(status);
    }

    protected void _execute() throws ExecutionException { trampoline(); }

    protected void setCPUState(CPUState state) {
        r1=state.r[1];
        r2=state.r[2];
        r3=state.r[3];
        r4=state.r[4];
        r5=state.r[5];
        r6=state.r[6];
        r7=state.r[7];
        r8=state.r[8];
        r9=state.r[9];
        r10=state.r[10];
        r11=state.r[11];
        r12=state.r[12];
        r13=state.r[13];
        r14=state.r[14];
        r15=state.r[15];
        r16=state.r[16];
        r17=state.r[17];
        r18=state.r[18];
        r19=state.r[19];
        r20=state.r[20];
        r21=state.r[21];
        r22=state.r[22];
        r23=state.r[23];
        r24=state.r[24];
        r25=state.r[25];
        r26=state.r[26];
        r27=state.r[27];
        r28=state.r[28];
        r29=state.r[29];
        r30=state.r[30];
        r31=state.r[31];
        f0=state.f[0];
        f1=state.f[1];
        f2=state.f[2];
        f3=state.f[3];
        f4=state.f[4];
        f5=state.f[5];
        f6=state.f[6];
        f7=state.f[7];
        f8=state.f[8];
        f9=state.f[9];
        f10=state.f[10];
        f11=state.f[11];
        f12=state.f[12];
        f13=state.f[13];
        f14=state.f[14];
        f15=state.f[15];
        f16=state.f[16];
        f17=state.f[17];
        f18=state.f[18];
        f19=state.f[19];
        f20=state.f[20];
        f21=state.f[21];
        f22=state.f[22];
        f23=state.f[23];
        f24=state.f[24];
        f25=state.f[25];
        f26=state.f[26];
        f27=state.f[27];
        f28=state.f[28];
        f29=state.f[29];
        f30=state.f[30];
        f31=state.f[31];
        hi=state.hi; lo=state.lo; fcsr=state.fcsr;
        pc=state.pc;
    }
    protected void getCPUState(CPUState state) {
        state.r[1]=r1;
        state.r[2]=r2;
        state.r[3]=r3;
        state.r[4]=r4;
        state.r[5]=r5;
        state.r[6]=r6;
        state.r[7]=r7;
        state.r[8]=r8;
        state.r[9]=r9;
        state.r[10]=r10;
        state.r[11]=r11;
        state.r[12]=r12;
        state.r[13]=r13;
        state.r[14]=r14;
        state.r[15]=r15;
        state.r[16]=r16;
        state.r[17]=r17;
        state.r[18]=r18;
        state.r[19]=r19;
        state.r[20]=r20;
        state.r[21]=r21;
        state.r[22]=r22;
        state.r[23]=r23;
        state.r[24]=r24;
        state.r[25]=r25;
        state.r[26]=r26;
        state.r[27]=r27;
        state.r[28]=r28;
        state.r[29]=r29;
        state.r[30]=r30;
        state.r[31]=r31;
        state.f[0]=f0;
        state.f[1]=f1;
        state.f[2]=f2;
        state.f[3]=f3;
        state.f[4]=f4;
        state.f[5]=f5;
        state.f[6]=f6;
        state.f[7]=f7;
        state.f[8]=f8;
        state.f[9]=f9;
        state.f[10]=f10;
        state.f[11]=f11;
        state.f[12]=f12;
        state.f[13]=f13;
        state.f[14]=f14;
        state.f[15]=f15;
        state.f[16]=f16;
        state.f[17]=f17;
        state.f[18]=f18;
        state.f[19]=f19;
        state.f[20]=f20;
        state.f[21]=f21;
        state.f[22]=f22;
        state.f[23]=f23;
        state.f[24]=f24;
        state.f[25]=f25;
        state.f[26]=f26;
        state.f[27]=f27;
        state.f[28]=f28;
        state.f[29]=f29;
        state.f[30]=f30;
        state.f[31]=f31;
        state.hi=hi; state.lo=lo; state.fcsr=fcsr;
        state.pc=pc;
    }

    private static final java.util.Hashtable symbols = new java.util.Hashtable();
    static {
        symbols.put("stpcpy",new Integer(0x29000));
        symbols.put("xmalloc",new Integer(0x1cc00));
        symbols.put("setgrent",new Integer(0x3a400));
        symbols.put("chroot",new Integer(0x33400));
        symbols.put("strcpy",new Integer(0x29400));
        symbols.put("xfree",new Integer(0x1d000));
        symbols.put("waitpid",new Integer(0x31600));
        symbols.put("getgid",new Integer(0x2fec4));
        symbols.put("sysconf",new Integer(0x30c00));
        symbols.put("printf",new Integer(0x26800));
        symbols.put("vsprintf",new Integer(0x4be00));
        symbols.put("utime",new Integer(0x31000));
        symbols.put("getlogin",new Integer(0x3b600));
        symbols.put("recv",new Integer(0x36600));
        symbols.put("connect",new Integer(0x34a00));
        symbols.put("IsBDigit",new Integer(0x18200));
        symbols.put("GetVersionAsNumber",new Integer(0x1ca00));
        symbols.put("ungetc",new Integer(0x51e00));
        symbols.put("strerror",new Integer(0x29c00));
        symbols.put("geteuid",new Integer(0x2feb4));
        symbols.put("memmove",new Integer(0x26000));
        symbols.put("snprintf",new Integer(0x45800));
        symbols.put("IsDigit",new Integer(0x17c00));
        symbols.put("pathconf",new Integer(0x33000));
        symbols.put("GetO65OptionText",new Integer(0x16e00));
        symbols.put("FindExt",new Integer(0x1ba00));
        symbols.put("mknod",new Integer(0x33600));
        symbols.put("CollDeleteItem",new Integer(0x1ae00));
        symbols.put("getgrgid",new Integer(0x3a000));
        symbols.put("Print",new Integer(0x1c000));
        symbols.put("IsBlank",new Integer(0x17800));
        symbols.put("DoneCollection",new Integer(0x1a000));
        symbols.put("getenv",new Integer(0x40400));
        symbols.put("fchmod",new Integer(0x32800));
        symbols.put("IsUpper",new Integer(0x18000));
        symbols.put("getegid",new Integer(0x2fed4));
        symbols.put("setpriority",new Integer(0x34800));
        symbols.put("getpriority",new Integer(0x34600));
        symbols.put("ReadO65File",new Integer(0x16400));
        symbols.put("usleep",new Integer(0x33a00));
        symbols.put("IsQuote",new Integer(0x18800));
        symbols.put("getpagesize",new Integer(0x2f380));
        symbols.put("fchown",new Integer(0x32200));
        symbols.put("fgets",new Integer(0x20800));
        symbols.put("dirname",new Integer(0x3b800));
        symbols.put("memcpy",new Integer(0x2f7dc));
        symbols.put("Read24",new Integer(0x13200));
        symbols.put("readlink",new Integer(0x31e00));
        symbols.put("dup2",new Integer(0x31400));
        symbols.put("mbrtowc",new Integer(0x4d200));
        symbols.put("getpass",new Integer(0x3b200));
        symbols.put("getuid",new Integer(0x2fea4));
        symbols.put("malloc",new Integer(0x24e00));
        symbols.put("isatty",new Integer(0x40a00));
        symbols.put("iswspace",new Integer(0x4ce00));
        symbols.put("endpwent",new Integer(0x3b000));
        symbols.put("sleep",new Integer(0x2f2f0));
        symbols.put("vsnprintf",new Integer(0x4ba00));
        symbols.put("IsODigit",new Integer(0x18400));
        symbols.put("recvfrom",new Integer(0x36000));
        symbols.put("UnknownOption",new Integer(0x19000));
        symbols.put("strtoul",new Integer(0x46800));
        symbols.put("CollSort",new Integer(0x1b800));
        symbols.put("gethostbyaddr",new Integer(0x39a00));
        symbols.put("NewCollection",new Integer(0x1a200));
        symbols.put("rmdir",new Integer(0x30a00));
        symbols.put("InitCmdLine",new Integer(0x18e00));
        symbols.put("socket",new Integer(0x34c00));
        symbols.put("select",new Integer(0x36200));
        symbols.put("ReadData",new Integer(0x13600));
        symbols.put("readdir",new Integer(0x38e00));
        symbols.put("lchown",new Integer(0x32400));
        symbols.put("setgroups",new Integer(0x37600));
        symbols.put("FreeCollection",new Integer(0x1a400));
        symbols.put("fflush",new Integer(0x20400));
        symbols.put("ftruncate",new Integer(0x33800));
        symbols.put("realpath",new Integer(0x34000));
        symbols.put("chown",new Integer(0x32000));
        symbols.put("send",new Integer(0x36400));
        symbols.put("CollInsert",new Integer(0x1a800));
        symbols.put("chmod",new Integer(0x32600));
        symbols.put("alarm",new Integer(0x30264));
        symbols.put("strtol",new Integer(0x50000));
        symbols.put("pipe",new Integer(0x31200));
        symbols.put("Read16",new Integer(0x13000));
        symbols.put("uname",new Integer(0x3bc00));
        symbols.put("accept",new Integer(0x35200));
        symbols.put("CollGrow",new Integer(0x1a600));
        symbols.put("NeedArg",new Integer(0x19200));
        symbols.put("basename",new Integer(0x3ba00));
        symbols.put("strtod",new Integer(0x4f800));
        symbols.put("xdup",new Integer(0x1d400));
        symbols.put("Read32",new Integer(0x13400));
        symbols.put("sysctl",new Integer(0x34400));
        symbols.put("fstat",new Integer(0x49a00));
        symbols.put("fprintf",new Integer(0x22a00));
        symbols.put("setpwent",new Integer(0x3ae00));
        symbols.put("xstrdup",new Integer(0x1d200));
        symbols.put("bind",new Integer(0x35800));
        symbols.put("InvDef",new Integer(0x19600));
        symbols.put("inet_addr",new Integer(0x3ca00));
        symbols.put("mkfifo",new Integer(0x33c00));
        symbols.put("chdir",new Integer(0x30e00));
        symbols.put("initgroups",new Integer(0x3ce00));
        symbols.put("endgrent",new Integer(0x3a600));
        symbols.put("setsockopt",new Integer(0x35600));
        symbols.put("fseek",new Integer(0x24200));
        symbols.put("InitCollection",new Integer(0x19e00));
        symbols.put("GetVersionAsString",new Integer(0x1c800));
        symbols.put("memchr",new Integer(0x25c00));
        symbols.put("Read8",new Integer(0x12e00));
        symbols.put("umask",new Integer(0x2fe94));
        symbols.put("CollReplaceExpand",new Integer(0x1b000));
        symbols.put("lstat",new Integer(0x32a00));
        symbols.put("IsAlpha",new Integer(0x17200));
        symbols.put("setgid",new Integer(0x37200));
        symbols.put("signal",new Integer(0x45000));
        symbols.put("strncmp",new Integer(0x45e00));
        symbols.put("strncpy",new Integer(0x46000));
        symbols.put("sync",new Integer(0x38600));
        symbols.put("StrCaseCmp",new Integer(0x1c600));
        symbols.put("sendto",new Integer(0x35e00));
        symbols.put("IsAlNum",new Integer(0x17400));
        symbols.put("realloc",new Integer(0x26e00));
        symbols.put("memcmp",new Integer(0x25e00));
        symbols.put("listen",new Integer(0x35a00));
        symbols.put("Internal",new Integer(0x12c00));
        symbols.put("xrealloc",new Integer(0x1ce00));
        symbols.put("fork",new Integer(0x49800));
        symbols.put("sscanf",new Integer(0x45a00));
        symbols.put("CollDelete",new Integer(0x1ac00));
        symbols.put("getgrent",new Integer(0x3a200));
        symbols.put("CollTransfer",new Integer(0x1b600));
        symbols.put("CollIndex",new Integer(0x1aa00));
        symbols.put("sigaction",new Integer(0x38a00));
        symbols.put("ValidSegName",new Integer(0x1c200));
        symbols.put("fread",new Integer(0x23400));
        symbols.put("inet_aton",new Integer(0x3c600));
        symbols.put("IsSpace",new Integer(0x17a00));
        symbols.put("symlink",new Integer(0x31c00));
        symbols.put("fopen",new Integer(0x22600));
        symbols.put("memset",new Integer(0x2f7ec));
        symbols.put("main",new Integer(0x15600));
        symbols.put("GetModelName",new Integer(0x15a00));
        symbols.put("fclose",new Integer(0x1fc00));
        symbols.put("inet_ntoa",new Integer(0x39200));
        symbols.put("getppid",new Integer(0x2f9bc));
        symbols.put("opendir",new Integer(0x38c00));
        symbols.put("getgroups",new Integer(0x36800));
        symbols.put("getgrouplist",new Integer(0x3cc00));
        symbols.put("seteuid",new Integer(0x37000));
        symbols.put("putc",new Integer(0x26c00));
        symbols.put("herror",new Integer(0x39800));
        symbols.put("strcmp",new Integer(0x29200));
        symbols.put("shutdown",new Integer(0x35c00));
        symbols.put("ttyname",new Integer(0x38800));
        symbols.put("vfiprintf",new Integer(0x4b600));
        symbols.put("getpwuid",new Integer(0x3aa00));
        symbols.put("dup",new Integer(0x32e00));
        symbols.put("InvArg",new Integer(0x19400));
        symbols.put("getcwd",new Integer(0x31800));
        symbols.put("gethostbyname",new Integer(0x39c00));
        symbols.put("getpwnam",new Integer(0x3a800));
        symbols.put("Error",new Integer(0x12a00));
        symbols.put("CollMoveMultiple",new Integer(0x1b400));
        symbols.put("getservbyname",new Integer(0x39400));
        symbols.put("gethostname",new Integer(0x3c200));
        symbols.put("sprintf",new Integer(0x28400));
        symbols.put("strtof",new Integer(0x4fa00));
        symbols.put("atexit",new Integer(0x1f400));
        symbols.put("setlocale",new Integer(0x41800));
        symbols.put("getpeername",new Integer(0x36c00));
        symbols.put("nanf",new Integer(0x4da00));
        symbols.put("vfork",new Integer(0x33200));
        symbols.put("fsync",new Integer(0x37a00));
        symbols.put("fputc",new Integer(0x22e00));
        symbols.put("getsockopt",new Integer(0x35400));
        symbols.put("StrCopy",new Integer(0x1c400));
        symbols.put("hstrerror",new Integer(0x39600));
        symbols.put("Convert",new Integer(0x11c00));
        symbols.put("localeconv",new Integer(0x41a00));
        symbols.put("LongOption",new Integer(0x19a00));
        symbols.put("fwrite",new Integer(0x24a00));
        symbols.put("xvsprintf",new Integer(0x1f000));
        symbols.put("access",new Integer(0x30800));
        symbols.put("MakeFilename",new Integer(0x1be00));
        symbols.put("getdents",new Integer(0x32c00));
        symbols.put("exit",new Integer(0x1f800));
        symbols.put("klogctl",new Integer(0x33e00));
        symbols.put("GetO65OSName",new Integer(0x16c00));
        symbols.put("getgrnam",new Integer(0x39e00));
        symbols.put("GetArg",new Integer(0x19800));
        symbols.put("Warning",new Integer(0x12800));
        symbols.put("AbEnd",new Integer(0x1f200));
        symbols.put("getpwent",new Integer(0x3ac00));
        symbols.put("xsprintf",new Integer(0x1ee00));
        symbols.put("daemon",new Integer(0x3c400));
        symbols.put("strlen",new Integer(0x10ee4));
        symbols.put("open",new Integer(0x49c00));
        symbols.put("IsAscii",new Integer(0x17600));
        symbols.put("xvsnprintf",new Integer(0x1e000));
        symbols.put("IsXDigit",new Integer(0x18600));
        symbols.put("fputs",new Integer(0x3fa00));
        symbols.put("setsid",new Integer(0x37800));
        symbols.put("setegid",new Integer(0x37400));
        symbols.put("closedir",new Integer(0x39000));
        symbols.put("vasprintf",new Integer(0x3b400));
        symbols.put("xsnprintf",new Integer(0x1ec00));
        symbols.put("FindModel",new Integer(0x15c00));
        symbols.put("setuid",new Integer(0x36e00));
        symbols.put("mkdir",new Integer(0x30600));
        symbols.put("wcrtomb",new Integer(0x52200));
        symbols.put("close",new Integer(0x49600));
        symbols.put("_call_helper",new Integer(0x10f00));
        symbols.put("vfprintf",new Integer(0x2e800));
        symbols.put("CollMove",new Integer(0x1b200));
        symbols.put("IsLower",new Integer(0x17e00));
        symbols.put("fputwc",new Integer(0x4cc00));
        symbols.put("raise",new Integer(0x44e00));
        symbols.put("free",new Integer(0x25000));
        symbols.put("FindName",new Integer(0x1bc00));
        symbols.put("getsockname",new Integer(0x36a00));
    }
    public int lookupSymbol(String symbol) { Integer i = (Integer) symbols.get(symbol); return i==null ? -1 : i.intValue(); }

}
